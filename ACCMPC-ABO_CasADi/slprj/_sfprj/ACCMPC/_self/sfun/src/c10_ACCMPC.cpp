/* Include files */

#include "ACCMPC_sfun.h"
#include "c10_ACCMPC.h"
#include <math.h>
#include "mwmathutil.h"
#define _SF_MEX_LISTEN_FOR_CTRL_C(S)   sf_mex_listen_for_ctrl_c(S);
#ifdef utFree
#undef utFree
#endif

#ifdef utMalloc
#undef utMalloc
#endif

#ifdef __cplusplus

extern "C" void *utMalloc(size_t size);
extern "C" void utFree(void*);

#else

extern void *utMalloc(size_t size);
extern void utFree(void*);

#endif

/* Forward Declarations */

/* Type Definitions */

/* Named Constants */
const int32_T CALL_EVENT = -1;

/* Variable Declarations */

/* Variable Definitions */
static real_T _sfTime_;
static emlrtMCInfo c10_emlrtMCI = { 82,/* lineNo */
  5,                                   /* colNo */
  "power",                             /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\lib\\matlab\\ops\\power.m"/* pName */
};

static emlrtMCInfo c10_b_emlrtMCI = { 122,/* lineNo */
  5,                                   /* colNo */
  "indexShapeCheck",                   /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\indexShapeCheck.m"/* pName */
};

static emlrtMCInfo c10_c_emlrtMCI = { 13,/* lineNo */
  13,                                  /* colNo */
  "toLogicalCheck",                    /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\toLogicalCheck.m"/* pName */
};

static emlrtMCInfo c10_d_emlrtMCI = { 87,/* lineNo */
  33,                                  /* colNo */
  "eml_int_forloop_overflow_check",    /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\lib\\matlab\\eml\\eml_int_forloop_overflow_check.m"/* pName */
};

static emlrtMCInfo c10_e_emlrtMCI = { 296,/* lineNo */
  1,                                   /* colNo */
  "nullAssignment",                    /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\nullAssignment.m"/* pName */
};

static emlrtMCInfo c10_f_emlrtMCI = { 58,/* lineNo */
  23,                                  /* colNo */
  "assertValidSizeArg",                /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\assertValidSizeArg.m"/* pName */
};

static emlrtMCInfo c10_g_emlrtMCI = { 74,/* lineNo */
  13,                                  /* colNo */
  "reshapeSizeChecks",                 /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\reshapeSizeChecks.m"/* pName */
};

static emlrtMCInfo c10_h_emlrtMCI = { 79,/* lineNo */
  23,                                  /* colNo */
  "reshapeSizeChecks",                 /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\reshapeSizeChecks.m"/* pName */
};

static emlrtMCInfo c10_i_emlrtMCI = { 81,/* lineNo */
  23,                                  /* colNo */
  "reshapeSizeChecks",                 /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\reshapeSizeChecks.m"/* pName */
};

static emlrtMCInfo c10_j_emlrtMCI = { 133,/* lineNo */
  23,                                  /* colNo */
  "eml_mtimes_helper",                 /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\lib\\matlab\\ops\\eml_mtimes_helper.m"/* pName */
};

static emlrtMCInfo c10_k_emlrtMCI = { 138,/* lineNo */
  23,                                  /* colNo */
  "eml_mtimes_helper",                 /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\lib\\matlab\\ops\\eml_mtimes_helper.m"/* pName */
};

static emlrtMCInfo c10_m_emlrtMCI = { 288,/* lineNo */
  27,                                  /* colNo */
  "cat",                               /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\cat.m"/* pName */
};

static emlrtMCInfo c10_o_emlrtMCI = { 1,/* lineNo */
  1,                                   /* colNo */
  "quadprog",                          /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\eml\\quadprog.p"/* pName */
};

static emlrtMCInfo c10_p_emlrtMCI = { 1,/* lineNo */
  1,                                   /* colNo */
  "checkOptions",                      /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+validate\\checkOptions.p"/* pName */
};

static emlrtMCInfo c10_q_emlrtMCI = { 1,/* lineNo */
  1,                                   /* colNo */
  "checkQuadraticObjective",           /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+validate\\checkQuadraticObjective.p"/* pName */
};

static emlrtMCInfo c10_r_emlrtMCI = { 47,/* lineNo */
  19,                                  /* colNo */
  "allOrAny",                          /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\allOrAny.m"/* pName */
};

static emlrtMCInfo c10_s_emlrtMCI = { 1,/* lineNo */
  1,                                   /* colNo */
  "checkX0",                           /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\shared\\optimlib\\+optim\\+coder\\+validate\\checkX0.p"/* pName */
};

static emlrtMCInfo c10_t_emlrtMCI = { 1,/* lineNo */
  1,                                   /* colNo */
  "checkLinearInputs",                 /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+validate\\checkLinearInputs.p"/* pName */
};

static emlrtMCInfo c10_u_emlrtMCI = { 1,/* lineNo */
  1,                                   /* colNo */
  "checkBounds",                       /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\shared\\optimlib\\+optim\\+coder\\+validate\\checkBounds.p"/* pName */
};

static emlrtMCInfo c10_v_emlrtMCI = { 13,/* lineNo */
  37,                                  /* colNo */
  "validatesquare",                    /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+valattr\\validatesquare.m"/* pName */
};

static emlrtMCInfo c10_w_emlrtMCI = { 13,/* lineNo */
  37,                                  /* colNo */
  "validatenonempty",                  /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+valattr\\validatenonempty.m"/* pName */
};

static emlrtMCInfo c10_x_emlrtMCI = { 45,/* lineNo */
  13,                                  /* colNo */
  "infocheck",                         /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+lapack\\infocheck.m"/* pName */
};

static emlrtMCInfo c10_y_emlrtMCI = { 48,/* lineNo */
  13,                                  /* colNo */
  "infocheck",                         /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+lapack\\infocheck.m"/* pName */
};

static emlrtMCInfo c10_ab_emlrtMCI = { 13,/* lineNo */
  9,                                   /* colNo */
  "sqrt",                              /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\lib\\matlab\\elfun\\sqrt.m"/* pName */
};

static emlrtRSInfo c10_emlrtRSI = { 1, /* lineNo */
  "CreateQP_ABSimulink",               /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pathName */
};

static emlrtRSInfo c10_b_emlrtRSI = { 38,/* lineNo */
  "CreateQP_ABSimulink",               /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pathName */
};

static emlrtRSInfo c10_c_emlrtRSI = { 52,/* lineNo */
  "CreateQP_ABSimulink",               /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pathName */
};

static emlrtRSInfo c10_d_emlrtRSI = { 170,/* lineNo */
  "CreateQP_ABSimulink",               /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pathName */
};

static emlrtRSInfo c10_e_emlrtRSI = { 184,/* lineNo */
  "CreateQP_ABSimulink",               /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pathName */
};

static emlrtRSInfo c10_f_emlrtRSI = { 180,/* lineNo */
  "CreateQP_ABSimulink",               /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pathName */
};

static emlrtRSInfo c10_g_emlrtRSI = { 236,/* lineNo */
  "CreateQP_ABSimulink",               /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pathName */
};

static emlrtRSInfo c10_h_emlrtRSI = { 201,/* lineNo */
  "CreateQP_ABSimulink",               /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pathName */
};

static emlrtRSInfo c10_i_emlrtRSI = { 7,/* lineNo */
  "ref",                               /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\ref.m"/* pathName */
};

static emlrtRSInfo c10_j_emlrtRSI = { 760,/* lineNo */
  "CreateQP_ABSimulink",               /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pathName */
};

static emlrtRSInfo c10_k_emlrtRSI = { 44,/* lineNo */
  "mpower",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\lib\\matlab\\matfun\\mpower.m"/* pathName */
};

static emlrtRSInfo c10_m_emlrtRSI = { 71,/* lineNo */
  "power",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\lib\\matlab\\ops\\power.m"/* pathName */
};

static emlrtRSInfo c10_o_emlrtRSI = { 602,/* lineNo */
  "CreateQP_ABSimulink",               /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pathName */
};

static emlrtRSInfo c10_p_emlrtRSI = { 645,/* lineNo */
  "CreateQP_ABSimulink",               /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pathName */
};

static emlrtRSInfo c10_q_emlrtRSI = { 643,/* lineNo */
  "CreateQP_ABSimulink",               /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pathName */
};

static emlrtRSInfo c10_r_emlrtRSI = { 42,/* lineNo */
  "indexShapeCheck",                   /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\indexShapeCheck.m"/* pathName */
};

static emlrtRSInfo c10_s_emlrtRSI = { 16,/* lineNo */
  "all",                               /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\lib\\matlab\\ops\\all.m"/* pathName */
};

static emlrtRSInfo c10_t_emlrtRSI = { 139,/* lineNo */
  "allOrAny",                          /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\allOrAny.m"/* pathName */
};

static emlrtRSInfo c10_u_emlrtRSI = { 143,/* lineNo */
  "allOrAny",                          /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\allOrAny.m"/* pathName */
};

static emlrtRSInfo c10_v_emlrtRSI = { 20,/* lineNo */
  "eml_int_forloop_overflow_check",    /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\lib\\matlab\\eml\\eml_int_forloop_overflow_check.m"/* pathName */
};

static emlrtRSInfo c10_w_emlrtRSI = { 26,/* lineNo */
  "nullAssignment",                    /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\nullAssignment.m"/* pathName */
};

static emlrtRSInfo c10_x_emlrtRSI = { 284,/* lineNo */
  "nullAssignment",                    /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\nullAssignment.m"/* pathName */
};

static emlrtRSInfo c10_y_emlrtRSI = { 287,/* lineNo */
  "nullAssignment",                    /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\nullAssignment.m"/* pathName */
};

static emlrtRSInfo c10_ab_emlrtRSI = { 289,/* lineNo */
  "nullAssignment",                    /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\nullAssignment.m"/* pathName */
};

static emlrtRSInfo c10_bb_emlrtRSI = { 132,/* lineNo */
  "nullAssignment",                    /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\nullAssignment.m"/* pathName */
};

static emlrtRSInfo c10_cb_emlrtRSI = { 47,/* lineNo */
  "TransformToDenseFormulation",       /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pathName */
};

static emlrtRSInfo c10_db_emlrtRSI = { 49,/* lineNo */
  "TransformToDenseFormulation",       /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pathName */
};

static emlrtRSInfo c10_eb_emlrtRSI = { 51,/* lineNo */
  "TransformToDenseFormulation",       /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pathName */
};

static emlrtRSInfo c10_fb_emlrtRSI = { 55,/* lineNo */
  "TransformToDenseFormulation",       /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pathName */
};

static emlrtRSInfo c10_gb_emlrtRSI = { 57,/* lineNo */
  "TransformToDenseFormulation",       /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pathName */
};

static emlrtRSInfo c10_hb_emlrtRSI = { 59,/* lineNo */
  "TransformToDenseFormulation",       /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pathName */
};

static emlrtRSInfo c10_ib_emlrtRSI = { 63,/* lineNo */
  "TransformToDenseFormulation",       /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pathName */
};

static emlrtRSInfo c10_jb_emlrtRSI = { 65,/* lineNo */
  "TransformToDenseFormulation",       /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pathName */
};

static emlrtRSInfo c10_kb_emlrtRSI = { 67,/* lineNo */
  "TransformToDenseFormulation",       /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pathName */
};

static emlrtRSInfo c10_mb_emlrtRSI = { 79,/* lineNo */
  "TransformToDenseFormulation",       /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pathName */
};

static emlrtRSInfo c10_ob_emlrtRSI = { 87,/* lineNo */
  "TransformToDenseFormulation",       /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pathName */
};

static emlrtRSInfo c10_pb_emlrtRSI = { 88,/* lineNo */
  "TransformToDenseFormulation",       /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pathName */
};

static emlrtRSInfo c10_qb_emlrtRSI = { 89,/* lineNo */
  "TransformToDenseFormulation",       /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pathName */
};

static emlrtRSInfo c10_rb_emlrtRSI = { 90,/* lineNo */
  "TransformToDenseFormulation",       /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pathName */
};

static emlrtRSInfo c10_sb_emlrtRSI = { 91,/* lineNo */
  "TransformToDenseFormulation",       /* fcnName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pathName */
};

static emlrtRSInfo c10_tb_emlrtRSI = { 50,/* lineNo */
  "eye",                               /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\lib\\matlab\\elmat\\eye.m"/* pathName */
};

static emlrtRSInfo c10_ub_emlrtRSI = { 96,/* lineNo */
  "eye",                               /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\lib\\matlab\\elmat\\eye.m"/* pathName */
};

static emlrtRSInfo c10_vb_emlrtRSI = { 21,/* lineNo */
  "checkAndSaturateExpandSize",        /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\checkAndSaturateExpandSize.m"/* pathName */
};

static emlrtRSInfo c10_wb_emlrtRSI = { 38,/* lineNo */
  "squeeze",                           /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\lib\\matlab\\elmat\\squeeze.m"/* pathName */
};

static emlrtRSInfo c10_xb_emlrtRSI = { 51,/* lineNo */
  "reshapeSizeChecks",                 /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\reshapeSizeChecks.m"/* pathName */
};

static emlrtRSInfo c10_yb_emlrtRSI = { 119,/* lineNo */
  "reshapeSizeChecks",                 /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\reshapeSizeChecks.m"/* pathName */
};

static emlrtRSInfo c10_ac_emlrtRSI = { 69,/* lineNo */
  "eml_mtimes_helper",                 /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\lib\\matlab\\ops\\eml_mtimes_helper.m"/* pathName */
};

static emlrtRSInfo c10_bc_emlrtRSI = { 94,/* lineNo */
  "eml_mtimes_helper",                 /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\lib\\matlab\\ops\\eml_mtimes_helper.m"/* pathName */
};

static emlrtRSInfo c10_cc_emlrtRSI = { 142,/* lineNo */
  "mtimes",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\mtimes.m"/* pathName */
};

static emlrtRSInfo c10_dc_emlrtRSI = { 55,/* lineNo */
  "mtimes",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\mtimes.m"/* pathName */
};

static emlrtRSInfo c10_ec_emlrtRSI = { 237,/* lineNo */
  "mtimes",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\mtimes.m"/* pathName */
};

static emlrtRSInfo c10_fc_emlrtRSI = { 242,/* lineNo */
  "mtimes",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\mtimes.m"/* pathName */
};

static emlrtRSInfo c10_gc_emlrtRSI = { 245,/* lineNo */
  "mtimes",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\mtimes.m"/* pathName */
};

static emlrtRSInfo c10_hc_emlrtRSI = { 254,/* lineNo */
  "mtimes",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\mtimes.m"/* pathName */
};

static emlrtRSInfo c10_ic_emlrtRSI = { 178,/* lineNo */
  "mtimes",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\mtimes.m"/* pathName */
};

static emlrtRSInfo c10_jc_emlrtRSI = { 41,/* lineNo */
  "cat",                               /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\cat.m"/* pathName */
};

static emlrtRSInfo c10_kc_emlrtRSI = { 113,/* lineNo */
  "cat",                               /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\cat.m"/* pathName */
};

static emlrtRSInfo c10_mc_emlrtRSI = { 1,/* lineNo */
  "quadprog",                          /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\eml\\quadprog.p"/* pathName */
};

static emlrtRSInfo c10_oc_emlrtRSI = { 1,/* lineNo */
  "checkQuadraticObjective",           /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+validate\\checkQuadraticObjective.p"/* pathName */
};

static emlrtRSInfo c10_pc_emlrtRSI = { 13,/* lineNo */
  "all",                               /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\lib\\matlab\\ops\\all.m"/* pathName */
};

static emlrtRSInfo c10_qc_emlrtRSI = { 24,/* lineNo */
  "ixamax",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\ixamax.m"/* pathName */
};

static emlrtRSInfo c10_rc_emlrtRSI = { 1,/* lineNo */
  "checkX0",                           /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\shared\\optimlib\\+optim\\+coder\\+validate\\checkX0.p"/* pathName */
};

static emlrtRSInfo c10_sc_emlrtRSI = { 57,/* lineNo */
  "allOrAny",                          /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\allOrAny.m"/* pathName */
};

static emlrtRSInfo c10_tc_emlrtRSI = { 106,/* lineNo */
  "applyToMultipleDims",               /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\applyToMultipleDims.m"/* pathName */
};

static emlrtRSInfo c10_uc_emlrtRSI = { 63,/* lineNo */
  "function_handle",                   /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\function_handle.m"/* pathName */
};

static emlrtRSInfo c10_vc_emlrtRSI = { 56,/* lineNo */
  "allOrAny",                          /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\allOrAny.m"/* pathName */
};

static emlrtRSInfo c10_wc_emlrtRSI = { 1,/* lineNo */
  "checkLinearInputs",                 /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+validate\\checkLinearInputs.p"/* pathName */
};

static emlrtRSInfo c10_xc_emlrtRSI = { 1,/* lineNo */
  "checkBounds",                       /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\shared\\optimlib\\+optim\\+coder\\+validate\\checkBounds.p"/* pathName */
};

static emlrtRSInfo c10_yc_emlrtRSI = { 16,/* lineNo */
  "any",                               /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\lib\\matlab\\ops\\any.m"/* pathName */
};

static emlrtRSInfo c10_ad_emlrtRSI = { 44,/* lineNo */
  "xcopy",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xcopy.m"/* pathName */
};

static emlrtRSInfo c10_bd_emlrtRSI = { 69,/* lineNo */
  "xcopy",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xcopy.m"/* pathName */
};

static emlrtRSInfo c10_cd_emlrtRSI = { 55,/* lineNo */
  "xcopy",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xcopy.m"/* pathName */
};

static emlrtRSInfo c10_dd_emlrtRSI = { 1,/* lineNo */
  "compressBounds",                    /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+initialize\\compressBounds.p"/* pathName */
};

static emlrtRSInfo c10_ed_emlrtRSI = { 1,/* lineNo */
  "loadProblem",                       /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\loadProblem.p"/* pathName */
};

static emlrtRSInfo c10_fd_emlrtRSI = { 1,/* lineNo */
  "initActiveSet",                     /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\initActiveSet.p"/* pathName */
};

static emlrtRSInfo c10_gd_emlrtRSI = { 1,/* lineNo */
  "computePhaseOneRelativeTolerances", /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+stopping\\computePhaseOneRelativeTolerances.p"/* pathName */
};

static emlrtRSInfo c10_hd_emlrtRSI = { 1,/* lineNo */
  "updateRelativeTolerancesForPhaseTwo",/* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+stopping\\updateRelativeTolerancesForPhaseTwo."
  "p"                                  /* pathName */
};

static emlrtRSInfo c10_id_emlrtRSI = { 93,/* lineNo */
  "validateattributes",                /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\lib\\matlab\\lang\\validateattributes.m"/* pathName */
};

static emlrtRSInfo c10_jd_emlrtRSI = { 1,/* lineNo */
  "driver",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\driver.p"/* pathName */
};

static emlrtRSInfo c10_kd_emlrtRSI = { 1,/* lineNo */
  "snap_bounds",                       /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\snap_bounds.p"/* pathName */
};

static emlrtRSInfo c10_md_emlrtRSI = { 1,/* lineNo */
  "PresolveWorkingSet",                /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+initialize\\PresolveWorkingSet.p"/* pathName */
};

static emlrtRSInfo c10_od_emlrtRSI = { 1,/* lineNo */
  "RemoveDependentEq_",                /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+initialize\\RemoveDependentEq_.p"/* pathName */
};

static emlrtRSInfo c10_pd_emlrtRSI = { 1,/* lineNo */
  "ComputeNumDependentEq_",            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+initialize\\ComputeNumDependentEq_.p"/* pathName */
};

static emlrtRSInfo c10_qd_emlrtRSI = { 1,/* lineNo */
  "factorQRE",                         /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+QRManager\\factorQRE.p"/* pathName */
};

static emlrtRSInfo c10_rd_emlrtRSI = { 63,/* lineNo */
  "xgeqp3",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+lapack\\xgeqp3.m"/* pathName */
};

static emlrtRSInfo c10_sd_emlrtRSI = { 138,/* lineNo */
  "xgeqp3",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+lapack\\xgeqp3.m"/* pathName */
};

static emlrtRSInfo c10_td_emlrtRSI = { 158,/* lineNo */
  "xgeqp3",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+lapack\\xgeqp3.m"/* pathName */
};

static emlrtRSInfo c10_ud_emlrtRSI = { 141,/* lineNo */
  "xgeqp3",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+lapack\\xgeqp3.m"/* pathName */
};

static emlrtRSInfo c10_vd_emlrtRSI = { 143,/* lineNo */
  "xgeqp3",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+lapack\\xgeqp3.m"/* pathName */
};

static emlrtRSInfo c10_wd_emlrtRSI = { 148,/* lineNo */
  "xgeqp3",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+lapack\\xgeqp3.m"/* pathName */
};

static emlrtRSInfo c10_xd_emlrtRSI = { 151,/* lineNo */
  "xgeqp3",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+lapack\\xgeqp3.m"/* pathName */
};

static emlrtRSInfo c10_yd_emlrtRSI = { 154,/* lineNo */
  "xgeqp3",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+lapack\\xgeqp3.m"/* pathName */
};

static emlrtRSInfo c10_ae_emlrtRSI = { 98,/* lineNo */
  "xgeqp3",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+lapack\\xgeqp3.m"/* pathName */
};

static emlrtRSInfo c10_be_emlrtRSI = { 89,/* lineNo */
  "xzgeqp3",                           /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+reflapack\\xzgeqp3.m"/* pathName */
};

static emlrtRSInfo c10_ce_emlrtRSI = { 116,/* lineNo */
  "xzgeqp3",                           /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+reflapack\\xzgeqp3.m"/* pathName */
};

static emlrtRSInfo c10_de_emlrtRSI = { 119,/* lineNo */
  "xzgeqp3",                           /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+reflapack\\xzgeqp3.m"/* pathName */
};

static emlrtRSInfo c10_ee_emlrtRSI = { 80,/* lineNo */
  "xzgeqp3",                           /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+reflapack\\xzgeqp3.m"/* pathName */
};

static emlrtRSInfo c10_fe_emlrtRSI = { 30,/* lineNo */
  "xswap",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xswap.m"/* pathName */
};

static emlrtRSInfo c10_ge_emlrtRSI = { 20,/* lineNo */
  "xswap",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xswap.m"/* pathName */
};

static emlrtRSInfo c10_he_emlrtRSI = { 135,/* lineNo */
  "xzgeqp3",                           /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+reflapack\\xzgeqp3.m"/* pathName */
};

static emlrtRSInfo c10_ie_emlrtRSI = { 20,/* lineNo */
  "xzlarfg",                           /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+reflapack\\xzlarfg.m"/* pathName */
};

static emlrtRSInfo c10_je_emlrtRSI = { 81,/* lineNo */
  "xzlarfg",                           /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+reflapack\\xzlarfg.m"/* pathName */
};

static emlrtRSInfo c10_ke_emlrtRSI = { 41,/* lineNo */
  "xzlarfg",                           /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+reflapack\\xzlarfg.m"/* pathName */
};

static emlrtRSInfo c10_me_emlrtRSI = { 53,/* lineNo */
  "xzlarfg",                           /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+reflapack\\xzlarfg.m"/* pathName */
};

static emlrtRSInfo c10_oe_emlrtRSI = { 68,/* lineNo */
  "xzlarfg",                           /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+reflapack\\xzlarfg.m"/* pathName */
};

static emlrtRSInfo c10_pe_emlrtRSI = { 71,/* lineNo */
  "xzlarfg",                           /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+reflapack\\xzlarfg.m"/* pathName */
};

static emlrtRSInfo c10_qe_emlrtRSI = { 23,/* lineNo */
  "xnrm2",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xnrm2.m"/* pathName */
};

static emlrtRSInfo c10_re_emlrtRSI = { 38,/* lineNo */
  "xnrm2",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xnrm2.m"/* pathName */
};

static emlrtRSInfo c10_se_emlrtRSI = { 37,/* lineNo */
  "xscal",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xscal.m"/* pathName */
};

static emlrtRSInfo c10_te_emlrtRSI = { 31,/* lineNo */
  "xscal",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xscal.m"/* pathName */
};

static emlrtRSInfo c10_ue_emlrtRSI = { 18,/* lineNo */
  "xscal",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xscal.m"/* pathName */
};

static emlrtRSInfo c10_ve_emlrtRSI = { 49,/* lineNo */
  "xscal",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xscal.m"/* pathName */
};

static emlrtRSInfo c10_we_emlrtRSI = { 50,/* lineNo */
  "xzlarf",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+reflapack\\xzlarf.m"/* pathName */
};

static emlrtRSInfo c10_xe_emlrtRSI = { 68,/* lineNo */
  "xzlarf",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+reflapack\\xzlarf.m"/* pathName */
};

static emlrtRSInfo c10_ye_emlrtRSI = { 75,/* lineNo */
  "xzlarf",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+reflapack\\xzlarf.m"/* pathName */
};

static emlrtRSInfo c10_af_emlrtRSI = { 103,/* lineNo */
  "xzlarf",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+reflapack\\xzlarf.m"/* pathName */
};

static emlrtRSInfo c10_bf_emlrtRSI = { 76,/* lineNo */
  "xgemv",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xgemv.m"/* pathName */
};

static emlrtRSInfo c10_cf_emlrtRSI = { 64,/* lineNo */
  "xgemv",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xgemv.m"/* pathName */
};

static emlrtRSInfo c10_df_emlrtRSI = { 37,/* lineNo */
  "xgemv",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xgemv.m"/* pathName */
};

static emlrtRSInfo c10_ef_emlrtRSI = { 71,/* lineNo */
  "xgemv",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xgemv.m"/* pathName */
};

static emlrtRSInfo c10_ff_emlrtRSI = { 91,/* lineNo */
  "xgemv",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xgemv.m"/* pathName */
};

static emlrtRSInfo c10_gf_emlrtRSI = { 45,/* lineNo */
  "xgerc",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xgerc.m"/* pathName */
};

static emlrtRSInfo c10_hf_emlrtRSI = { 53,/* lineNo */
  "xger",                              /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xger.m"/* pathName */
};

static emlrtRSInfo c10_if_emlrtRSI = { 45,/* lineNo */
  "xger",                              /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xger.m"/* pathName */
};

static emlrtRSInfo c10_jf_emlrtRSI = { 15,/* lineNo */
  "xger",                              /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xger.m"/* pathName */
};

static emlrtRSInfo c10_kf_emlrtRSI = { 41,/* lineNo */
  "xgerx",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xgerx.m"/* pathName */
};

static emlrtRSInfo c10_mf_emlrtRSI = { 67,/* lineNo */
  "xger",                              /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xger.m"/* pathName */
};

static emlrtRSInfo c10_of_emlrtRSI = { 174,/* lineNo */
  "xzgeqp3",                           /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+reflapack\\xzgeqp3.m"/* pathName */
};

static emlrtRSInfo c10_pf_emlrtRSI = { 184,/* lineNo */
  "xzgeqp3",                           /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+reflapack\\xzgeqp3.m"/* pathName */
};

static emlrtRSInfo c10_qf_emlrtRSI = { 189,/* lineNo */
  "xzgeqp3",                           /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+reflapack\\xzgeqp3.m"/* pathName */
};

static emlrtRSInfo c10_rf_emlrtRSI = { 23,/* lineNo */
  "ixamax",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\ixamax.m"/* pathName */
};

static emlrtRSInfo c10_sf_emlrtRSI = { 1,/* lineNo */
  "computeSquareQ",                    /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+QRManager\\computeSquareQ.p"/* pathName */
};

static emlrtRSInfo c10_tf_emlrtRSI = { 1,/* lineNo */
  "computeQ_",                         /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+QRManager\\computeQ_.p"/* pathName */
};

static emlrtRSInfo c10_uf_emlrtRSI = { 60,/* lineNo */
  "xorgqr",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+lapack\\xorgqr.m"/* pathName */
};

static emlrtRSInfo c10_vf_emlrtRSI = { 14,/* lineNo */
  "xorgqr",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+lapack\\xorgqr.m"/* pathName */
};

static emlrtRSInfo c10_wf_emlrtRSI = { 16,/* lineNo */
  "xzungqr",                           /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+reflapack\\xzungqr.m"/* pathName */
};

static emlrtRSInfo c10_xf_emlrtRSI = { 34,/* lineNo */
  "xzungqr",                           /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+reflapack\\xzungqr.m"/* pathName */
};

static emlrtRSInfo c10_yf_emlrtRSI = { 41,/* lineNo */
  "xzungqr",                           /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+reflapack\\xzungqr.m"/* pathName */
};

static emlrtRSInfo c10_ag_emlrtRSI = { 46,/* lineNo */
  "xzungqr",                           /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+reflapack\\xzungqr.m"/* pathName */
};

static emlrtRSInfo c10_bg_emlrtRSI = { 15,/* lineNo */
  "xdot",                              /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xdot.m"/* pathName */
};

static emlrtRSInfo c10_cg_emlrtRSI = { 42,/* lineNo */
  "xdotx",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xdotx.m"/* pathName */
};

static emlrtRSInfo c10_dg_emlrtRSI = { 1,/* lineNo */
  "IndexOfDependentEq_",               /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+initialize\\IndexOfDependentEq_.p"/* pathName */
};

static emlrtRSInfo c10_eg_emlrtRSI = { 1,/* lineNo */
  "countsort",                         /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+utils\\countsort.p"/* pathName */
};

static emlrtRSInfo c10_fg_emlrtRSI = { 1,/* lineNo */
  "removeEqConstr",                    /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\removeEqConstr.p"/* pathName */
};

static emlrtRSInfo c10_gg_emlrtRSI = { 1,/* lineNo */
  "removeConstr",                      /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\removeConstr.p"/* pathName */
};

static emlrtRSInfo c10_hg_emlrtRSI = { 1,/* lineNo */
  "moveConstraint_",                   /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\moveConstraint_.p"/* pathName */
};

static emlrtRSInfo c10_ig_emlrtRSI = { 1,/* lineNo */
  "RemoveDependentIneq_",              /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+initialize\\RemoveDependentIneq_.p"/* pathName */
};

static emlrtRSInfo c10_jg_emlrtRSI = { 1,/* lineNo */
  "feasibleX0ForWorkingSet",           /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+initialize\\feasibleX0ForWorkingSet.p"/* pathName */
};

static emlrtRSInfo c10_kg_emlrtRSI = { 1,/* lineNo */
  "factorQR",                          /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+QRManager\\factorQR.p"/* pathName */
};

static emlrtRSInfo c10_mg_emlrtRSI = { 27,/* lineNo */
  "xgeqrf",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+lapack\\xgeqrf.m"/* pathName */
};

static emlrtRSInfo c10_og_emlrtRSI = { 91,/* lineNo */
  "xgeqrf",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+lapack\\xgeqrf.m"/* pathName */
};

static emlrtRSInfo c10_pg_emlrtRSI = { 93,/* lineNo */
  "xgeqrf",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+lapack\\xgeqrf.m"/* pathName */
};

static emlrtRSInfo c10_qg_emlrtRSI = { 94,/* lineNo */
  "xgeqrf",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+lapack\\xgeqrf.m"/* pathName */
};

static emlrtRSInfo c10_rg_emlrtRSI = { 99,/* lineNo */
  "xgeqrf",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+lapack\\xgeqrf.m"/* pathName */
};

static emlrtRSInfo c10_sg_emlrtRSI = { 102,/* lineNo */
  "xgeqrf",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+lapack\\xgeqrf.m"/* pathName */
};

static emlrtRSInfo c10_tg_emlrtRSI = { 75,/* lineNo */
  "xgemm",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xgemm.m"/* pathName */
};

static emlrtRSInfo c10_ug_emlrtRSI = { 64,/* lineNo */
  "xgemm",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xgemm.m"/* pathName */
};

static emlrtRSInfo c10_vg_emlrtRSI = { 102,/* lineNo */
  "xgemm",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xgemm.m"/* pathName */
};

static emlrtRSInfo c10_wg_emlrtRSI = { 92,/* lineNo */
  "xgemm",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xgemm.m"/* pathName */
};

static emlrtRSInfo c10_xg_emlrtRSI = { 67,/* lineNo */
  "xtrsm",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xtrsm.m"/* pathName */
};

static emlrtRSInfo c10_yg_emlrtRSI = { 81,/* lineNo */
  "xtrsm",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xtrsm.m"/* pathName */
};

static emlrtRSInfo c10_ah_emlrtRSI = { 1,/* lineNo */
  "computeTallQ",                      /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+QRManager\\computeTallQ.p"/* pathName */
};

static emlrtRSInfo c10_bh_emlrtRSI = { 85,/* lineNo */
  "xgemm",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xgemm.m"/* pathName */
};

static emlrtRSInfo c10_ch_emlrtRSI = { 53,/* lineNo */
  "xaxpy",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xaxpy.m"/* pathName */
};

static emlrtRSInfo c10_dh_emlrtRSI = { 65,/* lineNo */
  "xaxpy",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xaxpy.m"/* pathName */
};

static emlrtRSInfo c10_eh_emlrtRSI = { 1,/* lineNo */
  "maxConstraintViolation",            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\maxConstraintViolation.p"/* pathName */
};

static emlrtRSInfo c10_fh_emlrtRSI = { 1,/* lineNo */
  "maxConstraintViolation_AMats_regularized_",/* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\maxConstraintViolation_AMats_regul"
  "arized_.p"                          /* pathName */
};

static emlrtRSInfo c10_gh_emlrtRSI = { 41,/* lineNo */
  "xgemv",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xgemv.m"/* pathName */
};

static emlrtRSInfo c10_hh_emlrtRSI = { 1,/* lineNo */
  "maxConstraintViolation_AMats_nonregularized_",/* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\maxConstraintViolation_AMats_nonre"
  "gularized_.p"                       /* pathName */
};

static emlrtRSInfo c10_ih_emlrtRSI = { 1,/* lineNo */
  "removeAllIneqConstr",               /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\removeAllIneqConstr.p"/* pathName */
};

static emlrtRSInfo c10_jh_emlrtRSI = { 1,/* lineNo */
  "phaseone",                          /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\phaseone.p"/* pathName */
};

static emlrtRSInfo c10_kh_emlrtRSI = { 1,/* lineNo */
  "setProblemType",                    /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\setProblemType.p"/* pathName */
};

static emlrtRSInfo c10_mh_emlrtRSI = { 1,/* lineNo */
  "modifyOverheadPhaseOne_",           /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\modifyOverheadPhaseOne_.p"/* pathName */
};

static emlrtRSInfo c10_oh_emlrtRSI = { 1,/* lineNo */
  "modifyOverheadRegularized_",        /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\modifyOverheadRegularized_.p"/* pathName */
};

static emlrtRSInfo c10_ph_emlrtRSI = { 1,/* lineNo */
  "computeFval",                       /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+Objective\\computeFval.p"/* pathName */
};

static emlrtRSInfo c10_qh_emlrtRSI = { 1,/* lineNo */
  "linearForm_",                       /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+Objective\\linearForm_.p"/* pathName */
};

static emlrtRSInfo c10_sh_emlrtRSI = { 51,/* lineNo */
  "xgemv",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xgemv.m"/* pathName */
};

static emlrtRSInfo c10_th_emlrtRSI = { 32,/* lineNo */
  "xdotx",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xdotx.m"/* pathName */
};

static emlrtRSInfo c10_uh_emlrtRSI = { 1,/* lineNo */
  "linearFormReg_",                    /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+Objective\\linearFormReg_.p"/* pathName */
};

static emlrtRSInfo c10_vh_emlrtRSI = { 1,/* lineNo */
  "iterate",                           /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\iterate.p"/* pathName */
};

static emlrtRSInfo c10_wh_emlrtRSI = { 1,/* lineNo */
  "computeGrad_StoreHx",               /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+Objective\\computeGrad_StoreHx.p"/* pathName */
};

static emlrtRSInfo c10_xh_emlrtRSI = { 1,/* lineNo */
  "computeFval_ReuseHx",               /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+Objective\\computeFval_ReuseHx.p"/* pathName */
};

static emlrtRSInfo c10_yh_emlrtRSI = { 38,/* lineNo */
  "xcopy",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xcopy.m"/* pathName */
};

static emlrtRSInfo c10_ai_emlrtRSI = { 1,/* lineNo */
  "squareQ_appendCol",                 /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+QRManager\\squareQ_appendCol.p"/* pathName */
};

static emlrtRSInfo c10_bi_emlrtRSI = { 23,/* lineNo */
  "xrotg",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xrotg.m"/* pathName */
};

static emlrtRSInfo c10_ci_emlrtRSI = { 32,/* lineNo */
  "xrotg",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xrotg.m"/* pathName */
};

static emlrtRSInfo c10_di_emlrtRSI = { 32,/* lineNo */
  "xrotg",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xrotg.m"/* pathName */
};

static emlrtRSInfo c10_ei_emlrtRSI = { 24,/* lineNo */
  "xrot",                              /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xrot.m"/* pathName */
};

static emlrtRSInfo c10_fi_emlrtRSI = { 1,/* lineNo */
  "deleteColMoveEnd",                  /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+QRManager\\deleteColMoveEnd.p"/* pathName */
};

static emlrtRSInfo c10_gi_emlrtRSI = { 1,/* lineNo */
  "compute_deltax",                    /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\compute_deltax.p"/* pathName */
};

static emlrtRSInfo c10_hi_emlrtRSI = { 1,/* lineNo */
  "factor",                            /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+DynamicRegCholManager\\factor.p"/* pathName */
};

static emlrtRSInfo c10_ii_emlrtRSI = { 1,/* lineNo */
  "partialColLDL3_",                   /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+DynamicRegCholManager\\partialColLDL3_.p"/* pathName */
};

static emlrtRSInfo c10_ji_emlrtRSI = { 58,/* lineNo */
  "xgemv",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xgemv.m"/* pathName */
};

static emlrtRSInfo c10_ki_emlrtRSI = { 70,/* lineNo */
  "xgemm",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xgemm.m"/* pathName */
};

static emlrtRSInfo c10_mi_emlrtRSI = { 71,/* lineNo */
  "xgemm",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xgemm.m"/* pathName */
};

static emlrtRSInfo c10_oi_emlrtRSI = { 125,/* lineNo */
  "xgemm",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xgemm.m"/* pathName */
};

static emlrtRSInfo c10_pi_emlrtRSI = { 128,/* lineNo */
  "xgemm",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xgemm.m"/* pathName */
};

static emlrtRSInfo c10_qi_emlrtRSI = { 135,/* lineNo */
  "xgemm",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xgemm.m"/* pathName */
};

static emlrtRSInfo c10_ri_emlrtRSI = { 1,/* lineNo */
  "fullColLDL2_",                      /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+DynamicRegCholManager\\fullColLDL2_.p"/* pathName */
};

static emlrtRSInfo c10_si_emlrtRSI = { 54,/* lineNo */
  "xgerx",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xgerx.m"/* pathName */
};

static emlrtRSInfo c10_ti_emlrtRSI = { 1,/* lineNo */
  "solve",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+DynamicRegCholManager\\solve.p"/* pathName */
};

static emlrtRSInfo c10_ui_emlrtRSI = { 62,/* lineNo */
  "xtrsv",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xtrsv.m"/* pathName */
};

static emlrtRSInfo c10_vi_emlrtRSI = { 44,/* lineNo */
  "xtrsv",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xtrsv.m"/* pathName */
};

static emlrtRSInfo c10_wi_emlrtRSI = { 75,/* lineNo */
  "xtrsv",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xtrsv.m"/* pathName */
};

static emlrtRSInfo c10_xi_emlrtRSI = { 1,/* lineNo */
  "computeProjectedHessian",           /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\computeProjectedHessian.p"/* pathName */
};

static emlrtRSInfo c10_yi_emlrtRSI = { 65,/* lineNo */
  "xgemm",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xgemm.m"/* pathName */
};

static emlrtRSInfo c10_aj_emlrtRSI = { 104,/* lineNo */
  "xgemm",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xgemm.m"/* pathName */
};

static emlrtRSInfo c10_bj_emlrtRSI = { 106,/* lineNo */
  "xgemm",                             /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+refblas\\xgemm.m"/* pathName */
};

static emlrtRSInfo c10_cj_emlrtRSI = { 1,/* lineNo */
  "compute_lambda",                    /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\compute_lambda.p"/* pathName */
};

static emlrtRSInfo c10_dj_emlrtRSI = { 1,/* lineNo */
  "find_neg_lambda",                   /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\find_neg_lambda.p"/* pathName */
};

static emlrtRSInfo c10_ej_emlrtRSI = { 1,/* lineNo */
  "feasibleratiotest",                 /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\feasibleratiotest.p"/* pathName */
};

static emlrtRSInfo c10_fj_emlrtRSI = { 1,/* lineNo */
  "ratiotest",                         /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\ratiotest.p"/* pathName */
};

static emlrtRSInfo c10_gj_emlrtRSI = { 1,/* lineNo */
  "addAineqConstr",                    /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\addAineqConstr.p"/* pathName */
};

static emlrtRSInfo c10_hj_emlrtRSI = { 1,/* lineNo */
  "addLBConstr",                       /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\addLBConstr.p"/* pathName */
};

static emlrtRSInfo c10_ij_emlrtRSI = { 1,/* lineNo */
  "addBoundToActiveSetMatrix_",        /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\addBoundToActiveSetMatrix_.p"/* pathName */
};

static emlrtRSInfo c10_jj_emlrtRSI = { 1,/* lineNo */
  "addUBConstr",                       /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\addUBConstr.p"/* pathName */
};

static emlrtRSInfo c10_kj_emlrtRSI = { 1,/* lineNo */
  "checkUnboundedOrIllPosed",          /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+stopping\\checkUnboundedOrIllPosed.p"/* pathName */
};

static emlrtRSInfo c10_mj_emlrtRSI = { 1,/* lineNo */
  "checkStoppingAndUpdateFval",        /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+stopping\\checkStoppingAndUpdateFval.p"/* pathName */
};

static emlrtRSInfo c10_oj_emlrtRSI = { 1,/* lineNo */
  "computeFirstOrderOpt",              /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+parseoutput\\computeFirstOrderOpt.p"/* pathName */
};

static emlrtRSInfo c10_pj_emlrtRSI = { 1,/* lineNo */
  "computeGrad",                       /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+Objective\\computeGrad.p"/* pathName */
};

static emlrtRSInfo c10_qj_emlrtRSI = { 1,/* lineNo */
  "sortLambdaQP",                      /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+parseoutput\\sortLambdaQP.p"/* pathName */
};

static emlrtRSInfo c10_rj_emlrtRSI = { 1,/* lineNo */
  "dealLambdaIntoStruct",              /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+parseoutput\\dealLambdaIntoStruct.p"/* pathName */
};

static emlrtRSInfo c10_sj_emlrtRSI = { 33,/* lineNo */
  "indexShapeCheck",                   /* fcnName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\indexShapeCheck.m"/* pathName */
};

static emlrtRSInfo c10_tj_emlrtRSI = { 39,/* lineNo */
  "ACCMPC with CasADi",                /* fcnName */
  "#ACCMPC:892"                        /* pathName */
};

static emlrtRSInfo c10_uj_emlrtRSI = { 44,/* lineNo */
  "ACCMPC with CasADi",                /* fcnName */
  "#ACCMPC:892"                        /* pathName */
};

static emlrtRSInfo c10_vj_emlrtRSI = { 45,/* lineNo */
  "ACCMPC with CasADi",                /* fcnName */
  "#ACCMPC:892"                        /* pathName */
};

static emlrtRSInfo c10_wj_emlrtRSI = { 48,/* lineNo */
  "ACCMPC with CasADi",                /* fcnName */
  "#ACCMPC:892"                        /* pathName */
};

static emlrtRSInfo c10_xj_emlrtRSI = { 49,/* lineNo */
  "ACCMPC with CasADi",                /* fcnName */
  "#ACCMPC:892"                        /* pathName */
};

static emlrtRSInfo c10_yj_emlrtRSI = { 59,/* lineNo */
  "ACCMPC with CasADi",                /* fcnName */
  "#ACCMPC:892"                        /* pathName */
};

static emlrtRSInfo c10_ak_emlrtRSI = { 64,/* lineNo */
  "ACCMPC with CasADi",                /* fcnName */
  "#ACCMPC:892"                        /* pathName */
};

static emlrtRSInfo c10_bk_emlrtRSI = { 88,/* lineNo */
  "ACCMPC with CasADi",                /* fcnName */
  "#ACCMPC:892"                        /* pathName */
};

static emlrtRSInfo c10_ck_emlrtRSI = { 90,/* lineNo */
  "ACCMPC with CasADi",                /* fcnName */
  "#ACCMPC:892"                        /* pathName */
};

static emlrtRSInfo c10_dk_emlrtRSI = { 104,/* lineNo */
  "ACCMPC with CasADi",                /* fcnName */
  "#ACCMPC:892"                        /* pathName */
};

static emlrtRSInfo c10_ek_emlrtRSI = { 105,/* lineNo */
  "ACCMPC with CasADi",                /* fcnName */
  "#ACCMPC:892"                        /* pathName */
};

static emlrtRSInfo c10_fk_emlrtRSI = { 114,/* lineNo */
  "ACCMPC with CasADi",                /* fcnName */
  "#ACCMPC:892"                        /* pathName */
};

static emlrtRSInfo c10_gk_emlrtRSI = { 120,/* lineNo */
  "ACCMPC with CasADi",                /* fcnName */
  "#ACCMPC:892"                        /* pathName */
};

static emlrtRTEInfo c10_emlrtRTEI = { 39,/* lineNo */
  6,                                   /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_b_emlrtRTEI = { 39,/* lineNo */
  8,                                   /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_c_emlrtRTEI = { 39,/* lineNo */
  10,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_d_emlrtRTEI = { 39,/* lineNo */
  12,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_e_emlrtRTEI = { 39,/* lineNo */
  17,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_f_emlrtRTEI = { 39,/* lineNo */
  22,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_g_emlrtRTEI = { 39,/* lineNo */
  27,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_h_emlrtRTEI = { 44,/* lineNo */
  22,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_i_emlrtRTEI = { 44,/* lineNo */
  21,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_j_emlrtRTEI = { 45,/* lineNo */
  5,                                   /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_k_emlrtRTEI = { 48,/* lineNo */
  12,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_m_emlrtRTEI = { 48,/* lineNo */
  5,                                   /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_o_emlrtRTEI = { 49,/* lineNo */
  12,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_p_emlrtRTEI = { 49,/* lineNo */
  5,                                   /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_q_emlrtRTEI = { 54,/* lineNo */
  9,                                   /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_r_emlrtRTEI = { 55,/* lineNo */
  9,                                   /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_s_emlrtRTEI = { 56,/* lineNo */
  9,                                   /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_t_emlrtRTEI = { 61,/* lineNo */
  17,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_u_emlrtRTEI = { 64,/* lineNo */
  75,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_v_emlrtRTEI = { 64,/* lineNo */
  77,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_w_emlrtRTEI = { 64,/* lineNo */
  79,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_x_emlrtRTEI = { 64,/* lineNo */
  81,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_y_emlrtRTEI = { 64,/* lineNo */
  86,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_ab_emlrtRTEI = { 64,/* lineNo */
  10,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_bb_emlrtRTEI = { 64,/* lineNo */
  12,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_cb_emlrtRTEI = { 64,/* lineNo */
  14,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_db_emlrtRTEI = { 64,/* lineNo */
  16,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_eb_emlrtRTEI = { 64,/* lineNo */
  21,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_fb_emlrtRTEI = { 88,/* lineNo */
  56,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_gb_emlrtRTEI = { 125,/* lineNo */
  9,                                   /* colNo */
  "cat",                               /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\cat.m"/* pName */
};

static emlrtRTEInfo c10_hb_emlrtRTEI = { 128,/* lineNo */
  30,                                  /* colNo */
  "cat",                               /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\cat.m"/* pName */
};

static emlrtRTEInfo c10_ib_emlrtRTEI = { 41,/* lineNo */
  5,                                   /* colNo */
  "cat",                               /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\cat.m"/* pName */
};

static emlrtRTEInfo c10_jb_emlrtRTEI = { 88,/* lineNo */
  60,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_kb_emlrtRTEI = { 88,/* lineNo */
  83,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_mb_emlrtRTEI = { 88,/* lineNo */
  43,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_ob_emlrtRTEI = { 88,/* lineNo */
  45,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_pb_emlrtRTEI = { 88,/* lineNo */
  73,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_qb_emlrtRTEI = { 88,/* lineNo */
  78,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_rb_emlrtRTEI = { 90,/* lineNo */
  5,                                   /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_sb_emlrtRTEI = { 104,/* lineNo */
  5,                                   /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_tb_emlrtRTEI = { 105,/* lineNo */
  5,                                   /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_ub_emlrtRTEI = { 62,/* lineNo */
  1,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_vb_emlrtRTEI = { 63,/* lineNo */
  1,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_wb_emlrtRTEI = { 64,/* lineNo */
  1,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_xb_emlrtRTEI = { 65,/* lineNo */
  1,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_yb_emlrtRTEI = { 66,/* lineNo */
  1,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_ac_emlrtRTEI = { 81,/* lineNo */
  1,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_bc_emlrtRTEI = { 82,/* lineNo */
  1,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_cc_emlrtRTEI = { 112,/* lineNo */
  21,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_dc_emlrtRTEI = { 112,/* lineNo */
  9,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_ec_emlrtRTEI = { 113,/* lineNo */
  9,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_fc_emlrtRTEI = { 108,/* lineNo */
  21,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_gc_emlrtRTEI = { 108,/* lineNo */
  9,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_hc_emlrtRTEI = { 109,/* lineNo */
  9,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_ic_emlrtRTEI = { 87,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_jc_emlrtRTEI = { 88,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_kc_emlrtRTEI = { 89,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_mc_emlrtRTEI = { 90,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_oc_emlrtRTEI = { 91,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_pc_emlrtRTEI = { 92,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_qc_emlrtRTEI = { 93,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_rc_emlrtRTEI = { 94,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_sc_emlrtRTEI = { 95,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_tc_emlrtRTEI = { 96,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_uc_emlrtRTEI = { 97,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_vc_emlrtRTEI = { 98,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_wc_emlrtRTEI = { 99,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_xc_emlrtRTEI = { 100,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_yc_emlrtRTEI = { 101,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_ad_emlrtRTEI = { 102,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m"/* pName */
};

static emlrtRTEInfo c10_bd_emlrtRTEI = { 16,/* lineNo */
  5,                                   /* colNo */
  "all",                               /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\lib\\matlab\\ops\\all.m"/* pName */
};

static emlrtRTEInfo c10_cd_emlrtRTEI = { 1,/* lineNo */
  14,                                  /* colNo */
  "nullAssignment",                    /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\nullAssignment.m"/* pName */
};

static emlrtRTEInfo c10_dd_emlrtRTEI = { 30,/* lineNo */
  5,                                   /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_ed_emlrtRTEI = { 31,/* lineNo */
  5,                                   /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_fd_emlrtRTEI = { 72,/* lineNo */
  27,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_gd_emlrtRTEI = { 73,/* lineNo */
  15,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_hd_emlrtRTEI = { 47,/* lineNo */
  17,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_id_emlrtRTEI = { 49,/* lineNo */
  26,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_jd_emlrtRTEI = { 49,/* lineNo */
  39,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_kd_emlrtRTEI = { 1,/* lineNo */
  36,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_md_emlrtRTEI = { 49,/* lineNo */
  21,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_od_emlrtRTEI = { 51,/* lineNo */
  21,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_pd_emlrtRTEI = { 51,/* lineNo */
  31,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_qd_emlrtRTEI = { 51,/* lineNo */
  56,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_rd_emlrtRTEI = { 51,/* lineNo */
  67,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_sd_emlrtRTEI = { 51,/* lineNo */
  59,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_td_emlrtRTEI = { 55,/* lineNo */
  13,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_ud_emlrtRTEI = { 57,/* lineNo */
  22,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_vd_emlrtRTEI = { 57,/* lineNo */
  35,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_wd_emlrtRTEI = { 57,/* lineNo */
  17,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_xd_emlrtRTEI = { 59,/* lineNo */
  28,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_yd_emlrtRTEI = { 59,/* lineNo */
  15,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_ae_emlrtRTEI = { 63,/* lineNo */
  17,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_be_emlrtRTEI = { 65,/* lineNo */
  26,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_ce_emlrtRTEI = { 65,/* lineNo */
  39,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_de_emlrtRTEI = { 65,/* lineNo */
  21,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_ee_emlrtRTEI = { 67,/* lineNo */
  50,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_fe_emlrtRTEI = { 67,/* lineNo */
  32,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_ge_emlrtRTEI = { 67,/* lineNo */
  19,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_he_emlrtRTEI = { 79,/* lineNo */
  17,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_ie_emlrtRTEI = { 79,/* lineNo */
  27,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_je_emlrtRTEI = { 79,/* lineNo */
  48,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_ke_emlrtRTEI = { 80,/* lineNo */
  28,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_me_emlrtRTEI = { 80,/* lineNo */
  15,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_oe_emlrtRTEI = { 87,/* lineNo */
  12,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_pe_emlrtRTEI = { 88,/* lineNo */
  22,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_qe_emlrtRTEI = { 88,/* lineNo */
  18,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_re_emlrtRTEI = { 89,/* lineNo */
  12,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_se_emlrtRTEI = { 89,/* lineNo */
  5,                                   /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_te_emlrtRTEI = { 90,/* lineNo */
  5,                                   /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_ue_emlrtRTEI = { 91,/* lineNo */
  5,                                   /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_ve_emlrtRTEI = { 94,/* lineNo */
  5,                                   /* colNo */
  "eye",                               /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\lib\\matlab\\elmat\\eye.m"/* pName */
};

static emlrtRTEInfo c10_we_emlrtRTEI = { 38,/* lineNo */
  1,                                   /* colNo */
  "squeeze",                           /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\lib\\matlab\\elmat\\squeeze.m"/* pName */
};

static emlrtRTEInfo c10_xe_emlrtRTEI = { 218,/* lineNo */
  20,                                  /* colNo */
  "mtimes",                            /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\mtimes.m"/* pName */
};

static emlrtRTEInfo c10_ye_emlrtRTEI = { 140,/* lineNo */
  5,                                   /* colNo */
  "mtimes",                            /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\mtimes.m"/* pName */
};

static emlrtRTEInfo c10_af_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "quadprog",                          /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\eml\\quadprog.p"/* pName */
};

static emlrtRTEInfo c10_bf_emlrtRTEI = { 44,/* lineNo */
  33,                                  /* colNo */
  "xcopy",                             /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xcopy.m"/* pName */
};

static emlrtRTEInfo c10_cf_emlrtRTEI = { 58,/* lineNo */
  9,                                   /* colNo */
  "xcopy",                             /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xcopy.m"/* pName */
};

static emlrtRTEInfo c10_df_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "factoryConstruct",                  /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+Objective\\factoryConstruct.p"/* pName */
};

static emlrtRTEInfo c10_ef_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "factoryConstruct",                  /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+QRManager\\factoryConstruct.p"/* pName */
};

static emlrtRTEInfo c10_ff_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "factoryConstruct",                  /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+DynamicRegCholManager\\factoryConstruct.p"/* pName */
};

static emlrtRTEInfo c10_gf_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "checkQuadraticObjective",           /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+validate\\checkQuadraticObjective.p"/* pName */
};

static emlrtRTEInfo c10_hf_emlrtRTEI = { 16,/* lineNo */
  9,                                   /* colNo */
  "isinf",                             /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\lib\\matlab\\elmat\\isinf.m"/* pName */
};

static emlrtRTEInfo c10_if_emlrtRTEI = { 16,/* lineNo */
  9,                                   /* colNo */
  "isnan",                             /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\lib\\matlab\\elmat\\isnan.m"/* pName */
};

static emlrtRTEInfo c10_jf_emlrtRTEI = { 106,/* lineNo */
  30,                                  /* colNo */
  "applyToMultipleDims",               /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\applyToMultipleDims.m"/* pName */
};

static emlrtRTEInfo c10_kf_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "checkLinearInputs",                 /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+validate\\checkLinearInputs.p"/* pName */
};

static emlrtRTEInfo c10_mf_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "checkBounds",                       /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\shared\\optimlib\\+optim\\+coder\\+validate\\checkBounds.p"/* pName */
};

static emlrtRTEInfo c10_of_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "factoryConstruct",                  /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\factoryConstruct.p"/* pName */
};

static emlrtRTEInfo c10_pf_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "compressBounds",                    /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+initialize\\compressBounds.p"/* pName */
};

static emlrtRTEInfo c10_qf_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "loadProblem",                       /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\loadProblem.p"/* pName */
};

static emlrtRTEInfo c10_rf_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "updateRelativeTolerancesForPhaseTwo",/* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+stopping\\updateRelativeTolerancesForPhaseTwo."
  "p"                                  /* pName */
};

static emlrtRTEInfo c10_sf_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "driver",                            /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\driver.p"/* pName */
};

static emlrtRTEInfo c10_tf_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "countsort",                         /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+utils\\countsort.p"/* pName */
};

static emlrtRTEInfo c10_uf_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "feasibleX0ForWorkingSet",           /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+initialize\\feasibleX0ForWorkingSet.p"/* pName */
};

static emlrtRTEInfo c10_vf_emlrtRTEI = { 1,/* lineNo */
  20,                                  /* colNo */
  "xgeqrf",                            /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+lapack\\xgeqrf.m"/* pName */
};

static emlrtRTEInfo c10_wf_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "factorQR",                          /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+QRManager\\factorQR.p"/* pName */
};

static emlrtRTEInfo c10_xf_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "maxConstraintViolation",            /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\maxConstraintViolation.p"/* pName */
};

static emlrtRTEInfo c10_yf_emlrtRTEI = { 1,/* lineNo */
  14,                                  /* colNo */
  "xgemv",                             /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xgemv.m"/* pName */
};

static emlrtRTEInfo c10_ag_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "phaseone",                          /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\phaseone.p"/* pName */
};

static emlrtRTEInfo c10_bg_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "computeFval",                       /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+Objective\\computeFval.p"/* pName */
};

static emlrtRTEInfo c10_cg_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "linearForm_",                       /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+Objective\\linearForm_.p"/* pName */
};

static emlrtRTEInfo c10_dg_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "iterate",                           /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\iterate.p"/* pName */
};

static emlrtRTEInfo c10_eg_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "computeGrad_StoreHx",               /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+Objective\\computeGrad_StoreHx.p"/* pName */
};

static emlrtRTEInfo c10_fg_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "computeFval_ReuseHx",               /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+Objective\\computeFval_ReuseHx.p"/* pName */
};

static emlrtRTEInfo c10_gg_emlrtRTEI = { 1,/* lineNo */
  14,                                  /* colNo */
  "xcopy",                             /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xcopy.m"/* pName */
};

static emlrtRTEInfo c10_hg_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "squareQ_appendCol",                 /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+QRManager\\squareQ_appendCol.p"/* pName */
};

static emlrtRTEInfo c10_ig_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "compute_deltax",                    /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\compute_deltax.p"/* pName */
};

static emlrtRTEInfo c10_jg_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "factor",                            /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+DynamicRegCholManager\\factor.p"/* pName */
};

static emlrtRTEInfo c10_kg_emlrtRTEI = { 1,/* lineNo */
  14,                                  /* colNo */
  "xger",                              /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xger.m"/* pName */
};

static emlrtRTEInfo c10_mg_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "compute_lambda",                    /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\compute_lambda.p"/* pName */
};

static emlrtRTEInfo c10_og_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "feasibleratiotest",                 /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\feasibleratiotest.p"/* pName */
};

static emlrtRTEInfo c10_pg_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "ratiotest",                         /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\ratiotest.p"/* pName */
};

static emlrtRTEInfo c10_qg_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "checkStoppingAndUpdateFval",        /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+stopping\\checkStoppingAndUpdateFval.p"/* pName */
};

static emlrtRTEInfo c10_rg_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "computeFirstOrderOpt",              /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+parseoutput\\computeFirstOrderOpt.p"/* pName */
};

static emlrtRTEInfo c10_sg_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "computeGrad",                       /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+Objective\\computeGrad.p"/* pName */
};

static emlrtRTEInfo c10_tg_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "sortLambdaQP",                      /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+parseoutput\\sortLambdaQP.p"/* pName */
};

static emlrtRTEInfo c10_ug_emlrtRTEI = { 26,/* lineNo */
  13,                                  /* colNo */
  "nullAssignment",                    /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\nullAssignment.m"/* pName */
};

static emlrtRTEInfo c10_vg_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "RemoveDependentIneq_",              /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+initialize\\RemoveDependentIneq_.p"/* pName */
};

static emlrtRTEInfo c10_wg_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "PresolveWorkingSet",                /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+initialize\\PresolveWorkingSet.p"/* pName */
};

static emlrtRTEInfo c10_xg_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "RemoveDependentEq_",                /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+initialize\\RemoveDependentEq_.p"/* pName */
};

static emlrtRTEInfo c10_yg_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "ComputeNumDependentEq_",            /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+initialize\\ComputeNumDependentEq_.p"/* pName */
};

static emlrtRTEInfo c10_ah_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "factorQRE",                         /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+QRManager\\factorQRE.p"/* pName */
};

static emlrtRTEInfo c10_bh_emlrtRTEI = { 92,/* lineNo */
  22,                                  /* colNo */
  "xgeqp3",                            /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+lapack\\xgeqp3.m"/* pName */
};

static emlrtRTEInfo c10_ch_emlrtRTEI = { 105,/* lineNo */
  1,                                   /* colNo */
  "xgeqp3",                            /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+lapack\\xgeqp3.m"/* pName */
};

static emlrtRTEInfo c10_dh_emlrtRTEI = { 97,/* lineNo */
  5,                                   /* colNo */
  "xgeqp3",                            /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+lapack\\xgeqp3.m"/* pName */
};

static emlrtRTEInfo c10_eh_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "computeQ_",                         /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+QRManager\\computeQ_.p"/* pName */
};

static emlrtRTEInfo c10_fh_emlrtRTEI = { 14,/* lineNo */
  28,                                  /* colNo */
  "xorgqr",                            /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+lapack\\xorgqr.m"/* pName */
};

static emlrtRTEInfo c10_gh_emlrtRTEI = { 73,/* lineNo */
  22,                                  /* colNo */
  "xgeqrf",                            /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+lapack\\xgeqrf.m"/* pName */
};

static emlrtRTEInfo c10_hh_emlrtRTEI = { 75,/* lineNo */
  5,                                   /* colNo */
  "xgeqrf",                            /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+lapack\\xgeqrf.m"/* pName */
};

static emlrtRTEInfo c10_ih_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "maxConstraintViolation_AMats_nonregularized_",/* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\maxConstraintViolation_AMats_nonre"
  "gularized_.p"                       /* pName */
};

static emlrtRTEInfo c10_jh_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "maxConstraintViolation_AMats_regularized_",/* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\maxConstraintViolation_AMats_regul"
  "arized_.p"                          /* pName */
};

static emlrtRTEInfo c10_kh_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "checkUnboundedOrIllPosed",          /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+stopping\\checkUnboundedOrIllPosed.p"/* pName */
};

static emlrtRTEInfo c10_mh_emlrtRTEI = { 53,/* lineNo */
  35,                                  /* colNo */
  "xaxpy",                             /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xaxpy.m"/* pName */
};

static emlrtRTEInfo c10_oh_emlrtRTEI = { 68,/* lineNo */
  9,                                   /* colNo */
  "xaxpy",                             /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xaxpy.m"/* pName */
};

static emlrtRTEInfo c10_ph_emlrtRTEI = { 50,/* lineNo */
  9,                                   /* colNo */
  "xaxpy",                             /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xaxpy.m"/* pName */
};

static emlrtRTEInfo c10_qh_emlrtRTEI = { 76,/* lineNo */
  65,                                  /* colNo */
  "xgemv",                             /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xgemv.m"/* pName */
};

static emlrtRTEInfo c10_sh_emlrtRTEI = { 99,/* lineNo */
  9,                                   /* colNo */
  "xgemv",                             /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xgemv.m"/* pName */
};

static emlrtRTEInfo c10_th_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "deleteColMoveEnd",                  /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+QRManager\\deleteColMoveEnd.p"/* pName */
};

static emlrtRTEInfo c10_uh_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "computeProjectedHessian",           /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\computeProjectedHessian.p"/* pName */
};

static emlrtRTEInfo c10_vh_emlrtRTEI = { 75,/* lineNo */
  73,                                  /* colNo */
  "xgemm",                             /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xgemm.m"/* pName */
};

static emlrtRTEInfo c10_wh_emlrtRTEI = { 99,/* lineNo */
  9,                                   /* colNo */
  "xgemm",                             /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xgemm.m"/* pName */
};

static emlrtRTEInfo c10_xh_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "solve",                             /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+DynamicRegCholManager\\solve.p"/* pName */
};

static emlrtRTEInfo c10_yh_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "partialColLDL3_",                   /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+DynamicRegCholManager\\partialColLDL3_.p"/* pName */
};

static emlrtRTEInfo c10_ai_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "fullColLDL2_",                      /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+DynamicRegCholManager\\fullColLDL2_.p"/* pName */
};

static emlrtRTEInfo c10_bi_emlrtRTEI = { 37,/* lineNo */
  24,                                  /* colNo */
  "xscal",                             /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xscal.m"/* pName */
};

static emlrtRTEInfo c10_ci_emlrtRTEI = { 52,/* lineNo */
  9,                                   /* colNo */
  "xscal",                             /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\eml\\eml\\+coder\\+internal\\+blas\\xscal.m"/* pName */
};

static emlrtRTEInfo c10_di_emlrtRTEI = { 90,/* lineNo */
  13,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtRTEInfo c10_ei_emlrtRTEI = { 91,/* lineNo */
  12,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_fi_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "initActiveSet",                     /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\initActiveSet.p"/* pName */
};

static emlrtRTEInfo c10_gi_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "moveConstraint_",                   /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\moveConstraint_.p"/* pName */
};

static emlrtRTEInfo c10_hi_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "removeAllIneqConstr",               /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\removeAllIneqConstr.p"/* pName */
};

static emlrtRTEInfo c10_ii_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "setProblemType",                    /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\setProblemType.p"/* pName */
};

static emlrtRTEInfo c10_ji_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "modifyOverheadPhaseOne_",           /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\modifyOverheadPhaseOne_.p"/* pName */
};

static emlrtRTEInfo c10_ki_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "modifyOverheadRegularized_",        /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\modifyOverheadRegularized_.p"/* pName */
};

static emlrtRTEInfo c10_mi_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "addBoundToActiveSetMatrix_",        /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\addBoundToActiveSetMatrix_.p"/* pName */
};

static emlrtRTEInfo c10_oi_emlrtRTEI = { 1,/* lineNo */
  1,                                   /* colNo */
  "dealLambdaIntoStruct",              /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+parseoutput\\dealLambdaIntoStruct.p"/* pName */
};

static emlrtBCInfo c10_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  48,                                  /* lineNo */
  17,                                  /* colNo */
  "g_lb",                              /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_emlrtDCI = { 48,/* lineNo */
  19,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_b_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  48,                                  /* lineNo */
  19,                                  /* colNo */
  "g_lb",                              /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_c_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  49,                                  /* lineNo */
  17,                                  /* colNo */
  "g_ub",                              /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_b_emlrtDCI = { 49,/* lineNo */
  19,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_d_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  49,                                  /* lineNo */
  19,                                  /* colNo */
  "g_ub",                              /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_c_emlrtDCI = { 58,/* lineNo */
  15,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_e_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  58,                                  /* lineNo */
  15,                                  /* colNo */
  "A",                                 /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_d_emlrtDCI = { 61,/* lineNo */
  15,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_f_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  61,                                  /* lineNo */
  15,                                  /* colNo */
  "D",                                 /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_e_emlrtDCI = { 88,/* lineNo */
  89,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  4                                    /* checkKind */
};

static emlrtDCInfo c10_f_emlrtDCI = { 88,/* lineNo */
  89,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_g_emlrtBCI = { 0,/* iFirst */
  MAX_int32_T,                         /* iLast */
  104,                                 /* lineNo */
  36,                                  /* colNo */
  "z_opt(1:n_x_u:end)",                /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_h_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  104,                                 /* lineNo */
  28,                                  /* colNo */
  "z_opt",                             /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_g_emlrtDCI = { 104,/* lineNo */
  36,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_i_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  104,                                 /* lineNo */
  36,                                  /* colNo */
  "z_opt",                             /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_h_emlrtDCI = { 104,/* lineNo */
  30,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_j_emlrtBCI = { 0,/* iFirst */
  MAX_int32_T,                         /* iLast */
  105,                                 /* lineNo */
  36,                                  /* colNo */
  "z_opt(2:n_x_u:end)",                /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_k_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  105,                                 /* lineNo */
  28,                                  /* colNo */
  "z_opt",                             /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_i_emlrtDCI = { 105,/* lineNo */
  36,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_m_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  105,                                 /* lineNo */
  36,                                  /* colNo */
  "z_opt",                             /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_j_emlrtDCI = { 105,/* lineNo */
  30,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  1                                    /* checkKind */
};

static emlrtRTEInfo c10_pi_emlrtRTEI = { 57,/* lineNo */
  17,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtECInfo c10_emlrtECI = { -1,/* nDims */
  61,                                  /* lineNo */
  13,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtECInfo c10_b_emlrtECI = { 1,/* nDims */
  90,                                  /* lineNo */
  13,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892"                        /* pName */
};

static emlrtDCInfo c10_k_emlrtDCI = { 54,/* lineNo */
  9,                                   /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  1                                    /* checkKind */
};

static emlrtDCInfo c10_m_emlrtDCI = { 54,/* lineNo */
  9,                                   /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  4                                    /* checkKind */
};

static emlrtDCInfo c10_o_emlrtDCI = { 55,/* lineNo */
  9,                                   /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  1                                    /* checkKind */
};

static emlrtDCInfo c10_p_emlrtDCI = { 55,/* lineNo */
  9,                                   /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  4                                    /* checkKind */
};

static emlrtDCInfo c10_q_emlrtDCI = { 56,/* lineNo */
  9,                                   /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  1                                    /* checkKind */
};

static emlrtDCInfo c10_r_emlrtDCI = { 56,/* lineNo */
  9,                                   /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  4                                    /* checkKind */
};

static emlrtBCInfo c10_o_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  58,                                  /* lineNo */
  13,                                  /* colNo */
  "Tvec",                              /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_s_emlrtDCI = { 58,/* lineNo */
  13,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_p_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  58,                                  /* lineNo */
  13,                                  /* colNo */
  "A",                                 /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_q_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  59,                                  /* lineNo */
  32,                                  /* colNo */
  "Tvec",                              /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_t_emlrtDCI = { 59,/* lineNo */
  32,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_r_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  59,                                  /* lineNo */
  15,                                  /* colNo */
  "B",                                 /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_u_emlrtDCI = { 59,/* lineNo */
  15,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_s_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  59,                                  /* lineNo */
  17,                                  /* colNo */
  "B",                                 /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_t_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  59,                                  /* lineNo */
  19,                                  /* colNo */
  "B",                                 /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_u_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  60,                                  /* lineNo */
  29,                                  /* colNo */
  "Tvec",                              /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_v_emlrtDCI = { 60,/* lineNo */
  29,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_v_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  60,                                  /* lineNo */
  15,                                  /* colNo */
  "B",                                 /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_w_emlrtDCI = { 60,/* lineNo */
  15,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_w_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  60,                                  /* lineNo */
  17,                                  /* colNo */
  "B",                                 /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_x_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  60,                                  /* lineNo */
  19,                                  /* colNo */
  "B",                                 /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_y_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  93,                                  /* lineNo */
  19,                                  /* colNo */
  "z_opt",                             /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_ab_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  94,                                  /* lineNo */
  19,                                  /* colNo */
  "z_opt",                             /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_bb_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  96,                                  /* lineNo */
  26,                                  /* colNo */
  "z_opt",                             /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_cb_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  98,                                  /* lineNo */
  28,                                  /* colNo */
  "z_opt",                             /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_db_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  99,                                  /* lineNo */
  28,                                  /* colNo */
  "z_opt",                             /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_eb_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  100,                                 /* lineNo */
  28,                                  /* colNo */
  "z_opt",                             /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_fb_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  101,                                 /* lineNo */
  28,                                  /* colNo */
  "z_opt",                             /* aName */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_x_emlrtDCI = { 54,/* lineNo */
  19,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  1                                    /* checkKind */
};

static emlrtDCInfo c10_y_emlrtDCI = { 54,/* lineNo */
  19,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  4                                    /* checkKind */
};

static emlrtDCInfo c10_ab_emlrtDCI = { 55,/* lineNo */
  19,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  1                                    /* checkKind */
};

static emlrtDCInfo c10_bb_emlrtDCI = { 55,/* lineNo */
  19,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  4                                    /* checkKind */
};

static emlrtDCInfo c10_cb_emlrtDCI = { 56,/* lineNo */
  19,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  1                                    /* checkKind */
};

static emlrtDCInfo c10_db_emlrtDCI = { 56,/* lineNo */
  19,                                  /* colNo */
  "ACCMPC with CasADi",                /* fName */
  "#ACCMPC:892",                       /* pName */
  4                                    /* checkKind */
};

static emlrtBCInfo c10_gb_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  87,                                  /* lineNo */
  10,                                  /* colNo */
  "z_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_eb_emlrtDCI = { 87,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_hb_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  87,                                  /* lineNo */
  19,                                  /* colNo */
  "z_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_fb_emlrtDCI = { 87,/* lineNo */
  12,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ib_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  89,                                  /* lineNo */
  10,                                  /* colNo */
  "z_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_gb_emlrtDCI = { 89,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_jb_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  89,                                  /* lineNo */
  19,                                  /* colNo */
  "z_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_hb_emlrtDCI = { 89,/* lineNo */
  12,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_kb_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  91,                                  /* lineNo */
  10,                                  /* colNo */
  "z_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ib_emlrtDCI = { 91,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_mb_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  91,                                  /* lineNo */
  19,                                  /* colNo */
  "z_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_jb_emlrtDCI = { 91,/* lineNo */
  12,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ob_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  93,                                  /* lineNo */
  10,                                  /* colNo */
  "z_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_kb_emlrtDCI = { 93,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_pb_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  93,                                  /* lineNo */
  19,                                  /* colNo */
  "z_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_mb_emlrtDCI = { 93,/* lineNo */
  12,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_qb_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  95,                                  /* lineNo */
  10,                                  /* colNo */
  "z_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ob_emlrtDCI = { 95,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_rb_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  95,                                  /* lineNo */
  19,                                  /* colNo */
  "z_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_pb_emlrtDCI = { 95,/* lineNo */
  12,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_sb_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  97,                                  /* lineNo */
  10,                                  /* colNo */
  "z_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_qb_emlrtDCI = { 97,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_tb_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  97,                                  /* lineNo */
  19,                                  /* colNo */
  "z_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_rb_emlrtDCI = { 97,/* lineNo */
  12,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ub_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  99,                                  /* lineNo */
  10,                                  /* colNo */
  "z_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_sb_emlrtDCI = { 99,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_vb_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  99,                                  /* lineNo */
  19,                                  /* colNo */
  "z_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_tb_emlrtDCI = { 99,/* lineNo */
  12,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_wb_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  101,                                 /* lineNo */
  10,                                  /* colNo */
  "z_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ub_emlrtDCI = { 101,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_xb_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  101,                                 /* lineNo */
  19,                                  /* colNo */
  "z_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_vb_emlrtDCI = { 101,/* lineNo */
  12,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtDCInfo c10_wb_emlrtDCI = { 202,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_yb_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  202,                                 /* lineNo */
  14,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_xb_emlrtDCI = { 206,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ac_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  206,                                 /* lineNo */
  14,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_yb_emlrtDCI = { 210,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_bc_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  210,                                 /* lineNo */
  14,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ac_emlrtDCI = { 217,/* lineNo */
  18,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_cc_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  217,                                 /* lineNo */
  18,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_bc_emlrtDCI = { 221,/* lineNo */
  18,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_dc_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  221,                                 /* lineNo */
  18,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_cc_emlrtDCI = { 225,/* lineNo */
  18,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ec_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  225,                                 /* lineNo */
  18,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_dc_emlrtDCI = { 237,/* lineNo */
  18,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_fc_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  237,                                 /* lineNo */
  18,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ec_emlrtDCI = { 241,/* lineNo */
  18,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_gc_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  241,                                 /* lineNo */
  18,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_fc_emlrtDCI = { 248,/* lineNo */
  22,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_hc_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  248,                                 /* lineNo */
  22,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_gc_emlrtDCI = { 252,/* lineNo */
  22,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ic_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  252,                                 /* lineNo */
  22,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_hc_emlrtDCI = { 262,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_jc_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  262,                                 /* lineNo */
  14,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ic_emlrtDCI = { 266,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_kc_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  266,                                 /* lineNo */
  14,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_jc_emlrtDCI = { 270,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_mc_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  270,                                 /* lineNo */
  14,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_kc_emlrtDCI = { 274,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_oc_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  274,                                 /* lineNo */
  14,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_mc_emlrtDCI = { 278,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_pc_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  278,                                 /* lineNo */
  14,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_oc_emlrtDCI = { 282,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_qc_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  282,                                 /* lineNo */
  14,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_pc_emlrtDCI = { 291,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_rc_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  291,                                 /* lineNo */
  14,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_qc_emlrtDCI = { 298,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_sc_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  298,                                 /* lineNo */
  10,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_rc_emlrtDCI = { 310,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_tc_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  310,                                 /* lineNo */
  14,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_sc_emlrtDCI = { 320,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_uc_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  320,                                 /* lineNo */
  14,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_tc_emlrtDCI = { 361,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_vc_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  361,                                 /* lineNo */
  10,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_uc_emlrtDCI = { 365,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_wc_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  365,                                 /* lineNo */
  10,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_vc_emlrtDCI = { 374,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_xc_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  374,                                 /* lineNo */
  10,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_wc_emlrtDCI = { 386,/* lineNo */
  6,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_yc_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  386,                                 /* lineNo */
  6,                                   /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_xc_emlrtDCI = { 390,/* lineNo */
  6,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ad_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  390,                                 /* lineNo */
  6,                                   /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_yc_emlrtDCI = { 201,/* lineNo */
  11,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_bd_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  201,                                 /* lineNo */
  11,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ad_emlrtDCI = { 205,/* lineNo */
  11,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_cd_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  205,                                 /* lineNo */
  11,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_bd_emlrtDCI = { 209,/* lineNo */
  11,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_dd_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  209,                                 /* lineNo */
  11,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_cd_emlrtDCI = { 216,/* lineNo */
  15,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ed_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  216,                                 /* lineNo */
  15,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_dd_emlrtDCI = { 216,/* lineNo */
  23,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_fd_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  216,                                 /* lineNo */
  23,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ed_emlrtDCI = { 220,/* lineNo */
  15,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_gd_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  220,                                 /* lineNo */
  15,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_fd_emlrtDCI = { 220,/* lineNo */
  23,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_hd_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  220,                                 /* lineNo */
  23,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_gd_emlrtDCI = { 224,/* lineNo */
  15,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_id_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  224,                                 /* lineNo */
  15,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_hd_emlrtDCI = { 224,/* lineNo */
  23,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_jd_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  224,                                 /* lineNo */
  23,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_id_emlrtDCI = { 236,/* lineNo */
  15,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_kd_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  236,                                 /* lineNo */
  15,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_jd_emlrtDCI = { 240,/* lineNo */
  15,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_md_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  240,                                 /* lineNo */
  15,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_kd_emlrtDCI = { 247,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_od_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  247,                                 /* lineNo */
  19,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_md_emlrtDCI = { 247,/* lineNo */
  27,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_pd_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  247,                                 /* lineNo */
  27,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_od_emlrtDCI = { 251,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_qd_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  251,                                 /* lineNo */
  19,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_pd_emlrtDCI = { 251,/* lineNo */
  27,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_rd_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  251,                                 /* lineNo */
  27,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_qd_emlrtDCI = { 261,/* lineNo */
  11,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_sd_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  261,                                 /* lineNo */
  11,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_rd_emlrtDCI = { 261,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_td_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  261,                                 /* lineNo */
  19,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_sd_emlrtDCI = { 265,/* lineNo */
  11,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ud_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  265,                                 /* lineNo */
  11,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_td_emlrtDCI = { 265,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_vd_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  265,                                 /* lineNo */
  19,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ud_emlrtDCI = { 269,/* lineNo */
  11,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_wd_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  269,                                 /* lineNo */
  11,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_vd_emlrtDCI = { 269,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_xd_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  269,                                 /* lineNo */
  19,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_wd_emlrtDCI = { 273,/* lineNo */
  11,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_yd_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  273,                                 /* lineNo */
  11,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_xd_emlrtDCI = { 273,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ae_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  273,                                 /* lineNo */
  19,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_yd_emlrtDCI = { 277,/* lineNo */
  11,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_be_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  277,                                 /* lineNo */
  11,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ae_emlrtDCI = { 277,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ce_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  277,                                 /* lineNo */
  19,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_be_emlrtDCI = { 281,/* lineNo */
  11,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_de_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  281,                                 /* lineNo */
  11,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ce_emlrtDCI = { 281,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ee_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  281,                                 /* lineNo */
  19,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_de_emlrtDCI = { 290,/* lineNo */
  11,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_fe_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  290,                                 /* lineNo */
  11,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ee_emlrtDCI = { 297,/* lineNo */
  7,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ge_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  297,                                 /* lineNo */
  7,                                   /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_fe_emlrtDCI = { 301,/* lineNo */
  7,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_he_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  301,                                 /* lineNo */
  7,                                   /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ge_emlrtDCI = { 309,/* lineNo */
  11,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ie_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  309,                                 /* lineNo */
  11,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_he_emlrtDCI = { 313,/* lineNo */
  11,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_je_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  313,                                 /* lineNo */
  11,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ie_emlrtDCI = { 319,/* lineNo */
  11,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ke_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  319,                                 /* lineNo */
  11,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_je_emlrtDCI = { 323,/* lineNo */
  11,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_me_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  323,                                 /* lineNo */
  11,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ke_emlrtDCI = { 354,/* lineNo */
  7,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_oe_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  354,                                 /* lineNo */
  7,                                   /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_me_emlrtDCI = { 360,/* lineNo */
  7,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_pe_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  360,                                 /* lineNo */
  7,                                   /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_oe_emlrtDCI = { 364,/* lineNo */
  7,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_qe_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  364,                                 /* lineNo */
  7,                                   /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_pe_emlrtDCI = { 373,/* lineNo */
  7,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_re_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  373,                                 /* lineNo */
  7,                                   /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_qe_emlrtDCI = { 385,/* lineNo */
  3,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_se_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  385,                                 /* lineNo */
  3,                                   /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_re_emlrtDCI = { 385,/* lineNo */
  11,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_te_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  385,                                 /* lineNo */
  11,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_se_emlrtDCI = { 389,/* lineNo */
  3,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ue_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  389,                                 /* lineNo */
  3,                                   /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_te_emlrtDCI = { 203,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ve_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  203,                                 /* lineNo */
  14,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ue_emlrtDCI = { 207,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_we_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  207,                                 /* lineNo */
  14,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ve_emlrtDCI = { 211,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_xe_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  211,                                 /* lineNo */
  14,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_we_emlrtDCI = { 218,/* lineNo */
  18,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ye_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  218,                                 /* lineNo */
  18,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_xe_emlrtDCI = { 222,/* lineNo */
  18,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_af_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  222,                                 /* lineNo */
  18,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ye_emlrtDCI = { 226,/* lineNo */
  18,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_bf_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  226,                                 /* lineNo */
  18,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_af_emlrtDCI = { 238,/* lineNo */
  18,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_cf_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  238,                                 /* lineNo */
  18,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_bf_emlrtDCI = { 242,/* lineNo */
  18,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_df_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  242,                                 /* lineNo */
  18,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_cf_emlrtDCI = { 249,/* lineNo */
  22,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ef_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  249,                                 /* lineNo */
  22,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_df_emlrtDCI = { 253,/* lineNo */
  22,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ff_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  253,                                 /* lineNo */
  22,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ef_emlrtDCI = { 263,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_gf_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  263,                                 /* lineNo */
  14,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ff_emlrtDCI = { 267,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_hf_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  267,                                 /* lineNo */
  14,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_gf_emlrtDCI = { 271,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_if_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  271,                                 /* lineNo */
  14,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_hf_emlrtDCI = { 275,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_jf_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  275,                                 /* lineNo */
  14,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_if_emlrtDCI = { 279,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_kf_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  279,                                 /* lineNo */
  14,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_jf_emlrtDCI = { 283,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_mf_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  283,                                 /* lineNo */
  14,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_kf_emlrtDCI = { 292,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_of_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  292,                                 /* lineNo */
  14,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_mf_emlrtDCI = { 303,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_pf_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  303,                                 /* lineNo */
  10,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_of_emlrtDCI = { 315,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_qf_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  315,                                 /* lineNo */
  14,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_pf_emlrtDCI = { 325,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_rf_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  325,                                 /* lineNo */
  14,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_qf_emlrtDCI = { 356,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_sf_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  356,                                 /* lineNo */
  10,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_tf_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  88,                                  /* lineNo */
  10,                                  /* colNo */
  "z_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_rf_emlrtDCI = { 88,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_uf_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  88,                                  /* lineNo */
  19,                                  /* colNo */
  "z_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_sf_emlrtDCI = { 88,/* lineNo */
  12,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_vf_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  90,                                  /* lineNo */
  10,                                  /* colNo */
  "z_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_tf_emlrtDCI = { 90,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_wf_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  90,                                  /* lineNo */
  19,                                  /* colNo */
  "z_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_uf_emlrtDCI = { 90,/* lineNo */
  12,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_xf_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  92,                                  /* lineNo */
  10,                                  /* colNo */
  "z_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_vf_emlrtDCI = { 92,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_yf_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  92,                                  /* lineNo */
  19,                                  /* colNo */
  "z_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_wf_emlrtDCI = { 92,/* lineNo */
  12,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ag_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  94,                                  /* lineNo */
  10,                                  /* colNo */
  "z_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_xf_emlrtDCI = { 94,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_bg_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  94,                                  /* lineNo */
  19,                                  /* colNo */
  "z_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_yf_emlrtDCI = { 94,/* lineNo */
  12,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_cg_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  96,                                  /* lineNo */
  10,                                  /* colNo */
  "z_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ag_emlrtDCI = { 96,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_dg_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  96,                                  /* lineNo */
  19,                                  /* colNo */
  "z_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_bg_emlrtDCI = { 96,/* lineNo */
  12,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_eg_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  98,                                  /* lineNo */
  10,                                  /* colNo */
  "z_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_cg_emlrtDCI = { 98,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_fg_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  98,                                  /* lineNo */
  19,                                  /* colNo */
  "z_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_dg_emlrtDCI = { 98,/* lineNo */
  12,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_gg_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  100,                                 /* lineNo */
  10,                                  /* colNo */
  "z_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_eg_emlrtDCI = { 100,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_hg_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  100,                                 /* lineNo */
  19,                                  /* colNo */
  "z_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_fg_emlrtDCI = { 100,/* lineNo */
  12,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ig_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  102,                                 /* lineNo */
  10,                                  /* colNo */
  "z_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_gg_emlrtDCI = { 102,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_jg_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  102,                                 /* lineNo */
  19,                                  /* colNo */
  "z_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_hg_emlrtDCI = { 102,/* lineNo */
  12,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_kg_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  150,                                 /* lineNo */
  14,                                  /* colNo */
  "Tvec",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ig_emlrtDCI = { 150,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_mg_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  387,                                 /* lineNo */
  6,                                   /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_jg_emlrtDCI = { 387,/* lineNo */
  6,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtDCInfo c10_kg_emlrtDCI = { 389,/* lineNo */
  11,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_og_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  389,                                 /* lineNo */
  11,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_pg_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  391,                                 /* lineNo */
  6,                                   /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_mg_emlrtDCI = { 391,/* lineNo */
  6,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_qg_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  168,                                 /* lineNo */
  18,                                  /* colNo */
  "H",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_og_emlrtDCI = { 168,/* lineNo */
  18,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_rg_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  168,                                 /* lineNo */
  21,                                  /* colNo */
  "H",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_pg_emlrtDCI = { 168,/* lineNo */
  21,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_sg_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  168,                                 /* lineNo */
  5,                                   /* colNo */
  "H",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_qg_emlrtDCI = { 168,/* lineNo */
  5,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_tg_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  170,                                 /* lineNo */
  15,                                  /* colNo */
  "c",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_rg_emlrtDCI = { 170,/* lineNo */
  15,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ug_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  170,                                 /* lineNo */
  5,                                   /* colNo */
  "c",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_sg_emlrtDCI = { 170,/* lineNo */
  5,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_vg_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  175,                                 /* lineNo */
  18,                                  /* colNo */
  "H",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_tg_emlrtDCI = { 175,/* lineNo */
  18,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_wg_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  175,                                 /* lineNo */
  21,                                  /* colNo */
  "H",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ug_emlrtDCI = { 175,/* lineNo */
  21,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_xg_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  175,                                 /* lineNo */
  7,                                   /* colNo */
  "H",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_vg_emlrtDCI = { 175,/* lineNo */
  7,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_yg_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  175,                                 /* lineNo */
  10,                                  /* colNo */
  "H",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_wg_emlrtDCI = { 175,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ah_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  180,                                 /* lineNo */
  22,                                  /* colNo */
  "H",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_xg_emlrtDCI = { 180,/* lineNo */
  22,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_bh_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  180,                                 /* lineNo */
  25,                                  /* colNo */
  "H",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_yg_emlrtDCI = { 180,/* lineNo */
  25,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ch_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  180,                                 /* lineNo */
  11,                                  /* colNo */
  "H",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ah_emlrtDCI = { 180,/* lineNo */
  11,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_dh_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  180,                                 /* lineNo */
  14,                                  /* colNo */
  "H",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_bh_emlrtDCI = { 180,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_eh_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  181,                                 /* lineNo */
  19,                                  /* colNo */
  "c",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ch_emlrtDCI = { 181,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_fh_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  181,                                 /* lineNo */
  11,                                  /* colNo */
  "c",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_dh_emlrtDCI = { 181,/* lineNo */
  11,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_gh_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  188,                                 /* lineNo */
  19,                                  /* colNo */
  "c",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_eh_emlrtDCI = { 188,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_hh_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  188,                                 /* lineNo */
  7,                                   /* colNo */
  "c",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_fh_emlrtDCI = { 188,/* lineNo */
  7,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ih_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  184,                                 /* lineNo */
  22,                                  /* colNo */
  "H",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_gh_emlrtDCI = { 184,/* lineNo */
  22,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_jh_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  184,                                 /* lineNo */
  25,                                  /* colNo */
  "H",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_hh_emlrtDCI = { 184,/* lineNo */
  25,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_kh_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  189,                                 /* lineNo */
  19,                                  /* colNo */
  "c",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ih_emlrtDCI = { 189,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_mh_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  189,                                 /* lineNo */
  7,                                   /* colNo */
  "c",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_jh_emlrtDCI = { 189,/* lineNo */
  7,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_oh_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  184,                                 /* lineNo */
  9,                                   /* colNo */
  "H",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_kh_emlrtDCI = { 184,/* lineNo */
  9,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ph_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  190,                                 /* lineNo */
  26,                                  /* colNo */
  "H",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_mh_emlrtDCI = { 190,/* lineNo */
  26,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_qh_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  190,                                 /* lineNo */
  33,                                  /* colNo */
  "H",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_oh_emlrtDCI = { 190,/* lineNo */
  33,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_sh_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  190,                                 /* lineNo */
  7,                                   /* colNo */
  "H",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ph_emlrtDCI = { 190,/* lineNo */
  7,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_th_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  190,                                 /* lineNo */
  14,                                  /* colNo */
  "H",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_qh_emlrtDCI = { 190,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_uh_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  191,                                 /* lineNo */
  19,                                  /* colNo */
  "c",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_sh_emlrtDCI = { 191,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_vh_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  191,                                 /* lineNo */
  7,                                   /* colNo */
  "c",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_th_emlrtDCI = { 191,/* lineNo */
  7,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_wh_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  192,                                 /* lineNo */
  19,                                  /* colNo */
  "c",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_uh_emlrtDCI = { 192,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_xh_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  192,                                 /* lineNo */
  7,                                   /* colNo */
  "c",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_vh_emlrtDCI = { 192,/* lineNo */
  7,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_yh_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  201,                                 /* lineNo */
  9,                                   /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_wh_emlrtDCI = { 201,/* lineNo */
  9,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ai_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  236,                                 /* lineNo */
  13,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_xh_emlrtDCI = { 236,/* lineNo */
  13,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_bi_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  205,                                 /* lineNo */
  9,                                   /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_yh_emlrtDCI = { 205,/* lineNo */
  9,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ci_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  240,                                 /* lineNo */
  13,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ai_emlrtDCI = { 240,/* lineNo */
  13,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_di_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  209,                                 /* lineNo */
  9,                                   /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_bi_emlrtDCI = { 209,/* lineNo */
  9,                                   /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ei_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  288,                                 /* lineNo */
  11,                                  /* colNo */
  "Mb",                                /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ci_emlrtDCI = { 288,/* lineNo */
  11,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtDCInfo c10_di_emlrtDCI = { 290,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_fi_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  290,                                 /* lineNo */
  19,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ei_emlrtDCI = { 297,/* lineNo */
  15,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_gi_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  297,                                 /* lineNo */
  15,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_hi_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  299,                                 /* lineNo */
  31,                                  /* colNo */
  "a_max_est",                         /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_fi_emlrtDCI = { 299,/* lineNo */
  31,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ii_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  299,                                 /* lineNo */
  10,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_gi_emlrtDCI = { 299,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtDCInfo c10_hi_emlrtDCI = { 301,/* lineNo */
  15,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ji_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  301,                                 /* lineNo */
  15,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_ki_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  302,                                 /* lineNo */
  31,                                  /* colNo */
  "a_min_est",                         /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ii_emlrtDCI = { 302,/* lineNo */
  31,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_mi_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  302,                                 /* lineNo */
  10,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ji_emlrtDCI = { 302,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtDCInfo c10_ki_emlrtDCI = { 319,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_oi_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  319,                                 /* lineNo */
  19,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_mi_emlrtDCI = { 309,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_pi_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  309,                                 /* lineNo */
  19,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_qi_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  321,                                 /* lineNo */
  37,                                  /* colNo */
  "j_max_est",                         /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_oi_emlrtDCI = { 321,/* lineNo */
  37,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ri_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  321,                                 /* lineNo */
  14,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_pi_emlrtDCI = { 321,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_si_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  311,                                 /* lineNo */
  37,                                  /* colNo */
  "j_max_est",                         /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_qi_emlrtDCI = { 311,/* lineNo */
  37,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ti_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  311,                                 /* lineNo */
  14,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ri_emlrtDCI = { 311,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtDCInfo c10_si_emlrtDCI = { 323,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ui_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  323,                                 /* lineNo */
  19,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ti_emlrtDCI = { 313,/* lineNo */
  19,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_vi_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  313,                                 /* lineNo */
  19,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_wi_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  324,                                 /* lineNo */
  37,                                  /* colNo */
  "j_min_est",                         /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ui_emlrtDCI = { 324,/* lineNo */
  37,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_xi_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  324,                                 /* lineNo */
  14,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_vi_emlrtDCI = { 324,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_yi_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  314,                                 /* lineNo */
  37,                                  /* colNo */
  "j_min_est",                         /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_wi_emlrtDCI = { 314,/* lineNo */
  37,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_aj_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  314,                                 /* lineNo */
  14,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_xi_emlrtDCI = { 314,/* lineNo */
  14,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtDCInfo c10_yi_emlrtDCI = { 354,/* lineNo */
  15,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_bj_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  354,                                 /* lineNo */
  15,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_cj_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  355,                                 /* lineNo */
  36,                                  /* colNo */
  "v_minIncentive",                    /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_aj_emlrtDCI = { 355,/* lineNo */
  36,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_dj_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  355,                                 /* lineNo */
  10,                                  /* colNo */
  "g_lb",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_bj_emlrtDCI = { 355,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtDCInfo c10_cj_emlrtDCI = { 360,/* lineNo */
  15,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ej_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  360,                                 /* lineNo */
  15,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_fj_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  362,                                 /* lineNo */
  30,                                  /* colNo */
  "s_tv_est",                          /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_dj_emlrtDCI = { 362,/* lineNo */
  30,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_gj_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  362,                                 /* lineNo */
  10,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ej_emlrtDCI = { 362,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtDCInfo c10_fj_emlrtDCI = { 364,/* lineNo */
  15,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_hj_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  364,                                 /* lineNo */
  15,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_ij_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  366,                                 /* lineNo */
  30,                                  /* colNo */
  "s_tv_est",                          /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_gj_emlrtDCI = { 366,/* lineNo */
  30,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_jj_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  366,                                 /* lineNo */
  10,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_hj_emlrtDCI = { 366,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtDCInfo c10_ij_emlrtDCI = { 373,/* lineNo */
  15,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_kj_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  373,                                 /* lineNo */
  15,                                  /* colNo */
  "G",                                 /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_mj_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  373,                                 /* lineNo */
  42,                                  /* colNo */
  "v_est",                             /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_jj_emlrtDCI = { 373,/* lineNo */
  42,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_oj_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  375,                                 /* lineNo */
  30,                                  /* colNo */
  "s_tv_est",                          /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_kj_emlrtDCI = { 375,/* lineNo */
  30,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_pj_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  375,                                 /* lineNo */
  10,                                  /* colNo */
  "g_ub",                              /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_mj_emlrtDCI = { 375,/* lineNo */
  10,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtDCInfo c10_oj_emlrtDCI = { 695,/* lineNo */
  31,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_qj_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  695,                                 /* lineNo */
  31,                                  /* colNo */
  "a_min_est",                         /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  3                                    /* checkKind */
};

static emlrtDCInfo c10_pj_emlrtDCI = { 705,/* lineNo */
  31,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_rj_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  705,                                 /* lineNo */
  31,                                  /* colNo */
  "a_min_est",                         /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  3                                    /* checkKind */
};

static emlrtDCInfo c10_qj_emlrtDCI = { 643,/* lineNo */
  32,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_sj_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  643,                                 /* lineNo */
  32,                                  /* colNo */
  "v_curv_max",                        /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  3                                    /* checkKind */
};

static emlrtDCInfo c10_rj_emlrtDCI = { 645,/* lineNo */
  32,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_tj_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  645,                                 /* lineNo */
  32,                                  /* colNo */
  "v_curv_max",                        /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  3                                    /* checkKind */
};

static emlrtDCInfo c10_sj_emlrtDCI = { 698,/* lineNo */
  31,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_uj_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  698,                                 /* lineNo */
  31,                                  /* colNo */
  "j_max_est",                         /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  3                                    /* checkKind */
};

static emlrtDCInfo c10_tj_emlrtDCI = { 708,/* lineNo */
  31,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_vj_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  708,                                 /* lineNo */
  31,                                  /* colNo */
  "j_max_est",                         /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  3                                    /* checkKind */
};

static emlrtDCInfo c10_uj_emlrtDCI = { 696,/* lineNo */
  31,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_wj_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  696,                                 /* lineNo */
  31,                                  /* colNo */
  "a_max_est",                         /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  3                                    /* checkKind */
};

static emlrtDCInfo c10_vj_emlrtDCI = { 706,/* lineNo */
  31,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_xj_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  706,                                 /* lineNo */
  31,                                  /* colNo */
  "a_max_est",                         /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  3                                    /* checkKind */
};

static emlrtDCInfo c10_wj_emlrtDCI = { 697,/* lineNo */
  31,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_yj_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  697,                                 /* lineNo */
  31,                                  /* colNo */
  "j_min_est",                         /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  3                                    /* checkKind */
};

static emlrtDCInfo c10_xj_emlrtDCI = { 707,/* lineNo */
  31,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ak_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  707,                                 /* lineNo */
  31,                                  /* colNo */
  "j_min_est",                         /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  3                                    /* checkKind */
};

static emlrtDCInfo c10_yj_emlrtDCI = { 602,/* lineNo */
  22,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_bk_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  602,                                 /* lineNo */
  22,                                  /* colNo */
  "tau_est",                           /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  3                                    /* checkKind */
};

static emlrtBCInfo c10_ck_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  602,                                 /* lineNo */
  54,                                  /* colNo */
  "v_est",                             /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ak_emlrtDCI = { 602,/* lineNo */
  54,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_dk_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  615,                                 /* lineNo */
  30,                                  /* colNo */
  "s_est",                             /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_bk_emlrtDCI = { 615,/* lineNo */
  30,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ek_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  613,                                 /* lineNo */
  31,                                  /* colNo */
  "slope_est",                         /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  3                                    /* checkKind */
};

static emlrtDCInfo c10_ck_emlrtDCI = { 613,/* lineNo */
  31,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_fk_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  615,                                 /* lineNo */
  56,                                  /* colNo */
  "s_est",                             /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_dk_emlrtDCI = { 615,/* lineNo */
  56,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_gk_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  619,                                 /* lineNo */
  31,                                  /* colNo */
  "slope_est",                         /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  3                                    /* checkKind */
};

static emlrtDCInfo c10_ek_emlrtDCI = { 619,/* lineNo */
  31,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_hk_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  631,                                 /* lineNo */
  30,                                  /* colNo */
  "s_est",                             /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_fk_emlrtDCI = { 631,/* lineNo */
  30,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ik_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  630,                                 /* lineNo */
  31,                                  /* colNo */
  "v_lim_max",                         /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  3                                    /* checkKind */
};

static emlrtDCInfo c10_gk_emlrtDCI = { 630,/* lineNo */
  31,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_jk_emlrtBCI = { 1,/* iFirst */
  4,                                   /* iLast */
  631,                                 /* lineNo */
  47,                                  /* colNo */
  "s_speedLim",                        /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_hk_emlrtDCI = { 631,/* lineNo */
  47,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_kk_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  616,                                 /* lineNo */
  31,                                  /* colNo */
  "slope_est",                         /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  3                                    /* checkKind */
};

static emlrtDCInfo c10_ik_emlrtDCI = { 616,/* lineNo */
  31,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_mk_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  631,                                 /* lineNo */
  59,                                  /* colNo */
  "s_est",                             /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_jk_emlrtDCI = { 631,/* lineNo */
  59,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ok_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  644,                                 /* lineNo */
  30,                                  /* colNo */
  "s_est",                             /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_kk_emlrtDCI = { 644,/* lineNo */
  30,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_pk_emlrtBCI = { 1,/* iFirst */
  4,                                   /* iLast */
  631,                                 /* lineNo */
  75,                                  /* colNo */
  "s_speedLim",                        /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_mk_emlrtDCI = { 631,/* lineNo */
  75,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_qk_emlrtBCI = { 1,/* iFirst */
  4,                                   /* iLast */
  644,                                 /* lineNo */
  42,                                  /* colNo */
  "s_curv",                            /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ok_emlrtDCI = { 644,/* lineNo */
  42,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_rk_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  644,                                 /* lineNo */
  54,                                  /* colNo */
  "s_est",                             /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_pk_emlrtDCI = { 644,/* lineNo */
  54,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_sk_emlrtBCI = { 1,/* iFirst */
  4,                                   /* iLast */
  644,                                 /* lineNo */
  66,                                  /* colNo */
  "s_curv",                            /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_qk_emlrtDCI = { 644,/* lineNo */
  66,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_tk_emlrtBCI = { 1,/* iFirst */
  4,                                   /* iLast */
  632,                                 /* lineNo */
  47,                                  /* colNo */
  "v_speedLim",                        /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_rk_emlrtDCI = { 632,/* lineNo */
  47,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_uk_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  632,                                 /* lineNo */
  31,                                  /* colNo */
  "v_lim_max",                         /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  3                                    /* checkKind */
};

static emlrtDCInfo c10_sk_emlrtDCI = { 632,/* lineNo */
  31,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_vk_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  694,                                 /* lineNo */
  26,                                  /* colNo */
  "v_est",                             /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_tk_emlrtDCI = { 694,/* lineNo */
  26,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_wk_emlrtBCI = { 1,/* iFirst */
  4,                                   /* iLast */
  645,                                 /* lineNo */
  62,                                  /* colNo */
  "curvature",                         /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_uk_emlrtDCI = { 645,/* lineNo */
  62,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_xk_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  699,                                 /* lineNo */
  30,                                  /* colNo */
  "v_est",                             /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_vk_emlrtDCI = { 699,/* lineNo */
  30,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_yk_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  700,                                 /* lineNo */
  49,                                  /* colNo */
  "v_est",                             /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_wk_emlrtDCI = { 700,/* lineNo */
  49,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_am_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  700,                                 /* lineNo */
  31,                                  /* colNo */
  "a_min_est",                         /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  3                                    /* checkKind */
};

static emlrtDCInfo c10_xk_emlrtDCI = { 700,/* lineNo */
  31,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_bm_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  701,                                 /* lineNo */
  49,                                  /* colNo */
  "v_est",                             /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_yk_emlrtDCI = { 701,/* lineNo */
  49,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_cm_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  701,                                 /* lineNo */
  31,                                  /* colNo */
  "a_max_est",                         /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  3                                    /* checkKind */
};

static emlrtDCInfo c10_am_emlrtDCI = { 701,/* lineNo */
  31,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_dm_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  702,                                 /* lineNo */
  49,                                  /* colNo */
  "v_est",                             /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_bm_emlrtDCI = { 702,/* lineNo */
  49,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_em_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  702,                                 /* lineNo */
  31,                                  /* colNo */
  "j_min_est",                         /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  3                                    /* checkKind */
};

static emlrtDCInfo c10_cm_emlrtDCI = { 702,/* lineNo */
  31,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_fm_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  703,                                 /* lineNo */
  49,                                  /* colNo */
  "v_est",                             /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_dm_emlrtDCI = { 703,/* lineNo */
  49,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_gm_emlrtBCI = { 1,/* iFirst */
  20,                                  /* iLast */
  703,                                 /* lineNo */
  31,                                  /* colNo */
  "j_max_est",                         /* aName */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  3                                    /* checkKind */
};

static emlrtDCInfo c10_em_emlrtDCI = { 703,/* lineNo */
  31,                                  /* colNo */
  "CreateQP_ABSimulink",               /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\CreateQP_ABSimulink.m",/* pName */
  1                                    /* checkKind */
};

static emlrtDCInfo c10_fm_emlrtDCI = { 49,/* lineNo */
  41,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_hm_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  49,                                  /* lineNo */
  41,                                  /* colNo */
  "A",                                 /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_gm_emlrtDCI = { 51,/* lineNo */
  69,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_im_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  51,                                  /* lineNo */
  69,                                  /* colNo */
  "B",                                 /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_hm_emlrtDCI = { 57,/* lineNo */
  37,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_jm_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  57,                                  /* lineNo */
  37,                                  /* colNo */
  "A",                                 /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_im_emlrtDCI = { 59,/* lineNo */
  30,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_km_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  59,                                  /* lineNo */
  30,                                  /* colNo */
  "d",                                 /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_jm_emlrtDCI = { 59,/* lineNo */
  32,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_mm_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  59,                                  /* lineNo */
  32,                                  /* colNo */
  "d",                                 /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_km_emlrtDCI = { 59,/* lineNo */
  15,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_om_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  59,                                  /* lineNo */
  15,                                  /* colNo */
  "d",                                 /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_mm_emlrtDCI = { 59,/* lineNo */
  17,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_pm_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  59,                                  /* lineNo */
  17,                                  /* colNo */
  "d",                                 /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_om_emlrtDCI = { 65,/* lineNo */
  41,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_qm_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  65,                                  /* lineNo */
  41,                                  /* colNo */
  "A",                                 /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_pm_emlrtDCI = { 67,/* lineNo */
  34,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_rm_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  67,                                  /* lineNo */
  34,                                  /* colNo */
  "d",                                 /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_qm_emlrtDCI = { 67,/* lineNo */
  36,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_sm_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  67,                                  /* lineNo */
  36,                                  /* colNo */
  "d",                                 /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_rm_emlrtDCI = { 67,/* lineNo */
  52,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_tm_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  67,                                  /* lineNo */
  52,                                  /* colNo */
  "D",                                 /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_sm_emlrtDCI = { 67,/* lineNo */
  19,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_um_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  67,                                  /* lineNo */
  19,                                  /* colNo */
  "d",                                 /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_tm_emlrtDCI = { 67,/* lineNo */
  21,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_vm_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  67,                                  /* lineNo */
  21,                                  /* colNo */
  "d",                                 /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_um_emlrtDCI = { 73,/* lineNo */
  15,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_wm_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  73,                                  /* lineNo */
  15,                                  /* colNo */
  "d",                                 /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_vm_emlrtDCI = { 73,/* lineNo */
  17,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_xm_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  73,                                  /* lineNo */
  17,                                  /* colNo */
  "d",                                 /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_wm_emlrtDCI = { 80,/* lineNo */
  15,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ym_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  80,                                  /* lineNo */
  15,                                  /* colNo */
  "d",                                 /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_xm_emlrtDCI = { 80,/* lineNo */
  17,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ao_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  80,                                  /* lineNo */
  17,                                  /* colNo */
  "d",                                 /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ym_emlrtDCI = { 51,/* lineNo */
  21,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_bo_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  51,                                  /* lineNo */
  21,                                  /* colNo */
  "Psi",                               /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ao_emlrtDCI = { 51,/* lineNo */
  23,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_co_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  51,                                  /* lineNo */
  23,                                  /* colNo */
  "Psi",                               /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_bo_emlrtDCI = { 51,/* lineNo */
  32,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_do_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  51,                                  /* lineNo */
  32,                                  /* colNo */
  "Psi",                               /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_co_emlrtDCI = { 51,/* lineNo */
  42,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_eo_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  51,                                  /* lineNo */
  42,                                  /* colNo */
  "Psi",                               /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_do_emlrtDCI = { 72,/* lineNo */
  17,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_fo_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  72,                                  /* lineNo */
  17,                                  /* colNo */
  "Psi",                               /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_eo_emlrtDCI = { 72,/* lineNo */
  19,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_go_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  72,                                  /* lineNo */
  19,                                  /* colNo */
  "Psi",                               /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_fo_emlrtDCI = { 79,/* lineNo */
  17,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ho_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  79,                                  /* lineNo */
  17,                                  /* colNo */
  "Psi",                               /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_go_emlrtDCI = { 79,/* lineNo */
  19,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_io_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  79,                                  /* lineNo */
  19,                                  /* colNo */
  "Psi",                               /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_ho_emlrtDCI = { 79,/* lineNo */
  27,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_jo_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  79,                                  /* lineNo */
  27,                                  /* colNo */
  "Psi",                               /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtDCInfo c10_io_emlrtDCI = { 79,/* lineNo */
  35,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtBCInfo c10_ko_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  79,                                  /* lineNo */
  35,                                  /* colNo */
  "Psi",                               /* aName */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  0                                    /* checkKind */
};

static emlrtRTEInfo c10_qi_emlrtRTEI = { 37,/* lineNo */
  13,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtECInfo c10_c_emlrtECI = { -1,/* nDims */
  73,                                  /* lineNo */
  13,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_ri_emlrtRTEI = { 46,/* lineNo */
  21,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_si_emlrtRTEI = { 48,/* lineNo */
  25,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtECInfo c10_d_emlrtECI = { -1,/* nDims */
  51,                                  /* lineNo */
  17,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_ti_emlrtRTEI = { 56,/* lineNo */
  21,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtECInfo c10_e_emlrtECI = { 1,/* nDims */
  59,                                  /* lineNo */
  28,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtECInfo c10_f_emlrtECI = { -1,/* nDims */
  59,                                  /* lineNo */
  13,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_ui_emlrtRTEI = { 62,/* lineNo */
  21,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtRTEInfo c10_vi_emlrtRTEI = { 64,/* lineNo */
  25,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtECInfo c10_g_emlrtECI = { 1,/* nDims */
  67,                                  /* lineNo */
  32,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtECInfo c10_h_emlrtECI = { -1,/* nDims */
  67,                                  /* lineNo */
  17,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtECInfo c10_i_emlrtECI = { -1,/* nDims */
  79,                                  /* lineNo */
  13,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtECInfo c10_j_emlrtECI = { -1,/* nDims */
  80,                                  /* lineNo */
  13,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtECInfo c10_k_emlrtECI = { 1,/* nDims */
  88,                                  /* lineNo */
  22,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtECInfo c10_m_emlrtECI = { 2,/* nDims */
  88,                                  /* lineNo */
  22,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtECInfo c10_o_emlrtECI = { 1,/* nDims */
  88,                                  /* lineNo */
  18,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtECInfo c10_p_emlrtECI = { 1,/* nDims */
  90,                                  /* lineNo */
  12,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtECInfo c10_q_emlrtECI = { 1,/* nDims */
  91,                                  /* lineNo */
  12,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m"/* pName */
};

static emlrtDCInfo c10_jo_emlrtDCI = { 30,/* lineNo */
  5,                                   /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtDCInfo c10_ko_emlrtDCI = { 30,/* lineNo */
  5,                                   /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  4                                    /* checkKind */
};

static emlrtDCInfo c10_mo_emlrtDCI = { 31,/* lineNo */
  5,                                   /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtDCInfo c10_oo_emlrtDCI = { 31,/* lineNo */
  5,                                   /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  4                                    /* checkKind */
};

static emlrtDCInfo c10_po_emlrtDCI = { 30,/* lineNo */
  19,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtDCInfo c10_qo_emlrtDCI = { 30,/* lineNo */
  19,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  4                                    /* checkKind */
};

static emlrtDCInfo c10_ro_emlrtDCI = { 30,/* lineNo */
  42,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  1                                    /* checkKind */
};

static emlrtDCInfo c10_so_emlrtDCI = { 30,/* lineNo */
  42,                                  /* colNo */
  "TransformToDenseFormulation",       /* fName */
  "C:\\Users\\stefa\\Documents\\EEPACC_MPC_CasADi_MATLAB\\ACCMPC-ABO_CasADi\\Functions\\MPCs\\TransformToDenseFormulation.m",/* pName */
  4                                    /* checkKind */
};

static emlrtBCInfo c10_mo_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "quadprog",                          /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\eml\\quadprog.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_oo_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "checkBounds",                       /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\shared\\optimlib\\+optim\\+coder\\+validate\\checkBounds.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_po_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "computePhaseOneRelativeTolerances", /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+stopping\\computePhaseOneRelativeTolerances.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_qo_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "compressBounds",                    /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+initialize\\compressBounds.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_ro_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "loadProblem",                       /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\loadProblem.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_so_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "initActiveSet",                     /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\initActiveSet.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_to_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "updateRelativeTolerancesForPhaseTwo",/* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+stopping\\updateRelativeTolerancesForPhaseTwo."
  "p",                                 /* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_uo_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "snap_bounds",                       /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\snap_bounds.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_vo_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "RemoveDependentIneq_",              /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+initialize\\RemoveDependentIneq_.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_wo_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "removeConstr",                      /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\removeConstr.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_xo_emlrtBCI = { 1,/* iFirst */
  6,                                   /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "removeConstr",                      /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\removeConstr.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_yo_emlrtBCI = { 1,/* iFirst */
  5,                                   /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "removeConstr",                      /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\removeConstr.p",/* pName */
  3                                    /* checkKind */
};

static emlrtBCInfo c10_ap_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "RemoveDependentEq_",                /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+initialize\\RemoveDependentEq_.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_bp_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "ComputeNumDependentEq_",            /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+initialize\\ComputeNumDependentEq_.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_cp_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "IndexOfDependentEq_",               /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+initialize\\IndexOfDependentEq_.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_dp_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "countsort",                         /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+utils\\countsort.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_ep_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "removeEqConstr",                    /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\removeEqConstr.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_fp_emlrtBCI = { 1,/* iFirst */
  6,                                   /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "removeEqConstr",                    /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\removeEqConstr.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_gp_emlrtBCI = { 1,/* iFirst */
  5,                                   /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "removeEqConstr",                    /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\removeEqConstr.p",/* pName */
  3                                    /* checkKind */
};

static emlrtBCInfo c10_hp_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "moveConstraint_",                   /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\moveConstraint_.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_ip_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "feasibleX0ForWorkingSet",           /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+initialize\\feasibleX0ForWorkingSet.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_jp_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "factorQR",                          /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+QRManager\\factorQR.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_kp_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "maxConstraintViolation",            /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\maxConstraintViolation.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_mp_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "maxConstraintViolation_AMats_nonregularized_",/* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\maxConstraintViolation_AMats_nonre"
  "gularized_.p",                      /* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_op_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "maxConstraintViolation_AMats_regularized_",/* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\maxConstraintViolation_AMats_regul"
  "arized_.p",                         /* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_pp_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "removeAllIneqConstr",               /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\removeAllIneqConstr.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_qp_emlrtBCI = { 1,/* iFirst */
  6,                                   /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "removeAllIneqConstr",               /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\removeAllIneqConstr.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_rp_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "phaseone",                          /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\phaseone.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_sp_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "isActive",                          /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\isActive.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_tp_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "setProblemType",                    /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\setProblemType.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_up_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "modifyOverheadPhaseOne_",           /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\modifyOverheadPhaseOne_.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_vp_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "modifyOverheadRegularized_",        /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\modifyOverheadRegularized_.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_wp_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "computeFval",                       /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+Objective\\computeFval.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_xp_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "linearFormReg_",                    /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+Objective\\linearFormReg_.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_yp_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "linearForm_",                       /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+Objective\\linearForm_.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_aq_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "iterate",                           /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\iterate.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_bq_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "addConstrUpdateRecords_",           /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\addConstrUpdateRecords_.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_cq_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "find_neg_lambda",                   /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\find_neg_lambda.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_dq_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "addBoundToActiveSetMatrix_",        /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\addBoundToActiveSetMatrix_.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_eq_emlrtBCI = { 1,/* iFirst */
  0,                                   /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "addAineqConstr",                    /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\addAineqConstr.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_fq_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "addAineqConstr",                    /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+WorkingSet\\addAineqConstr.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_gq_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "computeGrad_StoreHx",               /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+Objective\\computeGrad_StoreHx.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_hq_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "computeFval_ReuseHx",               /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+Objective\\computeFval_ReuseHx.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_iq_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "squareQ_appendCol",                 /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+QRManager\\squareQ_appendCol.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_jq_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "deleteColMoveEnd",                  /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+QRManager\\deleteColMoveEnd.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_kq_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "compute_deltax",                    /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\compute_deltax.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_mq_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "factor",                            /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+DynamicRegCholManager\\factor.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_oq_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "solve",                             /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+DynamicRegCholManager\\solve.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_pq_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "partialColLDL3_",                   /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+DynamicRegCholManager\\partialColLDL3_.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_qq_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "fullColLDL2_",                      /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+DynamicRegCholManager\\fullColLDL2_.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_rq_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "isNonDegenerate",                   /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+QRManager\\isNonDegenerate.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_sq_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "compute_lambda",                    /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\compute_lambda.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_tq_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "feasibleratiotest",                 /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\feasibleratiotest.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_uq_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "ratiotest",                         /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\ratiotest.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_vq_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "checkStoppingAndUpdateFval",        /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+stopping\\checkStoppingAndUpdateFval.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_wq_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "computeFirstOrderOpt",              /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+parseoutput\\computeFirstOrderOpt.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_xq_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "computeGrad",                       /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+Objective\\computeGrad.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_yq_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "sortLambdaQP",                      /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+parseoutput\\sortLambdaQP.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_ar_emlrtBCI = { -1,/* iFirst */
  -1,                                  /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "dealLambdaIntoStruct",              /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+parseoutput\\dealLambdaIntoStruct.p",/* pName */
  0                                    /* checkKind */
};

static emlrtBCInfo c10_br_emlrtBCI = { 1,/* iFirst */
  0,                                   /* iLast */
  1,                                   /* lineNo */
  1,                                   /* colNo */
  "",                                  /* aName */
  "dealLambdaIntoStruct",              /* fName */
  "C:\\Program Files\\MATLAB\\R2023b\\toolbox\\optim\\+optim\\+coder\\+qpactiveset\\+parseoutput\\dealLambdaIntoStruct.p",/* pName */
  3                                    /* checkKind */
};

static char_T c10_cv[31] = { 'C', 'o', 'd', 'e', 'r', ':', 't', 'o', 'o', 'l',
  'b', 'o', 'x', ':', 'p', 'o', 'w', 'e', 'r', '_', 'd', 'o', 'm', 'a', 'i', 'n',
  'E', 'r', 'r', 'o', 'r' };

static c10_struct_g7LanElifcGF2oK3jOrI5C c10_r = { 2620.0,/* m */
  4.614,                               /* A_f */
  0.46,                                /* c_d */
  3.52,                                /* L */
  1.2,                                 /* h_g */
  0.45,                                /* WD_s_F */
  1.584,                               /* L_f */
  1.936,                               /* L_r */
  275.0,                               /* F0 */
  0.0,                                 /* F1 */
  1.305072,                            /* F2 */
  -2.134,                              /* k00 */
  0.01164,                             /* k10 */
  0.01041,                             /* k01 */
  -1.178,                              /* p00 */
  0.1154,                              /* p10 */
  0.001764,                            /* p01 */
  125000.0,                            /* P_m_max */
  250.0,                               /* T_m_max */
  502.6548245743669,                   /* omega_m_r */
  1193.8052083641214,                  /* omega_m_max */
  0.0107,                              /* c_r */
  0.361,                               /* R_w */
  9.665,                               /* beta_gb */
  1.0,                                 /* beta_fd */
  26.7729,                             /* phi */

  { 3.9682539682539679, 6.6137566137566131, 7.9365079365079358,
    10.582010582010581, 14.550264550264549, 18.518518518518519,
    22.486772486772484 },              /* upSpd */

  { 1.3888888888888888, 6.9444444444444446, 5.5555555555555554,
    8.3333333333333339, 11.111111111111111, 13.888888888888889,
    16.666666666666668 },              /* downSpd */

  { 4.714, 3.314, 2.106, 1.667, 1.285, 1.0, 0.839, 0.667 },/* tau_gb */
  3.615,                               /* tau_fd */
  0.88359999999999994,                 /* eta_drive */
  353.0,                               /* U_N */
  94.0,                                /* Q_N */
  1.1952000000000001E+8,               /* E_b_gross */
  9.792E+7,                            /* E_b_net */
  41.666666666666664,                  /* v_max */
  7.3,                                 /* t_acc */
  471.6,                               /* E_v */
  300000.0,                            /* D_r */
  0.95,                                /* eta_i */
  0.985,                               /* eta_gb */
  0.93,                                /* eta_fd */
  0.9161,                              /* eta_TF */
  1.05,                                /* lambda */
  250.0,                               /* P_aux */
  0.8,                                 /* mu */
  1.225,                               /* rho_a */
  9.81,                                /* g */
  1.3                                  /* zeta_a */
};

static char_T c10_cv1[45] = { 'C', 'o', 'd', 'e', 'r', ':', 't', 'o', 'o', 'l',
  'b', 'o', 'x', ':', 'm', 't', 'i', 'm', 'e', 's', '_', 'n', 'o', 'D', 'y', 'n',
  'a', 'm', 'i', 'c', 'S', 'c', 'a', 'l', 'a', 'r', 'E', 'x', 'p', 'a', 'n', 's',
  'i', 'o', 'n' };

static char_T c10_cv2[15] = { 'M', 'A', 'T', 'L', 'A', 'B', ':', 'i', 'n', 'n',
  'e', 'r', 'd', 'i', 'm' };

static char_T c10_cv3[30] = { 'o', 'p', 't', 'i', 'm', 'l', 'i', 'b', '_', 'c',
  'o', 'd', 'e', 'g', 'e', 'n', ':', 'c', 'o', 'm', 'm', 'o', 'n', ':', 'E', 'm',
  'p', 't', 'y', 'X' };

static char_T c10_cv4[45] = { 'o', 'p', 't', 'i', 'm', 'l', 'i', 'b', '_', 'c',
  'o', 'd', 'e', 'g', 'e', 'n', ':', 'c', 'o', 'm', 'm', 'o', 'n', ':', 'I', 'n',
  'f', 'N', 'a', 'N', 'C', 'o', 'm', 'p', 'l', 'e', 'x', 'D', 'e', 't', 'e', 'c',
  't', 'e', 'd' };

static char_T c10_cv5[12] = { 'M', 'A', 'T', 'L', 'A', 'B', ':', 'n', 'o', 'm',
  'e', 'm' };

static char_T c10_cv6[33] = { 'C', 'o', 'd', 'e', 'r', ':', 't', 'o', 'o', 'l',
  'b', 'o', 'x', ':', 'L', 'A', 'P', 'A', 'C', 'K', 'C', 'a', 'l', 'l', 'E', 'r',
  'r', 'o', 'r', 'I', 'n', 'f', 'o' };

/* Function Declarations */
static void initialize_c10_ACCMPC(SFc10_ACCMPCInstanceStruct *chartInstance);
static void initialize_params_c10_ACCMPC(SFc10_ACCMPCInstanceStruct
  *chartInstance);
static void mdl_start_c10_ACCMPC(SFc10_ACCMPCInstanceStruct *chartInstance);
static void mdl_terminate_c10_ACCMPC(SFc10_ACCMPCInstanceStruct *chartInstance);
static void mdl_setup_runtime_resources_c10_ACCMPC(SFc10_ACCMPCInstanceStruct
  *chartInstance);
static void mdl_cleanup_runtime_resources_c10_ACCMPC(SFc10_ACCMPCInstanceStruct *
  chartInstance);
static void enable_c10_ACCMPC(SFc10_ACCMPCInstanceStruct *chartInstance);
static void disable_c10_ACCMPC(SFc10_ACCMPCInstanceStruct *chartInstance);
static void sf_gateway_c10_ACCMPC(SFc10_ACCMPCInstanceStruct *chartInstance);
static void ext_mode_exec_c10_ACCMPC(SFc10_ACCMPCInstanceStruct *chartInstance);
static void c10_update_jit_animation_c10_ACCMPC(SFc10_ACCMPCInstanceStruct
  *chartInstance);
static void c10_do_animation_call_c10_ACCMPC(SFc10_ACCMPCInstanceStruct
  *chartInstance);
static const mxArray *get_sim_state_c10_ACCMPC(SFc10_ACCMPCInstanceStruct
  *chartInstance);
static void set_sim_state_c10_ACCMPC(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_st);
static void initSimStructsc10_ACCMPC(SFc10_ACCMPCInstanceStruct *chartInstance);
static void initSubchartIOPointersc10_ACCMPC(SFc10_ACCMPCInstanceStruct
  *chartInstance);
static void c10_CreateQP_ABSimulink(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s1bpVdlY1OIZfsh1YT30byD *c10_b_OPTsettings,
  real_T c10_b_n_x, real_T c10_b_n_u, real_T c10_s_0, real_T c10_v_0, real_T
  c10_b_s_est[20], real_T c10_b_v_est[20], real_T c10_b_s_tv_est[20], real_T
  c10_b_a_minus1, coder::array<real_T, 2U> &c10_c_H, real_T c10_c_data[],
  int32_T c10_c_size[1], coder::array<real_T, 2U> &c10_c_G, real_T
  c10_z_lb_data[], int32_T c10_z_lb_size[1], real_T c10_z_ub_data[], int32_T
  c10_z_ub_size[1], real_T c10_g_lb_data[], int32_T c10_g_lb_size[1], real_T
  c10_g_ub_data[], int32_T c10_g_ub_size[1]);
static void c10_SetParametersInternally(SFc10_ACCMPCInstanceStruct
  *chartInstance, c10_struct_g7LanElifcGF2oK3jOrI5C *c10_b_V);
static void c10_LUTgearInternally(SFc10_ACCMPCInstanceStruct *chartInstance,
  c10_captured_var *c10_b_V, real_T c10_b_v_measured, real_T *c10_tau_measured,
  real_T *c10_gear_measured);
static void c10_EstimateBoundsInternally(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_captured_var *c10_b_V,
  c10_captured_var_1 *c10_b_Tvec, c10_s1bpVdlY1OIZfsh1YT30byD *c10_b_OPTsettings,
  real_T c10_b_s_est[20], real_T c10_b_v_est[20], real_T c10_slope_est[20],
  real_T c10_v_lim_max[20], real_T c10_v_curv_max[20], real_T c10_a_min_est[20],
  real_T c10_a_max_est[20], real_T c10_j_min_est[20], real_T c10_j_max_est[20],
  real_T c10_tau_est[20]);
static void c10_cat(SFc10_ACCMPCInstanceStruct *chartInstance, real_T
                    c10_varargin_1[20], real_T c10_varargin_2[20], real_T c10_y
                    [40]);
static void c10_minimum(SFc10_ACCMPCInstanceStruct *chartInstance, real_T c10_x
  [40], real_T c10_b_ex[20]);
static void c10_indexShapeCheck(SFc10_ACCMPCInstanceStruct *chartInstance);
static boolean_T c10_fltpower_domain_error(SFc10_ACCMPCInstanceStruct
  *chartInstance);
static void c10_toLogicalCheck(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_x);
static void c10_all(SFc10_ACCMPCInstanceStruct *chartInstance, const emlrtStack *
                    c10_sp, coder::array<boolean_T, 2U> &c10_x, boolean_T
                    c10_y_data[], int32_T c10_y_size[1]);
static void c10_check_forloop_overflow_error(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp);
static void c10_nullAssignment(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_x, boolean_T c10_idx_data[],
  coder::array<real_T, 2U> &c10_b_x);
static void c10_b_indexShapeCheck(SFc10_ACCMPCInstanceStruct *chartInstance);
static void c10_TransformToDenseFormulation(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, real_T c10_b_N_hor, coder::array<
  real_T, 3U> &c10_A, coder::array<real_T, 3U> &c10_c_B, coder::array<real_T, 2U>
  &c10_b_D, coder::array<real_T, 2U> &c10_H_sparse, real_T c10_c_sparse_data[],
  coder::array<real_T, 2U> &c10_G_sparse, real_T c10_g_lb_sparse_data[], int32_T
  c10_g_lb_sparse_size[1], real_T c10_g_ub_sparse_data[], int32_T
  c10_g_ub_sparse_size[1], real_T c10_b_n_x, real_T c10_b_n_u, real_T
  c10_b_s_curr, real_T c10_b_v_curr, coder::array<real_T, 2U> &c10_c_H, coder::
  array<real_T, 1U> &c10_b_c, coder::array<real_T, 2U> &c10_c_G, real_T
  c10_g_lb_data[], int32_T c10_g_lb_size[1], real_T c10_g_ub_data[], int32_T
  c10_g_ub_size[1], coder::array<real_T, 2U> &c10_Psi, coder::array<real_T, 1U>
  &c10_d);
static void c10_eye(SFc10_ACCMPCInstanceStruct *chartInstance, const emlrtStack *
                    c10_sp, real_T c10_varargin_1, real_T c10_I_data[], int32_T
                    c10_I_size[2]);
static void c10_squeeze(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, real_T c10_e_a_data[], int32_T c10_d_a_size[3], real_T
  c10_b_data[], int32_T c10_b_b_size[2]);
static void c10_dynamic_size_checks(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_b_a, coder::array<
  real_T, 2U> &c10_b, int32_T c10_innerDimA, int32_T c10_innerDimB);
static void c10_mtimes(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_A, coder::array<real_T, 2U>
  &c10_c_B, coder::array<real_T, 2U> &c10_g_C);
static void c10_b_mtimes(SFc10_ACCMPCInstanceStruct *chartInstance, real_T
  c10_b_A_data[], real_T c10_c_B[2], real_T c10_b_C_data[], int32_T
  c10_b_C_size[1]);
static void c10_c_mtimes(SFc10_ACCMPCInstanceStruct *chartInstance, real_T
  c10_b_A_data[], real_T c10_b_B_data[], real_T c10_b_C_data[], int32_T
  c10_b_C_size[1]);
static void c10_d_mtimes(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_A, coder::array<real_T, 2U>
  &c10_c_B, coder::array<real_T, 2U> &c10_g_C);
static void c10_b_dynamic_size_checks(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_b_a, int32_T
  c10_innerDimA, int32_T c10_innerDimB);
static void c10_e_mtimes(SFc10_ACCMPCInstanceStruct *chartInstance, coder::array<
  real_T, 2U> &c10_A, coder::array<real_T, 1U> &c10_c_B, real_T c10_b_C_data[],
  int32_T c10_b_C_size[1]);
static void c10_f_mtimes(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_A, real_T c10_b_B_data[],
  coder::array<real_T, 1U> &c10_g_C);
static void c10_quadprog(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_c_H, coder::array<real_T, 1U>
  &c10_f, coder::array<real_T, 2U> &c10_Aeq, real_T c10_beq_data[], int32_T
  c10_beq_size[1], real_T c10_lb_data[], int32_T c10_lb_size[1], real_T
  c10_ub_data[], int32_T c10_ub_size[1], coder::array<real_T, 2U> &c10_b_x0,
  c10_scZhlMkNxPxOgM0FLkVrfPH *c10_b_options, coder::array<real_T, 2U> &c10_x,
  real_T *c10_b_fval, real_T *c10_b_exitflag, c10_skLNHjLOlx0hU1nw1PS4uP
  *c10_output, c10_s_rT6K4jgKQs07oLkxgXMCC *c10_lambda);
static void c10_checkQuadraticObjective(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_c_H,
  coder::array<real_T, 1U> &c10_f);
static boolean_T c10_b_all(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<boolean_T, 1U> &c10_x);
static void c10_checkX0(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_b_x0);
static real_T c10_checkLinearInputs(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, int32_T c10_nVar, coder::array<real_T, 2U> &c10_Aeq,
  real_T c10_beq_data[], int32_T c10_beq_size[1], real_T c10_lb_data[], int32_T
  c10_lb_size[1], real_T c10_ub_data[], int32_T c10_ub_size[1]);
static boolean_T c10_any(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, boolean_T c10_x_data[], int32_T c10_x_size[1]);
static void c10_factoryConstruct(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, int32_T c10_mEqMax, int32_T c10_nVar, int32_T
  c10_nVarMax, int32_T c10_mConstrMax, c10_s_flSfA4tA26WyP6kjP59eL *c10_b_obj);
static void c10_compressBounds(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, int32_T c10_nVar, coder::array<int32_T, 1U> &c10_indexLB,
  coder::array<int32_T, 1U> &c10_indexUB, coder::array<int32_T, 1U>
  &c10_indexFixed, real_T c10_lb_data[], int32_T c10_lb_size[1], real_T
  c10_ub_data[], int32_T c10_ub_size[1], coder::array<int32_T, 1U>
  &c10_b_indexLB, int32_T *c10_mLB, coder::array<int32_T, 1U> &c10_b_indexUB,
  int32_T *c10_mUB, coder::array<int32_T, 1U> &c10_b_indexFixed, int32_T
  *c10_mFixed);
static void c10_loadProblem(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL *c10_b_obj, int32_T c10_mEq,
  int32_T c10_mLinEq, coder::array<real_T, 2U> &c10_Aeq, real_T c10_beq_data[],
  int32_T c10_beq_size[1], int32_T c10_mLB, real_T c10_lb_data[], int32_T
  c10_lb_size[1], int32_T c10_mUB, real_T c10_ub_data[], int32_T c10_ub_size[1],
  int32_T c10_mFixed, int32_T c10_mConstrMax, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_c_obj);
static void c10_initActiveSet(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL *c10_b_obj,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_c_obj);
static real_T c10_computePhaseOneRelativeTolerances(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_i_workingset);
static real_T c10_updateRelativeTolerancesForPhaseTwo(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, real_T c10_tol, coder::array<real_T,
  2U> &c10_c_H, coder::array<real_T, 1U> &c10_f);
static void c10_validateattributes(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_b_a);
static void c10_driver(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_c_H, coder::array<real_T, 1U>
  &c10_f, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_memspace, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_i_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager,
  c10_s_lryvQQZbN23ozlLWy4I3pD *c10_cholmanager, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_objective, c10_scZhlMkNxPxOgM0FLkVrfPH *c10_b_options,
  c10_sL9bDKomAYkxZSVrG9w6En c10_runTimeOptions, c10_s_pF7WiHvRtoO0ktfmCER3HD
  *c10_b_solution, c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_b_memspace,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_j_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E
  *c10_c_qrmanager, c10_s_lryvQQZbN23ozlLWy4I3pD *c10_b_cholmanager,
  c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_objective);
static void c10_PresolveWorkingSet(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_memspace, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_i_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager,
  c10_scZhlMkNxPxOgM0FLkVrfPH *c10_b_options, c10_s_pF7WiHvRtoO0ktfmCER3HD
  *c10_b_solution, c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_b_memspace,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_j_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E
  *c10_c_qrmanager, c10_scZhlMkNxPxOgM0FLkVrfPH *c10_c_options);
static void c10_RemoveDependentEq_(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_memspace,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_i_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E
  *c10_b_qrmanager, int32_T *c10_nDepInd, c10_s_pIaUYPkQBTqVmAKxFPiGQF
  *c10_b_memspace, c10_s_flSfA4tA26WyP6kjP59eL *c10_j_workingset,
  c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_c_qrmanager);
static void c10_factorQRE(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_obj, int32_T c10_mrows,
  int32_T c10_ncols, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_c_obj);
static void c10_computeQ_(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_obj, int32_T c10_nrows,
  c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_c_obj);
static void c10_moveConstraint_(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL *c10_b_obj, int32_T
  c10_idx_global_start, int32_T c10_idx_global_dest, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_c_obj);
static void c10_countsort(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<int32_T, 1U> &c10_x, int32_T c10_xLen, coder::
  array<int32_T, 1U> &c10_workspace, int32_T c10_xMin, int32_T c10_xMax, coder::
  array<int32_T, 1U> &c10_b_x, coder::array<int32_T, 1U> &c10_b_workspace);
static void c10_feasibleX0ForWorkingSet(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, coder::array<real_T, 2U>
  &c10_workspace, coder::array<real_T, 1U> &c10_xCurrent,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_i_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E
  *c10_b_qrmanager, coder::array<real_T, 1U> &c10_b_xCurrent, boolean_T
  *c10_nonDegenerateWset, coder::array<real_T, 2U> &c10_b_workspace,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_j_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E
  *c10_c_qrmanager);
static void c10_xgeqrf(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_A, int32_T c10_m, int32_T
  c10_f_n, coder::array<real_T, 2U> &c10_cb_A, coder::array<real_T, 1U> &c10_tau);
static void c10_factorQR(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_obj, coder::array<
  real_T, 1U> &c10_A, int32_T c10_mrows, int32_T c10_ncols, int32_T c10_b_ldA,
  c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_c_obj);
static void c10_maxConstraintViolation(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL *c10_b_obj, coder::array<
  real_T, 2U> &c10_x, real_T *c10_e_v, c10_s_flSfA4tA26WyP6kjP59eL *c10_c_obj);
static void c10_xgemv(SFc10_ACCMPCInstanceStruct *chartInstance, const
                      emlrtStack *c10_sp, int32_T c10_m, int32_T c10_f_n, coder::
                      array<real_T, 1U> &c10_A, int32_T c10_lda, coder::array<
                      real_T, 2U> &c10_x, real_T c10_y_data[], int32_T
                      c10_y_size[1], real_T c10_b_y_data[], int32_T
                      c10_b_y_size[1]);
static void c10_b_maxConstraintViolation(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_b_obj, coder::array<real_T, 2U> &c10_x, int32_T c10_ix0, real_T *c10_e_v,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_c_obj);
static void c10_b_xgemv(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, int32_T c10_m, int32_T c10_f_n, coder::array<real_T, 1U>
  &c10_A, int32_T c10_lda, coder::array<real_T, 2U> &c10_x, int32_T c10_ix0,
  real_T c10_y_data[], int32_T c10_y_size[1], real_T c10_b_y_data[], int32_T
  c10_b_y_size[1]);
static void c10_c_maxConstraintViolation(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_b_obj, coder::array<real_T, 1U> &c10_x, real_T *c10_e_v,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_c_obj);
static void c10_c_xgemv(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, int32_T c10_m, int32_T c10_f_n, coder::array<real_T, 1U>
  &c10_A, int32_T c10_lda, coder::array<real_T, 1U> &c10_x, real_T c10_y_data[],
  int32_T c10_y_size[1], real_T c10_b_y_data[], int32_T c10_b_y_size[1]);
static void c10_removeAllIneqConstr(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL *c10_b_obj,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_c_obj);
static void c10_phaseone(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_c_H, coder::array<real_T, 1U>
  &c10_f, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_memspace, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_i_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager,
  c10_s_lryvQQZbN23ozlLWy4I3pD *c10_cholmanager, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_objective, c10_scZhlMkNxPxOgM0FLkVrfPH *c10_b_options,
  c10_sL9bDKomAYkxZSVrG9w6En c10_runTimeOptions, c10_s_pF7WiHvRtoO0ktfmCER3HD
  *c10_b_solution, c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_b_memspace,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_j_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E
  *c10_c_qrmanager, c10_s_lryvQQZbN23ozlLWy4I3pD *c10_b_cholmanager,
  c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_objective, c10_scZhlMkNxPxOgM0FLkVrfPH
  *c10_c_options, c10_sL9bDKomAYkxZSVrG9w6En *c10_b_runTimeOptions);
static void c10_setProblemType(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL *c10_b_obj, int32_T
  c10_PROBLEM_TYPE, c10_s_flSfA4tA26WyP6kjP59eL *c10_c_obj);
static void c10_modifyOverheadPhaseOne_(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_b_obj, c10_s_flSfA4tA26WyP6kjP59eL *c10_c_obj);
static void c10_modifyOverheadRegularized_(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_b_obj, c10_s_flSfA4tA26WyP6kjP59eL *c10_c_obj);
static void c10_computeFval(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_obj, coder::array<
  real_T, 2U> &c10_workspace, coder::array<real_T, 2U> &c10_c_H, coder::array<
  real_T, 1U> &c10_f, coder::array<real_T, 1U> &c10_x, real_T *c10_val, coder::
  array<real_T, 2U> &c10_b_workspace, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_c_obj);
static void c10_linearForm_(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_obj, coder::array<
  real_T, 2U> &c10_workspace, coder::array<real_T, 2U> &c10_c_H, coder::array<
  real_T, 1U> &c10_f, coder::array<real_T, 1U> &c10_x, coder::array<real_T, 2U>
  &c10_b_workspace);
static void c10_iterate(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_c_H, coder::array<real_T, 1U>
  &c10_f, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_memspace, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_i_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager,
  c10_s_lryvQQZbN23ozlLWy4I3pD *c10_cholmanager, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_objective, c10_scZhlMkNxPxOgM0FLkVrfPH *c10_b_options,
  c10_sL9bDKomAYkxZSVrG9w6En c10_runTimeOptions, c10_s_pF7WiHvRtoO0ktfmCER3HD
  *c10_b_solution, c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_b_memspace,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_j_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E
  *c10_c_qrmanager, c10_s_lryvQQZbN23ozlLWy4I3pD *c10_b_cholmanager,
  c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_objective);
static void c10_computeGrad_StoreHx(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_obj, coder::
  array<real_T, 2U> &c10_c_H, coder::array<real_T, 1U> &c10_f, coder::array<
  real_T, 1U> &c10_x, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_c_obj);
static void c10_d_xgemv(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, int32_T c10_m, int32_T c10_f_n, coder::array<real_T, 2U>
  &c10_A, int32_T c10_lda, coder::array<real_T, 1U> &c10_x, coder::array<real_T,
  1U> &c10_y, coder::array<real_T, 1U> &c10_b_y);
static void c10_computeFval_ReuseHx(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_obj, coder::
  array<real_T, 2U> &c10_workspace, coder::array<real_T, 1U> &c10_f, coder::
  array<real_T, 1U> &c10_x, real_T *c10_val, coder::array<real_T, 2U>
  &c10_b_workspace, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_c_obj);
static void c10_xcopy(SFc10_ACCMPCInstanceStruct *chartInstance, const
                      emlrtStack *c10_sp, int32_T c10_f_n, coder::array<real_T,
                      1U> &c10_y, coder::array<real_T, 1U> &c10_b_y);
static void c10_squareQ_appendCol(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_obj, coder::
  array<real_T, 1U> &c10_vec, int32_T c10_iv0, c10_s_l1Gll5dfO9DpqQrvRqAf7E
  *c10_c_obj);
static void c10_deleteColMoveEnd(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_obj, int32_T
  c10_idx, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_c_obj);
static void c10_compute_deltax(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_c_H,
  c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution, c10_s_pIaUYPkQBTqVmAKxFPiGQF
  *c10_memspace, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager,
  c10_s_lryvQQZbN23ozlLWy4I3pD *c10_cholmanager, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_objective, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_b_solution,
  c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_b_memspace, c10_s_l1Gll5dfO9DpqQrvRqAf7E
  *c10_c_qrmanager, c10_s_lryvQQZbN23ozlLWy4I3pD *c10_b_cholmanager,
  c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_objective);
static void c10_factor(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_lryvQQZbN23ozlLWy4I3pD *c10_b_obj, coder::array<
  real_T, 2U> &c10_A, int32_T c10_ndims, int32_T c10_b_ldA,
  c10_s_lryvQQZbN23ozlLWy4I3pD *c10_c_obj);
static void c10_partialColLDL3_(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_lryvQQZbN23ozlLWy4I3pD *c10_b_obj, int32_T
  c10_LD_offset, int32_T c10_NColsRemain, real_T c10_REG_PRIMAL,
  c10_s_lryvQQZbN23ozlLWy4I3pD *c10_c_obj);
static void c10_fullColLDL2_(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_lryvQQZbN23ozlLWy4I3pD *c10_b_obj, int32_T
  c10_LD_offset, int32_T c10_NColsRemain, real_T c10_REG_PRIMAL,
  c10_s_lryvQQZbN23ozlLWy4I3pD *c10_c_obj);
static void c10_xger(SFc10_ACCMPCInstanceStruct *chartInstance, const emlrtStack
                     *c10_sp, int32_T c10_m, int32_T c10_f_n, real_T c10_alpha1,
                     coder::array<real_T, 1U> &c10_x, coder::array<real_T, 1U>
                     &c10_y, coder::array<real_T, 1U> &c10_A, int32_T c10_ia0,
                     int32_T c10_lda, coder::array<real_T, 1U> &c10_cb_A);
static void c10_b_fullColLDL2_(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_lryvQQZbN23ozlLWy4I3pD *c10_b_obj, int32_T
  c10_NColsRemain, real_T c10_REG_PRIMAL, c10_s_lryvQQZbN23ozlLWy4I3pD
  *c10_c_obj);
static void c10_e_xgemv(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, int32_T c10_m, int32_T c10_f_n, coder::array<real_T, 2U>
  &c10_A, int32_T c10_ia0, int32_T c10_lda, coder::array<real_T, 2U> &c10_x,
  coder::array<real_T, 1U> &c10_y, coder::array<real_T, 1U> &c10_b_y);
static void c10_compute_lambda(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_workspace,
  c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_objective, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager,
  c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_b_solution, coder::array<real_T, 2U>
  &c10_b_workspace, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_objective,
  c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_c_qrmanager);
static void c10_feasibleratiotest(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution, coder::
  array<real_T, 2U> &c10_workspace, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_i_workingset, boolean_T c10_isPhaseOne, real_T *c10_alpha, boolean_T
  *c10_newBlocking, int32_T *c10_constrType, int32_T *c10_constrIdx, coder::
  array<real_T, 2U> &c10_b_workspace);
static void c10_ratiotest(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution, coder::array<
  real_T, 2U> &c10_workspace, c10_s_flSfA4tA26WyP6kjP59eL *c10_i_workingset,
  real_T c10_toldelta, real_T *c10_alpha, boolean_T *c10_newBlocking, int32_T
  *c10_constrType, int32_T *c10_constrIdx, coder::array<real_T, 2U>
  &c10_b_workspace, real_T *c10_b_toldelta);
static void c10_addBoundToActiveSetMatrix_(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_b_obj, int32_T c10_idx_local, c10_s_flSfA4tA26WyP6kjP59eL *c10_c_obj);
static void c10_checkStoppingAndUpdateFval(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, int32_T c10_activeSetChangeID, coder::
  array<real_T, 1U> &c10_f, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_memspace, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_objective, c10_s_flSfA4tA26WyP6kjP59eL *c10_i_workingset,
  c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager, c10_scZhlMkNxPxOgM0FLkVrfPH
  *c10_b_options, c10_sL9bDKomAYkxZSVrG9w6En c10_runTimeOptions, boolean_T
  c10_updateFval, int32_T *c10_b_activeSetChangeID, c10_s_pF7WiHvRtoO0ktfmCER3HD
  *c10_b_solution, c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_b_memspace,
  c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_objective, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_j_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_c_qrmanager);
static void c10_computeFirstOrderOpt(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_objective, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_i_workingset, coder::array<real_T, 2U> &c10_workspace,
  c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_b_solution, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_b_objective, coder::array<real_T, 2U> &c10_b_workspace);
static void c10_computeGrad(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_obj, coder::array<
  real_T, 2U> &c10_c_H, coder::array<real_T, 1U> &c10_f, coder::array<real_T, 1U>
  &c10_x, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_c_obj);
static void c10_b_linearForm_(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_obj, coder::array<
  real_T, 1U> &c10_workspace, coder::array<real_T, 2U> &c10_c_H, coder::array<
  real_T, 1U> &c10_f, coder::array<real_T, 1U> &c10_x, coder::array<real_T, 1U>
  &c10_b_workspace);
static void c10_sortLambdaQP(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, real_T c10_lambda_data[], int32_T c10_lambda_size[1],
  c10_s_flSfA4tA26WyP6kjP59eL *c10_k_WorkingSet, coder::array<real_T, 2U>
  &c10_workspace, real_T c10_b_lambda_data[], int32_T c10_b_lambda_size[1],
  coder::array<real_T, 2U> &c10_b_workspace);
static void c10_dealLambdaIntoStruct(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_rT6K4jgKQs07oLkxgXMCC *c10_lambda,
  c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_k_WorkingSet, c10_s_rT6K4jgKQs07oLkxgXMCC *c10_b_lambda);
static void c10_c_indexShapeCheck(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, int32_T c10_matrixSize[2], int32_T c10_indexSize[2]);
static real_T c10_maximum(SFc10_ACCMPCInstanceStruct *chartInstance, real_T
  c10_x[3]);
static real_T c10_b_minimum(SFc10_ACCMPCInstanceStruct *chartInstance, real_T
  c10_x[3]);
static const mxArray *c10_emlrt_marshallOut(SFc10_ACCMPCInstanceStruct
  *chartInstance, const char_T c10_u[31]);
static const mxArray *c10_b_emlrt_marshallOut(SFc10_ACCMPCInstanceStruct
  *chartInstance, const char_T c10_u[39]);
static void c10_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_nullptr, const char_T *c10_identifier, real_T c10_y[4]);
static void c10_b_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId, real_T c10_y[4]);
static real_T c10_c_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_nullptr, const char_T *c10_identifier);
static real_T c10_d_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId);
static void c10_e_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, const mxArray *c10_nullptr, const char_T
  *c10_identifier, coder::array<real_T, 2U> &c10_y);
static void c10_f_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, const mxArray *c10_u, const emlrtMsgIdentifier
  *c10_parentId, coder::array<real_T, 2U> &c10_y);
static void c10_g_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, const mxArray *c10_nullptr, const char_T
  *c10_identifier, boolean_T *c10_svPtr, coder::array<real_T, 2U> &c10_y);
static void c10_h_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, const mxArray *c10_u, const emlrtMsgIdentifier
  *c10_parentId, boolean_T *c10_svPtr, coder::array<real_T, 2U> &c10_y);
static void c10_i_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, const mxArray *c10_nullptr, const char_T
  *c10_identifier, boolean_T *c10_svPtr, coder::array<real_T, 2U> &c10_y);
static void c10_j_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, const mxArray *c10_u, const emlrtMsgIdentifier
  *c10_parentId, boolean_T *c10_svPtr, coder::array<real_T, 2U> &c10_y);
static real_T c10_k_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_nullptr, const char_T *c10_identifier, boolean_T *c10_svPtr);
static real_T c10_m_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId, boolean_T
  *c10_svPtr);
static void c10_o_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, const mxArray *c10_nullptr, const char_T
  *c10_identifier, boolean_T *c10_svPtr, coder::array<real_T, 1U> &c10_y);
static void c10_p_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, const mxArray *c10_u, const emlrtMsgIdentifier
  *c10_parentId, boolean_T *c10_svPtr, coder::array<real_T, 1U> &c10_y);
static void c10_q_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_nullptr, const char_T *c10_identifier, boolean_T *c10_svPtr,
  real_T c10_y_data[], int32_T c10_y_size[1]);
static void c10_r_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId, boolean_T
  *c10_svPtr, real_T c10_y_data[], int32_T c10_y_size[1]);
static void c10_s_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_nullptr, const char_T *c10_identifier, boolean_T *c10_svPtr,
  c10_scZhlMkNxPxOgM0FLkVrfPH *c10_y);
static void c10_t_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId, boolean_T
  *c10_svPtr, c10_scZhlMkNxPxOgM0FLkVrfPH *c10_y);
static void c10_u_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId, char_T c10_y[7]);
static boolean_T c10_v_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct
  *chartInstance, const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId);
static void c10_w_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId);
static void c10_x_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId, char_T c10_y[10]);
static void c10_y_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId, char_T c10_y[8]);
static void c10_ab_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId, char_T c10_y[3]);
static void c10_bb_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId, char_T c10_y[4]);
static void c10_cb_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId, char_T c10_y[2]);
static void c10_db_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_nullptr, const char_T *c10_identifier, boolean_T *c10_svPtr,
  real_T c10_y_data[], int32_T c10_y_size[1]);
static void c10_eb_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId, boolean_T
  *c10_svPtr, real_T c10_y_data[], int32_T c10_y_size[1]);
static uint8_T c10_fb_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_nullptr, const char_T *c10_identifier);
static uint8_T c10_gb_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId);
static void c10_slStringInitializeDynamicBuffers(SFc10_ACCMPCInstanceStruct
  *chartInstance);
static void c10_chart_data_browse_helper(SFc10_ACCMPCInstanceStruct
  *chartInstance, int32_T c10_ssIdNumber, const mxArray **c10_mxData, uint8_T
  *c10_isValueTooBig);
static void c10_b_nullAssignment(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_x, boolean_T
  c10_idx_data[]);
static void c10_b_compressBounds(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, int32_T c10_nVar, coder::array<int32_T, 1U>
  &c10_indexLB, coder::array<int32_T, 1U> &c10_indexUB, coder::array<int32_T, 1U>
  &c10_indexFixed, real_T c10_lb_data[], int32_T c10_lb_size[1], real_T
  c10_ub_data[], int32_T c10_ub_size[1], int32_T *c10_mLB, int32_T *c10_mUB,
  int32_T *c10_mFixed);
static void c10_b_loadProblem(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL *c10_b_obj, int32_T c10_mEq,
  int32_T c10_mLinEq, coder::array<real_T, 2U> &c10_Aeq, real_T c10_beq_data[],
  int32_T c10_beq_size[1], int32_T c10_mLB, real_T c10_lb_data[], int32_T
  c10_lb_size[1], int32_T c10_mUB, real_T c10_ub_data[], int32_T c10_ub_size[1],
  int32_T c10_mFixed, int32_T c10_mConstrMax);
static void c10_b_initActiveSet(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL *c10_b_obj);
static void c10_b_updateRelativeTolerancesForPhaseTwo(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, real_T *c10_tol, coder::array<real_T,
  2U> &c10_c_H, coder::array<real_T, 1U> &c10_f);
static void c10_b_driver(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_c_H, coder::array<real_T, 1U>
  &c10_f, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_memspace, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_i_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager,
  c10_s_lryvQQZbN23ozlLWy4I3pD *c10_cholmanager, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_objective, c10_scZhlMkNxPxOgM0FLkVrfPH *c10_b_options,
  c10_sL9bDKomAYkxZSVrG9w6En c10_runTimeOptions);
static void c10_b_PresolveWorkingSet(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_memspace, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_i_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager);
static int32_T c10_b_RemoveDependentEq_(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_pIaUYPkQBTqVmAKxFPiGQF
  *c10_memspace, c10_s_flSfA4tA26WyP6kjP59eL *c10_i_workingset,
  c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager);
static void c10_b_factorQRE(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_obj, int32_T c10_mrows,
  int32_T c10_ncols);
static void c10_b_computeQ_(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_obj, int32_T c10_nrows);
static void c10_b_moveConstraint_(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL *c10_b_obj, int32_T
  c10_idx_global_start, int32_T c10_idx_global_dest);
static void c10_b_countsort(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<int32_T, 1U> &c10_x, int32_T c10_xLen, coder::
  array<int32_T, 1U> &c10_workspace, int32_T c10_xMin, int32_T c10_xMax);
static boolean_T c10_b_feasibleX0ForWorkingSet(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, coder::array<real_T, 2U>
  &c10_workspace, coder::array<real_T, 1U> &c10_xCurrent,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_i_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E
  *c10_b_qrmanager);
static void c10_b_xgeqrf(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_A, int32_T c10_m, int32_T
  c10_f_n, coder::array<real_T, 1U> &c10_tau);
static void c10_b_factorQR(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_obj, coder::array<
  real_T, 1U> &c10_A, int32_T c10_mrows, int32_T c10_ncols, int32_T c10_b_ldA);
static real_T c10_d_maxConstraintViolation(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_b_obj, coder::array<real_T, 2U> &c10_x);
static void c10_f_xgemv(SFc10_ACCMPCInstanceStruct *chartInstance, int32_T c10_m,
  int32_T c10_f_n, coder::array<real_T, 1U> &c10_A, int32_T c10_lda, coder::
  array<real_T, 2U> &c10_x, real_T c10_y_data[]);
static real_T c10_e_maxConstraintViolation(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_b_obj, coder::array<real_T, 2U> &c10_x, int32_T c10_ix0);
static void c10_g_xgemv(SFc10_ACCMPCInstanceStruct *chartInstance, int32_T c10_m,
  int32_T c10_f_n, coder::array<real_T, 1U> &c10_A, int32_T c10_lda, coder::
  array<real_T, 2U> &c10_x, int32_T c10_ix0, real_T c10_y_data[]);
static real_T c10_f_maxConstraintViolation(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_b_obj, coder::array<real_T, 1U> &c10_x);
static void c10_h_xgemv(SFc10_ACCMPCInstanceStruct *chartInstance, int32_T c10_m,
  int32_T c10_f_n, coder::array<real_T, 1U> &c10_A, int32_T c10_lda, coder::
  array<real_T, 1U> &c10_x, real_T c10_y_data[]);
static void c10_b_removeAllIneqConstr(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL *c10_b_obj);
static void c10_b_phaseone(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_c_H, coder::array<real_T, 1U>
  &c10_f, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_memspace, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_i_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager,
  c10_s_lryvQQZbN23ozlLWy4I3pD *c10_cholmanager, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_objective, c10_scZhlMkNxPxOgM0FLkVrfPH *c10_b_options,
  c10_sL9bDKomAYkxZSVrG9w6En *c10_runTimeOptions);
static void c10_b_setProblemType(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL *c10_b_obj, int32_T
  c10_PROBLEM_TYPE);
static void c10_b_modifyOverheadPhaseOne_(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_b_obj);
static void c10_b_modifyOverheadRegularized_(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_b_obj);
static real_T c10_b_computeFval(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_obj, coder::array<
  real_T, 2U> &c10_workspace, coder::array<real_T, 2U> &c10_c_H, coder::array<
  real_T, 1U> &c10_f, coder::array<real_T, 1U> &c10_x);
static void c10_c_linearForm_(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_obj, coder::array<
  real_T, 2U> &c10_workspace, coder::array<real_T, 2U> &c10_c_H, coder::array<
  real_T, 1U> &c10_f, coder::array<real_T, 1U> &c10_x);
static void c10_b_iterate(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_c_H, coder::array<real_T, 1U>
  &c10_f, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_memspace, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_i_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager,
  c10_s_lryvQQZbN23ozlLWy4I3pD *c10_cholmanager, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_objective, c10_scZhlMkNxPxOgM0FLkVrfPH *c10_b_options,
  c10_sL9bDKomAYkxZSVrG9w6En c10_runTimeOptions);
static void c10_b_computeGrad_StoreHx(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_obj, coder::
  array<real_T, 2U> &c10_c_H, coder::array<real_T, 1U> &c10_f, coder::array<
  real_T, 1U> &c10_x);
static void c10_i_xgemv(SFc10_ACCMPCInstanceStruct *chartInstance, int32_T c10_m,
  int32_T c10_f_n, coder::array<real_T, 2U> &c10_A, int32_T c10_lda, coder::
  array<real_T, 1U> &c10_x, coder::array<real_T, 1U> &c10_y);
static real_T c10_b_computeFval_ReuseHx(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_b_obj, coder::array<real_T, 2U> &c10_workspace, coder::array<real_T, 1U>
  &c10_f, coder::array<real_T, 1U> &c10_x);
static void c10_b_xcopy(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, int32_T c10_f_n, coder::array<real_T, 1U> &c10_y);
static void c10_b_squareQ_appendCol(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_obj, coder::
  array<real_T, 1U> &c10_vec, int32_T c10_iv0);
static void c10_b_deleteColMoveEnd(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_obj, int32_T
  c10_idx);
static void c10_b_compute_deltax(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_c_H,
  c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution, c10_s_pIaUYPkQBTqVmAKxFPiGQF
  *c10_memspace, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager,
  c10_s_lryvQQZbN23ozlLWy4I3pD *c10_cholmanager, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_objective);
static void c10_b_factor(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_lryvQQZbN23ozlLWy4I3pD *c10_b_obj, coder::array<
  real_T, 2U> &c10_A, int32_T c10_ndims, int32_T c10_b_ldA);
static void c10_b_partialColLDL3_(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_lryvQQZbN23ozlLWy4I3pD *c10_b_obj, int32_T
  c10_LD_offset, int32_T c10_NColsRemain, real_T c10_REG_PRIMAL);
static void c10_c_fullColLDL2_(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_lryvQQZbN23ozlLWy4I3pD *c10_b_obj, int32_T
  c10_LD_offset, int32_T c10_NColsRemain, real_T c10_REG_PRIMAL);
static void c10_b_xger(SFc10_ACCMPCInstanceStruct *chartInstance, int32_T c10_m,
  int32_T c10_f_n, real_T c10_alpha1, coder::array<real_T, 1U> &c10_x, coder::
  array<real_T, 1U> &c10_y, coder::array<real_T, 1U> &c10_A, int32_T c10_ia0,
  int32_T c10_lda);
static void c10_d_fullColLDL2_(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_lryvQQZbN23ozlLWy4I3pD *c10_b_obj, int32_T
  c10_NColsRemain, real_T c10_REG_PRIMAL);
static void c10_j_xgemv(SFc10_ACCMPCInstanceStruct *chartInstance, int32_T c10_m,
  int32_T c10_f_n, coder::array<real_T, 2U> &c10_A, int32_T c10_ia0, int32_T
  c10_lda, coder::array<real_T, 2U> &c10_x, coder::array<real_T, 1U> &c10_y);
static void c10_b_compute_lambda(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_workspace,
  c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_objective, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager);
static void c10_b_feasibleratiotest(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_i_workingset, boolean_T c10_isPhaseOne,
  real_T *c10_alpha, boolean_T *c10_newBlocking, int32_T *c10_constrType,
  int32_T *c10_constrIdx);
static void c10_b_ratiotest(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_i_workingset, real_T *c10_toldelta, real_T
  *c10_alpha, boolean_T *c10_newBlocking, int32_T *c10_constrType, int32_T
  *c10_constrIdx);
static void c10_b_addBoundToActiveSetMatrix_(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_b_obj, int32_T c10_idx_local);
static void c10_b_checkStoppingAndUpdateFval(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, int32_T *c10_activeSetChangeID,
  coder::array<real_T, 1U> &c10_f, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_memspace, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_objective, c10_s_flSfA4tA26WyP6kjP59eL *c10_i_workingset,
  c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager, c10_scZhlMkNxPxOgM0FLkVrfPH
  *c10_b_options, c10_sL9bDKomAYkxZSVrG9w6En c10_runTimeOptions, boolean_T
  c10_updateFval);
static void c10_b_computeFirstOrderOpt(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_objective, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_i_workingset, coder::array<real_T, 2U> &c10_workspace);
static void c10_b_computeGrad(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_obj, coder::array<
  real_T, 2U> &c10_c_H, coder::array<real_T, 1U> &c10_f, coder::array<real_T, 1U>
  &c10_x);
static void c10_d_linearForm_(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_obj, coder::array<
  real_T, 1U> &c10_workspace, coder::array<real_T, 2U> &c10_c_H, coder::array<
  real_T, 1U> &c10_f, coder::array<real_T, 1U> &c10_x);
static void c10_b_sortLambdaQP(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, real_T c10_lambda_data[], int32_T c10_lambda_size[1],
  c10_s_flSfA4tA26WyP6kjP59eL *c10_k_WorkingSet, coder::array<real_T, 2U>
  &c10_workspace);
static void c10_b_dealLambdaIntoStruct(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_rT6K4jgKQs07oLkxgXMCC *c10_lambda,
  c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_k_WorkingSet);
static void c10_binary_expand_op(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_in1, coder::array<
  real_T, 2U> &c10_in2, coder::array<real_T, 1U> &c10_in3);
static void c10_binary_expand_op_1(SFc10_ACCMPCInstanceStruct *chartInstance,
  real_T c10_in1_data[], int32_T c10_in1_size[1], coder::array<real_T, 2U>
  &c10_in2, real_T c10_in3_data[]);
static void c10_minus(SFc10_ACCMPCInstanceStruct *chartInstance, real_T
                      c10_in1_data[], int32_T c10_in1_size[1], real_T
                      c10_in2_data[], int32_T c10_in2_size[1]);
static int32_T c10_div_s32_floor_ndbzs(SFc10_ACCMPCInstanceStruct *chartInstance,
  int32_T c10_numerator, int32_T c10_denominator, int32_T c10_EMLOvCount_src_loc,
  uint32_T c10_ssid_src_loc, int32_T c10_offset_src_loc, int32_T
  c10_length_src_loc);
static int32_T c10_div_nzp_s32_floor(SFc10_ACCMPCInstanceStruct *chartInstance,
  int32_T c10_numerator, int32_T c10_denominator, int32_T c10_EMLOvCount_src_loc,
  uint32_T c10_ssid_src_loc, int32_T c10_offset_src_loc, int32_T
  c10_length_src_loc);
static int32_T c10__s32_s64_(SFc10_ACCMPCInstanceStruct *chartInstance, int64_T
  c10_b, int32_T c10_EMLOvCount_src_loc, uint32_T c10_ssid_src_loc, int32_T
  c10_offset_src_loc, int32_T c10_length_src_loc);
static void init_dsm_address_info(SFc10_ACCMPCInstanceStruct *chartInstance);
static void init_simulink_io_address(SFc10_ACCMPCInstanceStruct *chartInstance);

/* Function Definitions */
static void initialize_c10_ACCMPC(SFc10_ACCMPCInstanceStruct *chartInstance)
{
  emlrtStack c10_st = { NULL,          /* site */
    NULL,                              /* tls */
    NULL                               /* prev */
  };

  c10_st.tls = chartInstance->c10_fEmlrtCtx;
  emlrtLicenseCheckR2022a(&c10_st, "EMLRT:runTime:MexFunctionNeedsLicense",
    "optimization_toolbox", 2);
  sf_is_first_init_cond(chartInstance->S);
  sim_mode_is_external(chartInstance->S);
  chartInstance->c10_H_not_empty = false;
  chartInstance->c10_c_not_empty = false;
  chartInstance->c10_G_not_empty = false;
  chartInstance->c10_z_lb_not_empty = false;
  chartInstance->c10_z_ub_not_empty = false;
  chartInstance->c10_g_lb_not_empty = false;
  chartInstance->c10_g_ub_not_empty = false;
  chartInstance->c10_t_0_not_empty = false;
  chartInstance->c10_n_x_not_empty = false;
  chartInstance->c10_n_u_not_empty = false;
  chartInstance->c10_n_x_u_not_empty = false;
  chartInstance->c10_b_N_not_empty = false;
  chartInstance->c10_a_minus1_not_empty = false;
  chartInstance->c10_Ts_not_empty = false;
  chartInstance->c10_options_not_empty = false;
  chartInstance->c10_doneDoubleBufferReInit = false;
  chartInstance->c10_sfEvent = CALL_EVENT;
  _sfTime_ = sf_get_time(chartInstance->S);
}

static void initialize_params_c10_ACCMPC(SFc10_ACCMPCInstanceStruct
  *chartInstance)
{
  static const char_T *c10_sv[79] = { "IncludeTV", "useCaseNum", "Ts", "t_sim",
    "W_NLP", "W_FB", "W_AB", "W_BL", "W_TV", "s_init", "v_init", "a_minus1",
    "shootingMethod", "discretizationMethod", "NLPmaxIter",
    "useFifthOrderFit_NLP", "FBuseTaylor", "N_hor", "paramEstSetting",
    "TVestSetting", "tConstACC_ego", "tConstACC_tar", "N_integratePlant",
    "solverToUse", "ABMPCmaxIterHPIPM", "FBMPCmaxIterHPIPM", "TVMPCmaxIterHPIPM",
    "Tvec", "BLaccMin", "BLaccMax", "BLjerkMin", "BLjerkMax", "BL_a_LimLowVel",
    "BL_a_LimHighVel", "BL_j_LimLowVel", "BL_j_LimHighVel", "BL_N_hor", "BL_Ts",
    "BL_trajEstSett", "s_goal", "sRes", "tRes", "slopes", "speedLimZones",
    "curves", "stopLoc", "TLLoc", "cutOffDist", "h_min", "tau_min", "TVlength",
    "TVinitDist", "TVinitVel", "TV_N_hor", "TV_Ts", "TV_trajEstSett",
    "TV_a_LimLowVel", "TV_a_LimHighVel", "TV_j_LimLowVel", "TV_j_LimHighVel",
    "stopVel", "stopRefDist", "stopRefVelSlope", "TLStopRegionSize", "TLstopVel",
    "alpha_TTL", "b_quadr", "b_fifthOrder", "Mb", "stopRefvelIncr", "s_speedLim",
    "v_speedLim", "s_curv", "curvature", "s_slope", "slope", "generateTVMPC",
    "s_tv", "v_tv" };

  static const char_T *c10_sv1[49] = { "m", "A_f", "c_d", "L", "h_g", "WD_s_F",
    "L_f", "L_r", "F0", "F1", "F2", "k00", "k10", "k01", "p00", "p10", "p01",
    "P_m_max", "T_m_max", "omega_m_r", "omega_m_max", "c_r", "R_w", "beta_gb",
    "beta_fd", "phi", "upSpd", "downSpd", "tau_gb", "tau_fd", "eta_drive", "U_N",
    "Q_N", "E_b_gross", "E_b_net", "v_max", "t_acc", "E_v", "D_r", "eta_i",
    "eta_gb", "eta_fd", "eta_TF", "lambda", "P_aux", "mu", "rho_a", "g",
    "zeta_a" };

  c10_s1bpVdlY1OIZfsh1YT30byD c10_b_r;
  c10_struct_g7LanElifcGF2oK3jOrI5C c10_r1;
  const mxArray *c10_b_mxField;
  const mxArray *c10_m = NULL;
  const mxArray *c10_m1 = NULL;
  const mxArray *c10_mxField;
  c10_m = sf_mex_get_sfun_param(chartInstance->S, 0U, 1U);
  sf_mex_check_bus_parameter(c10_m, 0, NULL, 79, (const char_T **)&c10_sv[0],
    "OPTsettings", "s1bpVdlY1OIZfsh1YT30byD");
  c10_mxField = sf_mex_getfield(c10_m, "IncludeTV", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), &c10_b_r.IncludeTV,
                      1, 11, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "useCaseNum", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.useCaseNum, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "Ts", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), &c10_b_r.Ts, 1, 0,
                      0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "t_sim", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), &c10_b_r.t_sim, 1,
                      0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "W_NLP", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), c10_b_r.W_NLP, 1,
                      0, 0U, 1, 0U, 2, 1, 7);
  c10_mxField = sf_mex_getfield(c10_m, "W_FB", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), c10_b_r.W_FB, 1, 0,
                      0U, 1, 0U, 2, 1, 7);
  c10_mxField = sf_mex_getfield(c10_m, "W_AB", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), c10_b_r.W_AB, 1, 0,
                      0U, 1, 0U, 2, 1, 7);
  c10_mxField = sf_mex_getfield(c10_m, "W_BL", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), c10_b_r.W_BL, 1, 0,
                      0U, 1, 0U, 2, 1, 7);
  c10_mxField = sf_mex_getfield(c10_m, "W_TV", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), c10_b_r.W_TV, 1, 0,
                      0U, 1, 0U, 2, 1, 7);
  c10_mxField = sf_mex_getfield(c10_m, "s_init", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), &c10_b_r.s_init, 1,
                      0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "v_init", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), &c10_b_r.v_init, 1,
                      0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "a_minus1", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), &c10_b_r.a_minus1,
                      1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "shootingMethod", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.shootingMethod, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "discretizationMethod", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.discretizationMethod, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "NLPmaxIter", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.NLPmaxIter, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "useFifthOrderFit_NLP", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.useFifthOrderFit_NLP, 1, 11, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "FBuseTaylor", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.FBuseTaylor, 1, 11, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "N_hor", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), &c10_b_r.N_hor, 1,
                      0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "paramEstSetting", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.paramEstSetting, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "TVestSetting", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.TVestSetting, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "tConstACC_ego", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.tConstACC_ego, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "tConstACC_tar", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.tConstACC_tar, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "N_integratePlant", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.N_integratePlant, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "solverToUse", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.solverToUse, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "ABMPCmaxIterHPIPM", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.ABMPCmaxIterHPIPM, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "FBMPCmaxIterHPIPM", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.FBMPCmaxIterHPIPM, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "TVMPCmaxIterHPIPM", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.TVMPCmaxIterHPIPM, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "Tvec", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), c10_b_r.Tvec, 1, 0,
                      0U, 1, 0U, 2, 1, 20);
  c10_mxField = sf_mex_getfield(c10_m, "BLaccMin", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), &c10_b_r.BLaccMin,
                      1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "BLaccMax", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), &c10_b_r.BLaccMax,
                      1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "BLjerkMin", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), &c10_b_r.BLjerkMin,
                      1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "BLjerkMax", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), &c10_b_r.BLjerkMax,
                      1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "BL_a_LimLowVel", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.BL_a_LimLowVel, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "BL_a_LimHighVel", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.BL_a_LimHighVel, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "BL_j_LimLowVel", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.BL_j_LimLowVel, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "BL_j_LimHighVel", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.BL_j_LimHighVel, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "BL_N_hor", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), &c10_b_r.BL_N_hor,
                      1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "BL_Ts", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), &c10_b_r.BL_Ts, 1,
                      0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "BL_trajEstSett", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.BL_trajEstSett, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "s_goal", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), &c10_b_r.s_goal, 1,
                      0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "sRes", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), &c10_b_r.sRes, 1,
                      0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "tRes", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), &c10_b_r.tRes, 1,
                      0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "slopes", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), c10_b_r.slopes, 1,
                      0, 0U, 1, 0U, 2, 1, 3);
  c10_mxField = sf_mex_getfield(c10_m, "speedLimZones", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      c10_b_r.speedLimZones, 1, 0, 0U, 1, 0U, 2, 2, 2);
  c10_mxField = sf_mex_getfield(c10_m, "curves", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), c10_b_r.curves, 1,
                      0, 0U, 1, 0U, 2, 1, 3);
  c10_mxField = sf_mex_getfield(c10_m, "stopLoc", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), NULL, 1, 0, 0U, 1,
                      0U, 2, 0, 0);
  c10_mxField = sf_mex_getfield(c10_m, "TLLoc", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), NULL, 1, 0, 0U, 1,
                      0U, 2, 0, 0);
  c10_mxField = sf_mex_getfield(c10_m, "cutOffDist", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.cutOffDist, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "h_min", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), &c10_b_r.h_min, 1,
                      0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "tau_min", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), &c10_b_r.tau_min,
                      1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "TVlength", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), &c10_b_r.TVlength,
                      1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "TVinitDist", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.TVinitDist, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "TVinitVel", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), &c10_b_r.TVinitVel,
                      1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "TV_N_hor", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), &c10_b_r.TV_N_hor,
                      1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "TV_Ts", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), &c10_b_r.TV_Ts, 1,
                      0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "TV_trajEstSett", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.TV_trajEstSett, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "TV_a_LimLowVel", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.TV_a_LimLowVel, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "TV_a_LimHighVel", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.TV_a_LimHighVel, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "TV_j_LimLowVel", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.TV_j_LimLowVel, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "TV_j_LimHighVel", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.TV_j_LimHighVel, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "stopVel", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), &c10_b_r.stopVel,
                      1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "stopRefDist", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.stopRefDist, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "stopRefVelSlope", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.stopRefVelSlope, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "TLStopRegionSize", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.TLStopRegionSize, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "TLstopVel", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), &c10_b_r.TLstopVel,
                      1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "alpha_TTL", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), &c10_b_r.alpha_TTL,
                      1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "b_quadr", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), c10_b_r.b_quadr, 1,
                      0, 0U, 1, 0U, 2, 1, 6);
  c10_mxField = sf_mex_getfield(c10_m, "b_fifthOrder", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      c10_b_r.b_fifthOrder, 1, 0, 0U, 1, 0U, 2, 1, 21);
  c10_mxField = sf_mex_getfield(c10_m, "Mb", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), c10_b_r.Mb, 1, 0,
                      0U, 1, 0U, 2, 1, 20);
  c10_mxField = sf_mex_getfield(c10_m, "stopRefvelIncr", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.stopRefvelIncr, 1, 0, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "s_speedLim", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), c10_b_r.s_speedLim,
                      1, 0, 0U, 1, 0U, 2, 1, 4);
  c10_mxField = sf_mex_getfield(c10_m, "v_speedLim", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), c10_b_r.v_speedLim,
                      1, 0, 0U, 1, 0U, 2, 1, 4);
  c10_mxField = sf_mex_getfield(c10_m, "s_curv", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), c10_b_r.s_curv, 1,
                      0, 0U, 1, 0U, 2, 1, 4);
  c10_mxField = sf_mex_getfield(c10_m, "curvature", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), c10_b_r.curvature,
                      1, 0, 0U, 1, 0U, 2, 1, 4);
  c10_mxField = sf_mex_getfield(c10_m, "s_slope", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), c10_b_r.s_slope, 1,
                      0, 0U, 1, 0U, 2, 1, 2);
  c10_mxField = sf_mex_getfield(c10_m, "slope", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), c10_b_r.slope, 1,
                      0, 0U, 1, 0U, 2, 1, 2);
  c10_mxField = sf_mex_getfield(c10_m, "generateTVMPC", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField),
                      &c10_b_r.generateTVMPC, 1, 11, 0U, 0, 0U, 0);
  c10_mxField = sf_mex_getfield(c10_m, "s_tv", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), c10_b_r.s_tv, 1, 0,
                      0U, 1, 0U, 1, 871);
  c10_mxField = sf_mex_getfield(c10_m, "v_tv", "OPTsettings", 0);
  sf_mex_import_named("OPTsettings", sf_mex_dup(c10_mxField), c10_b_r.v_tv, 1, 0,
                      0U, 1, 0U, 1, 871);
  sf_mex_destroy(&c10_m);
  sf_mex_clear_bus_parameter_worklist();
  chartInstance->c10_OPTsettings = c10_b_r;
  c10_m1 = sf_mex_get_sfun_param(chartInstance->S, 1U, 1U);
  sf_mex_check_bus_parameter(c10_m1, 0, NULL, 49, (const char_T **)&c10_sv1[0],
    "V", "struct_g7LanElifcGF2oK3jOrI5C");
  c10_b_mxField = sf_mex_getfield(c10_m1, "m", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.m, 1, 0, 0U, 0, 0U,
                      0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "A_f", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.A_f, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "c_d", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.c_d, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "L", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.L, 1, 0, 0U, 0, 0U,
                      0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "h_g", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.h_g, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "WD_s_F", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.WD_s_F, 1, 0, 0U,
                      0, 0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "L_f", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.L_f, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "L_r", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.L_r, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "F0", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.F0, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "F1", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.F1, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "F2", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.F2, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "k00", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.k00, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "k10", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.k10, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "k01", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.k01, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "p00", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.p00, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "p10", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.p10, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "p01", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.p01, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "P_m_max", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.P_m_max, 1, 0, 0U,
                      0, 0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "T_m_max", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.T_m_max, 1, 0, 0U,
                      0, 0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "omega_m_r", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.omega_m_r, 1, 0,
                      0U, 0, 0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "omega_m_max", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.omega_m_max, 1, 0,
                      0U, 0, 0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "c_r", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.c_r, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "R_w", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.R_w, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "beta_gb", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.beta_gb, 1, 0, 0U,
                      0, 0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "beta_fd", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.beta_fd, 1, 0, 0U,
                      0, 0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "phi", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.phi, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "upSpd", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), c10_r1.upSpd, 1, 0, 0U, 1,
                      0U, 2, 1, 7);
  c10_b_mxField = sf_mex_getfield(c10_m1, "downSpd", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), c10_r1.downSpd, 1, 0, 0U,
                      1, 0U, 2, 1, 7);
  c10_b_mxField = sf_mex_getfield(c10_m1, "tau_gb", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), c10_r1.tau_gb, 1, 0, 0U, 1,
                      0U, 2, 1, 8);
  c10_b_mxField = sf_mex_getfield(c10_m1, "tau_fd", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.tau_fd, 1, 0, 0U,
                      0, 0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "eta_drive", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.eta_drive, 1, 0,
                      0U, 0, 0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "U_N", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.U_N, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "Q_N", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.Q_N, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "E_b_gross", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.E_b_gross, 1, 0,
                      0U, 0, 0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "E_b_net", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.E_b_net, 1, 0, 0U,
                      0, 0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "v_max", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.v_max, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "t_acc", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.t_acc, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "E_v", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.E_v, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "D_r", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.D_r, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "eta_i", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.eta_i, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "eta_gb", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.eta_gb, 1, 0, 0U,
                      0, 0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "eta_fd", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.eta_fd, 1, 0, 0U,
                      0, 0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "eta_TF", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.eta_TF, 1, 0, 0U,
                      0, 0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "lambda", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.lambda, 1, 0, 0U,
                      0, 0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "P_aux", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.P_aux, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "mu", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.mu, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "rho_a", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.rho_a, 1, 0, 0U, 0,
                      0U, 0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "g", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.g, 1, 0, 0U, 0, 0U,
                      0);
  c10_b_mxField = sf_mex_getfield(c10_m1, "zeta_a", "V", 0);
  sf_mex_import_named("V", sf_mex_dup(c10_b_mxField), &c10_r1.zeta_a, 1, 0, 0U,
                      0, 0U, 0);
  sf_mex_destroy(&c10_m1);
  sf_mex_clear_bus_parameter_worklist();
  chartInstance->c10_V = c10_r1;
}

static void mdl_start_c10_ACCMPC(SFc10_ACCMPCInstanceStruct *chartInstance)
{
  sim_mode_is_external(chartInstance->S);
}

static void mdl_terminate_c10_ACCMPC(SFc10_ACCMPCInstanceStruct *chartInstance)
{
}

static void mdl_setup_runtime_resources_c10_ACCMPC(SFc10_ACCMPCInstanceStruct
  *chartInstance)
{
  static const int32_T c10_b_postfixPredicateTree[3] = { 0, 1, -3 };

  static const int32_T c10_c_postfixPredicateTree[3] = { 0, 1, -3 };

  static const int32_T c10_d_postfixPredicateTree[3] = { 0, 1, -3 };

  static const int32_T c10_e_postfixPredicateTree[3] = { 0, 1, -3 };

  static const int32_T c10_f_postfixPredicateTree[3] = { 0, 1, -3 };

  static const int32_T c10_g_postfixPredicateTree[3] = { 0, 1, -3 };

  static const int32_T c10_h_postfixPredicateTree[3] = { 0, 1, -3 };

  static const int32_T c10_i_postfixPredicateTree[3] = { 0, 1, -3 };

  static const int32_T c10_j_postfixPredicateTree[3] = { 0, 1, -3 };

  static const int32_T c10_postfixPredicateTree[3] = { 0, 1, -2 };

  static const int32_T c10_b_condTxtEndIdx[2] = { 26987, 27014 };

  static const int32_T c10_b_condTxtStartIdx[2] = { 26965, 26991 };

  static const int32_T c10_c_condTxtEndIdx[2] = { 27531, 27561 };

  static const int32_T c10_c_condTxtStartIdx[2] = { 27506, 27535 };

  static const int32_T c10_condTxtEndIdx[2] = { 11079, 11099 };

  static const int32_T c10_condTxtStartIdx[2] = { 11073, 11083 };

  static const int32_T c10_d_condTxtEndIdx[2] = { 28022, 28050 };

  static const int32_T c10_d_condTxtStartIdx[2] = { 28002, 28026 };

  static const int32_T c10_e_condTxtEndIdx[2] = { 33863, 33892 };

  static const int32_T c10_e_condTxtStartIdx[2] = { 33838, 33867 };

  static const int32_T c10_f_condTxtEndIdx[2] = { 34044, 34073 };

  static const int32_T c10_f_condTxtStartIdx[2] = { 34019, 34048 };

  static const int32_T c10_g_condTxtEndIdx[2] = { 34224, 34253 };

  static const int32_T c10_g_condTxtStartIdx[2] = { 34199, 34228 };

  static const int32_T c10_h_condTxtEndIdx[2] = { 34404, 34433 };

  static const int32_T c10_h_condTxtStartIdx[2] = { 34379, 34408 };

  static const int32_T c10_i_condTxtEndIdx[2] = { 34584, 34613 };

  static const int32_T c10_i_condTxtStartIdx[2] = { 34559, 34588 };

  static const int32_T c10_j_condTxtEndIdx[2] = { 34764, 34793 };

  static const int32_T c10_j_condTxtStartIdx[2] = { 34739, 34768 };

  static const uint32_T c10_decisionTxtEndIdx = 0U;
  static const uint32_T c10_decisionTxtStartIdx = 0U;
  sfSetAnimationVectors(chartInstance->S, chartInstance->c10_JITStateAnimation,
                        chartInstance->c10_JITTransitionAnimation);
  setDataBrowseFcn(chartInstance->S, (void *)&c10_chart_data_browse_helper);
  chartInstance->c10_RuntimeVar = sfListenerCacheSimStruct(chartInstance->S);
  sfListenerInitializeRuntimeVars(chartInstance->c10_RuntimeVar,
    &chartInstance->c10_IsDebuggerActive,
    &chartInstance->c10_IsSequenceViewerPresent, 0, 0,
    &chartInstance->c10_mlFcnLineNumber, &chartInstance->c10_IsHeatMapPresent, 0);
  covrtCreateStateflowInstanceData(chartInstance->c10_covrtInstance, 1U, 0U, 1U,
    80U);
  covrtChartInitFcn(chartInstance->c10_covrtInstance, 0U, false, false, false);
  covrtStateInitFcn(chartInstance->c10_covrtInstance, 0U, 0U, false, false,
                    false, 0U, &c10_decisionTxtStartIdx, &c10_decisionTxtEndIdx);
  covrtTransInitFcn(chartInstance->c10_covrtInstance, 0U, 0, NULL, NULL, 0U,
                    NULL);
  covrtEmlInitFcn(chartInstance->c10_covrtInstance, "", 4U, 0U, 1U, 0U, 3U, 0U,
                  0U, 0U, 1U, 0U, 0U, 0U);
  covrtEmlFcnInitFcn(chartInstance->c10_covrtInstance, 4U, 0U, 0U,
                     "eML_blk_kernel", 0, -1, 5053);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 4U, 0U, 0U, 4224, 4238,
                    4537, 4809, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 4U, 0U, 1U, 4266, 4299,
                    4357, 4427, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 4U, 0U, 2U, 4571, 4604,
                    4661, 4730, false);
  covrtEmlForInitFcn(chartInstance->c10_covrtInstance, 4U, 0U, 0U, 1626, 1641,
                     1800);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 4U, 0U, 0U, 4227,
    4238, -1, 2U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 4U, 0U, 1U, 4269,
    4299, -1, 2U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 4U, 0U, 2U, 4574,
    4604, -1, 2U);
  covrtEmlInitFcn(chartInstance->c10_covrtInstance,
                  "C:/Users/stefa/Documents/EEPACC_MPC_CasADi_MATLAB/ACCMPC-ABO_CasADi/Functions/MPCs/CreateQP_ABSimulink.m",
                  14U, 0U, 5U, 0U, 40U, 0U, 0U, 0U, 13U, 0U, 20U, 10U);
  covrtEmlFcnInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 0U,
                     "CreateQP_ABSimulink", 0, -1, 46650);
  covrtEmlFcnInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 1U,
                     "SetParametersInternally", 13643, -1, 23390);
  covrtEmlFcnInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 2U,
                     "EstimateBoundsInternally", 23401, -1, 46645);
  covrtEmlFcnInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 3U,
                     "LUTgearInternally", 32917, -1, 46632);
  covrtEmlFcnInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 4U,
                     "SetParametersInternally", 35196, -1, 46611);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 0U, 3139, 3158,
                    4001, 4271, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 1U, 4074, 4093,
                    4171, 4267, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 2U, 4335, 4354,
                    4921, 5505, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 3U, 6812, 6822,
                    6932, 7032, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 4U, 7297, 7316,
                    8470, 10483, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 5U, 7966, 7976,
                    -1, 8465, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 6U, 8498, 8517,
                    -1, 9455, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 7U, 9080, 9090,
                    -1, 9442, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 8U, 10509, 10522,
                    -1, 10751, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 9U, 11070, 11099,
                    11443, 11798, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 10U, 25681, 25696,
                    25986, 26287, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 11U, 25986, 26005,
                    -1, 26287, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 13U, 26844, 26867,
                    26958, 27199, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 14U, 26958, 27014,
                    27103, 27199, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 15U, 27404, 27430,
                    27499, 27639, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 16U, 27499, 27561,
                    -1, 27639, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 17U, 27880, 27902,
                    27995, 28152, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 18U, 27995, 28050,
                    -1, 28152, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 19U, 28430, 28459,
                    -1, 28555, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 20U, 28793, 28862,
                    -1, 29658, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 21U, 28978, 29010,
                    -1, 29638, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 22U, 29035, 29052,
                    29229, 29614, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 23U, 29229, 29270,
                    29400, 29614, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 24U, 29988, 30003,
                    30691, 32869, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 25U, 30049, 30064,
                    30237, 30678, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 26U, 30237, 30257,
                    30492, 30678, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 27U, 30691, 30710,
                    31783, 32869, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 28U, 30745, 30760,
                    30985, 31770, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 29U, 30985, 31005,
                    31534, 31770, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 30U, 31828, 31843,
                    32068, 32853, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 31U, 32068, 32088,
                    32617, 32853, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 12U, 26802, 27215,
                    26802, 27215, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 32U, 33684, 33712,
                    33831, 35166, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 33U, 33831, 33892,
                    34012, 35166, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 34U, 34012, 34073,
                    34192, 35166, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 35U, 34192, 34253,
                    34372, 35166, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 36U, 34372, 34433,
                    34552, 35166, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 37U, 34552, 34613,
                    34732, 35166, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 38U, 34732, 34793,
                    34914, 35166, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 39U, 34914, 34946,
                    35065, 35166, false);
  covrtEmlForInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 0U, 5520, 5534,
                     13338);
  covrtEmlForInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 1U, 26574, 26589,
                     26659);
  covrtEmlForInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 2U, 26774, 26789,
                     27227);
  covrtEmlForInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 3U, 26802, 26827,
                     27215);
  covrtEmlForInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 4U, 27331, 27346,
                     27686);
  covrtEmlForInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 5U, 27359, 27387,
                     27674);
  covrtEmlForInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 6U, 27811, 27826,
                     28199);
  covrtEmlForInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 7U, 27839, 27863,
                     28187);
  covrtEmlForInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 8U, 28301, 28316,
                     28583);
  covrtEmlForInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 9U, 28329, 28354,
                     28571);
  covrtEmlForInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 10U, 28725,
                     28740, 29686);
  covrtEmlForInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 11U, 28753,
                     28776, 29674);
  covrtEmlForInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 12U, 29960,
                     29975, 32881);
  covrtEmlMCDCInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 0U, 11073,
                      11099, 2U, 0U, c10_condTxtStartIdx, c10_condTxtEndIdx, 3U,
                      c10_postfixPredicateTree, false);
  covrtEmlMCDCInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 1U, 26965,
                      27014, 2U, 2U, c10_b_condTxtStartIdx, c10_b_condTxtEndIdx,
                      3U, c10_b_postfixPredicateTree, false);
  covrtEmlMCDCInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 2U, 27506,
                      27561, 2U, 4U, c10_c_condTxtStartIdx, c10_c_condTxtEndIdx,
                      3U, c10_c_postfixPredicateTree, false);
  covrtEmlMCDCInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 3U, 28002,
                      28050, 2U, 6U, c10_d_condTxtStartIdx, c10_d_condTxtEndIdx,
                      3U, c10_d_postfixPredicateTree, false);
  covrtEmlMCDCInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 4U, 33838,
                      33892, 2U, 8U, c10_e_condTxtStartIdx, c10_e_condTxtEndIdx,
                      3U, c10_e_postfixPredicateTree, false);
  covrtEmlMCDCInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 5U, 34019,
                      34073, 2U, 10U, c10_f_condTxtStartIdx, c10_f_condTxtEndIdx,
                      3U, c10_f_postfixPredicateTree, false);
  covrtEmlMCDCInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 6U, 34199,
                      34253, 2U, 12U, c10_g_condTxtStartIdx, c10_g_condTxtEndIdx,
                      3U, c10_g_postfixPredicateTree, false);
  covrtEmlMCDCInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 7U, 34379,
                      34433, 2U, 14U, c10_h_condTxtStartIdx, c10_h_condTxtEndIdx,
                      3U, c10_h_postfixPredicateTree, false);
  covrtEmlMCDCInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 8U, 34559,
                      34613, 2U, 16U, c10_i_condTxtStartIdx, c10_i_condTxtEndIdx,
                      3U, c10_i_postfixPredicateTree, false);
  covrtEmlMCDCInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 9U, 34739,
                      34793, 2U, 18U, c10_j_condTxtStartIdx, c10_j_condTxtEndIdx,
                      3U, c10_j_postfixPredicateTree, false);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 0U, 3142,
    3158, -1, 0U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 1U, 4077,
    4093, -1, 0U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 2U, 4338,
    4354, -1, 0U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 3U, 6815,
    6822, -1, 0U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 4U, 7300,
    7316, -1, 0U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 5U, 7969,
    7976, -1, 0U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 6U, 8501,
    8517, -1, 0U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 7U, 9083,
    9090, -1, 0U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 8U, 10512,
    10522, -1, 0U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 9U, 11073,
    11079, -1, 4U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 10U,
    11083, 11099, -1, 0U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 11U,
    25684, 25696, -1, 0U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 12U,
    25993, 26005, -1, 0U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 13U,
    26847, 26867, -1, 0U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 14U,
    26965, 26987, -1, 5U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 15U,
    26991, 27014, -1, 2U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 16U,
    27407, 27430, -1, 0U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 17U,
    27506, 27531, -1, 5U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 18U,
    27535, 27561, -1, 2U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 19U,
    27883, 27902, -1, 0U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 20U,
    28002, 28022, -1, 4U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 21U,
    28026, 28050, -1, 2U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 27U,
    29991, 30003, -1, 0U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 28U,
    30052, 30064, -1, 2U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 29U,
    30244, 30257, -1, 2U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 35U,
    33687, 33712, -1, 2U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 36U,
    33838, 33863, -1, 4U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 37U,
    33867, 33892, -1, 2U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 38U,
    34019, 34044, -1, 4U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 39U,
    34048, 34073, -1, 2U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 40U,
    34199, 34224, -1, 4U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 41U,
    34228, 34253, -1, 2U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 42U,
    34379, 34404, -1, 4U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 43U,
    34408, 34433, -1, 2U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 44U,
    34559, 34584, -1, 4U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 45U,
    34588, 34613, -1, 2U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 46U,
    34739, 34764, -1, 4U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 47U,
    34768, 34793, -1, 2U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 0U, 48U,
    34921, 34946, -1, 4U);
  covrtEmlInitFcn(chartInstance->c10_covrtInstance,
                  "C:/Users/stefa/Documents/EEPACC_MPC_CasADi_MATLAB/ACCMPC-ABO_CasADi/Functions/MPCs/TransformToDenseFormulation.m",
                  14U, 1U, 1U, 0U, 2U, 0U, 0U, 0U, 6U, 0U, 0U, 0U);
  covrtEmlFcnInitFcn(chartInstance->c10_covrtInstance, 14U, 1U, 0U,
                     "TransformToDenseFormulation", 0, -1, 3317);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 1U, 0U, 1915, 1923,
                    2730, 2830, false);
  covrtEmlIfInitFcn(chartInstance->c10_covrtInstance, 14U, 1U, 1U, 2909, 2921,
                    -1, 3056, false);
  covrtEmlForInitFcn(chartInstance->c10_covrtInstance, 14U, 1U, 0U, 1778, 1793,
                     3069);
  covrtEmlForInitFcn(chartInstance->c10_covrtInstance, 14U, 1U, 1U, 1977, 1990,
                     2222);
  covrtEmlForInitFcn(chartInstance->c10_covrtInstance, 14U, 1U, 2U, 2038, 2055,
                     2127);
  covrtEmlForInitFcn(chartInstance->c10_covrtInstance, 14U, 1U, 3U, 2297, 2308,
                     2372);
  covrtEmlForInitFcn(chartInstance->c10_covrtInstance, 14U, 1U, 4U, 2494, 2507,
                     2720);
  covrtEmlForInitFcn(chartInstance->c10_covrtInstance, 14U, 1U, 5U, 2555, 2572,
                     2644);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 1U, 0U, 1918,
    1923, -1, 4U);
  covrtEmlRelationalInitFcn(chartInstance->c10_covrtInstance, 14U, 1U, 1U, 2912,
    2921, -1, 2U);
}

static void mdl_cleanup_runtime_resources_c10_ACCMPC(SFc10_ACCMPCInstanceStruct *
  chartInstance)
{
  sfListenerLightTerminate(chartInstance->c10_RuntimeVar);
  covrtDeleteStateflowInstanceData(chartInstance->c10_covrtInstance);
}

static void enable_c10_ACCMPC(SFc10_ACCMPCInstanceStruct *chartInstance)
{
  _sfTime_ = sf_get_time(chartInstance->S);
}

static void disable_c10_ACCMPC(SFc10_ACCMPCInstanceStruct *chartInstance)
{
  _sfTime_ = sf_get_time(chartInstance->S);
}

static void sf_gateway_c10_ACCMPC(SFc10_ACCMPCInstanceStruct *chartInstance)
{
  static c10_scZhlMkNxPxOgM0FLkVrfPH c10_b_r = { 0.01,/* InitDamping */
    { 'f', 'o', 'r', 'w', 'a', 'r', 'd' },/* FiniteDifferenceType */
    false,                             /* SpecifyObjectiveGradient */
    false,                             /* ScaleProblem */
    false,                             /* SpecifyConstraintGradient */
    true,                              /* NonFiniteSupport */
    false,                             /* IterDisplaySQP */
    -1.0,                              /* FiniteDifferenceStepSize */
    -1.0,                              /* MaxFunctionEvaluations */
    false,                             /* IterDisplayQP */
    0.0,                               /* PricingTolerance */

    { 'a', 'c', 't', 'i', 'v', 'e', '-', 's', 'e', 't' },/* Algorithm */
    -1.0E+20,                          /* ObjectiveLimit */
    1.0E-8,                            /* ConstraintTolerance */
    1.0E-8,                            /* OptimalityTolerance */
    1.0E-8,                            /* StepTolerance */
    -1.0,                              /* MaxIterations */
    0.0,                               /* FunctionTolerance */

    { 'q', 'u', 'a', 'd', 'p', 'r', 'o', 'g' },/* SolverName */
    false,                             /* CheckGradients */

    { 'o', 'f', 'f' },                 /* Diagnostics */
    0.0,                               /* DiffMaxChange */
    0.0,                               /* DiffMinChange */

    { 'o', 'f', 'f' },                 /* Display */

    { 'o', 'f', 'f' },                 /* FunValCheck */
    false,                             /* UseParallel */

    { 'a', 'u', 't', 'o' },            /* LinearSolver */

    { 'c', 'g' }                       /* SubproblemAlgorithm */
  };

  static char_T c10_b_cv[39] = { 'M', 'A', 'T', 'L', 'A', 'B', ':', 'c', 'a',
    't', 'e', 'n', 'a', 't', 'e', ':', 'm', 'a', 't', 'r', 'i', 'x', 'D', 'i',
    'm', 'e', 'n', 's', 'i', 'o', 'n', 'M', 'i', 's', 'm', 'a', 't', 'c', 'h' };

  coder::array<real_T, 3U> c10_A;
  coder::array<real_T, 3U> c10_c_B;
  coder::array<real_T, 2U> c10_Psi;
  coder::array<real_T, 2U> c10_b_D;
  coder::array<real_T, 2U> c10_b_s_opt_prev_sol;
  coder::array<real_T, 2U> c10_b_v_opt_prev_sol;
  coder::array<real_T, 2U> c10_b_varargin_1;
  coder::array<real_T, 2U> c10_c_G;
  coder::array<real_T, 2U> c10_c_H;
  coder::array<real_T, 2U> c10_d_G;
  coder::array<real_T, 2U> c10_k_result;
  coder::array<real_T, 2U> c10_r1;
  coder::array<real_T, 2U> c10_r11;
  coder::array<real_T, 2U> c10_r3;
  coder::array<real_T, 2U> c10_r4;
  coder::array<real_T, 2U> c10_r6;
  coder::array<real_T, 2U> c10_r7;
  coder::array<real_T, 2U> c10_r8;
  coder::array<real_T, 2U> c10_z_opt;
  coder::array<real_T, 1U> c10_b_c;
  coder::array<real_T, 1U> c10_c_d;
  coder::array<real_T, 1U> c10_r5;
  coder::array<real_T, 1U> c10_r9;
  coder::array<boolean_T, 2U> c10_r2;
  c10_cell_wrap_8 c10_reshapes[2];
  c10_s1bpVdlY1OIZfsh1YT30byD c10_b_OPTsettings;
  c10_s_rT6K4jgKQs07oLkxgXMCC c10_a__2;
  c10_scZhlMkNxPxOgM0FLkVrfPH c10_r10;
  c10_skLNHjLOlx0hU1nw1PS4uP c10_a__1;
  c10_struct_g7LanElifcGF2oK3jOrI5C c10_b_V;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_d_st;
  emlrtStack c10_st = { NULL,          /* site */
    NULL,                              /* tls */
    NULL                               /* prev */
  };

  real_T c10_f_tmp_data[1204];
  real_T c10_b_g_lb_data[602];
  real_T c10_b_g_ub_data[602];
  real_T c10_b_tmp_data[602];
  real_T c10_c_tmp_data[602];
  real_T c10_d_tmp_data[602];
  real_T c10_g_lb_data[602];
  real_T c10_g_ub_data[602];
  real_T c10_tmp_data[602];
  real_T c10_c_data[142];
  real_T c10_g_tmp_data[142];
  real_T c10_h_tmp_data[142];
  real_T c10_z_lb_data[142];
  real_T c10_z_ub_data[142];
  real_T c10_b_Tvec[20];
  real_T c10_b_s_est[20];
  real_T c10_b_s_tv_est[20];
  real_T c10_b_v_est[20];
  real_T c10_dv[4];
  real_T c10_c_varargin_1[3];
  real_T c10_F_f_r_max;
  real_T c10_F_f_tot_max;
  real_T c10_F_m_max;
  real_T c10_F_m_min;
  real_T c10_F_r;
  real_T c10_F_t_req;
  real_T c10_Fb_opt;
  real_T c10_Fm_opt;
  real_T c10_b_N_hor;
  real_T c10_b_a;
  real_T c10_b_exitflag;
  real_T c10_b_fval;
  real_T c10_b_k;
  real_T c10_b_roundFloatVar;
  real_T c10_b_s_measured;
  real_T c10_b_v_measured;
  real_T c10_b_x;
  real_T c10_b_y;
  real_T c10_c_N_hor;
  real_T c10_c_a;
  real_T c10_c_c;
  real_T c10_c_roundFloatVar;
  real_T c10_c_s_measured;
  real_T c10_c_v_measured;
  real_T c10_c_x;
  real_T c10_c_y;
  real_T c10_d;
  real_T c10_d1;
  real_T c10_d10;
  real_T c10_d11;
  real_T c10_d12;
  real_T c10_d13;
  real_T c10_d14;
  real_T c10_d15;
  real_T c10_d16;
  real_T c10_d17;
  real_T c10_d18;
  real_T c10_d19;
  real_T c10_d2;
  real_T c10_d20;
  real_T c10_d21;
  real_T c10_d22;
  real_T c10_d23;
  real_T c10_d24;
  real_T c10_d25;
  real_T c10_d26;
  real_T c10_d27;
  real_T c10_d28;
  real_T c10_d29;
  real_T c10_d3;
  real_T c10_d30;
  real_T c10_d31;
  real_T c10_d32;
  real_T c10_d33;
  real_T c10_d34;
  real_T c10_d35;
  real_T c10_d36;
  real_T c10_d37;
  real_T c10_d38;
  real_T c10_d39;
  real_T c10_d4;
  real_T c10_d40;
  real_T c10_d41;
  real_T c10_d42;
  real_T c10_d43;
  real_T c10_d44;
  real_T c10_d45;
  real_T c10_d46;
  real_T c10_d47;
  real_T c10_d48;
  real_T c10_d49;
  real_T c10_d5;
  real_T c10_d50;
  real_T c10_d51;
  real_T c10_d52;
  real_T c10_d53;
  real_T c10_d54;
  real_T c10_d55;
  real_T c10_d56;
  real_T c10_d57;
  real_T c10_d58;
  real_T c10_d59;
  real_T c10_d6;
  real_T c10_d60;
  real_T c10_d61;
  real_T c10_d62;
  real_T c10_d7;
  real_T c10_d8;
  real_T c10_d9;
  real_T c10_d_N_hor;
  real_T c10_d_a;
  real_T c10_d_c;
  real_T c10_d_roundFloatVar;
  real_T c10_d_varargin_1;
  real_T c10_d_x;
  real_T c10_d_y;
  real_T c10_e_a;
  real_T c10_e_b;
  real_T c10_e_c;
  real_T c10_e_roundFloatVar;
  real_T c10_e_x;
  real_T c10_e_y;
  real_T c10_f_a;
  real_T c10_f_roundFloatVar;
  real_T c10_g_a;
  real_T c10_g_roundFloatVar;
  real_T c10_h_a;
  real_T c10_h_roundFloatVar;
  real_T c10_i_a;
  real_T c10_i_roundFloatVar;
  real_T c10_j_a;
  real_T c10_j_roundFloatVar;
  real_T c10_k_a;
  real_T c10_k_roundFloatVar;
  real_T c10_m_a;
  real_T c10_m_roundFloatVar;
  real_T c10_maxval;
  real_T c10_o_a;
  real_T c10_o_roundFloatVar;
  real_T c10_p_a;
  real_T c10_p_roundFloatVar;
  real_T c10_q_a;
  real_T c10_r_a;
  real_T c10_roundFloatVar;
  real_T c10_s_a;
  real_T c10_varargin_2;
  real_T c10_x;
  real_T c10_y;
  int32_T c10_d_d[2];
  int32_T c10_e_tmp_data[2];
  int32_T c10_input_sizes[2];
  int32_T c10_iv[2];
  int32_T c10_iv2[2];
  int32_T c10_iv3[2];
  int32_T c10_iv4[2];
  int32_T c10_iv5[2];
  int32_T c10_iv6[2];
  int32_T c10_sizes[2];
  int32_T c10_b_g_lb_size[1];
  int32_T c10_b_g_ub_size[1];
  int32_T c10_b_tmp_size[1];
  int32_T c10_c_size[1];
  int32_T c10_c_tmp_size[1];
  int32_T c10_d_tmp_size[1];
  int32_T c10_e_tmp_size[1];
  int32_T c10_f_tmp_size[1];
  int32_T c10_g_lb_size[1];
  int32_T c10_g_tmp_size[1];
  int32_T c10_g_ub_size[1];
  int32_T c10_iv1[1];
  int32_T c10_tmp_size[1];
  int32_T c10_z_lb_size[1];
  int32_T c10_z_ub_size[1];
  int32_T c10_zeroColsG_size[1];
  int32_T c10_ab_loop_ub;
  int32_T c10_ac_loop_ub;
  int32_T c10_arg;
  int32_T c10_b_fixedVar;
  int32_T c10_b_loop_ub;
  int32_T c10_b_result;
  int32_T c10_bb_loop_ub;
  int32_T c10_bc_loop_ub;
  int32_T c10_c_fixedVar;
  int32_T c10_c_loop_ub;
  int32_T c10_cb_loop_ub;
  int32_T c10_cc_loop_ub;
  int32_T c10_d_fixedVar;
  int32_T c10_d_k;
  int32_T c10_d_loop_ub;
  int32_T c10_db_loop_ub;
  int32_T c10_e_fixedVar;
  int32_T c10_e_loop_ub;
  int32_T c10_eb_loop_ub;
  int32_T c10_expected;
  int32_T c10_f_fixedVar;
  int32_T c10_f_loop_ub;
  int32_T c10_fb_loop_ub;
  int32_T c10_fixedVar;
  int32_T c10_g_fixedVar;
  int32_T c10_g_loop_ub;
  int32_T c10_g_result;
  int32_T c10_gb_loop_ub;
  int32_T c10_h_fixedVar;
  int32_T c10_h_loop_ub;
  int32_T c10_hb_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i100;
  int32_T c10_i101;
  int32_T c10_i102;
  int32_T c10_i103;
  int32_T c10_i104;
  int32_T c10_i105;
  int32_T c10_i106;
  int32_T c10_i107;
  int32_T c10_i108;
  int32_T c10_i109;
  int32_T c10_i11;
  int32_T c10_i110;
  int32_T c10_i111;
  int32_T c10_i112;
  int32_T c10_i113;
  int32_T c10_i114;
  int32_T c10_i115;
  int32_T c10_i116;
  int32_T c10_i117;
  int32_T c10_i118;
  int32_T c10_i119;
  int32_T c10_i12;
  int32_T c10_i120;
  int32_T c10_i121;
  int32_T c10_i122;
  int32_T c10_i123;
  int32_T c10_i124;
  int32_T c10_i125;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i19;
  int32_T c10_i2;
  int32_T c10_i20;
  int32_T c10_i21;
  int32_T c10_i22;
  int32_T c10_i23;
  int32_T c10_i24;
  int32_T c10_i25;
  int32_T c10_i26;
  int32_T c10_i27;
  int32_T c10_i28;
  int32_T c10_i29;
  int32_T c10_i3;
  int32_T c10_i30;
  int32_T c10_i31;
  int32_T c10_i32;
  int32_T c10_i33;
  int32_T c10_i34;
  int32_T c10_i35;
  int32_T c10_i36;
  int32_T c10_i37;
  int32_T c10_i38;
  int32_T c10_i39;
  int32_T c10_i4;
  int32_T c10_i40;
  int32_T c10_i41;
  int32_T c10_i42;
  int32_T c10_i43;
  int32_T c10_i44;
  int32_T c10_i45;
  int32_T c10_i46;
  int32_T c10_i47;
  int32_T c10_i48;
  int32_T c10_i49;
  int32_T c10_i5;
  int32_T c10_i50;
  int32_T c10_i51;
  int32_T c10_i52;
  int32_T c10_i53;
  int32_T c10_i54;
  int32_T c10_i55;
  int32_T c10_i56;
  int32_T c10_i57;
  int32_T c10_i58;
  int32_T c10_i59;
  int32_T c10_i6;
  int32_T c10_i60;
  int32_T c10_i61;
  int32_T c10_i62;
  int32_T c10_i63;
  int32_T c10_i64;
  int32_T c10_i65;
  int32_T c10_i66;
  int32_T c10_i67;
  int32_T c10_i68;
  int32_T c10_i69;
  int32_T c10_i7;
  int32_T c10_i70;
  int32_T c10_i71;
  int32_T c10_i72;
  int32_T c10_i73;
  int32_T c10_i74;
  int32_T c10_i75;
  int32_T c10_i76;
  int32_T c10_i77;
  int32_T c10_i78;
  int32_T c10_i79;
  int32_T c10_i8;
  int32_T c10_i80;
  int32_T c10_i81;
  int32_T c10_i82;
  int32_T c10_i83;
  int32_T c10_i84;
  int32_T c10_i85;
  int32_T c10_i86;
  int32_T c10_i87;
  int32_T c10_i88;
  int32_T c10_i89;
  int32_T c10_i9;
  int32_T c10_i90;
  int32_T c10_i91;
  int32_T c10_i92;
  int32_T c10_i93;
  int32_T c10_i94;
  int32_T c10_i95;
  int32_T c10_i96;
  int32_T c10_i97;
  int32_T c10_i98;
  int32_T c10_i99;
  int32_T c10_i_fixedVar;
  int32_T c10_i_loop_ub;
  int32_T c10_i_result;
  int32_T c10_ib_loop_ub;
  int32_T c10_innerDimA;
  int32_T c10_innerDimB;
  int32_T c10_j_fixedVar;
  int32_T c10_j_loop_ub;
  int32_T c10_jb_loop_ub;
  int32_T c10_k;
  int32_T c10_k_fixedVar;
  int32_T c10_k_loop_ub;
  int32_T c10_kb_loop_ub;
  int32_T c10_loop_ub;
  int32_T c10_m_fixedVar;
  int32_T c10_m_loop_ub;
  int32_T c10_mb_loop_ub;
  int32_T c10_o_fixedVar;
  int32_T c10_o_loop_ub;
  int32_T c10_ob_loop_ub;
  int32_T c10_p_fixedVar;
  int32_T c10_p_loop_ub;
  int32_T c10_pb_loop_ub;
  int32_T c10_q_loop_ub;
  int32_T c10_qb_loop_ub;
  int32_T c10_r_loop_ub;
  int32_T c10_rb_loop_ub;
  int32_T c10_s_loop_ub;
  int32_T c10_sb_loop_ub;
  int32_T c10_t_loop_ub;
  int32_T c10_tb_loop_ub;
  int32_T c10_u_loop_ub;
  int32_T c10_ub_loop_ub;
  int32_T c10_v_loop_ub;
  int32_T c10_varargin_1;
  int32_T c10_vb_loop_ub;
  int32_T c10_w_loop_ub;
  int32_T c10_wb_loop_ub;
  int32_T c10_x_loop_ub;
  int32_T c10_xb_loop_ub;
  int32_T c10_y_loop_ub;
  int32_T c10_yb_loop_ub;
  boolean_T c10_zeroColsG_data[602];
  boolean_T c10_b;
  boolean_T c10_b1;
  boolean_T c10_b10;
  boolean_T c10_b11;
  boolean_T c10_b12;
  boolean_T c10_b13;
  boolean_T c10_b14;
  boolean_T c10_b15;
  boolean_T c10_b16;
  boolean_T c10_b17;
  boolean_T c10_b18;
  boolean_T c10_b19;
  boolean_T c10_b2;
  boolean_T c10_b20;
  boolean_T c10_b21;
  boolean_T c10_b22;
  boolean_T c10_b23;
  boolean_T c10_b24;
  boolean_T c10_b25;
  boolean_T c10_b26;
  boolean_T c10_b27;
  boolean_T c10_b28;
  boolean_T c10_b29;
  boolean_T c10_b3;
  boolean_T c10_b30;
  boolean_T c10_b31;
  boolean_T c10_b32;
  boolean_T c10_b33;
  boolean_T c10_b34;
  boolean_T c10_b35;
  boolean_T c10_b36;
  boolean_T c10_b37;
  boolean_T c10_b38;
  boolean_T c10_b39;
  boolean_T c10_b4;
  boolean_T c10_b40;
  boolean_T c10_b41;
  boolean_T c10_b42;
  boolean_T c10_b43;
  boolean_T c10_b44;
  boolean_T c10_b45;
  boolean_T c10_b46;
  boolean_T c10_b5;
  boolean_T c10_b6;
  boolean_T c10_b7;
  boolean_T c10_b8;
  boolean_T c10_b9;
  boolean_T c10_b_empty_non_axis_sizes;
  boolean_T c10_c_empty_non_axis_sizes;
  boolean_T c10_c_result;
  boolean_T c10_d_result;
  boolean_T c10_e_result;
  boolean_T c10_empty_non_axis_sizes;
  boolean_T c10_f_result;
  boolean_T c10_h_result;
  boolean_T c10_j_result;
  boolean_T c10_result;
  c10_b_r.DiffMaxChange = rtInf;
  c10_b_r.FunctionTolerance = rtInf;
  c10_st.tls = chartInstance->c10_fEmlrtCtx;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_d_st.prev = &c10_c_st;
  c10_d_st.tls = c10_c_st.tls;
  for (c10_i = 0; c10_i < 20; c10_i++) {
    covrtSigUpdateFcn(chartInstance->c10_covrtInstance, 6U,
                      (*chartInstance->c10_s_tv_est)[c10_i]);
  }

  for (c10_i1 = 0; c10_i1 < 20; c10_i1++) {
    covrtSigUpdateFcn(chartInstance->c10_covrtInstance, 5U,
                      (*chartInstance->c10_v_est)[c10_i1]);
  }

  for (c10_i2 = 0; c10_i2 < 20; c10_i2++) {
    covrtSigUpdateFcn(chartInstance->c10_covrtInstance, 4U,
                      (*chartInstance->c10_s_est)[c10_i2]);
  }

  covrtSigUpdateFcn(chartInstance->c10_covrtInstance, 3U,
                    *chartInstance->c10_v_measured);
  covrtSigUpdateFcn(chartInstance->c10_covrtInstance, 2U,
                    *chartInstance->c10_s_measured);
  for (c10_i3 = 0; c10_i3 < 20; c10_i3++) {
    covrtSigUpdateFcn(chartInstance->c10_covrtInstance, 1U,
                      (*chartInstance->c10_Tvec)[c10_i3]);
  }

  covrtSigUpdateFcn(chartInstance->c10_covrtInstance, 0U,
                    *chartInstance->c10_N_hor);
  _sfTime_ = sf_get_time(chartInstance->S);
  chartInstance->c10_JITTransitionAnimation[0] = 0U;
  chartInstance->c10_sfEvent = CALL_EVENT;
  c10_b_N_hor = *chartInstance->c10_N_hor;
  c10_b_s_measured = *chartInstance->c10_s_measured;
  c10_b_v_measured = *chartInstance->c10_v_measured;
  c10_c_N_hor = c10_b_N_hor;
  for (c10_i4 = 0; c10_i4 < 20; c10_i4++) {
    c10_b_Tvec[c10_i4] = (*chartInstance->c10_Tvec)[c10_i4];
  }

  c10_c_s_measured = c10_b_s_measured;
  c10_c_v_measured = c10_b_v_measured;
  for (c10_i5 = 0; c10_i5 < 20; c10_i5++) {
    c10_b_s_est[c10_i5] = (*chartInstance->c10_s_est)[c10_i5];
  }

  for (c10_i6 = 0; c10_i6 < 20; c10_i6++) {
    c10_b_v_est[c10_i6] = (*chartInstance->c10_v_est)[c10_i6];
  }

  for (c10_i7 = 0; c10_i7 < 20; c10_i7++) {
    c10_b_s_tv_est[c10_i7] = (*chartInstance->c10_s_tv_est)[c10_i7];
  }

  c10_b_OPTsettings = chartInstance->c10_OPTsettings;
  c10_b_V = chartInstance->c10_V;
  covrtEmlFcnEval(chartInstance->c10_covrtInstance, 4U, 0, 0);
  chartInstance->c10_n_x = 2.0;
  chartInstance->c10_n_x_not_empty = true;
  chartInstance->c10_n_u = 5.0;
  chartInstance->c10_n_u_not_empty = true;
  chartInstance->c10_n_x_u = chartInstance->c10_n_x + chartInstance->c10_n_u;
  chartInstance->c10_n_x_u_not_empty = true;
  chartInstance->c10_t_0 = 0.0;
  chartInstance->c10_t_0_not_empty = true;
  chartInstance->c10_a_minus1 = 0.0;
  chartInstance->c10_a_minus1_not_empty = true;
  chartInstance->c10_Ts = 0.5;
  chartInstance->c10_Ts_not_empty = true;
  chartInstance->c10_b_N = c10_c_N_hor;
  chartInstance->c10_b_N_not_empty = true;
  c10_b_st.site = &c10_tj_emlrtRSI;
  c10_CreateQP_ABSimulink(chartInstance, &c10_b_st, &c10_b_OPTsettings,
    chartInstance->c10_n_x, chartInstance->c10_n_u, c10_c_s_measured,
    c10_c_v_measured, c10_b_s_est, c10_b_v_est, c10_b_s_tv_est,
    chartInstance->c10_a_minus1, c10_c_H, c10_c_data, c10_c_size, c10_c_G,
    c10_z_lb_data, c10_z_lb_size, c10_z_ub_data, c10_z_ub_size, c10_g_lb_data,
    c10_g_lb_size, c10_g_ub_data, c10_g_ub_size);
  chartInstance->c10_H.set_size(&c10_emlrtRTEI, &c10_st, 142, 142);
  c10_loop_ub = 20163;
  for (c10_i8 = 0; c10_i8 <= c10_loop_ub; c10_i8++) {
    chartInstance->c10_H[c10_i8] = c10_c_H[c10_i8];
  }

  c10_b = (chartInstance->c10_H.size(0) == 0);
  c10_b1 = (chartInstance->c10_H.size(1) == 0);
  chartInstance->c10_H_not_empty = ((!c10_b) && (!c10_b1));
  chartInstance->c10_c.set_size(&c10_b_emlrtRTEI, &c10_st, 142);
  for (c10_i9 = 0; c10_i9 < 142; c10_i9++) {
    chartInstance->c10_c[c10_i9] = c10_c_data[c10_i9];
  }

  chartInstance->c10_c_not_empty = (chartInstance->c10_c.size(0) != 0);
  chartInstance->c10_b_G.set_size(&c10_c_emlrtRTEI, &c10_st, 602, 142);
  c10_b_loop_ub = 85483;
  for (c10_i10 = 0; c10_i10 <= c10_b_loop_ub; c10_i10++) {
    chartInstance->c10_b_G[c10_i10] = c10_c_G[c10_i10];
  }

  c10_b2 = (chartInstance->c10_b_G.size(0) == 0);
  c10_b3 = (chartInstance->c10_b_G.size(1) == 0);
  chartInstance->c10_G_not_empty = ((!c10_b2) && (!c10_b3));
  chartInstance->c10_z_lb.size[0] = c10_z_lb_size[0];
  c10_c_loop_ub = c10_z_lb_size[0] - 1;
  for (c10_i11 = 0; c10_i11 <= c10_c_loop_ub; c10_i11++) {
    chartInstance->c10_z_lb.data[c10_i11] = c10_z_lb_data[c10_i11];
  }

  chartInstance->c10_z_lb_not_empty = (chartInstance->c10_z_lb.size[0] != 0);
  chartInstance->c10_z_ub.size[0] = c10_z_ub_size[0];
  c10_d_loop_ub = c10_z_ub_size[0] - 1;
  for (c10_i12 = 0; c10_i12 <= c10_d_loop_ub; c10_i12++) {
    chartInstance->c10_z_ub.data[c10_i12] = c10_z_ub_data[c10_i12];
  }

  chartInstance->c10_z_ub_not_empty = (chartInstance->c10_z_ub.size[0] != 0);
  chartInstance->c10_g_lb.size[0] = 602;
  for (c10_i13 = 0; c10_i13 < 602; c10_i13++) {
    chartInstance->c10_g_lb.data[c10_i13] = c10_g_lb_data[c10_i13];
  }

  chartInstance->c10_g_lb_not_empty = (chartInstance->c10_g_lb.size[0] != 0);
  chartInstance->c10_g_ub.size[0] = 602;
  for (c10_i14 = 0; c10_i14 < 602; c10_i14++) {
    chartInstance->c10_g_ub.data[c10_i14] = c10_g_ub_data[c10_i14];
  }

  chartInstance->c10_g_ub_not_empty = (chartInstance->c10_g_ub.size[0] != 0);
  c10_r1.set_size(&c10_h_emlrtRTEI, &c10_st, chartInstance->c10_b_G.size(0),
                  chartInstance->c10_b_G.size(1));
  c10_e_loop_ub = chartInstance->c10_b_G.size(0) * chartInstance->c10_b_G.size(1)
    - 1;
  for (c10_i15 = 0; c10_i15 <= c10_e_loop_ub; c10_i15++) {
    c10_r1[c10_i15] = chartInstance->c10_b_G[c10_i15];
  }

  c10_b_st.site = &c10_uj_emlrtRSI;
  c10_toLogicalCheck(chartInstance, &c10_b_st, c10_r1);
  c10_r2.set_size(&c10_i_emlrtRTEI, &c10_st, chartInstance->c10_b_G.size(0),
                  chartInstance->c10_b_G.size(1));
  c10_f_loop_ub = chartInstance->c10_b_G.size(0) * chartInstance->c10_b_G.size(1)
    - 1;
  for (c10_i16 = 0; c10_i16 <= c10_f_loop_ub; c10_i16++) {
    c10_r2[c10_i16] = !(chartInstance->c10_b_G[c10_i16] != 0.0);
  }

  c10_b_st.site = &c10_uj_emlrtRSI;
  c10_all(chartInstance, &c10_b_st, c10_r2, c10_zeroColsG_data,
          c10_zeroColsG_size);
  c10_r3.set_size(&c10_j_emlrtRTEI, &c10_st, chartInstance->c10_b_G.size(0),
                  chartInstance->c10_b_G.size(1));
  c10_g_loop_ub = chartInstance->c10_b_G.size(0) * chartInstance->c10_b_G.size(1)
    - 1;
  for (c10_i17 = 0; c10_i17 <= c10_g_loop_ub; c10_i17++) {
    c10_r3[c10_i17] = chartInstance->c10_b_G[c10_i17];
  }

  c10_b_st.site = &c10_vj_emlrtRSI;
  c10_b_nullAssignment(chartInstance, &c10_b_st, c10_r3, c10_zeroColsG_data);
  chartInstance->c10_b_G.set_size(&c10_j_emlrtRTEI, &c10_st, c10_r3.size(0), 142);
  c10_h_loop_ub = c10_r3.size(0) * 142 - 1;
  for (c10_i18 = 0; c10_i18 <= c10_h_loop_ub; c10_i18++) {
    chartInstance->c10_b_G[c10_i18] = c10_r3[c10_i18];
  }

  c10_b4 = (chartInstance->c10_b_G.size(0) == 0);
  c10_b5 = (chartInstance->c10_b_G.size(1) == 0);
  chartInstance->c10_G_not_empty = ((!c10_b4) && (!c10_b5));
  c10_d = static_cast<real_T>(chartInstance->c10_b_G.size(0));
  c10_b6 = (c10_d < 1.0);
  c10_b7 = c10_b6;
  c10_b8 = false;
  c10_b9 = (c10_b7 || c10_b8);
  if (c10_b9) {
    c10_i20 = 1;
    c10_i21 = 0;
  } else {
    c10_i19 = 1;
    if ((c10_i19 < 1) || (c10_i19 > chartInstance->c10_g_lb.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_i19, 1, chartInstance->c10_g_lb.size[0],
        &c10_emlrtBCI, &c10_st);
    }

    c10_i20 = c10_i19;
    if (c10_d != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d)))) {
      emlrtIntegerCheckR2012b(c10_d, &c10_emlrtDCI, &c10_st);
    }

    c10_i22 = static_cast<int32_T>(c10_d);
    if ((c10_i22 < 1) || (c10_i22 > chartInstance->c10_g_lb.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_i22, 1, chartInstance->c10_g_lb.size[0],
        &c10_b_emlrtBCI, &c10_st);
    }

    c10_i21 = c10_i22;
  }

  c10_b_st.site = &c10_wj_emlrtRSI;
  c10_b_indexShapeCheck(chartInstance);
  c10_tmp_size[0] = (c10_i21 - c10_i20) + 1;
  c10_i_loop_ub = c10_i21 - c10_i20;
  for (c10_i23 = 0; c10_i23 <= c10_i_loop_ub; c10_i23++) {
    c10_tmp_data[c10_i23] = chartInstance->c10_g_lb.data[(c10_i20 + c10_i23) - 1];
  }

  chartInstance->c10_g_lb.size[0] = c10_tmp_size[0];
  c10_j_loop_ub = c10_tmp_size[0] - 1;
  for (c10_i24 = 0; c10_i24 <= c10_j_loop_ub; c10_i24++) {
    chartInstance->c10_g_lb.data[c10_i24] = c10_tmp_data[c10_i24];
  }

  chartInstance->c10_g_lb_not_empty = (chartInstance->c10_g_lb.size[0] != 0);
  c10_d1 = static_cast<real_T>(chartInstance->c10_b_G.size(0));
  c10_b10 = (c10_d1 < 1.0);
  c10_b11 = c10_b10;
  c10_b12 = false;
  c10_b13 = (c10_b11 || c10_b12);
  if (c10_b13) {
    c10_i26 = 1;
    c10_i27 = 0;
  } else {
    c10_i25 = 1;
    if ((c10_i25 < 1) || (c10_i25 > chartInstance->c10_g_ub.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_i25, 1, chartInstance->c10_g_ub.size[0],
        &c10_c_emlrtBCI, &c10_st);
    }

    c10_i26 = c10_i25;
    if (c10_d1 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d1)))) {
      emlrtIntegerCheckR2012b(c10_d1, &c10_b_emlrtDCI, &c10_st);
    }

    c10_i28 = static_cast<int32_T>(c10_d1);
    if ((c10_i28 < 1) || (c10_i28 > chartInstance->c10_g_ub.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_i28, 1, chartInstance->c10_g_ub.size[0],
        &c10_d_emlrtBCI, &c10_st);
    }

    c10_i27 = c10_i28;
  }

  c10_b_st.site = &c10_xj_emlrtRSI;
  c10_b_indexShapeCheck(chartInstance);
  c10_b_tmp_size[0] = (c10_i27 - c10_i26) + 1;
  c10_k_loop_ub = c10_i27 - c10_i26;
  for (c10_i29 = 0; c10_i29 <= c10_k_loop_ub; c10_i29++) {
    c10_b_tmp_data[c10_i29] = chartInstance->c10_g_ub.data[(c10_i26 + c10_i29) -
      1];
  }

  chartInstance->c10_g_ub.size[0] = c10_b_tmp_size[0];
  c10_m_loop_ub = c10_b_tmp_size[0] - 1;
  for (c10_i30 = 0; c10_i30 <= c10_m_loop_ub; c10_i30++) {
    chartInstance->c10_g_ub.data[c10_i30] = c10_b_tmp_data[c10_i30];
  }

  chartInstance->c10_g_ub_not_empty = (chartInstance->c10_g_ub.size[0] != 0);
  if (!(c10_c_N_hor >= 0.0)) {
    emlrtNonNegativeCheckR2012b(c10_c_N_hor, &c10_y_emlrtDCI, &c10_st);
  }

  c10_d2 = c10_c_N_hor;
  if (c10_d2 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
        (c10_d2)))) {
    emlrtIntegerCheckR2012b(c10_d2, &c10_x_emlrtDCI, &c10_st);
  }

  c10_d3 = trunc(c10_d2);
  if (muDoubleScalarIsNaN(c10_d3) || muDoubleScalarIsInf(c10_d3)) {
    c10_d4 = 0.0;
  } else {
    c10_d4 = muDoubleScalarRem(c10_d3, 4.294967296E+9);
  }

  c10_roundFloatVar = trunc(c10_d2);
  if (c10_d4 < 0.0) {
    c10_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d4));
  } else {
    c10_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d4));
  }

  if (c10_roundFloatVar < 0.0) {
    c10_d5 = muDoubleScalarCeil(c10_roundFloatVar);
  } else {
    c10_d5 = muDoubleScalarFloor(c10_roundFloatVar);
  }

  if (static_cast<real_T>(c10_fixedVar) != c10_d5) {
    sf_data_overflow_error(chartInstance->S, 1U, 1538, 5);
  }

  c10_A.set_size(&c10_q_emlrtRTEI, &c10_st, c10_fixedVar, 2, 2);
  if (!(c10_c_N_hor >= 0.0)) {
    emlrtNonNegativeCheckR2012b(c10_c_N_hor, &c10_m_emlrtDCI, &c10_st);
  }

  c10_d6 = c10_c_N_hor;
  if (c10_d6 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
        (c10_d6)))) {
    emlrtIntegerCheckR2012b(c10_d6, &c10_k_emlrtDCI, &c10_st);
  }

  if (!(chartInstance->c10_n_x >= 0.0)) {
    emlrtNonNegativeCheckR2012b(chartInstance->c10_n_x, &c10_m_emlrtDCI, &c10_st);
  }

  c10_d7 = chartInstance->c10_n_x;
  if (c10_d7 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
        (c10_d7)))) {
    emlrtIntegerCheckR2012b(c10_d7, &c10_k_emlrtDCI, &c10_st);
  }

  if (!(chartInstance->c10_n_x >= 0.0)) {
    emlrtNonNegativeCheckR2012b(chartInstance->c10_n_x, &c10_m_emlrtDCI, &c10_st);
  }

  c10_d8 = chartInstance->c10_n_x;
  if (c10_d8 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
        (c10_d8)))) {
    emlrtIntegerCheckR2012b(c10_d8, &c10_k_emlrtDCI, &c10_st);
  }

  c10_d9 = trunc(c10_d6);
  if (muDoubleScalarIsNaN(c10_d9) || muDoubleScalarIsInf(c10_d9)) {
    c10_d10 = 0.0;
  } else {
    c10_d10 = muDoubleScalarRem(c10_d9, 4.294967296E+9);
  }

  c10_b_roundFloatVar = trunc(c10_d6);
  if (c10_d10 < 0.0) {
    c10_b_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d10));
  } else {
    c10_b_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d10));
  }

  if (c10_b_roundFloatVar < 0.0) {
    c10_d11 = muDoubleScalarCeil(c10_b_roundFloatVar);
  } else {
    c10_d11 = muDoubleScalarFloor(c10_b_roundFloatVar);
  }

  if (static_cast<real_T>(c10_b_fixedVar) != c10_d11) {
    sf_data_overflow_error(chartInstance->S, 1U, 1528, 24);
  }

  c10_d12 = trunc(c10_d7);
  if (muDoubleScalarIsNaN(c10_d12) || muDoubleScalarIsInf(c10_d12)) {
    c10_d13 = 0.0;
  } else {
    c10_d13 = muDoubleScalarRem(c10_d12, 4.294967296E+9);
  }

  c10_c_roundFloatVar = trunc(c10_d7);
  if (c10_d13 < 0.0) {
    c10_c_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d13));
  } else {
    c10_c_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d13));
  }

  if (c10_c_roundFloatVar < 0.0) {
    c10_d14 = muDoubleScalarCeil(c10_c_roundFloatVar);
  } else {
    c10_d14 = muDoubleScalarFloor(c10_c_roundFloatVar);
  }

  if (static_cast<real_T>(c10_c_fixedVar) != c10_d14) {
    sf_data_overflow_error(chartInstance->S, 1U, 1528, 24);
  }

  c10_d15 = trunc(c10_d8);
  if (muDoubleScalarIsNaN(c10_d15) || muDoubleScalarIsInf(c10_d15)) {
    c10_d16 = 0.0;
  } else {
    c10_d16 = muDoubleScalarRem(c10_d15, 4.294967296E+9);
  }

  c10_d_roundFloatVar = trunc(c10_d8);
  if (c10_d16 < 0.0) {
    c10_d_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d16));
  } else {
    c10_d_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d16));
  }

  if (c10_d_roundFloatVar < 0.0) {
    c10_d17 = muDoubleScalarCeil(c10_d_roundFloatVar);
  } else {
    c10_d17 = muDoubleScalarFloor(c10_d_roundFloatVar);
  }

  if (static_cast<real_T>(c10_d_fixedVar) != c10_d17) {
    sf_data_overflow_error(chartInstance->S, 1U, 1528, 24);
  }

  c10_o_loop_ub = c10_b_fixedVar * c10_c_fixedVar * c10_d_fixedVar - 1;
  for (c10_i31 = 0; c10_i31 <= c10_o_loop_ub; c10_i31++) {
    c10_A[c10_i31] = 0.0;
  }

  if (!(c10_c_N_hor >= 0.0)) {
    emlrtNonNegativeCheckR2012b(c10_c_N_hor, &c10_bb_emlrtDCI, &c10_st);
  }

  c10_d18 = c10_c_N_hor;
  if (c10_d18 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
        (c10_d18)))) {
    emlrtIntegerCheckR2012b(c10_d18, &c10_ab_emlrtDCI, &c10_st);
  }

  c10_d19 = trunc(c10_d18);
  if (muDoubleScalarIsNaN(c10_d19) || muDoubleScalarIsInf(c10_d19)) {
    c10_d20 = 0.0;
  } else {
    c10_d20 = muDoubleScalarRem(c10_d19, 4.294967296E+9);
  }

  c10_e_roundFloatVar = trunc(c10_d18);
  if (c10_d20 < 0.0) {
    c10_e_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d20));
  } else {
    c10_e_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d20));
  }

  if (c10_e_roundFloatVar < 0.0) {
    c10_d21 = muDoubleScalarCeil(c10_e_roundFloatVar);
  } else {
    c10_d21 = muDoubleScalarFloor(c10_e_roundFloatVar);
  }

  if (static_cast<real_T>(c10_e_fixedVar) != c10_d21) {
    sf_data_overflow_error(chartInstance->S, 1U, 1572, 5);
  }

  c10_c_B.set_size(&c10_r_emlrtRTEI, &c10_st, c10_e_fixedVar, 2, 5);
  if (!(c10_c_N_hor >= 0.0)) {
    emlrtNonNegativeCheckR2012b(c10_c_N_hor, &c10_p_emlrtDCI, &c10_st);
  }

  c10_d22 = c10_c_N_hor;
  if (c10_d22 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
        (c10_d22)))) {
    emlrtIntegerCheckR2012b(c10_d22, &c10_o_emlrtDCI, &c10_st);
  }

  if (!(chartInstance->c10_n_x >= 0.0)) {
    emlrtNonNegativeCheckR2012b(chartInstance->c10_n_x, &c10_p_emlrtDCI, &c10_st);
  }

  c10_d23 = chartInstance->c10_n_x;
  if (c10_d23 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
        (c10_d23)))) {
    emlrtIntegerCheckR2012b(c10_d23, &c10_o_emlrtDCI, &c10_st);
  }

  if (!(chartInstance->c10_n_u >= 0.0)) {
    emlrtNonNegativeCheckR2012b(chartInstance->c10_n_u, &c10_p_emlrtDCI, &c10_st);
  }

  c10_d24 = chartInstance->c10_n_u;
  if (c10_d24 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
        (c10_d24)))) {
    emlrtIntegerCheckR2012b(c10_d24, &c10_o_emlrtDCI, &c10_st);
  }

  c10_d25 = trunc(c10_d22);
  if (muDoubleScalarIsNaN(c10_d25) || muDoubleScalarIsInf(c10_d25)) {
    c10_d26 = 0.0;
  } else {
    c10_d26 = muDoubleScalarRem(c10_d25, 4.294967296E+9);
  }

  c10_f_roundFloatVar = trunc(c10_d22);
  if (c10_d26 < 0.0) {
    c10_f_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d26));
  } else {
    c10_f_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d26));
  }

  if (c10_f_roundFloatVar < 0.0) {
    c10_d27 = muDoubleScalarCeil(c10_f_roundFloatVar);
  } else {
    c10_d27 = muDoubleScalarFloor(c10_f_roundFloatVar);
  }

  if (static_cast<real_T>(c10_f_fixedVar) != c10_d27) {
    sf_data_overflow_error(chartInstance->S, 1U, 1562, 24);
  }

  c10_d28 = trunc(c10_d23);
  if (muDoubleScalarIsNaN(c10_d28) || muDoubleScalarIsInf(c10_d28)) {
    c10_d29 = 0.0;
  } else {
    c10_d29 = muDoubleScalarRem(c10_d28, 4.294967296E+9);
  }

  c10_g_roundFloatVar = trunc(c10_d23);
  if (c10_d29 < 0.0) {
    c10_g_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d29));
  } else {
    c10_g_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d29));
  }

  if (c10_g_roundFloatVar < 0.0) {
    c10_d30 = muDoubleScalarCeil(c10_g_roundFloatVar);
  } else {
    c10_d30 = muDoubleScalarFloor(c10_g_roundFloatVar);
  }

  if (static_cast<real_T>(c10_g_fixedVar) != c10_d30) {
    sf_data_overflow_error(chartInstance->S, 1U, 1562, 24);
  }

  c10_d31 = trunc(c10_d24);
  if (muDoubleScalarIsNaN(c10_d31) || muDoubleScalarIsInf(c10_d31)) {
    c10_d32 = 0.0;
  } else {
    c10_d32 = muDoubleScalarRem(c10_d31, 4.294967296E+9);
  }

  c10_h_roundFloatVar = trunc(c10_d24);
  if (c10_d32 < 0.0) {
    c10_h_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d32));
  } else {
    c10_h_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d32));
  }

  if (c10_h_roundFloatVar < 0.0) {
    c10_d33 = muDoubleScalarCeil(c10_h_roundFloatVar);
  } else {
    c10_d33 = muDoubleScalarFloor(c10_h_roundFloatVar);
  }

  if (static_cast<real_T>(c10_h_fixedVar) != c10_d33) {
    sf_data_overflow_error(chartInstance->S, 1U, 1562, 24);
  }

  c10_p_loop_ub = c10_f_fixedVar * c10_g_fixedVar * c10_h_fixedVar - 1;
  for (c10_i32 = 0; c10_i32 <= c10_p_loop_ub; c10_i32++) {
    c10_c_B[c10_i32] = 0.0;
  }

  if (!(c10_c_N_hor >= 0.0)) {
    emlrtNonNegativeCheckR2012b(c10_c_N_hor, &c10_db_emlrtDCI, &c10_st);
  }

  c10_d34 = c10_c_N_hor;
  if (c10_d34 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
        (c10_d34)))) {
    emlrtIntegerCheckR2012b(c10_d34, &c10_cb_emlrtDCI, &c10_st);
  }

  c10_d35 = trunc(c10_d34);
  if (muDoubleScalarIsNaN(c10_d35) || muDoubleScalarIsInf(c10_d35)) {
    c10_d36 = 0.0;
  } else {
    c10_d36 = muDoubleScalarRem(c10_d35, 4.294967296E+9);
  }

  c10_i_roundFloatVar = trunc(c10_d34);
  if (c10_d36 < 0.0) {
    c10_i_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d36));
  } else {
    c10_i_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d36));
  }

  if (c10_i_roundFloatVar < 0.0) {
    c10_d37 = muDoubleScalarCeil(c10_i_roundFloatVar);
  } else {
    c10_d37 = muDoubleScalarFloor(c10_i_roundFloatVar);
  }

  if (static_cast<real_T>(c10_i_fixedVar) != c10_d37) {
    sf_data_overflow_error(chartInstance->S, 1U, 1606, 5);
  }

  c10_b_D.set_size(&c10_s_emlrtRTEI, &c10_st, c10_i_fixedVar, 2);
  if (!(c10_c_N_hor >= 0.0)) {
    emlrtNonNegativeCheckR2012b(c10_c_N_hor, &c10_r_emlrtDCI, &c10_st);
  }

  c10_d38 = c10_c_N_hor;
  if (c10_d38 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
        (c10_d38)))) {
    emlrtIntegerCheckR2012b(c10_d38, &c10_q_emlrtDCI, &c10_st);
  }

  if (!(chartInstance->c10_n_x >= 0.0)) {
    emlrtNonNegativeCheckR2012b(chartInstance->c10_n_x, &c10_r_emlrtDCI, &c10_st);
  }

  c10_d39 = chartInstance->c10_n_x;
  if (c10_d39 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
        (c10_d39)))) {
    emlrtIntegerCheckR2012b(c10_d39, &c10_q_emlrtDCI, &c10_st);
  }

  c10_d40 = trunc(c10_d38);
  if (muDoubleScalarIsNaN(c10_d40) || muDoubleScalarIsInf(c10_d40)) {
    c10_d41 = 0.0;
  } else {
    c10_d41 = muDoubleScalarRem(c10_d40, 4.294967296E+9);
  }

  c10_j_roundFloatVar = trunc(c10_d38);
  if (c10_d41 < 0.0) {
    c10_j_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d41));
  } else {
    c10_j_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d41));
  }

  if (c10_j_roundFloatVar < 0.0) {
    c10_d42 = muDoubleScalarCeil(c10_j_roundFloatVar);
  } else {
    c10_d42 = muDoubleScalarFloor(c10_j_roundFloatVar);
  }

  if (static_cast<real_T>(c10_j_fixedVar) != c10_d42) {
    sf_data_overflow_error(chartInstance->S, 1U, 1596, 20);
  }

  c10_d43 = trunc(c10_d39);
  if (muDoubleScalarIsNaN(c10_d43) || muDoubleScalarIsInf(c10_d43)) {
    c10_d44 = 0.0;
  } else {
    c10_d44 = muDoubleScalarRem(c10_d43, 4.294967296E+9);
  }

  c10_k_roundFloatVar = trunc(c10_d39);
  if (c10_d44 < 0.0) {
    c10_k_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d44));
  } else {
    c10_k_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d44));
  }

  if (c10_k_roundFloatVar < 0.0) {
    c10_d45 = muDoubleScalarCeil(c10_k_roundFloatVar);
  } else {
    c10_d45 = muDoubleScalarFloor(c10_k_roundFloatVar);
  }

  if (static_cast<real_T>(c10_k_fixedVar) != c10_d45) {
    sf_data_overflow_error(chartInstance->S, 1U, 1596, 20);
  }

  c10_q_loop_ub = c10_j_fixedVar * c10_k_fixedVar - 1;
  for (c10_i33 = 0; c10_i33 <= c10_q_loop_ub; c10_i33++) {
    c10_b_D[c10_i33] = 0.0;
  }

  c10_d_N_hor = c10_c_N_hor;
  c10_i34 = static_cast<int32_T>(c10_d_N_hor);
  emlrtForLoopVectorCheckR2021a(1.0, 1.0, c10_d_N_hor, mxDOUBLE_CLASS, c10_i34,
    &c10_pi_emlrtRTEI, &c10_st);
  for (c10_k = 0; c10_k < c10_i34; c10_k++) {
    c10_b_k = 1.0 + static_cast<real_T>(c10_k);
    covrtEmlForEval(chartInstance->c10_covrtInstance, 4U, 0, 0, 1);
    if (c10_b_k != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_b_k)))) {
      emlrtIntegerCheckR2012b(c10_b_k, &c10_c_emlrtDCI, &c10_st);
    }

    c10_i36 = c10_A.size(0);
    c10_i37 = static_cast<int32_T>(c10_b_k);
    if ((c10_i37 < 1) || (c10_i37 > c10_i36)) {
      emlrtDynamicBoundsCheckR2012b(c10_i37, 1, c10_i36, &c10_e_emlrtBCI,
        &c10_st);
    }

    c10_d_k = c10_i37 - 1;
    c10_A[c10_d_k] = 1.0;
    if (c10_b_k != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_b_k)))) {
      emlrtIntegerCheckR2012b(c10_b_k, &c10_s_emlrtDCI, &c10_st);
    }

    c10_i40 = static_cast<int32_T>(c10_b_k);
    if ((c10_i40 < 1) || (c10_i40 > 20)) {
      emlrtDynamicBoundsCheckR2012b(c10_i40, 1, 20, &c10_o_emlrtBCI, &c10_st);
    }

    c10_A[c10_d_k + (c10_A.size(0) << 1)] = c10_b_Tvec[c10_i40 - 1];
    for (c10_i42 = 0; c10_i42 < 2; c10_i42++) {
      c10_i43 = c10_i42 + 1;
      if ((c10_i43 < 1) || (c10_i43 > 2)) {
        emlrtDynamicBoundsCheckR2012b(c10_i43, 1, 2, &c10_p_emlrtBCI, &c10_st);
      }

      c10_A[(c10_d_k + c10_A.size(0)) + (c10_A.size(0) << 1) * (c10_i43 - 1)] =
        static_cast<real_T>(c10_i42);
    }

    c10_b_st.site = &c10_yj_emlrtRSI;
    if (c10_b_k != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_b_k)))) {
      emlrtIntegerCheckR2012b(c10_b_k, &c10_t_emlrtDCI, &c10_b_st);
    }

    c10_i45 = static_cast<int32_T>(c10_b_k);
    if ((c10_i45 < 1) || (c10_i45 > 20)) {
      emlrtDynamicBoundsCheckR2012b(c10_i45, 1, 20, &c10_q_emlrtBCI, &c10_b_st);
    }

    c10_b_a = c10_b_Tvec[c10_i45 - 1];
    c10_c_st.site = &c10_k_emlrtRSI;
    c10_c_a = c10_b_a;
    c10_d_st.site = &c10_m_emlrtRSI;
    c10_d_a = c10_c_a;
    if (c10_fltpower_domain_error(chartInstance)) {
      sf_mex_call(&c10_d_st, &c10_emlrtMCI, "error", 0U, 2U, 14,
                  c10_emlrt_marshallOut(chartInstance, c10_cv), 14, sf_mex_call(
        &c10_d_st, NULL, "getString", 1U, 1U, 14, sf_mex_call(&c10_d_st, NULL,
        "message", 1U, 1U, 14, c10_emlrt_marshallOut(chartInstance, c10_cv))));
    }

    c10_e_a = c10_d_a;
    c10_f_a = c10_e_a;
    c10_c_c = c10_f_a * c10_f_a;
    c10_i48 = c10_c_B.size(0);
    if (c10_b_k != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_b_k)))) {
      emlrtIntegerCheckR2012b(c10_b_k, &c10_u_emlrtDCI, &c10_st);
    }

    c10_i50 = static_cast<int32_T>(c10_b_k);
    if ((c10_i50 < 1) || (c10_i50 > c10_i48)) {
      emlrtDynamicBoundsCheckR2012b(c10_i50, 1, c10_i48, &c10_r_emlrtBCI,
        &c10_st);
    }

    c10_i51 = 1;
    if ((c10_i51 < 1) || (c10_i51 > 2)) {
      emlrtDynamicBoundsCheckR2012b(c10_i51, 1, 2, &c10_s_emlrtBCI, &c10_st);
    }

    c10_i52 = 1;
    if ((c10_i52 < 1) || (c10_i52 > 5)) {
      emlrtDynamicBoundsCheckR2012b(c10_i52, 1, 5, &c10_t_emlrtBCI, &c10_st);
    }

    c10_c_B[((c10_i50 + c10_c_B.size(0) * (c10_i51 - 1)) + (c10_c_B.size(0) << 1)
             * (c10_i52 - 1)) - 1] = 0.5 * c10_c_c;
    if (c10_b_k != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_b_k)))) {
      emlrtIntegerCheckR2012b(c10_b_k, &c10_v_emlrtDCI, &c10_st);
    }

    c10_i55 = static_cast<int32_T>(c10_b_k);
    if ((c10_i55 < 1) || (c10_i55 > 20)) {
      emlrtDynamicBoundsCheckR2012b(c10_i55, 1, 20, &c10_u_emlrtBCI, &c10_st);
    }

    c10_i56 = c10_c_B.size(0);
    if (c10_b_k != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_b_k)))) {
      emlrtIntegerCheckR2012b(c10_b_k, &c10_w_emlrtDCI, &c10_st);
    }

    c10_i57 = static_cast<int32_T>(c10_b_k);
    if ((c10_i57 < 1) || (c10_i57 > c10_i56)) {
      emlrtDynamicBoundsCheckR2012b(c10_i57, 1, c10_i56, &c10_v_emlrtBCI,
        &c10_st);
    }

    c10_i58 = 2;
    if ((c10_i58 < 1) || (c10_i58 > 2)) {
      emlrtDynamicBoundsCheckR2012b(c10_i58, 1, 2, &c10_w_emlrtBCI, &c10_st);
    }

    c10_i59 = 1;
    if ((c10_i59 < 1) || (c10_i59 > 5)) {
      emlrtDynamicBoundsCheckR2012b(c10_i59, 1, 5, &c10_x_emlrtBCI, &c10_st);
    }

    c10_c_B[((c10_i57 + c10_c_B.size(0) * (c10_i58 - 1)) + (c10_c_B.size(0) << 1)
             * (c10_i59 - 1)) - 1] = c10_b_Tvec[c10_i55 - 1];
    if (c10_b_k != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_b_k)))) {
      emlrtIntegerCheckR2012b(c10_b_k, &c10_d_emlrtDCI, &c10_st);
    }

    c10_i60 = c10_b_D.size(0);
    c10_i61 = static_cast<int32_T>(c10_b_k);
    if ((c10_i61 < 1) || (c10_i61 > c10_i60)) {
      emlrtDynamicBoundsCheckR2012b(c10_i61, 1, c10_i60, &c10_f_emlrtBCI,
        &c10_st);
    }

    c10_i62 = c10_i61;
    for (c10_i64 = 0; c10_i64 < 2; c10_i64++) {
      c10_e_tmp_data[c10_i64] = c10_i64;
    }

    c10_iv[0] = 1;
    c10_iv[1] = 2;
    c10_iv1[0] = 2;
    emlrtSubAssignSizeCheckR2012b(&c10_iv[0], 2, &c10_iv1[0], 1, &c10_emlrtECI,
      &c10_st);
    c10_i66 = c10_i62 - 1;
    for (c10_i67 = 0; c10_i67 < 2; c10_i67++) {
      c10_b_D[c10_i66 + c10_b_D.size(0) * c10_e_tmp_data[c10_i67]] = 0.0;
    }

    _SF_MEX_LISTEN_FOR_CTRL_C(chartInstance->S);
  }

  covrtEmlForEval(chartInstance->c10_covrtInstance, 4U, 0, 0, 0);
  c10_r4.set_size(&c10_u_emlrtRTEI, &c10_st, chartInstance->c10_H.size(0),
                  chartInstance->c10_H.size(1));
  c10_r_loop_ub = chartInstance->c10_H.size(0) * chartInstance->c10_H.size(1) -
    1;
  for (c10_i35 = 0; c10_i35 <= c10_r_loop_ub; c10_i35++) {
    c10_r4[c10_i35] = chartInstance->c10_H[c10_i35];
  }

  c10_r5.set_size(&c10_v_emlrtRTEI, &c10_st, chartInstance->c10_c.size(0));
  c10_s_loop_ub = chartInstance->c10_c.size(0) - 1;
  for (c10_i38 = 0; c10_i38 <= c10_s_loop_ub; c10_i38++) {
    c10_r5[c10_i38] = chartInstance->c10_c[c10_i38];
  }

  c10_r6.set_size(&c10_w_emlrtRTEI, &c10_st, chartInstance->c10_b_G.size(0),
                  chartInstance->c10_b_G.size(1));
  c10_t_loop_ub = chartInstance->c10_b_G.size(0) * chartInstance->c10_b_G.size(1)
    - 1;
  for (c10_i39 = 0; c10_i39 <= c10_t_loop_ub; c10_i39++) {
    c10_r6[c10_i39] = chartInstance->c10_b_G[c10_i39];
  }

  c10_c_tmp_size[0] = chartInstance->c10_g_lb.size[0];
  c10_u_loop_ub = chartInstance->c10_g_lb.size[0] - 1;
  for (c10_i41 = 0; c10_i41 <= c10_u_loop_ub; c10_i41++) {
    c10_c_tmp_data[c10_i41] = chartInstance->c10_g_lb.data[c10_i41];
  }

  c10_d_tmp_size[0] = chartInstance->c10_g_ub.size[0];
  c10_v_loop_ub = chartInstance->c10_g_ub.size[0] - 1;
  for (c10_i44 = 0; c10_i44 <= c10_v_loop_ub; c10_i44++) {
    c10_d_tmp_data[c10_i44] = chartInstance->c10_g_ub.data[c10_i44];
  }

  c10_b_st.site = &c10_ak_emlrtRSI;
  c10_TransformToDenseFormulation(chartInstance, &c10_b_st, c10_c_N_hor, c10_A,
    c10_c_B, c10_b_D, c10_r4, (real_T *)c10_r5.data(), c10_r6, c10_c_tmp_data,
    c10_c_tmp_size, c10_d_tmp_data, c10_d_tmp_size, chartInstance->c10_n_x,
    chartInstance->c10_n_u, c10_c_s_measured, c10_c_v_measured, c10_z_opt,
    c10_b_c, c10_d_G, c10_b_g_lb_data, c10_b_g_lb_size, c10_b_g_ub_data,
    c10_b_g_ub_size, c10_Psi, c10_c_d);
  chartInstance->c10_H.set_size(&c10_ab_emlrtRTEI, &c10_st, c10_z_opt.size(0),
    c10_z_opt.size(1));
  c10_w_loop_ub = c10_z_opt.size(0) * c10_z_opt.size(1) - 1;
  for (c10_i46 = 0; c10_i46 <= c10_w_loop_ub; c10_i46++) {
    chartInstance->c10_H[c10_i46] = c10_z_opt[c10_i46];
  }

  c10_b14 = (chartInstance->c10_H.size(0) == 0);
  c10_b15 = (chartInstance->c10_H.size(1) == 0);
  chartInstance->c10_H_not_empty = ((!c10_b14) && (!c10_b15));
  chartInstance->c10_c.set_size(&c10_bb_emlrtRTEI, &c10_st, c10_b_c.size(0));
  c10_x_loop_ub = c10_b_c.size(0) - 1;
  for (c10_i47 = 0; c10_i47 <= c10_x_loop_ub; c10_i47++) {
    chartInstance->c10_c[c10_i47] = c10_b_c[c10_i47];
  }

  chartInstance->c10_c_not_empty = (chartInstance->c10_c.size(0) != 0);
  chartInstance->c10_b_G.set_size(&c10_cb_emlrtRTEI, &c10_st, c10_d_G.size(0),
    c10_d_G.size(1));
  c10_y_loop_ub = c10_d_G.size(0) * c10_d_G.size(1) - 1;
  for (c10_i49 = 0; c10_i49 <= c10_y_loop_ub; c10_i49++) {
    chartInstance->c10_b_G[c10_i49] = c10_d_G[c10_i49];
  }

  c10_b16 = (chartInstance->c10_b_G.size(0) == 0);
  c10_b17 = (chartInstance->c10_b_G.size(1) == 0);
  chartInstance->c10_G_not_empty = ((!c10_b16) && (!c10_b17));
  chartInstance->c10_g_lb.size[0] = c10_b_g_lb_size[0];
  c10_ab_loop_ub = c10_b_g_lb_size[0] - 1;
  for (c10_i53 = 0; c10_i53 <= c10_ab_loop_ub; c10_i53++) {
    chartInstance->c10_g_lb.data[c10_i53] = c10_b_g_lb_data[c10_i53];
  }

  chartInstance->c10_g_lb_not_empty = (chartInstance->c10_g_lb.size[0] != 0);
  chartInstance->c10_g_ub.size[0] = c10_b_g_ub_size[0];
  c10_bb_loop_ub = c10_b_g_ub_size[0] - 1;
  for (c10_i54 = 0; c10_i54 <= c10_bb_loop_ub; c10_i54++) {
    chartInstance->c10_g_ub.data[c10_i54] = c10_b_g_ub_data[c10_i54];
  }

  chartInstance->c10_g_ub_not_empty = (chartInstance->c10_g_ub.size[0] != 0);
  chartInstance->c10_options = c10_b_r;
  chartInstance->c10_options_not_empty = true;
  c10_d46 = chartInstance->c10_b_N * chartInstance->c10_n_x_u;
  if (!(c10_d46 >= 0.0)) {
    emlrtNonNegativeCheckR2012b(c10_d46, &c10_e_emlrtDCI, &c10_st);
  }

  if (c10_d46 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
        (c10_d46)))) {
    emlrtIntegerCheckR2012b(c10_d46, &c10_f_emlrtDCI, &c10_st);
  }

  c10_d47 = trunc(c10_d46);
  if (muDoubleScalarIsNaN(c10_d47) || muDoubleScalarIsInf(c10_d47)) {
    c10_d48 = 0.0;
  } else {
    c10_d48 = muDoubleScalarRem(c10_d47, 4.294967296E+9);
  }

  c10_m_roundFloatVar = trunc(c10_d46);
  if (c10_d48 < 0.0) {
    c10_m_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d48));
  } else {
    c10_m_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d48));
  }

  if (c10_m_roundFloatVar < 0.0) {
    c10_d49 = muDoubleScalarCeil(c10_m_roundFloatVar);
  } else {
    c10_d49 = muDoubleScalarFloor(c10_m_roundFloatVar);
  }

  if (static_cast<real_T>(c10_m_fixedVar) != c10_d49) {
    sf_data_overflow_error(chartInstance->S, 1U, 2948, 7);
  }

  c10_i63 = c10_m_fixedVar;
  c10_b_st.site = &c10_bk_emlrtRSI;
  c10_d_G.set_size(&c10_fb_emlrtRTEI, &c10_b_st, chartInstance->c10_b_G.size(0),
                   chartInstance->c10_b_G.size(1));
  c10_cb_loop_ub = chartInstance->c10_b_G.size(0) * chartInstance->c10_b_G.size
    (1) - 1;
  for (c10_i65 = 0; c10_i65 <= c10_cb_loop_ub; c10_i65++) {
    c10_d_G[c10_i65] = -chartInstance->c10_b_G[c10_i65];
  }

  c10_c_st.site = &c10_jc_emlrtRSI;
  c10_sizes[0] = 0;
  c10_b18 = (chartInstance->c10_b_G.size(0) == 0);
  c10_b19 = (chartInstance->c10_b_G.size(1) == 0);
  c10_result = (c10_b18 || c10_b19);
  if (!c10_result) {
    c10_b_result = chartInstance->c10_b_G.size(1);
  } else {
    c10_b20 = (c10_d_G.size(0) == 0);
    c10_b21 = (c10_d_G.size(1) == 0);
    c10_c_result = (c10_b20 || c10_b21);
    if (!c10_c_result) {
      c10_b_result = c10_d_G.size(1);
    } else {
      if (chartInstance->c10_b_G.size(1) > 0) {
        c10_b_result = chartInstance->c10_b_G.size(1);
      } else {
        c10_b_result = 0;
      }

      if (c10_d_G.size(1) > c10_b_result) {
        c10_b_result = c10_d_G.size(1);
      }
    }
  }

  c10_sizes[1] = c10_b_result;
  c10_d_st.site = &c10_kc_emlrtRSI;
  c10_expected = c10_sizes[1];
  if (chartInstance->c10_b_G.size(1) == c10_expected) {
    c10_b23 = true;
  } else {
    c10_b22 = (chartInstance->c10_b_G.size(0) == 0);
    c10_b24 = (chartInstance->c10_b_G.size(1) == 0);
    c10_d_result = (c10_b22 || c10_b24);
    if (c10_d_result) {
      c10_b23 = true;
    } else {
      c10_b23 = false;
    }
  }

  if (!c10_b23) {
    sf_mex_call(&c10_d_st, &c10_m_emlrtMCI, "error", 0U, 2U, 14,
                c10_b_emlrt_marshallOut(chartInstance, c10_b_cv), 14,
                sf_mex_call(&c10_d_st, NULL, "getString", 1U, 1U, 14,
      sf_mex_call(&c10_d_st, NULL, "message", 1U, 1U, 14,
                  c10_b_emlrt_marshallOut(chartInstance, c10_b_cv))));
  }

  if (c10_d_G.size(1) == c10_expected) {
    c10_b23 = true;
  } else {
    c10_b25 = (c10_d_G.size(0) == 0);
    c10_b26 = (c10_d_G.size(1) == 0);
    c10_e_result = (c10_b25 || c10_b26);
    if (c10_e_result) {
      c10_b23 = true;
    } else {
      c10_b23 = false;
    }
  }

  if (!c10_b23) {
    sf_mex_call(&c10_d_st, &c10_m_emlrtMCI, "error", 0U, 2U, 14,
                c10_b_emlrt_marshallOut(chartInstance, c10_b_cv), 14,
                sf_mex_call(&c10_d_st, NULL, "getString", 1U, 1U, 14,
      sf_mex_call(&c10_d_st, NULL, "message", 1U, 1U, 14,
                  c10_b_emlrt_marshallOut(chartInstance, c10_b_cv))));
  }

  c10_varargin_1 = c10_sizes[1];
  c10_arg = c10_varargin_1;
  c10_f_result = (c10_arg == 0);
  if (c10_f_result) {
    c10_empty_non_axis_sizes = true;
  } else {
    c10_empty_non_axis_sizes = false;
  }

  for (c10_i68 = 0; c10_i68 < 2; c10_i68++) {
    c10_input_sizes[c10_i68] = c10_sizes[c10_i68];
  }

  c10_b_empty_non_axis_sizes = c10_empty_non_axis_sizes;
  if (c10_b_empty_non_axis_sizes) {
    c10_g_result = chartInstance->c10_b_G.size(0);
  } else {
    c10_b27 = (chartInstance->c10_b_G.size(0) == 0);
    c10_b28 = (chartInstance->c10_b_G.size(1) == 0);
    c10_h_result = (c10_b27 || c10_b28);
    if (!c10_h_result) {
      c10_g_result = chartInstance->c10_b_G.size(0);
    } else {
      c10_g_result = 0;
    }
  }

  c10_input_sizes[0] = c10_g_result;
  c10_reshapes[0].f1.set_size(&c10_gb_emlrtRTEI, &c10_c_st, c10_input_sizes[0],
    c10_input_sizes[1]);
  c10_db_loop_ub = c10_input_sizes[0] * c10_input_sizes[1] - 1;
  for (c10_i69 = 0; c10_i69 <= c10_db_loop_ub; c10_i69++) {
    c10_reshapes[0].f1[c10_i69] = chartInstance->c10_b_G[c10_i69];
  }

  c10_c_empty_non_axis_sizes = c10_empty_non_axis_sizes;
  if (c10_c_empty_non_axis_sizes) {
    c10_i_result = c10_d_G.size(0);
  } else {
    c10_b29 = (c10_d_G.size(0) == 0);
    c10_b30 = (c10_d_G.size(1) == 0);
    c10_j_result = (c10_b29 || c10_b30);
    if (!c10_j_result) {
      c10_i_result = c10_d_G.size(0);
    } else {
      c10_i_result = 0;
    }
  }

  c10_sizes[0] = c10_i_result;
  c10_reshapes[1].f1.set_size(&c10_gb_emlrtRTEI, &c10_c_st, c10_sizes[0],
    c10_sizes[1]);
  c10_eb_loop_ub = c10_sizes[0] * c10_sizes[1] - 1;
  for (c10_i70 = 0; c10_i70 <= c10_eb_loop_ub; c10_i70++) {
    c10_reshapes[1].f1[c10_i70] = c10_d_G[c10_i70];
  }

  c10_b_varargin_1.set_size(&c10_hb_emlrtRTEI, &c10_c_st, c10_reshapes[0].
    f1.size(0), c10_reshapes[0].f1.size(1));
  c10_fb_loop_ub = c10_reshapes[0].f1.size(0) * c10_reshapes[0].f1.size(1) - 1;
  for (c10_i71 = 0; c10_i71 <= c10_fb_loop_ub; c10_i71++) {
    c10_b_varargin_1[c10_i71] = c10_reshapes[0].f1[c10_i71];
  }

  c10_d_G.set_size(&c10_hb_emlrtRTEI, &c10_c_st, c10_reshapes[1].f1.size(0),
                   c10_reshapes[1].f1.size(1));
  c10_gb_loop_ub = c10_reshapes[1].f1.size(0) * c10_reshapes[1].f1.size(1) - 1;
  for (c10_i72 = 0; c10_i72 <= c10_gb_loop_ub; c10_i72++) {
    c10_d_G[c10_i72] = c10_reshapes[1].f1[c10_i72];
  }

  c10_k_result.set_size(&c10_ib_emlrtRTEI, &c10_c_st, c10_b_varargin_1.size(0) +
                        c10_d_G.size(0), c10_b_varargin_1.size(1));
  c10_hb_loop_ub = c10_b_varargin_1.size(1) - 1;
  for (c10_i73 = 0; c10_i73 <= c10_hb_loop_ub; c10_i73++) {
    c10_jb_loop_ub = c10_b_varargin_1.size(0) - 1;
    for (c10_i75 = 0; c10_i75 <= c10_jb_loop_ub; c10_i75++) {
      c10_k_result[c10_i75 + c10_k_result.size(0) * c10_i73] =
        c10_b_varargin_1[c10_i75 + c10_b_varargin_1.size(0) * c10_i73];
    }
  }

  c10_ib_loop_ub = c10_d_G.size(1) - 1;
  for (c10_i74 = 0; c10_i74 <= c10_ib_loop_ub; c10_i74++) {
    c10_kb_loop_ub = c10_d_G.size(0) - 1;
    for (c10_i76 = 0; c10_i76 <= c10_kb_loop_ub; c10_i76++) {
      c10_k_result[(c10_i76 + c10_b_varargin_1.size(0)) + c10_k_result.size(0) *
        c10_i74] = c10_d_G[c10_i76 + c10_d_G.size(0) * c10_i74];
    }
  }

  c10_iv2[0] = c10_i63;
  c10_iv2[1] = c10_i63;
  c10_e_tmp_size[0] = chartInstance->c10_g_ub.size[0] +
    chartInstance->c10_g_lb.size[0];
  c10_mb_loop_ub = chartInstance->c10_g_ub.size[0] - 1;
  for (c10_i77 = 0; c10_i77 <= c10_mb_loop_ub; c10_i77++) {
    c10_f_tmp_data[c10_i77] = chartInstance->c10_g_ub.data[c10_i77];
  }

  c10_ob_loop_ub = chartInstance->c10_g_lb.size[0] - 1;
  for (c10_i78 = 0; c10_i78 <= c10_ob_loop_ub; c10_i78++) {
    c10_f_tmp_data[c10_i78 + chartInstance->c10_g_ub.size[0]] =
      -chartInstance->c10_g_lb.data[c10_i78];
  }

  c10_r7.set_size(&c10_kb_emlrtRTEI, &c10_st, c10_iv2[0], c10_iv2[1]);
  c10_pb_loop_ub = c10_iv2[0] * c10_iv2[1] - 1;
  for (c10_i79 = 0; c10_i79 <= c10_pb_loop_ub; c10_i79++) {
    c10_r7[c10_i79] = 0.0;
  }

  c10_r8.set_size(&c10_mb_emlrtRTEI, &c10_st, chartInstance->c10_H.size(0),
                  chartInstance->c10_H.size(1));
  c10_qb_loop_ub = chartInstance->c10_H.size(0) * chartInstance->c10_H.size(1) -
    1;
  for (c10_i80 = 0; c10_i80 <= c10_qb_loop_ub; c10_i80++) {
    c10_r8[c10_i80] = chartInstance->c10_H[c10_i80];
  }

  c10_r9.set_size(&c10_ob_emlrtRTEI, &c10_st, chartInstance->c10_c.size(0));
  c10_rb_loop_ub = chartInstance->c10_c.size(0) - 1;
  for (c10_i81 = 0; c10_i81 <= c10_rb_loop_ub; c10_i81++) {
    c10_r9[c10_i81] = chartInstance->c10_c[c10_i81];
  }

  c10_f_tmp_size[0] = chartInstance->c10_z_lb.size[0];
  c10_sb_loop_ub = chartInstance->c10_z_lb.size[0] - 1;
  for (c10_i82 = 0; c10_i82 <= c10_sb_loop_ub; c10_i82++) {
    c10_g_tmp_data[c10_i82] = chartInstance->c10_z_lb.data[c10_i82];
  }

  c10_g_tmp_size[0] = chartInstance->c10_z_ub.size[0];
  c10_tb_loop_ub = chartInstance->c10_z_ub.size[0] - 1;
  for (c10_i83 = 0; c10_i83 <= c10_tb_loop_ub; c10_i83++) {
    c10_h_tmp_data[c10_i83] = chartInstance->c10_z_ub.data[c10_i83];
  }

  c10_b_st.site = &c10_bk_emlrtRSI;
  c10_r10 = chartInstance->c10_options;
  c10_quadprog(chartInstance, &c10_b_st, c10_r8, c10_r9, c10_k_result,
               c10_f_tmp_data, c10_e_tmp_size, c10_g_tmp_data, c10_f_tmp_size,
               c10_h_tmp_data, c10_g_tmp_size, c10_r7, &c10_r10, c10_z_opt,
               &c10_b_fval, &c10_b_exitflag, &c10_a__1, &c10_a__2);
  c10_d50 = c10_b_fval;
  c10_d51 = c10_b_exitflag;
  c10_b_st.site = &c10_ck_emlrtRSI;
  c10_innerDimA = c10_Psi.size(1);
  c10_innerDimB = c10_z_opt.size(0);
  c10_c_st.site = &c10_ac_emlrtRSI;
  c10_dynamic_size_checks(chartInstance, &c10_c_st, c10_Psi, c10_z_opt,
    c10_innerDimA, c10_innerDimB);
  c10_c_st.site = &c10_bc_emlrtRSI;
  c10_mtimes(chartInstance, &c10_c_st, c10_Psi, c10_z_opt, c10_r11);
  c10_i84 = c10_r11.size(0);
  c10_i85 = c10_c_d.size(0);
  if ((c10_i84 != c10_i85) && ((c10_i84 != 1) && (c10_i85 != 1))) {
    emlrtDimSizeImpxCheckR2021b(c10_i84, c10_i85, &c10_b_emlrtECI, &c10_st);
  }

  c10_d_d[0] = c10_c_d.size(0);
  if (c10_r11.size(0) == c10_d_d[0]) {
    c10_z_opt.set_size(&c10_rb_emlrtRTEI, &c10_st, c10_r11.size(0), c10_r11.size
                       (1));
    c10_ub_loop_ub = c10_r11.size(1) - 1;
    for (c10_i87 = 0; c10_i87 <= c10_ub_loop_ub; c10_i87++) {
      c10_vb_loop_ub = c10_r11.size(0) - 1;
      for (c10_i89 = 0; c10_i89 <= c10_vb_loop_ub; c10_i89++) {
        c10_z_opt[c10_i89 + c10_z_opt.size(0) * c10_i87] = c10_r11[c10_i89 +
          c10_r11.size(0) * c10_i87] + c10_c_d[c10_i89];
      }
    }
  } else {
    c10_binary_expand_op(chartInstance, &c10_st, c10_z_opt, c10_r11, c10_c_d);
  }

  c10_i86 = c10__s32_s64_(chartInstance, static_cast<int64_T>(c10_z_opt.size(0))
    * static_cast<int64_T>(c10_z_opt.size(1)), 0, 1U, 3117, 8);
  c10_i88 = 1;
  if ((c10_i88 < 1) || (c10_i88 > c10_i86)) {
    emlrtDynamicBoundsCheckR2012b(c10_i88, 1, c10_i86, &c10_y_emlrtBCI, &c10_st);
  }

  c10_d52 = c10_z_opt[c10_i88 - 1];
  c10_i90 = c10__s32_s64_(chartInstance, static_cast<int64_T>(c10_z_opt.size(0))
    * static_cast<int64_T>(c10_z_opt.size(1)), 0, 1U, 3139, 8);
  c10_i91 = 2;
  if ((c10_i91 < 1) || (c10_i91 > c10_i90)) {
    emlrtDynamicBoundsCheckR2012b(c10_i91, 1, c10_i90, &c10_ab_emlrtBCI, &c10_st);
  }

  c10_d53 = c10_z_opt[c10_i91 - 1];
  c10_i92 = c10__s32_s64_(chartInstance, static_cast<int64_T>(c10_z_opt.size(0))
    * static_cast<int64_T>(c10_z_opt.size(1)), 0, 1U, 3182, 8);
  c10_i93 = 3;
  if ((c10_i93 < 1) || (c10_i93 > c10_i92)) {
    emlrtDynamicBoundsCheckR2012b(c10_i93, 1, c10_i92, &c10_bb_emlrtBCI, &c10_st);
  }

  c10_d54 = c10_z_opt[c10_i93 - 1];
  c10_i94 = c10__s32_s64_(chartInstance, static_cast<int64_T>(c10_z_opt.size(0))
    * static_cast<int64_T>(c10_z_opt.size(1)), 0, 1U, 3246, 8);
  c10_i95 = 4;
  if ((c10_i95 < 1) || (c10_i95 > c10_i94)) {
    emlrtDynamicBoundsCheckR2012b(c10_i95, 1, c10_i94, &c10_cb_emlrtBCI, &c10_st);
  }

  c10_dv[0] = c10_z_opt[c10_i95 - 1];
  c10_i96 = c10__s32_s64_(chartInstance, static_cast<int64_T>(c10_z_opt.size(0))
    * static_cast<int64_T>(c10_z_opt.size(1)), 0, 1U, 3277, 8);
  c10_i97 = 5;
  if ((c10_i97 < 1) || (c10_i97 > c10_i96)) {
    emlrtDynamicBoundsCheckR2012b(c10_i97, 1, c10_i96, &c10_db_emlrtBCI, &c10_st);
  }

  c10_dv[1] = c10_z_opt[c10_i97 - 1];
  c10_i98 = c10__s32_s64_(chartInstance, static_cast<int64_T>(c10_z_opt.size(0))
    * static_cast<int64_T>(c10_z_opt.size(1)), 0, 1U, 3308, 8);
  c10_i99 = 6;
  if ((c10_i99 < 1) || (c10_i99 > c10_i98)) {
    emlrtDynamicBoundsCheckR2012b(c10_i99, 1, c10_i98, &c10_eb_emlrtBCI, &c10_st);
  }

  c10_dv[2] = c10_z_opt[c10_i99 - 1];
  c10_i100 = c10__s32_s64_(chartInstance, static_cast<int64_T>(c10_z_opt.size(0))
    * static_cast<int64_T>(c10_z_opt.size(1)), 0, 1U, 3339, 8);
  c10_i101 = 7;
  if ((c10_i101 < 1) || (c10_i101 > c10_i100)) {
    emlrtDynamicBoundsCheckR2012b(c10_i101, 1, c10_i100, &c10_fb_emlrtBCI,
      &c10_st);
  }

  c10_dv[3] = c10_z_opt[c10_i101 - 1];
  c10_i102 = c10__s32_s64_(chartInstance, static_cast<int64_T>(c10_z_opt.size(0))
    * static_cast<int64_T>(c10_z_opt.size(1)), 0, 1U, 3463, 3);
  if (c10_i102 < 0) {
    emlrtDynamicBoundsCheckR2012b(c10_i102, 0, MAX_int32_T, &c10_g_emlrtBCI,
      &c10_st);
  }

  c10_d55 = static_cast<real_T>(c10_i102);
  c10_b31 = (chartInstance->c10_n_x_u == 0.0);
  c10_b32 = (chartInstance->c10_n_x_u > 0.0);
  c10_b33 = (c10_d55 < 1.0);
  c10_b34 = (c10_b32 && c10_b33);
  c10_b35 = (chartInstance->c10_n_x_u < 0.0);
  c10_b36 = (c10_d55 > 1.0);
  c10_b37 = (c10_b35 && c10_b36);
  c10_b38 = (c10_b34 || c10_b37);
  if (c10_b31 || c10_b38) {
    c10_i104 = 1;
    c10_i106 = 1;
    c10_i107 = 0;
  } else {
    c10_i103 = c10__s32_s64_(chartInstance, static_cast<int64_T>(c10_z_opt.size
      (0)) * static_cast<int64_T>(c10_z_opt.size(1)), 0, 1U, 3449, 18);
    c10_i105 = 1;
    if ((c10_i105 < 1) || (c10_i105 > c10_i103)) {
      emlrtDynamicBoundsCheckR2012b(c10_i105, 1, c10_i103, &c10_h_emlrtBCI,
        &c10_st);
    }

    c10_i104 = c10_i105;
    if (chartInstance->c10_n_x_u != static_cast<real_T>(static_cast<int32_T>
         (muDoubleScalarFloor(chartInstance->c10_n_x_u)))) {
      emlrtIntegerCheckR2012b(chartInstance->c10_n_x_u, &c10_h_emlrtDCI, &c10_st);
    }

    c10_d56 = trunc(chartInstance->c10_n_x_u);
    if (muDoubleScalarIsNaN(c10_d56) || muDoubleScalarIsInf(c10_d56)) {
      c10_d57 = 0.0;
    } else {
      c10_d57 = muDoubleScalarRem(c10_d56, 4.294967296E+9);
    }

    c10_o_roundFloatVar = trunc(chartInstance->c10_n_x_u);
    if (c10_d57 < 0.0) {
      c10_o_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d57));
    } else {
      c10_o_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d57));
    }

    if (c10_o_roundFloatVar < 0.0) {
      c10_d58 = muDoubleScalarCeil(c10_o_roundFloatVar);
    } else {
      c10_d58 = muDoubleScalarFloor(c10_o_roundFloatVar);
    }

    if (static_cast<real_T>(c10_o_fixedVar) != c10_d58) {
      sf_data_overflow_error(chartInstance->S, 1U, 3449, 18);
    }

    c10_i106 = c10_o_fixedVar;
    if (c10_d55 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d55)))) {
      emlrtIntegerCheckR2012b(c10_d55, &c10_g_emlrtDCI, &c10_st);
    }

    c10_i111 = static_cast<int32_T>(c10_d55);
    if ((c10_i111 < 1) || (c10_i111 > c10_i103)) {
      emlrtDynamicBoundsCheckR2012b(c10_i111, 1, c10_i103, &c10_i_emlrtBCI,
        &c10_st);
    }

    c10_i107 = c10_i111;
  }

  c10_iv3[0] = 1;
  c10_iv3[1] = c10_div_s32_floor_ndbzs(chartInstance, c10_i107 - c10_i104,
    c10_i106, 0, 1U, 3455, 11) + 1;
  c10_b_st.site = &c10_dk_emlrtRSI;
  for (c10_i108 = 0; c10_i108 < 2; c10_i108++) {
    c10_iv4[c10_i108] = (*(int32_T (*)[2])c10_z_opt.size())[c10_i108];
  }

  c10_c_indexShapeCheck(chartInstance, &c10_b_st, c10_iv4, c10_iv3);
  c10_b_s_opt_prev_sol.set_size(&c10_sb_emlrtRTEI, &c10_st, 1,
    c10_div_s32_floor_ndbzs(chartInstance, c10_i107 - c10_i104, c10_i106, 0, 1U,
    3432, 35) + 1);
  c10_wb_loop_ub = c10_div_s32_floor_ndbzs(chartInstance, c10_i107 - c10_i104,
    c10_i106, 0, 1U, 3432, 35);
  for (c10_i109 = 0; c10_i109 <= c10_wb_loop_ub; c10_i109++) {
    c10_b_s_opt_prev_sol[c10_i109] = c10_z_opt[(c10_i104 + c10_i106 * c10_i109)
      - 1];
  }

  c10_i110 = c10__s32_s64_(chartInstance, static_cast<int64_T>(c10_z_opt.size(0))
    * static_cast<int64_T>(c10_z_opt.size(1)), 0, 1U, 3504, 3);
  if (c10_i110 < 0) {
    emlrtDynamicBoundsCheckR2012b(c10_i110, 0, MAX_int32_T, &c10_j_emlrtBCI,
      &c10_st);
  }

  c10_d59 = static_cast<real_T>(c10_i110);
  c10_b39 = (chartInstance->c10_n_x_u == 0.0);
  c10_b40 = (chartInstance->c10_n_x_u > 0.0);
  c10_b41 = (c10_d59 < 2.0);
  c10_b42 = (c10_b40 && c10_b41);
  c10_b43 = (chartInstance->c10_n_x_u < 0.0);
  c10_b44 = (c10_d59 > 2.0);
  c10_b45 = (c10_b43 && c10_b44);
  c10_b46 = (c10_b42 || c10_b45);
  if (c10_b39 || c10_b46) {
    c10_i113 = 1;
    c10_i115 = 1;
    c10_i116 = 0;
  } else {
    c10_i112 = c10__s32_s64_(chartInstance, static_cast<int64_T>(c10_z_opt.size
      (0)) * static_cast<int64_T>(c10_z_opt.size(1)), 0, 1U, 3490, 18);
    c10_i114 = 2;
    if ((c10_i114 < 1) || (c10_i114 > c10_i112)) {
      emlrtDynamicBoundsCheckR2012b(c10_i114, 1, c10_i112, &c10_k_emlrtBCI,
        &c10_st);
    }

    c10_i113 = c10_i114;
    if (chartInstance->c10_n_x_u != static_cast<real_T>(static_cast<int32_T>
         (muDoubleScalarFloor(chartInstance->c10_n_x_u)))) {
      emlrtIntegerCheckR2012b(chartInstance->c10_n_x_u, &c10_j_emlrtDCI, &c10_st);
    }

    c10_d60 = trunc(chartInstance->c10_n_x_u);
    if (muDoubleScalarIsNaN(c10_d60) || muDoubleScalarIsInf(c10_d60)) {
      c10_d61 = 0.0;
    } else {
      c10_d61 = muDoubleScalarRem(c10_d60, 4.294967296E+9);
    }

    c10_p_roundFloatVar = trunc(chartInstance->c10_n_x_u);
    if (c10_d61 < 0.0) {
      c10_p_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d61));
    } else {
      c10_p_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d61));
    }

    if (c10_p_roundFloatVar < 0.0) {
      c10_d62 = muDoubleScalarCeil(c10_p_roundFloatVar);
    } else {
      c10_d62 = muDoubleScalarFloor(c10_p_roundFloatVar);
    }

    if (static_cast<real_T>(c10_p_fixedVar) != c10_d62) {
      sf_data_overflow_error(chartInstance->S, 1U, 3490, 18);
    }

    c10_i115 = c10_p_fixedVar;
    if (c10_d59 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d59)))) {
      emlrtIntegerCheckR2012b(c10_d59, &c10_i_emlrtDCI, &c10_st);
    }

    c10_i119 = static_cast<int32_T>(c10_d59);
    if ((c10_i119 < 1) || (c10_i119 > c10_i112)) {
      emlrtDynamicBoundsCheckR2012b(c10_i119, 1, c10_i112, &c10_m_emlrtBCI,
        &c10_st);
    }

    c10_i116 = c10_i119;
  }

  c10_iv5[0] = 1;
  c10_iv5[1] = c10_div_s32_floor_ndbzs(chartInstance, c10_i116 - c10_i113,
    c10_i115, 0, 1U, 3496, 11) + 1;
  c10_b_st.site = &c10_ek_emlrtRSI;
  for (c10_i117 = 0; c10_i117 < 2; c10_i117++) {
    c10_iv6[c10_i117] = (*(int32_T (*)[2])c10_z_opt.size())[c10_i117];
  }

  c10_c_indexShapeCheck(chartInstance, &c10_b_st, c10_iv6, c10_iv5);
  c10_b_v_opt_prev_sol.set_size(&c10_tb_emlrtRTEI, &c10_st, 1,
    c10_div_s32_floor_ndbzs(chartInstance, c10_i116 - c10_i113, c10_i115, 0, 1U,
    3473, 35) + 1);
  c10_xb_loop_ub = c10_div_s32_floor_ndbzs(chartInstance, c10_i116 - c10_i113,
    c10_i115, 0, 1U, 3473, 35);
  for (c10_i118 = 0; c10_i118 <= c10_xb_loop_ub; c10_i118++) {
    c10_b_v_opt_prev_sol[c10_i118] = c10_z_opt[(c10_i113 + c10_i115 * c10_i118)
      - 1];
  }

  c10_b_st.site = &c10_fk_emlrtRSI;
  c10_g_a = c10_c_v_measured;
  c10_c_st.site = &c10_k_emlrtRSI;
  c10_h_a = c10_g_a;
  c10_d_st.site = &c10_m_emlrtRSI;
  c10_i_a = c10_h_a;
  if (c10_fltpower_domain_error(chartInstance)) {
    sf_mex_call(&c10_d_st, &c10_emlrtMCI, "error", 0U, 2U, 14,
                c10_emlrt_marshallOut(chartInstance, c10_cv), 14, sf_mex_call
                (&c10_d_st, NULL, "getString", 1U, 1U, 14, sf_mex_call(&c10_d_st,
      NULL, "message", 1U, 1U, 14, c10_emlrt_marshallOut(chartInstance, c10_cv))));
  }

  c10_j_a = c10_i_a;
  c10_k_a = c10_j_a;
  c10_d_c = c10_k_a * c10_k_a;
  c10_F_r = (-c10_b_V.zeta_a * c10_d_c - c10_b_V.c_r * c10_b_V.m * c10_b_V.g) -
    c10_b_V.m * c10_b_V.g * 0.0;
  c10_F_t_req = c10_b_V.m * c10_b_V.lambda * c10_d54 - c10_F_r;
  c10_b_st.site = &c10_gk_emlrtRSI;
  c10_m_a = c10_c_v_measured;
  c10_c_st.site = &c10_k_emlrtRSI;
  c10_o_a = c10_m_a;
  c10_d_st.site = &c10_m_emlrtRSI;
  c10_p_a = c10_o_a;
  if (c10_fltpower_domain_error(chartInstance)) {
    sf_mex_call(&c10_d_st, &c10_emlrtMCI, "error", 0U, 2U, 14,
                c10_emlrt_marshallOut(chartInstance, c10_cv), 14, sf_mex_call
                (&c10_d_st, NULL, "getString", 1U, 1U, 14, sf_mex_call(&c10_d_st,
      NULL, "message", 1U, 1U, 14, c10_emlrt_marshallOut(chartInstance, c10_cv))));
  }

  c10_q_a = c10_p_a;
  c10_r_a = c10_q_a;
  c10_e_c = c10_r_a * c10_r_a;
  c10_F_f_r_max = c10_b_V.mu / c10_b_V.L * (c10_b_V.m * c10_b_V.g * (c10_b_V.L_f
    + c10_b_V.h_g * 0.0) + c10_b_V.h_g * (c10_b_V.zeta_a * c10_e_c +
    c10_b_V.lambda * c10_b_V.m * c10_d54));
  c10_F_f_tot_max = c10_b_V.mu * c10_b_V.m * c10_b_V.g;
  if (covrtEmlIfEval(chartInstance->c10_covrtInstance, 4U, 0, 0,
                     covrtRelationalopUpdateFcn(chartInstance->c10_covrtInstance,
        4U, 0U, 0U, c10_F_t_req, 0.0, -1, 2U, static_cast<int32_T>(c10_F_t_req <
         0.0)))) {
    if (covrtEmlIfEval(chartInstance->c10_covrtInstance, 4U, 0, 1,
                       covrtRelationalopUpdateFcn
                       (chartInstance->c10_covrtInstance, 4U, 0U, 1U,
                        c10_c_v_measured, c10_b_V.omega_m_r / c10_b_V.phi, -1,
                        2U, static_cast<int32_T>(c10_c_v_measured <
           c10_b_V.omega_m_r / c10_b_V.phi)))) {
      c10_F_m_min = -c10_b_V.phi * c10_b_V.T_m_max / c10_b_V.eta_TF;
    } else {
      c10_F_m_min = -c10_b_V.P_m_max / c10_b_V.eta_TF / c10_c_v_measured;
    }

    c10_c_varargin_1[0] = c10_F_t_req;
    c10_c_varargin_1[1] = c10_F_m_min;
    c10_c_varargin_1[2] = -c10_F_f_r_max;
    c10_Fm_opt = c10_maximum(chartInstance, c10_c_varargin_1);
    c10_d_varargin_1 = c10_F_t_req;
    c10_varargin_2 = -c10_F_f_tot_max;
    c10_x = c10_d_varargin_1;
    c10_y = c10_varargin_2;
    c10_b_x = c10_x;
    c10_b_y = c10_y;
    c10_c_x = c10_b_x;
    c10_c_y = c10_b_y;
    c10_s_a = c10_c_x;
    c10_e_b = c10_c_y;
    c10_d_x = c10_s_a;
    c10_d_y = c10_e_b;
    c10_e_x = c10_d_x;
    c10_e_y = c10_d_y;
    c10_maxval = muDoubleScalarMax(c10_e_x, c10_e_y);
    c10_Fb_opt = c10_maxval - c10_Fm_opt;
  } else {
    if (covrtEmlIfEval(chartInstance->c10_covrtInstance, 4U, 0, 2,
                       covrtRelationalopUpdateFcn
                       (chartInstance->c10_covrtInstance, 4U, 0U, 2U,
                        c10_c_v_measured, c10_b_V.omega_m_r / c10_b_V.phi, -1,
                        2U, static_cast<int32_T>(c10_c_v_measured <
           c10_b_V.omega_m_r / c10_b_V.phi)))) {
      c10_F_m_max = c10_b_V.phi * c10_b_V.T_m_max * c10_b_V.eta_TF;
    } else {
      c10_F_m_max = c10_b_V.P_m_max * c10_b_V.eta_TF / c10_c_v_measured;
    }

    c10_c_varargin_1[0] = c10_F_t_req;
    c10_c_varargin_1[1] = c10_F_m_max;
    c10_c_varargin_1[2] = c10_F_f_r_max;
    c10_Fm_opt = c10_b_minimum(chartInstance, c10_c_varargin_1);
    c10_Fb_opt = 0.0;
  }

  c10_d54 = ((c10_Fm_opt + c10_Fb_opt) + c10_F_r) / c10_b_V.m / c10_b_V.lambda;
  chartInstance->c10_t_0 += chartInstance->c10_Ts;
  chartInstance->c10_s_opt_prev_sol->set_size(static_cast<emlrtRTEInfo *>(NULL),
    &c10_st, 1, c10_b_s_opt_prev_sol.size(1));
  c10_yb_loop_ub = c10_b_s_opt_prev_sol.size(1) - 1;
  for (c10_i120 = 0; c10_i120 <= c10_yb_loop_ub; c10_i120++) {
    (*chartInstance->c10_s_opt_prev_sol)[c10_i120] =
      c10_b_s_opt_prev_sol[c10_i120];
  }

  chartInstance->c10_v_opt_prev_sol->set_size(static_cast<emlrtRTEInfo *>(NULL),
    &c10_st, 1, c10_b_v_opt_prev_sol.size(1));
  c10_ac_loop_ub = c10_b_v_opt_prev_sol.size(1) - 1;
  for (c10_i121 = 0; c10_i121 <= c10_ac_loop_ub; c10_i121++) {
    (*chartInstance->c10_v_opt_prev_sol)[c10_i121] =
      c10_b_v_opt_prev_sol[c10_i121];
  }

  for (c10_i122 = 0; c10_i122 < 4; c10_i122++) {
    (*chartInstance->c10_Slack)[c10_i122] = c10_dv[c10_i122];
  }

  *chartInstance->c10_a_opt = c10_d54;
  *chartInstance->c10_v_opt = c10_d53;
  *chartInstance->c10_s_opt = c10_d52;
  *chartInstance->c10_exitflag = c10_d51;
  *chartInstance->c10_fval = c10_d50;
  c10_do_animation_call_c10_ACCMPC(chartInstance);
  covrtSigUpdateFcn(chartInstance->c10_covrtInstance, 7U,
                    *chartInstance->c10_fval);
  covrtSigUpdateFcn(chartInstance->c10_covrtInstance, 8U,
                    *chartInstance->c10_exitflag);
  covrtSigUpdateFcn(chartInstance->c10_covrtInstance, 9U,
                    *chartInstance->c10_s_opt);
  covrtSigUpdateFcn(chartInstance->c10_covrtInstance, 10U,
                    *chartInstance->c10_v_opt);
  covrtSigUpdateFcn(chartInstance->c10_covrtInstance, 11U,
                    *chartInstance->c10_a_opt);
  for (c10_i123 = 0; c10_i123 < 4; c10_i123++) {
    covrtSigUpdateFcn(chartInstance->c10_covrtInstance, 12U,
                      (*chartInstance->c10_Slack)[c10_i123]);
  }

  c10_bc_loop_ub = chartInstance->c10_s_opt_prev_sol->size(0) *
    chartInstance->c10_s_opt_prev_sol->size(1) - 1;
  for (c10_i124 = 0; c10_i124 <= c10_bc_loop_ub; c10_i124++) {
    covrtSigUpdateFcn(chartInstance->c10_covrtInstance, 13U,
                      (*chartInstance->c10_s_opt_prev_sol)[c10_i124]);
  }

  c10_cc_loop_ub = chartInstance->c10_v_opt_prev_sol->size(0) *
    chartInstance->c10_v_opt_prev_sol->size(1) - 1;
  for (c10_i125 = 0; c10_i125 <= c10_cc_loop_ub; c10_i125++) {
    covrtSigUpdateFcn(chartInstance->c10_covrtInstance, 14U,
                      (*chartInstance->c10_v_opt_prev_sol)[c10_i125]);
  }
}

static void ext_mode_exec_c10_ACCMPC(SFc10_ACCMPCInstanceStruct *chartInstance)
{
}

static void c10_update_jit_animation_c10_ACCMPC(SFc10_ACCMPCInstanceStruct
  *chartInstance)
{
}

static void c10_do_animation_call_c10_ACCMPC(SFc10_ACCMPCInstanceStruct
  *chartInstance)
{
  sfDoAnimationWrapper(chartInstance->S, false, true);
  sfDoAnimationWrapper(chartInstance->S, false, false);
}

static const mxArray *get_sim_state_c10_ACCMPC(SFc10_ACCMPCInstanceStruct
  *chartInstance)
{
  const mxArray *c10_ab_y = NULL;
  const mxArray *c10_ac_y = NULL;
  const mxArray *c10_b_y = NULL;
  const mxArray *c10_bb_y = NULL;
  const mxArray *c10_bc_y = NULL;
  const mxArray *c10_c_y = NULL;
  const mxArray *c10_cb_y = NULL;
  const mxArray *c10_cc_y = NULL;
  const mxArray *c10_d_y = NULL;
  const mxArray *c10_db_y = NULL;
  const mxArray *c10_dc_y = NULL;
  const mxArray *c10_e_y = NULL;
  const mxArray *c10_eb_y = NULL;
  const mxArray *c10_ec_y = NULL;
  const mxArray *c10_f_y = NULL;
  const mxArray *c10_fb_y = NULL;
  const mxArray *c10_fc_y = NULL;
  const mxArray *c10_g_y = NULL;
  const mxArray *c10_gb_y = NULL;
  const mxArray *c10_gc_y = NULL;
  const mxArray *c10_h_y = NULL;
  const mxArray *c10_hb_y = NULL;
  const mxArray *c10_hc_y = NULL;
  const mxArray *c10_i_y = NULL;
  const mxArray *c10_ib_y = NULL;
  const mxArray *c10_ic_y = NULL;
  const mxArray *c10_j_y = NULL;
  const mxArray *c10_jb_y = NULL;
  const mxArray *c10_jc_y = NULL;
  const mxArray *c10_k_y = NULL;
  const mxArray *c10_kb_y = NULL;
  const mxArray *c10_kc_y = NULL;
  const mxArray *c10_m_y = NULL;
  const mxArray *c10_mb_y = NULL;
  const mxArray *c10_o_y = NULL;
  const mxArray *c10_ob_y = NULL;
  const mxArray *c10_p_y = NULL;
  const mxArray *c10_pb_y = NULL;
  const mxArray *c10_q_y = NULL;
  const mxArray *c10_qb_y = NULL;
  const mxArray *c10_r_y = NULL;
  const mxArray *c10_rb_y = NULL;
  const mxArray *c10_s_y = NULL;
  const mxArray *c10_sb_y = NULL;
  const mxArray *c10_st;
  const mxArray *c10_t_y = NULL;
  const mxArray *c10_tb_y = NULL;
  const mxArray *c10_u_y = NULL;
  const mxArray *c10_ub_y = NULL;
  const mxArray *c10_v_y = NULL;
  const mxArray *c10_vb_y = NULL;
  const mxArray *c10_w_y = NULL;
  const mxArray *c10_wb_y = NULL;
  const mxArray *c10_x_y = NULL;
  const mxArray *c10_xb_y = NULL;
  const mxArray *c10_y = NULL;
  const mxArray *c10_y_y = NULL;
  const mxArray *c10_yb_y = NULL;
  real_T c10_ab_u;
  real_T c10_i_u;
  real_T c10_j_u;
  real_T c10_m_u;
  real_T c10_p_u;
  real_T c10_q_u;
  real_T c10_r_u;
  real_T c10_s_u;
  real_T c10_t_u;
  real_T c10_u;
  real_T c10_u_u;
  real_T c10_y_u;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  const char_T *c10_fieldNames[32] = { "InitDamping", "FiniteDifferenceType",
    "SpecifyObjectiveGradient", "ScaleProblem", "SpecifyConstraintGradient",
    "NonFiniteSupport", "IterDisplaySQP", "FiniteDifferenceStepSize",
    "MaxFunctionEvaluations", "TypicalX", "IterDisplayQP", "PricingTolerance",
    "Algorithm", "ObjectiveLimit", "ConstraintTolerance", "OptimalityTolerance",
    "StepTolerance", "MaxIterations", "FunctionTolerance", "SolverName",
    "CheckGradients", "Diagnostics", "DiffMaxChange", "DiffMinChange", "Display",
    "FunValCheck", "PlotFcn", "OutputFcn", "UseParallel", "JacobianMultiplyFcn",
    "LinearSolver", "SubproblemAlgorithm" };

  char_T c10_o_u[10];
  char_T c10_v_u[8];
  char_T c10_b_u[7];
  char_T c10_cb_u[4];
  char_T c10_x_u[3];
  char_T c10_db_u[2];
  boolean_T c10_bb_u;
  boolean_T c10_c_u;
  boolean_T c10_d_u;
  boolean_T c10_e_u;
  boolean_T c10_f_u;
  boolean_T c10_g_u;
  boolean_T c10_k_u;
  boolean_T c10_w_u;
  c10_st = NULL;
  c10_st = NULL;
  c10_y = NULL;
  sf_mex_assign(&c10_y, sf_mex_createcellmatrix(24, 1), false);
  c10_b_y = NULL;
  sf_mex_assign(&c10_b_y, sf_mex_create("y", *chartInstance->c10_Slack, 0, 0U,
    1U, 0U, 2, 4, 1), false);
  sf_mex_setcell(c10_y, 0, c10_b_y);
  c10_c_y = NULL;
  sf_mex_assign(&c10_c_y, sf_mex_create("y", chartInstance->c10_a_opt, 0, 0U, 0U,
    0U, 0), false);
  sf_mex_setcell(c10_y, 1, c10_c_y);
  c10_d_y = NULL;
  sf_mex_assign(&c10_d_y, sf_mex_create("y", chartInstance->c10_exitflag, 0, 0U,
    0U, 0U, 0), false);
  sf_mex_setcell(c10_y, 2, c10_d_y);
  c10_e_y = NULL;
  sf_mex_assign(&c10_e_y, sf_mex_create("y", chartInstance->c10_fval, 0, 0U, 0U,
    0U, 0), false);
  sf_mex_setcell(c10_y, 3, c10_e_y);
  c10_f_y = NULL;
  sf_mex_assign(&c10_f_y, sf_mex_create("y", chartInstance->c10_s_opt, 0, 0U, 0U,
    0U, 0), false);
  sf_mex_setcell(c10_y, 4, c10_f_y);
  c10_g_y = NULL;
  sf_mex_assign(&c10_g_y, sf_mex_create("y", &(chartInstance->
    c10_s_opt_prev_sol->data())[0], 0, 0U, 1U, 0U, 2,
    chartInstance->c10_s_opt_prev_sol->size(0),
    chartInstance->c10_s_opt_prev_sol->size(1)), false);
  sf_mex_setcell(c10_y, 5, c10_g_y);
  c10_h_y = NULL;
  sf_mex_assign(&c10_h_y, sf_mex_create("y", chartInstance->c10_v_opt, 0, 0U, 0U,
    0U, 0), false);
  sf_mex_setcell(c10_y, 6, c10_h_y);
  c10_i_y = NULL;
  sf_mex_assign(&c10_i_y, sf_mex_create("y", &(chartInstance->
    c10_v_opt_prev_sol->data())[0], 0, 0U, 1U, 0U, 2,
    chartInstance->c10_v_opt_prev_sol->size(0),
    chartInstance->c10_v_opt_prev_sol->size(1)), false);
  sf_mex_setcell(c10_y, 7, c10_i_y);
  c10_j_y = NULL;
  if (!chartInstance->c10_G_not_empty) {
    sf_mex_assign(&c10_j_y, sf_mex_create("y", NULL, 0, 0U, 1U, 0U, 2, 0, 0),
                  false);
  } else {
    sf_mex_assign(&c10_j_y, sf_mex_create("y", &(chartInstance->c10_b_G.data())
      [0], 0, 0U, 1U, 0U, 2, chartInstance->c10_b_G.size(0),
      chartInstance->c10_b_G.size(1)), false);
  }

  sf_mex_setcell(c10_y, 8, c10_j_y);
  c10_k_y = NULL;
  if (!chartInstance->c10_H_not_empty) {
    sf_mex_assign(&c10_k_y, sf_mex_create("y", NULL, 0, 0U, 1U, 0U, 2, 0, 0),
                  false);
  } else {
    sf_mex_assign(&c10_k_y, sf_mex_create("y", &(chartInstance->c10_H.data())[0],
      0, 0U, 1U, 0U, 2, chartInstance->c10_H.size(0), chartInstance->c10_H.size
      (1)), false);
  }

  sf_mex_setcell(c10_y, 9, c10_k_y);
  c10_m_y = NULL;
  if (!chartInstance->c10_b_N_not_empty) {
    sf_mex_assign(&c10_m_y, sf_mex_create("y", NULL, 0, 0U, 1U, 0U, 2, 0, 0),
                  false);
  } else {
    sf_mex_assign(&c10_m_y, sf_mex_create("y", &chartInstance->c10_b_N, 0, 0U,
      0U, 0U, 0), false);
  }

  sf_mex_setcell(c10_y, 10, c10_m_y);
  c10_o_y = NULL;
  if (!chartInstance->c10_b_N_not_empty) {
    sf_mex_assign(&c10_o_y, sf_mex_create("y", NULL, 0, 0U, 1U, 0U, 2, 0, 0),
                  false);
  } else {
    sf_mex_assign(&c10_o_y, sf_mex_create("y", &chartInstance->c10_Ts, 0, 0U, 0U,
      0U, 0), false);
  }

  sf_mex_setcell(c10_y, 11, c10_o_y);
  c10_p_y = NULL;
  if (!chartInstance->c10_b_N_not_empty) {
    sf_mex_assign(&c10_p_y, sf_mex_create("y", NULL, 0, 0U, 1U, 0U, 2, 0, 0),
                  false);
  } else {
    sf_mex_assign(&c10_p_y, sf_mex_create("y", &chartInstance->c10_a_minus1, 0,
      0U, 0U, 0U, 0), false);
  }

  sf_mex_setcell(c10_y, 12, c10_p_y);
  c10_q_y = NULL;
  if (!chartInstance->c10_c_not_empty) {
    sf_mex_assign(&c10_q_y, sf_mex_create("y", NULL, 0, 0U, 1U, 0U, 2, 0, 0),
                  false);
  } else {
    sf_mex_assign(&c10_q_y, sf_mex_create("y", &(chartInstance->c10_c.data())[0],
      0, 0U, 1U, 0U, 1, chartInstance->c10_c.size(0)), false);
  }

  sf_mex_setcell(c10_y, 13, c10_q_y);
  c10_r_y = NULL;
  if (!chartInstance->c10_g_lb_not_empty) {
    sf_mex_assign(&c10_r_y, sf_mex_create("y", NULL, 0, 0U, 1U, 0U, 2, 0, 0),
                  false);
  } else {
    sf_mex_assign(&c10_r_y, sf_mex_create("y", &chartInstance->c10_g_lb.data[0],
      0, 0U, 1U, 0U, 1, chartInstance->c10_g_lb.size[0]), false);
  }

  sf_mex_setcell(c10_y, 14, c10_r_y);
  c10_s_y = NULL;
  if (!chartInstance->c10_g_lb_not_empty) {
    sf_mex_assign(&c10_s_y, sf_mex_create("y", NULL, 0, 0U, 1U, 0U, 2, 0, 0),
                  false);
  } else {
    sf_mex_assign(&c10_s_y, sf_mex_create("y", &chartInstance->c10_g_ub.data[0],
      0, 0U, 1U, 0U, 1, chartInstance->c10_g_ub.size[0]), false);
  }

  sf_mex_setcell(c10_y, 15, c10_s_y);
  c10_t_y = NULL;
  if (!chartInstance->c10_b_N_not_empty) {
    sf_mex_assign(&c10_t_y, sf_mex_create("y", NULL, 0, 0U, 1U, 0U, 2, 0, 0),
                  false);
  } else {
    sf_mex_assign(&c10_t_y, sf_mex_create("y", &chartInstance->c10_n_u, 0, 0U,
      0U, 0U, 0), false);
  }

  sf_mex_setcell(c10_y, 16, c10_t_y);
  c10_u_y = NULL;
  if (!chartInstance->c10_b_N_not_empty) {
    sf_mex_assign(&c10_u_y, sf_mex_create("y", NULL, 0, 0U, 1U, 0U, 2, 0, 0),
                  false);
  } else {
    sf_mex_assign(&c10_u_y, sf_mex_create("y", &chartInstance->c10_n_x, 0, 0U,
      0U, 0U, 0), false);
  }

  sf_mex_setcell(c10_y, 17, c10_u_y);
  c10_v_y = NULL;
  if (!chartInstance->c10_b_N_not_empty) {
    sf_mex_assign(&c10_v_y, sf_mex_create("y", NULL, 0, 0U, 1U, 0U, 2, 0, 0),
                  false);
  } else {
    sf_mex_assign(&c10_v_y, sf_mex_create("y", &chartInstance->c10_n_x_u, 0, 0U,
      0U, 0U, 0), false);
  }

  sf_mex_setcell(c10_y, 18, c10_v_y);
  c10_w_y = NULL;
  if (!chartInstance->c10_options_not_empty) {
    sf_mex_assign(&c10_w_y, sf_mex_create("y", NULL, 0, 0U, 1U, 0U, 2, 0, 0),
                  false);
  } else {
    sf_mex_assign(&c10_w_y, sf_mex_createstruct("structure", 32,
      &c10_fieldNames[0], 2, 1, 1), false);
    c10_u = chartInstance->c10_options.InitDamping;
    c10_x_y = NULL;
    sf_mex_assign(&c10_x_y, sf_mex_create("y", &c10_u, 0, 0U, 0U, 0U, 0), false);
    sf_mex_setfieldbynum(c10_w_y, 0, "InitDamping", c10_x_y, 0);
    for (c10_i = 0; c10_i < 7; c10_i++) {
      c10_b_u[c10_i] = chartInstance->c10_options.FiniteDifferenceType[c10_i];
    }

    c10_ab_y = NULL;
    sf_mex_assign(&c10_ab_y, sf_mex_create("y", c10_b_u, 10, 0U, 1U, 0U, 2, 1, 7),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "FiniteDifferenceType", c10_ab_y, 1);
    c10_c_u = chartInstance->c10_options.SpecifyObjectiveGradient;
    c10_cb_y = NULL;
    sf_mex_assign(&c10_cb_y, sf_mex_create("y", &c10_c_u, 11, 0U, 0U, 0U, 0),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "SpecifyObjectiveGradient", c10_cb_y, 2);
    c10_d_u = chartInstance->c10_options.ScaleProblem;
    c10_eb_y = NULL;
    sf_mex_assign(&c10_eb_y, sf_mex_create("y", &c10_d_u, 11, 0U, 0U, 0U, 0),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "ScaleProblem", c10_eb_y, 3);
    c10_e_u = chartInstance->c10_options.SpecifyConstraintGradient;
    c10_gb_y = NULL;
    sf_mex_assign(&c10_gb_y, sf_mex_create("y", &c10_e_u, 11, 0U, 0U, 0U, 0),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "SpecifyConstraintGradient", c10_gb_y, 4);
    c10_f_u = chartInstance->c10_options.NonFiniteSupport;
    c10_hb_y = NULL;
    sf_mex_assign(&c10_hb_y, sf_mex_create("y", &c10_f_u, 11, 0U, 0U, 0U, 0),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "NonFiniteSupport", c10_hb_y, 5);
    c10_g_u = chartInstance->c10_options.IterDisplaySQP;
    c10_ib_y = NULL;
    sf_mex_assign(&c10_ib_y, sf_mex_create("y", &c10_g_u, 11, 0U, 0U, 0U, 0),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "IterDisplaySQP", c10_ib_y, 6);
    c10_i_u = chartInstance->c10_options.FiniteDifferenceStepSize;
    c10_jb_y = NULL;
    sf_mex_assign(&c10_jb_y, sf_mex_create("y", &c10_i_u, 0, 0U, 0U, 0U, 0),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "FiniteDifferenceStepSize", c10_jb_y, 7);
    c10_j_u = chartInstance->c10_options.MaxFunctionEvaluations;
    c10_kb_y = NULL;
    sf_mex_assign(&c10_kb_y, sf_mex_create("y", &c10_j_u, 0, 0U, 0U, 0U, 0),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "MaxFunctionEvaluations", c10_kb_y, 8);
    c10_mb_y = NULL;
    sf_mex_assign(&c10_mb_y, sf_mex_create("y", NULL, 0, 0U, 1U, 0U, 2, 0, 0),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "TypicalX", c10_mb_y, 9);
    c10_k_u = chartInstance->c10_options.IterDisplayQP;
    c10_ob_y = NULL;
    sf_mex_assign(&c10_ob_y, sf_mex_create("y", &c10_k_u, 11, 0U, 0U, 0U, 0),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "IterDisplayQP", c10_ob_y, 10);
    c10_m_u = chartInstance->c10_options.PricingTolerance;
    c10_pb_y = NULL;
    sf_mex_assign(&c10_pb_y, sf_mex_create("y", &c10_m_u, 0, 0U, 0U, 0U, 0),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "PricingTolerance", c10_pb_y, 11);
    for (c10_i1 = 0; c10_i1 < 10; c10_i1++) {
      c10_o_u[c10_i1] = chartInstance->c10_options.Algorithm[c10_i1];
    }

    c10_qb_y = NULL;
    sf_mex_assign(&c10_qb_y, sf_mex_create("y", c10_o_u, 10, 0U, 1U, 0U, 2, 1,
      10), false);
    sf_mex_setfieldbynum(c10_w_y, 0, "Algorithm", c10_qb_y, 12);
    c10_p_u = chartInstance->c10_options.ObjectiveLimit;
    c10_rb_y = NULL;
    sf_mex_assign(&c10_rb_y, sf_mex_create("y", &c10_p_u, 0, 0U, 0U, 0U, 0),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "ObjectiveLimit", c10_rb_y, 13);
    c10_q_u = chartInstance->c10_options.ConstraintTolerance;
    c10_sb_y = NULL;
    sf_mex_assign(&c10_sb_y, sf_mex_create("y", &c10_q_u, 0, 0U, 0U, 0U, 0),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "ConstraintTolerance", c10_sb_y, 14);
    c10_r_u = chartInstance->c10_options.OptimalityTolerance;
    c10_tb_y = NULL;
    sf_mex_assign(&c10_tb_y, sf_mex_create("y", &c10_r_u, 0, 0U, 0U, 0U, 0),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "OptimalityTolerance", c10_tb_y, 15);
    c10_s_u = chartInstance->c10_options.StepTolerance;
    c10_ub_y = NULL;
    sf_mex_assign(&c10_ub_y, sf_mex_create("y", &c10_s_u, 0, 0U, 0U, 0U, 0),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "StepTolerance", c10_ub_y, 16);
    c10_t_u = chartInstance->c10_options.MaxIterations;
    c10_vb_y = NULL;
    sf_mex_assign(&c10_vb_y, sf_mex_create("y", &c10_t_u, 0, 0U, 0U, 0U, 0),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "MaxIterations", c10_vb_y, 17);
    c10_u_u = chartInstance->c10_options.FunctionTolerance;
    c10_wb_y = NULL;
    sf_mex_assign(&c10_wb_y, sf_mex_create("y", &c10_u_u, 0, 0U, 0U, 0U, 0),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "FunctionTolerance", c10_wb_y, 18);
    for (c10_i2 = 0; c10_i2 < 8; c10_i2++) {
      c10_v_u[c10_i2] = chartInstance->c10_options.SolverName[c10_i2];
    }

    c10_xb_y = NULL;
    sf_mex_assign(&c10_xb_y, sf_mex_create("y", c10_v_u, 10, 0U, 1U, 0U, 2, 1, 8),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "SolverName", c10_xb_y, 19);
    c10_w_u = chartInstance->c10_options.CheckGradients;
    c10_yb_y = NULL;
    sf_mex_assign(&c10_yb_y, sf_mex_create("y", &c10_w_u, 11, 0U, 0U, 0U, 0),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "CheckGradients", c10_yb_y, 20);
    for (c10_i3 = 0; c10_i3 < 3; c10_i3++) {
      c10_x_u[c10_i3] = chartInstance->c10_options.Diagnostics[c10_i3];
    }

    c10_ac_y = NULL;
    sf_mex_assign(&c10_ac_y, sf_mex_create("y", c10_x_u, 10, 0U, 1U, 0U, 2, 1, 3),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "Diagnostics", c10_ac_y, 21);
    c10_y_u = chartInstance->c10_options.DiffMaxChange;
    c10_bc_y = NULL;
    sf_mex_assign(&c10_bc_y, sf_mex_create("y", &c10_y_u, 0, 0U, 0U, 0U, 0),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "DiffMaxChange", c10_bc_y, 22);
    c10_ab_u = chartInstance->c10_options.DiffMinChange;
    c10_cc_y = NULL;
    sf_mex_assign(&c10_cc_y, sf_mex_create("y", &c10_ab_u, 0, 0U, 0U, 0U, 0),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "DiffMinChange", c10_cc_y, 23);
    for (c10_i4 = 0; c10_i4 < 3; c10_i4++) {
      c10_x_u[c10_i4] = chartInstance->c10_options.Display[c10_i4];
    }

    c10_dc_y = NULL;
    sf_mex_assign(&c10_dc_y, sf_mex_create("y", c10_x_u, 10, 0U, 1U, 0U, 2, 1, 3),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "Display", c10_dc_y, 24);
    for (c10_i5 = 0; c10_i5 < 3; c10_i5++) {
      c10_x_u[c10_i5] = chartInstance->c10_options.FunValCheck[c10_i5];
    }

    c10_ec_y = NULL;
    sf_mex_assign(&c10_ec_y, sf_mex_create("y", c10_x_u, 10, 0U, 1U, 0U, 2, 1, 3),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "FunValCheck", c10_ec_y, 25);
    c10_fc_y = NULL;
    sf_mex_assign(&c10_fc_y, sf_mex_create("y", NULL, 0, 0U, 1U, 0U, 2, 0, 0),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "PlotFcn", c10_fc_y, 26);
    c10_gc_y = NULL;
    sf_mex_assign(&c10_gc_y, sf_mex_create("y", NULL, 0, 0U, 1U, 0U, 2, 0, 0),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "OutputFcn", c10_gc_y, 27);
    c10_bb_u = chartInstance->c10_options.UseParallel;
    c10_hc_y = NULL;
    sf_mex_assign(&c10_hc_y, sf_mex_create("y", &c10_bb_u, 11, 0U, 0U, 0U, 0),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "UseParallel", c10_hc_y, 28);
    c10_ic_y = NULL;
    sf_mex_assign(&c10_ic_y, sf_mex_create("y", NULL, 0, 0U, 1U, 0U, 2, 0, 0),
                  false);
    sf_mex_setfieldbynum(c10_w_y, 0, "JacobianMultiplyFcn", c10_ic_y, 29);
    for (c10_i6 = 0; c10_i6 < 4; c10_i6++) {
      c10_cb_u[c10_i6] = chartInstance->c10_options.LinearSolver[c10_i6];
    }

    c10_jc_y = NULL;
    sf_mex_assign(&c10_jc_y, sf_mex_create("y", c10_cb_u, 10, 0U, 1U, 0U, 2, 1,
      4), false);
    sf_mex_setfieldbynum(c10_w_y, 0, "LinearSolver", c10_jc_y, 30);
    for (c10_i7 = 0; c10_i7 < 2; c10_i7++) {
      c10_db_u[c10_i7] = chartInstance->c10_options.SubproblemAlgorithm[c10_i7];
    }

    c10_kc_y = NULL;
    sf_mex_assign(&c10_kc_y, sf_mex_create("y", c10_db_u, 10, 0U, 1U, 0U, 2, 1,
      2), false);
    sf_mex_setfieldbynum(c10_w_y, 0, "SubproblemAlgorithm", c10_kc_y, 31);
  }

  sf_mex_setcell(c10_y, 19, c10_w_y);
  c10_y_y = NULL;
  if (!chartInstance->c10_b_N_not_empty) {
    sf_mex_assign(&c10_y_y, sf_mex_create("y", NULL, 0, 0U, 1U, 0U, 2, 0, 0),
                  false);
  } else {
    sf_mex_assign(&c10_y_y, sf_mex_create("y", &chartInstance->c10_t_0, 0, 0U,
      0U, 0U, 0), false);
  }

  sf_mex_setcell(c10_y, 20, c10_y_y);
  c10_bb_y = NULL;
  if (!chartInstance->c10_z_lb_not_empty) {
    sf_mex_assign(&c10_bb_y, sf_mex_create("y", NULL, 0, 0U, 1U, 0U, 2, 0, 0),
                  false);
  } else {
    sf_mex_assign(&c10_bb_y, sf_mex_create("y", &chartInstance->c10_z_lb.data[0],
      0, 0U, 1U, 0U, 1, chartInstance->c10_z_lb.size[0]), false);
  }

  sf_mex_setcell(c10_y, 21, c10_bb_y);
  c10_db_y = NULL;
  if (!chartInstance->c10_z_lb_not_empty) {
    sf_mex_assign(&c10_db_y, sf_mex_create("y", NULL, 0, 0U, 1U, 0U, 2, 0, 0),
                  false);
  } else {
    sf_mex_assign(&c10_db_y, sf_mex_create("y", &chartInstance->c10_z_ub.data[0],
      0, 0U, 1U, 0U, 1, chartInstance->c10_z_ub.size[0]), false);
  }

  sf_mex_setcell(c10_y, 22, c10_db_y);
  c10_fb_y = NULL;
  sf_mex_assign(&c10_fb_y, sf_mex_create("y",
    &chartInstance->c10_is_active_c10_ACCMPC, 3, 0U, 0U, 0U, 0), false);
  sf_mex_setcell(c10_y, 23, c10_fb_y);
  sf_mex_assign(&c10_st, c10_y, false);
  return c10_st;
}

static void set_sim_state_c10_ACCMPC(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_st)
{
  coder::array<real_T, 2U> c10_b_r;
  coder::array<real_T, 2U> c10_r1;
  coder::array<real_T, 2U> c10_r2;
  coder::array<real_T, 2U> c10_r3;
  coder::array<real_T, 1U> c10_r4;
  c10_scZhlMkNxPxOgM0FLkVrfPH c10_r5;
  emlrtStack c10_b_st = { NULL,        /* site */
    NULL,                              /* tls */
    NULL                               /* prev */
  };

  const mxArray *c10_u;
  real_T c10_b_tmp_data[602];
  real_T c10_tmp_data[602];
  real_T c10_c_tmp_data[142];
  real_T c10_d_tmp_data[142];
  real_T c10_dv[4];
  int32_T c10_b_tmp_size[1];
  int32_T c10_c_tmp_size[1];
  int32_T c10_d_tmp_size[1];
  int32_T c10_tmp_size[1];
  int32_T c10_b_loop_ub;
  int32_T c10_c_loop_ub;
  int32_T c10_d_loop_ub;
  int32_T c10_e_loop_ub;
  int32_T c10_f_loop_ub;
  int32_T c10_g_loop_ub;
  int32_T c10_h_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_i_loop_ub;
  int32_T c10_loop_ub;
  c10_b_st.tls = chartInstance->c10_fEmlrtCtx;
  chartInstance->c10_doneDoubleBufferReInit = true;
  c10_u = sf_mex_dup(c10_st);
  c10_emlrt_marshallIn(chartInstance, sf_mex_dup(sf_mex_getcell(c10_u, 0)),
                       "Slack", c10_dv);
  for (c10_i = 0; c10_i < 4; c10_i++) {
    (*chartInstance->c10_Slack)[c10_i] = c10_dv[c10_i];
  }

  *chartInstance->c10_a_opt = c10_c_emlrt_marshallIn(chartInstance, sf_mex_dup
    (sf_mex_getcell(c10_u, 1)), "a_opt");
  *chartInstance->c10_exitflag = c10_c_emlrt_marshallIn(chartInstance,
    sf_mex_dup(sf_mex_getcell(c10_u, 2)), "exitflag");
  *chartInstance->c10_fval = c10_c_emlrt_marshallIn(chartInstance, sf_mex_dup
    (sf_mex_getcell(c10_u, 3)), "fval");
  *chartInstance->c10_s_opt = c10_c_emlrt_marshallIn(chartInstance, sf_mex_dup
    (sf_mex_getcell(c10_u, 4)), "s_opt");
  c10_e_emlrt_marshallIn(chartInstance, &c10_b_st, sf_mex_dup(sf_mex_getcell
    (c10_u, 5)), "s_opt_prev_sol", c10_b_r);
  chartInstance->c10_s_opt_prev_sol->set_size(static_cast<emlrtRTEInfo *>(NULL),
    &c10_b_st, c10_b_r.size(0), c10_b_r.size(1));
  c10_loop_ub = c10_b_r.size(0) * c10_b_r.size(1) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_loop_ub; c10_i1++) {
    (*chartInstance->c10_s_opt_prev_sol)[c10_i1] = c10_b_r[c10_i1];
  }

  *chartInstance->c10_v_opt = c10_c_emlrt_marshallIn(chartInstance, sf_mex_dup
    (sf_mex_getcell(c10_u, 6)), "v_opt");
  c10_e_emlrt_marshallIn(chartInstance, &c10_b_st, sf_mex_dup(sf_mex_getcell
    (c10_u, 7)), "v_opt_prev_sol", c10_r1);
  chartInstance->c10_v_opt_prev_sol->set_size(static_cast<emlrtRTEInfo *>(NULL),
    &c10_b_st, c10_r1.size(0), c10_r1.size(1));
  c10_b_loop_ub = c10_r1.size(0) * c10_r1.size(1) - 1;
  for (c10_i2 = 0; c10_i2 <= c10_b_loop_ub; c10_i2++) {
    (*chartInstance->c10_v_opt_prev_sol)[c10_i2] = c10_r1[c10_i2];
  }

  c10_g_emlrt_marshallIn(chartInstance, &c10_b_st, sf_mex_dup(sf_mex_getcell
    (c10_u, 8)), "G", &chartInstance->c10_G_not_empty, c10_r2);
  chartInstance->c10_b_G.set_size(static_cast<emlrtRTEInfo *>(NULL), &c10_b_st,
    c10_r2.size(0), c10_r2.size(1));
  c10_c_loop_ub = c10_r2.size(0) * c10_r2.size(1) - 1;
  for (c10_i3 = 0; c10_i3 <= c10_c_loop_ub; c10_i3++) {
    chartInstance->c10_b_G[c10_i3] = c10_r2[c10_i3];
  }

  c10_i_emlrt_marshallIn(chartInstance, &c10_b_st, sf_mex_dup(sf_mex_getcell
    (c10_u, 9)), "H", &chartInstance->c10_H_not_empty, c10_r3);
  chartInstance->c10_H.set_size(static_cast<emlrtRTEInfo *>(NULL), &c10_b_st,
    c10_r3.size(0), c10_r3.size(1));
  c10_d_loop_ub = c10_r3.size(0) * c10_r3.size(1) - 1;
  for (c10_i4 = 0; c10_i4 <= c10_d_loop_ub; c10_i4++) {
    chartInstance->c10_H[c10_i4] = c10_r3[c10_i4];
  }

  chartInstance->c10_b_N = c10_k_emlrt_marshallIn(chartInstance, sf_mex_dup
    (sf_mex_getcell(c10_u, 10)), "N", &chartInstance->c10_b_N_not_empty);
  chartInstance->c10_Ts = c10_k_emlrt_marshallIn(chartInstance, sf_mex_dup
    (sf_mex_getcell(c10_u, 11)), "Ts", &chartInstance->c10_Ts_not_empty);
  chartInstance->c10_a_minus1 = c10_k_emlrt_marshallIn(chartInstance, sf_mex_dup
    (sf_mex_getcell(c10_u, 12)), "a_minus1",
    &chartInstance->c10_a_minus1_not_empty);
  c10_o_emlrt_marshallIn(chartInstance, &c10_b_st, sf_mex_dup(sf_mex_getcell
    (c10_u, 13)), "c", &chartInstance->c10_c_not_empty, c10_r4);
  chartInstance->c10_c.set_size(static_cast<emlrtRTEInfo *>(NULL), &c10_b_st,
    c10_r4.size(0));
  c10_e_loop_ub = c10_r4.size(0) - 1;
  for (c10_i5 = 0; c10_i5 <= c10_e_loop_ub; c10_i5++) {
    chartInstance->c10_c[c10_i5] = c10_r4[c10_i5];
  }

  c10_q_emlrt_marshallIn(chartInstance, sf_mex_dup(sf_mex_getcell(c10_u, 14)),
    "g_lb", &chartInstance->c10_g_lb_not_empty, c10_tmp_data, c10_tmp_size);
  chartInstance->c10_g_lb.size[0] = c10_tmp_size[0];
  c10_f_loop_ub = c10_tmp_size[0] - 1;
  for (c10_i6 = 0; c10_i6 <= c10_f_loop_ub; c10_i6++) {
    chartInstance->c10_g_lb.data[c10_i6] = c10_tmp_data[c10_i6];
  }

  c10_q_emlrt_marshallIn(chartInstance, sf_mex_dup(sf_mex_getcell(c10_u, 15)),
    "g_ub", &chartInstance->c10_g_ub_not_empty, c10_b_tmp_data, c10_b_tmp_size);
  chartInstance->c10_g_ub.size[0] = c10_b_tmp_size[0];
  c10_g_loop_ub = c10_b_tmp_size[0] - 1;
  for (c10_i7 = 0; c10_i7 <= c10_g_loop_ub; c10_i7++) {
    chartInstance->c10_g_ub.data[c10_i7] = c10_b_tmp_data[c10_i7];
  }

  chartInstance->c10_n_u = c10_k_emlrt_marshallIn(chartInstance, sf_mex_dup
    (sf_mex_getcell(c10_u, 16)), "n_u", &chartInstance->c10_n_u_not_empty);
  chartInstance->c10_n_x = c10_k_emlrt_marshallIn(chartInstance, sf_mex_dup
    (sf_mex_getcell(c10_u, 17)), "n_x", &chartInstance->c10_n_x_not_empty);
  chartInstance->c10_n_x_u = c10_k_emlrt_marshallIn(chartInstance, sf_mex_dup
    (sf_mex_getcell(c10_u, 18)), "n_x_u", &chartInstance->c10_n_x_u_not_empty);
  c10_s_emlrt_marshallIn(chartInstance, sf_mex_dup(sf_mex_getcell(c10_u, 19)),
    "options", &chartInstance->c10_options_not_empty, &c10_r5);
  chartInstance->c10_options = c10_r5;
  chartInstance->c10_t_0 = c10_k_emlrt_marshallIn(chartInstance, sf_mex_dup
    (sf_mex_getcell(c10_u, 20)), "t_0", &chartInstance->c10_t_0_not_empty);
  c10_db_emlrt_marshallIn(chartInstance, sf_mex_dup(sf_mex_getcell(c10_u, 21)),
    "z_lb", &chartInstance->c10_z_lb_not_empty, c10_c_tmp_data, c10_c_tmp_size);
  chartInstance->c10_z_lb.size[0] = c10_c_tmp_size[0];
  c10_h_loop_ub = c10_c_tmp_size[0] - 1;
  for (c10_i8 = 0; c10_i8 <= c10_h_loop_ub; c10_i8++) {
    chartInstance->c10_z_lb.data[c10_i8] = c10_c_tmp_data[c10_i8];
  }

  c10_db_emlrt_marshallIn(chartInstance, sf_mex_dup(sf_mex_getcell(c10_u, 22)),
    "z_ub", &chartInstance->c10_z_ub_not_empty, c10_d_tmp_data, c10_d_tmp_size);
  chartInstance->c10_z_ub.size[0] = c10_d_tmp_size[0];
  c10_i_loop_ub = c10_d_tmp_size[0] - 1;
  for (c10_i9 = 0; c10_i9 <= c10_i_loop_ub; c10_i9++) {
    chartInstance->c10_z_ub.data[c10_i9] = c10_d_tmp_data[c10_i9];
  }

  chartInstance->c10_is_active_c10_ACCMPC = c10_fb_emlrt_marshallIn
    (chartInstance, sf_mex_dup(sf_mex_getcell(c10_u, 23)),
     "is_active_c10_ACCMPC");
  sf_mex_destroy(&c10_u);
  sf_mex_destroy(&c10_st);
}

static void initSimStructsc10_ACCMPC(SFc10_ACCMPCInstanceStruct *chartInstance)
{
}

static void initSubchartIOPointersc10_ACCMPC(SFc10_ACCMPCInstanceStruct
  *chartInstance)
{
}

static void c10_CreateQP_ABSimulink(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s1bpVdlY1OIZfsh1YT30byD *c10_b_OPTsettings,
  real_T c10_b_n_x, real_T c10_b_n_u, real_T c10_s_0, real_T c10_v_0, real_T
  c10_b_s_est[20], real_T c10_b_v_est[20], real_T c10_b_s_tv_est[20], real_T
  c10_b_a_minus1, coder::array<real_T, 2U> &c10_c_H, real_T c10_c_data[],
  int32_T c10_c_size[1], coder::array<real_T, 2U> &c10_c_G, real_T
  c10_z_lb_data[], int32_T c10_z_lb_size[1], real_T c10_z_ub_data[], int32_T
  c10_z_ub_size[1], real_T c10_g_lb_data[], int32_T c10_g_lb_size[1], real_T
  c10_g_ub_data[], int32_T c10_g_ub_size[1])
{
  static real_T c10_dv[6] = { 0.0, 0.0, 1.0, 0.0, 0.0, -1.0 };

  static real_T c10_h_b[4] = { 1.0, -1.0, -1.0, 1.0 };

  static real_T c10_dv1[3] = { -1.0, 1.0, -1.0 };

  static real_T c10_dv2[3] = { -1.0, 1.0, 1.0 };

  coder::array<real_T, 1U> c10_b;
  c10_captured_var c10_b_V;
  c10_captured_var_1 c10_b_Tvec;
  c10_s1bpVdlY1OIZfsh1YT30byD c10_c_OPTsettings;
  c10_struct_g7LanElifcGF2oK3jOrI5C c10_unusedExpr;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  real_T c10_varargin_1[40];
  real_T c10_Mb[20];
  real_T c10_a_max_est[20];
  real_T c10_a_min_est[20];
  real_T c10_c_s_est[20];
  real_T c10_c_v_est[20];
  real_T c10_j_max_est[20];
  real_T c10_j_min_est[20];
  real_T c10_tau_est[20];
  real_T c10_v_curv_max[20];
  real_T c10_v_lim_max[20];
  real_T c10_v_minIncentive[20];
  real_T c10_W[7];
  real_T c10_f_ii[6];
  real_T c10_g_ii[5];
  real_T c10_d_H[4];
  real_T c10_e_H[4];
  real_T c10_f_b[4];
  real_T c10_b_c[2];
  real_T c10_c_ii[2];
  real_T c10_g_b[2];
  real_T c10_T;
  real_T c10_ab_a;
  real_T c10_acurr;
  real_T c10_aprev;
  real_T c10_b_a;
  real_T c10_b_kk;
  real_T c10_b_n_x_u;
  real_T c10_b_roundFloatVar;
  real_T c10_bb_a;
  real_T c10_c_a;
  real_T c10_c_c;
  real_T c10_c_roundFloatVar;
  real_T c10_cstrInd;
  real_T c10_d;
  real_T c10_d1;
  real_T c10_d10;
  real_T c10_d100;
  real_T c10_d101;
  real_T c10_d102;
  real_T c10_d103;
  real_T c10_d104;
  real_T c10_d105;
  real_T c10_d106;
  real_T c10_d107;
  real_T c10_d108;
  real_T c10_d109;
  real_T c10_d11;
  real_T c10_d110;
  real_T c10_d111;
  real_T c10_d112;
  real_T c10_d113;
  real_T c10_d114;
  real_T c10_d115;
  real_T c10_d116;
  real_T c10_d12;
  real_T c10_d13;
  real_T c10_d14;
  real_T c10_d15;
  real_T c10_d16;
  real_T c10_d17;
  real_T c10_d18;
  real_T c10_d19;
  real_T c10_d2;
  real_T c10_d20;
  real_T c10_d21;
  real_T c10_d22;
  real_T c10_d23;
  real_T c10_d24;
  real_T c10_d25;
  real_T c10_d26;
  real_T c10_d27;
  real_T c10_d28;
  real_T c10_d29;
  real_T c10_d3;
  real_T c10_d30;
  real_T c10_d31;
  real_T c10_d32;
  real_T c10_d33;
  real_T c10_d34;
  real_T c10_d35;
  real_T c10_d36;
  real_T c10_d37;
  real_T c10_d38;
  real_T c10_d39;
  real_T c10_d4;
  real_T c10_d40;
  real_T c10_d41;
  real_T c10_d42;
  real_T c10_d43;
  real_T c10_d44;
  real_T c10_d45;
  real_T c10_d46;
  real_T c10_d47;
  real_T c10_d48;
  real_T c10_d49;
  real_T c10_d5;
  real_T c10_d50;
  real_T c10_d51;
  real_T c10_d52;
  real_T c10_d53;
  real_T c10_d54;
  real_T c10_d55;
  real_T c10_d56;
  real_T c10_d57;
  real_T c10_d58;
  real_T c10_d59;
  real_T c10_d6;
  real_T c10_d60;
  real_T c10_d61;
  real_T c10_d62;
  real_T c10_d63;
  real_T c10_d64;
  real_T c10_d65;
  real_T c10_d66;
  real_T c10_d67;
  real_T c10_d68;
  real_T c10_d69;
  real_T c10_d7;
  real_T c10_d70;
  real_T c10_d71;
  real_T c10_d72;
  real_T c10_d73;
  real_T c10_d74;
  real_T c10_d75;
  real_T c10_d76;
  real_T c10_d77;
  real_T c10_d78;
  real_T c10_d79;
  real_T c10_d8;
  real_T c10_d80;
  real_T c10_d81;
  real_T c10_d82;
  real_T c10_d83;
  real_T c10_d84;
  real_T c10_d85;
  real_T c10_d86;
  real_T c10_d87;
  real_T c10_d88;
  real_T c10_d89;
  real_T c10_d9;
  real_T c10_d90;
  real_T c10_d91;
  real_T c10_d92;
  real_T c10_d93;
  real_T c10_d94;
  real_T c10_d95;
  real_T c10_d96;
  real_T c10_d97;
  real_T c10_d98;
  real_T c10_d99;
  real_T c10_d_a;
  real_T c10_d_c;
  real_T c10_d_roundFloatVar;
  real_T c10_e_a;
  real_T c10_e_c;
  real_T c10_e_ii;
  real_T c10_e_roundFloatVar;
  real_T c10_f_a;
  real_T c10_f_c;
  real_T c10_f_roundFloatVar;
  real_T c10_g_a;
  real_T c10_g_roundFloatVar;
  real_T c10_h_a;
  real_T c10_h_min;
  real_T c10_h_roundFloatVar;
  real_T c10_i_a;
  real_T c10_i_roundFloatVar;
  real_T c10_j_a;
  real_T c10_j_roundFloatVar;
  real_T c10_k;
  real_T c10_k_a;
  real_T c10_k_roundFloatVar;
  real_T c10_m_a;
  real_T c10_m_roundFloatVar;
  real_T c10_o;
  real_T c10_o_a;
  real_T c10_o_roundFloatVar;
  real_T c10_p_a;
  real_T c10_p_roundFloatVar;
  real_T c10_q_a;
  real_T c10_q_roundFloatVar;
  real_T c10_r_a;
  real_T c10_r_roundFloatVar;
  real_T c10_roundFloatVar;
  real_T c10_s_a;
  real_T c10_s_goal;
  real_T c10_s_max;
  real_T c10_scurr;
  real_T c10_solverToUse;
  real_T c10_t_a;
  real_T c10_tau_min;
  real_T c10_u_a;
  real_T c10_v_a;
  real_T c10_v_max;
  real_T c10_vcurr;
  real_T c10_w_FC;
  real_T c10_w_a;
  real_T c10_w_f;
  real_T c10_w_h;
  real_T c10_w_j;
  real_T c10_w_s;
  real_T c10_w_v;
  real_T c10_x_a;
  real_T c10_xi_f;
  real_T c10_xi_h;
  real_T c10_xi_s;
  real_T c10_xi_v;
  real_T c10_y_a;
  int32_T c10_tmp_data[21];
  int32_T c10_b_tmp_data[20];
  int32_T c10_g_o[3];
  int32_T c10_i_o[3];
  int32_T c10_m_o[3];
  int32_T c10_o_o[3];
  int32_T c10_b_o[2];
  int32_T c10_c_o[2];
  int32_T c10_d_o[2];
  int32_T c10_e_o[2];
  int32_T c10_f_o[2];
  int32_T c10_h_o[2];
  int32_T c10_j_o[2];
  int32_T c10_k_o[2];
  int32_T c10_b_cstrInd;
  int32_T c10_b_fixedVar;
  int32_T c10_b_loop_ub;
  int32_T c10_c_cstrInd;
  int32_T c10_c_fixedVar;
  int32_T c10_c_loop_ub;
  int32_T c10_d_cstrInd;
  int32_T c10_d_fixedVar;
  int32_T c10_d_loop_ub;
  int32_T c10_e_cstrInd;
  int32_T c10_e_fixedVar;
  int32_T c10_e_loop_ub;
  int32_T c10_f_cstrInd;
  int32_T c10_f_fixedVar;
  int32_T c10_f_loop_ub;
  int32_T c10_fixedVar;
  int32_T c10_g_cstrInd;
  int32_T c10_g_fixedVar;
  int32_T c10_g_loop_ub;
  int32_T c10_h_cstrInd;
  int32_T c10_h_fixedVar;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i100;
  int32_T c10_i101;
  int32_T c10_i102;
  int32_T c10_i103;
  int32_T c10_i104;
  int32_T c10_i105;
  int32_T c10_i106;
  int32_T c10_i107;
  int32_T c10_i108;
  int32_T c10_i109;
  int32_T c10_i11;
  int32_T c10_i110;
  int32_T c10_i111;
  int32_T c10_i112;
  int32_T c10_i113;
  int32_T c10_i114;
  int32_T c10_i115;
  int32_T c10_i116;
  int32_T c10_i117;
  int32_T c10_i118;
  int32_T c10_i119;
  int32_T c10_i12;
  int32_T c10_i120;
  int32_T c10_i121;
  int32_T c10_i122;
  int32_T c10_i123;
  int32_T c10_i124;
  int32_T c10_i125;
  int32_T c10_i126;
  int32_T c10_i127;
  int32_T c10_i128;
  int32_T c10_i129;
  int32_T c10_i13;
  int32_T c10_i130;
  int32_T c10_i131;
  int32_T c10_i132;
  int32_T c10_i133;
  int32_T c10_i134;
  int32_T c10_i135;
  int32_T c10_i136;
  int32_T c10_i137;
  int32_T c10_i138;
  int32_T c10_i139;
  int32_T c10_i14;
  int32_T c10_i140;
  int32_T c10_i141;
  int32_T c10_i142;
  int32_T c10_i143;
  int32_T c10_i144;
  int32_T c10_i145;
  int32_T c10_i146;
  int32_T c10_i147;
  int32_T c10_i148;
  int32_T c10_i149;
  int32_T c10_i15;
  int32_T c10_i150;
  int32_T c10_i151;
  int32_T c10_i152;
  int32_T c10_i153;
  int32_T c10_i154;
  int32_T c10_i155;
  int32_T c10_i156;
  int32_T c10_i157;
  int32_T c10_i158;
  int32_T c10_i159;
  int32_T c10_i16;
  int32_T c10_i160;
  int32_T c10_i161;
  int32_T c10_i162;
  int32_T c10_i163;
  int32_T c10_i164;
  int32_T c10_i165;
  int32_T c10_i166;
  int32_T c10_i167;
  int32_T c10_i168;
  int32_T c10_i169;
  int32_T c10_i17;
  int32_T c10_i170;
  int32_T c10_i171;
  int32_T c10_i172;
  int32_T c10_i173;
  int32_T c10_i174;
  int32_T c10_i175;
  int32_T c10_i176;
  int32_T c10_i177;
  int32_T c10_i178;
  int32_T c10_i179;
  int32_T c10_i18;
  int32_T c10_i180;
  int32_T c10_i181;
  int32_T c10_i182;
  int32_T c10_i183;
  int32_T c10_i184;
  int32_T c10_i185;
  int32_T c10_i186;
  int32_T c10_i187;
  int32_T c10_i188;
  int32_T c10_i189;
  int32_T c10_i19;
  int32_T c10_i190;
  int32_T c10_i191;
  int32_T c10_i192;
  int32_T c10_i193;
  int32_T c10_i194;
  int32_T c10_i195;
  int32_T c10_i196;
  int32_T c10_i197;
  int32_T c10_i198;
  int32_T c10_i199;
  int32_T c10_i2;
  int32_T c10_i20;
  int32_T c10_i200;
  int32_T c10_i201;
  int32_T c10_i202;
  int32_T c10_i203;
  int32_T c10_i204;
  int32_T c10_i205;
  int32_T c10_i206;
  int32_T c10_i207;
  int32_T c10_i208;
  int32_T c10_i209;
  int32_T c10_i21;
  int32_T c10_i210;
  int32_T c10_i211;
  int32_T c10_i212;
  int32_T c10_i213;
  int32_T c10_i214;
  int32_T c10_i215;
  int32_T c10_i216;
  int32_T c10_i217;
  int32_T c10_i218;
  int32_T c10_i219;
  int32_T c10_i22;
  int32_T c10_i220;
  int32_T c10_i221;
  int32_T c10_i222;
  int32_T c10_i223;
  int32_T c10_i224;
  int32_T c10_i225;
  int32_T c10_i226;
  int32_T c10_i227;
  int32_T c10_i228;
  int32_T c10_i229;
  int32_T c10_i23;
  int32_T c10_i230;
  int32_T c10_i231;
  int32_T c10_i232;
  int32_T c10_i233;
  int32_T c10_i234;
  int32_T c10_i235;
  int32_T c10_i236;
  int32_T c10_i237;
  int32_T c10_i238;
  int32_T c10_i239;
  int32_T c10_i24;
  int32_T c10_i240;
  int32_T c10_i241;
  int32_T c10_i242;
  int32_T c10_i243;
  int32_T c10_i244;
  int32_T c10_i245;
  int32_T c10_i246;
  int32_T c10_i247;
  int32_T c10_i248;
  int32_T c10_i249;
  int32_T c10_i25;
  int32_T c10_i250;
  int32_T c10_i251;
  int32_T c10_i252;
  int32_T c10_i253;
  int32_T c10_i254;
  int32_T c10_i255;
  int32_T c10_i256;
  int32_T c10_i257;
  int32_T c10_i258;
  int32_T c10_i259;
  int32_T c10_i26;
  int32_T c10_i260;
  int32_T c10_i261;
  int32_T c10_i262;
  int32_T c10_i263;
  int32_T c10_i264;
  int32_T c10_i265;
  int32_T c10_i266;
  int32_T c10_i267;
  int32_T c10_i268;
  int32_T c10_i269;
  int32_T c10_i27;
  int32_T c10_i270;
  int32_T c10_i271;
  int32_T c10_i272;
  int32_T c10_i273;
  int32_T c10_i274;
  int32_T c10_i275;
  int32_T c10_i276;
  int32_T c10_i277;
  int32_T c10_i278;
  int32_T c10_i279;
  int32_T c10_i28;
  int32_T c10_i280;
  int32_T c10_i281;
  int32_T c10_i282;
  int32_T c10_i283;
  int32_T c10_i284;
  int32_T c10_i285;
  int32_T c10_i286;
  int32_T c10_i287;
  int32_T c10_i288;
  int32_T c10_i289;
  int32_T c10_i29;
  int32_T c10_i290;
  int32_T c10_i291;
  int32_T c10_i292;
  int32_T c10_i293;
  int32_T c10_i294;
  int32_T c10_i295;
  int32_T c10_i296;
  int32_T c10_i297;
  int32_T c10_i298;
  int32_T c10_i299;
  int32_T c10_i3;
  int32_T c10_i30;
  int32_T c10_i300;
  int32_T c10_i301;
  int32_T c10_i302;
  int32_T c10_i303;
  int32_T c10_i304;
  int32_T c10_i305;
  int32_T c10_i306;
  int32_T c10_i307;
  int32_T c10_i308;
  int32_T c10_i309;
  int32_T c10_i31;
  int32_T c10_i310;
  int32_T c10_i311;
  int32_T c10_i312;
  int32_T c10_i313;
  int32_T c10_i314;
  int32_T c10_i315;
  int32_T c10_i316;
  int32_T c10_i317;
  int32_T c10_i318;
  int32_T c10_i319;
  int32_T c10_i32;
  int32_T c10_i320;
  int32_T c10_i321;
  int32_T c10_i322;
  int32_T c10_i323;
  int32_T c10_i324;
  int32_T c10_i325;
  int32_T c10_i326;
  int32_T c10_i327;
  int32_T c10_i328;
  int32_T c10_i329;
  int32_T c10_i33;
  int32_T c10_i330;
  int32_T c10_i331;
  int32_T c10_i332;
  int32_T c10_i333;
  int32_T c10_i334;
  int32_T c10_i335;
  int32_T c10_i34;
  int32_T c10_i35;
  int32_T c10_i36;
  int32_T c10_i37;
  int32_T c10_i38;
  int32_T c10_i39;
  int32_T c10_i4;
  int32_T c10_i40;
  int32_T c10_i41;
  int32_T c10_i42;
  int32_T c10_i43;
  int32_T c10_i44;
  int32_T c10_i45;
  int32_T c10_i46;
  int32_T c10_i47;
  int32_T c10_i48;
  int32_T c10_i49;
  int32_T c10_i5;
  int32_T c10_i50;
  int32_T c10_i51;
  int32_T c10_i52;
  int32_T c10_i53;
  int32_T c10_i54;
  int32_T c10_i55;
  int32_T c10_i56;
  int32_T c10_i57;
  int32_T c10_i58;
  int32_T c10_i59;
  int32_T c10_i6;
  int32_T c10_i60;
  int32_T c10_i61;
  int32_T c10_i62;
  int32_T c10_i63;
  int32_T c10_i64;
  int32_T c10_i65;
  int32_T c10_i66;
  int32_T c10_i67;
  int32_T c10_i68;
  int32_T c10_i69;
  int32_T c10_i7;
  int32_T c10_i70;
  int32_T c10_i71;
  int32_T c10_i72;
  int32_T c10_i73;
  int32_T c10_i74;
  int32_T c10_i75;
  int32_T c10_i76;
  int32_T c10_i77;
  int32_T c10_i78;
  int32_T c10_i79;
  int32_T c10_i8;
  int32_T c10_i80;
  int32_T c10_i81;
  int32_T c10_i82;
  int32_T c10_i83;
  int32_T c10_i84;
  int32_T c10_i85;
  int32_T c10_i86;
  int32_T c10_i87;
  int32_T c10_i88;
  int32_T c10_i89;
  int32_T c10_i9;
  int32_T c10_i90;
  int32_T c10_i91;
  int32_T c10_i92;
  int32_T c10_i93;
  int32_T c10_i94;
  int32_T c10_i95;
  int32_T c10_i96;
  int32_T c10_i97;
  int32_T c10_i98;
  int32_T c10_i99;
  int32_T c10_i_cstrInd;
  int32_T c10_i_fixedVar;
  int32_T c10_j_cstrInd;
  int32_T c10_j_fixedVar;
  int32_T c10_k_cstrInd;
  int32_T c10_k_fixedVar;
  int32_T c10_kk;
  int32_T c10_loop_ub;
  int32_T c10_m_cstrInd;
  int32_T c10_m_fixedVar;
  int32_T c10_o_cstrInd;
  int32_T c10_o_fixedVar;
  int32_T c10_p_cstrInd;
  int32_T c10_p_fixedVar;
  int32_T c10_q_cstrInd;
  int32_T c10_q_fixedVar;
  int32_T c10_r_cstrInd;
  int32_T c10_r_fixedVar;
  int32_T c10_s_cstrInd;
  int32_T c10_t_cstrInd;
  boolean_T c10_b1;
  boolean_T c10_b10;
  boolean_T c10_b100;
  boolean_T c10_b101;
  boolean_T c10_b102;
  boolean_T c10_b103;
  boolean_T c10_b104;
  boolean_T c10_b105;
  boolean_T c10_b106;
  boolean_T c10_b107;
  boolean_T c10_b108;
  boolean_T c10_b109;
  boolean_T c10_b11;
  boolean_T c10_b110;
  boolean_T c10_b111;
  boolean_T c10_b112;
  boolean_T c10_b113;
  boolean_T c10_b114;
  boolean_T c10_b115;
  boolean_T c10_b116;
  boolean_T c10_b117;
  boolean_T c10_b118;
  boolean_T c10_b119;
  boolean_T c10_b12;
  boolean_T c10_b120;
  boolean_T c10_b121;
  boolean_T c10_b122;
  boolean_T c10_b123;
  boolean_T c10_b124;
  boolean_T c10_b125;
  boolean_T c10_b126;
  boolean_T c10_b127;
  boolean_T c10_b13;
  boolean_T c10_b14;
  boolean_T c10_b15;
  boolean_T c10_b16;
  boolean_T c10_b17;
  boolean_T c10_b18;
  boolean_T c10_b19;
  boolean_T c10_b2;
  boolean_T c10_b20;
  boolean_T c10_b21;
  boolean_T c10_b22;
  boolean_T c10_b23;
  boolean_T c10_b24;
  boolean_T c10_b25;
  boolean_T c10_b26;
  boolean_T c10_b27;
  boolean_T c10_b28;
  boolean_T c10_b29;
  boolean_T c10_b3;
  boolean_T c10_b30;
  boolean_T c10_b31;
  boolean_T c10_b32;
  boolean_T c10_b33;
  boolean_T c10_b34;
  boolean_T c10_b35;
  boolean_T c10_b36;
  boolean_T c10_b37;
  boolean_T c10_b38;
  boolean_T c10_b39;
  boolean_T c10_b4;
  boolean_T c10_b40;
  boolean_T c10_b41;
  boolean_T c10_b42;
  boolean_T c10_b43;
  boolean_T c10_b44;
  boolean_T c10_b45;
  boolean_T c10_b46;
  boolean_T c10_b47;
  boolean_T c10_b48;
  boolean_T c10_b49;
  boolean_T c10_b5;
  boolean_T c10_b50;
  boolean_T c10_b51;
  boolean_T c10_b52;
  boolean_T c10_b53;
  boolean_T c10_b54;
  boolean_T c10_b55;
  boolean_T c10_b56;
  boolean_T c10_b57;
  boolean_T c10_b58;
  boolean_T c10_b59;
  boolean_T c10_b6;
  boolean_T c10_b60;
  boolean_T c10_b61;
  boolean_T c10_b62;
  boolean_T c10_b63;
  boolean_T c10_b64;
  boolean_T c10_b65;
  boolean_T c10_b66;
  boolean_T c10_b67;
  boolean_T c10_b68;
  boolean_T c10_b69;
  boolean_T c10_b7;
  boolean_T c10_b70;
  boolean_T c10_b71;
  boolean_T c10_b72;
  boolean_T c10_b73;
  boolean_T c10_b74;
  boolean_T c10_b75;
  boolean_T c10_b76;
  boolean_T c10_b77;
  boolean_T c10_b78;
  boolean_T c10_b79;
  boolean_T c10_b8;
  boolean_T c10_b80;
  boolean_T c10_b81;
  boolean_T c10_b82;
  boolean_T c10_b83;
  boolean_T c10_b84;
  boolean_T c10_b85;
  boolean_T c10_b86;
  boolean_T c10_b87;
  boolean_T c10_b88;
  boolean_T c10_b89;
  boolean_T c10_b9;
  boolean_T c10_b90;
  boolean_T c10_b91;
  boolean_T c10_b92;
  boolean_T c10_b93;
  boolean_T c10_b94;
  boolean_T c10_b95;
  boolean_T c10_b96;
  boolean_T c10_b97;
  boolean_T c10_b98;
  boolean_T c10_b99;
  boolean_T c10_e_b;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_st.site = &c10_emlrtRSI;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_b_st.site = &c10_i_emlrtRSI;
  c10_st.site = &c10_emlrtRSI;
  c10_b_st.site = &c10_i_emlrtRSI;
  covrtEmlFcnEval(chartInstance->c10_covrtInstance, 14U, 0, 0);
  c10_solverToUse = c10_b_OPTsettings->solverToUse;
  for (c10_i = 0; c10_i < 20; c10_i++) {
    c10_b_Tvec.contents[c10_i] = c10_b_OPTsettings->Tvec[c10_i];
  }

  for (c10_i1 = 0; c10_i1 < 7; c10_i1++) {
    c10_W[c10_i1] = c10_b_OPTsettings->W_AB[c10_i1];
  }

  c10_tau_min = c10_b_OPTsettings->tau_min;
  c10_h_min = c10_b_OPTsettings->h_min;
  c10_s_goal = c10_b_OPTsettings->s_goal;
  for (c10_i2 = 0; c10_i2 < 20; c10_i2++) {
    c10_Mb[c10_i2] = c10_b_OPTsettings->Mb[c10_i2];
  }

  c10_st.site = &c10_b_emlrtRSI;
  c10_SetParametersInternally(chartInstance, &c10_unusedExpr);
  c10_b_V.contents = c10_r;
  c10_w_FC = c10_W[0];
  c10_w_a = c10_W[1];
  c10_w_j = c10_W[2];
  c10_w_v = c10_W[3];
  c10_w_h = c10_W[4];
  c10_w_s = c10_W[5];
  c10_w_f = c10_W[6];
  c10_st.site = &c10_c_emlrtRSI;
  c10_c_OPTsettings = *c10_b_OPTsettings;
  for (c10_i3 = 0; c10_i3 < 20; c10_i3++) {
    c10_c_s_est[c10_i3] = c10_b_s_est[c10_i3];
  }

  for (c10_i4 = 0; c10_i4 < 20; c10_i4++) {
    c10_c_v_est[c10_i4] = c10_b_v_est[c10_i4];
  }

  c10_EstimateBoundsInternally(chartInstance, &c10_st, &c10_b_V, &c10_b_Tvec,
    &c10_c_OPTsettings, c10_c_s_est, c10_c_v_est, c10_v_minIncentive,
    c10_v_lim_max, c10_v_curv_max, c10_a_min_est, c10_a_max_est, c10_j_min_est,
    c10_j_max_est, c10_tau_est);
  c10_cat(chartInstance, c10_v_lim_max, c10_v_curv_max, c10_varargin_1);
  c10_minimum(chartInstance, c10_varargin_1, c10_v_minIncentive);
  c10_b_n_x_u = c10_b_n_x + c10_b_n_u;
  c10_c_H.set_size(&c10_ub_emlrtRTEI, c10_sp, 142, 142);
  for (c10_i5 = 0; c10_i5 < 20164; c10_i5++) {
    c10_c_H[c10_i5] = 0.0;
  }

  c10_c_size[0] = 142;
  for (c10_i6 = 0; c10_i6 < 142; c10_i6++) {
    c10_c_data[c10_i6] = 0.0;
  }

  c10_c_G.set_size(&c10_wb_emlrtRTEI, c10_sp, 602, 142);
  for (c10_i7 = 0; c10_i7 < 85484; c10_i7++) {
    c10_c_G[c10_i7] = 0.0;
  }

  c10_g_lb_size[0] = 602;
  for (c10_i8 = 0; c10_i8 < 602; c10_i8++) {
    c10_g_lb_data[c10_i8] = 0.0;
  }

  c10_g_ub_size[0] = 602;
  for (c10_i9 = 0; c10_i9 < 602; c10_i9++) {
    c10_g_ub_data[c10_i9] = c10_g_lb_data[c10_i9];
  }

  c10_s_max = c10_s_goal;
  c10_v_max = c10_b_V.contents.v_max;
  c10_z_lb_size[0] = 142;
  for (c10_i10 = 0; c10_i10 < 142; c10_i10++) {
    c10_z_lb_data[c10_i10] = 0.0;
  }

  c10_z_ub_size[0] = c10_z_lb_size[0];
  c10_loop_ub = c10_z_lb_size[0] - 1;
  for (c10_i11 = 0; c10_i11 <= c10_loop_ub; c10_i11++) {
    c10_z_ub_data[c10_i11] = c10_z_lb_data[c10_i11];
  }

  if (covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 0,
                     covrtRelationalopUpdateFcn(chartInstance->c10_covrtInstance,
        14U, 0U, 0U, c10_solverToUse, 2.0, -1, 0U, static_cast<int32_T>
        (c10_solverToUse == 2.0)))) {
    c10_d = c10_b_n_x_u * 20.0 + c10_b_n_x;
    c10_e_b = (c10_b_n_x_u == 0.0);
    c10_b1 = (c10_b_n_x_u > 0.0);
    c10_b2 = (c10_d < 1.0);
    c10_b3 = (c10_b1 && c10_b2);
    c10_b4 = (c10_b_n_x_u < 0.0);
    c10_b5 = (c10_d > 1.0);
    c10_b6 = (c10_b4 && c10_b5);
    c10_b7 = (c10_b3 || c10_b6);
    if (c10_e_b || c10_b7) {
      c10_i19 = 1;
      c10_i20 = 1;
    } else {
      c10_i18 = 1;
      if ((c10_i18 < 1) || (c10_i18 > c10_z_lb_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i18, 1, c10_z_lb_size[0],
          &c10_gb_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_i19 = c10_i18;
      if (c10_b_n_x_u != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_b_n_x_u)))) {
        emlrtIntegerCheckR2012b(c10_b_n_x_u, &c10_fb_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_d1 = trunc(c10_b_n_x_u);
      if (muDoubleScalarIsNaN(c10_d1) || muDoubleScalarIsInf(c10_d1)) {
        c10_d3 = 0.0;
      } else {
        c10_d3 = muDoubleScalarRem(c10_d1, 4.294967296E+9);
      }

      c10_roundFloatVar = trunc(c10_b_n_x_u);
      if (c10_d3 < 0.0) {
        c10_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d3));
      } else {
        c10_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d3));
      }

      if (c10_roundFloatVar < 0.0) {
        c10_d4 = muDoubleScalarCeil(c10_roundFloatVar);
      } else {
        c10_d4 = muDoubleScalarFloor(c10_roundFloatVar);
      }

      if (static_cast<real_T>(c10_fixedVar) != c10_d4) {
        sf_data_overflow_error(chartInstance->S, 0U, 0, 0);
      }

      c10_i20 = c10_fixedVar;
      if (c10_d != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
            (c10_d)))) {
        emlrtIntegerCheckR2012b(c10_d, &c10_eb_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i29 = static_cast<int32_T>(c10_d);
      if ((c10_i29 < 1) || (c10_i29 > c10_z_lb_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i29, 1, c10_z_lb_size[0],
          &c10_hb_emlrtBCI, (emlrtConstCTX)c10_sp);
      }
    }

    for (c10_i23 = 0; c10_i23 < 21; c10_i23++) {
      c10_tmp_data[c10_i23] = (c10_i19 + c10_i20 * c10_i23) - 1;
    }

    for (c10_i24 = 0; c10_i24 < 21; c10_i24++) {
      c10_z_lb_data[c10_tmp_data[c10_i24]] = 0.0;
    }

    c10_d2 = c10_b_n_x_u * 20.0 + c10_b_n_x;
    c10_b8 = (c10_b_n_x_u == 0.0);
    c10_b9 = (c10_b_n_x_u > 0.0);
    c10_b10 = (c10_d2 < 1.0);
    c10_b11 = (c10_b9 && c10_b10);
    c10_b12 = (c10_b_n_x_u < 0.0);
    c10_b13 = (c10_d2 > 1.0);
    c10_b14 = (c10_b12 && c10_b13);
    c10_b15 = (c10_b11 || c10_b14);
    if (c10_b8 || c10_b15) {
      c10_i26 = 1;
      c10_i27 = 1;
    } else {
      c10_i25 = 1;
      if ((c10_i25 < 1) || (c10_i25 > c10_z_ub_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i25, 1, c10_z_ub_size[0],
          &c10_tf_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_i26 = c10_i25;
      if (c10_b_n_x_u != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_b_n_x_u)))) {
        emlrtIntegerCheckR2012b(c10_b_n_x_u, &c10_sf_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_d5 = trunc(c10_b_n_x_u);
      if (muDoubleScalarIsNaN(c10_d5) || muDoubleScalarIsInf(c10_d5)) {
        c10_d7 = 0.0;
      } else {
        c10_d7 = muDoubleScalarRem(c10_d5, 4.294967296E+9);
      }

      c10_b_roundFloatVar = trunc(c10_b_n_x_u);
      if (c10_d7 < 0.0) {
        c10_b_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d7));
      } else {
        c10_b_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d7));
      }

      if (c10_b_roundFloatVar < 0.0) {
        c10_d9 = muDoubleScalarCeil(c10_b_roundFloatVar);
      } else {
        c10_d9 = muDoubleScalarFloor(c10_b_roundFloatVar);
      }

      if (static_cast<real_T>(c10_b_fixedVar) != c10_d9) {
        sf_data_overflow_error(chartInstance->S, 0U, 0, 0);
      }

      c10_i27 = c10_b_fixedVar;
      if (c10_d2 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
            (c10_d2)))) {
        emlrtIntegerCheckR2012b(c10_d2, &c10_rf_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i42 = static_cast<int32_T>(c10_d2);
      if ((c10_i42 < 1) || (c10_i42 > c10_z_ub_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i42, 1, c10_z_ub_size[0],
          &c10_uf_emlrtBCI, (emlrtConstCTX)c10_sp);
      }
    }

    for (c10_i28 = 0; c10_i28 < 21; c10_i28++) {
      c10_tmp_data[c10_i28] = (c10_i26 + c10_i27 * c10_i28) - 1;
    }

    for (c10_i30 = 0; c10_i30 < 21; c10_i30++) {
      c10_z_ub_data[c10_tmp_data[c10_i30]] = c10_s_max;
    }

    c10_d6 = c10_b_n_x_u * 20.0 + c10_b_n_x;
    c10_b16 = (c10_b_n_x_u == 0.0);
    c10_b17 = (c10_b_n_x_u > 0.0);
    c10_b18 = (c10_d6 < 2.0);
    c10_b19 = (c10_b17 && c10_b18);
    c10_b20 = (c10_b_n_x_u < 0.0);
    c10_b21 = (c10_d6 > 2.0);
    c10_b22 = (c10_b20 && c10_b21);
    c10_b23 = (c10_b19 || c10_b22);
    if (c10_b16 || c10_b23) {
      c10_i35 = 1;
      c10_i37 = 1;
    } else {
      c10_i34 = 2;
      if ((c10_i34 < 1) || (c10_i34 > c10_z_lb_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i34, 1, c10_z_lb_size[0],
          &c10_ib_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_i35 = c10_i34;
      if (c10_b_n_x_u != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_b_n_x_u)))) {
        emlrtIntegerCheckR2012b(c10_b_n_x_u, &c10_hb_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_d10 = trunc(c10_b_n_x_u);
      if (muDoubleScalarIsNaN(c10_d10) || muDoubleScalarIsInf(c10_d10)) {
        c10_d12 = 0.0;
      } else {
        c10_d12 = muDoubleScalarRem(c10_d10, 4.294967296E+9);
      }

      c10_c_roundFloatVar = trunc(c10_b_n_x_u);
      if (c10_d12 < 0.0) {
        c10_c_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d12));
      } else {
        c10_c_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d12));
      }

      if (c10_c_roundFloatVar < 0.0) {
        c10_d13 = muDoubleScalarCeil(c10_c_roundFloatVar);
      } else {
        c10_d13 = muDoubleScalarFloor(c10_c_roundFloatVar);
      }

      if (static_cast<real_T>(c10_c_fixedVar) != c10_d13) {
        sf_data_overflow_error(chartInstance->S, 0U, 0, 0);
      }

      c10_i37 = c10_c_fixedVar;
      if (c10_d6 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
            (c10_d6)))) {
        emlrtIntegerCheckR2012b(c10_d6, &c10_gb_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i63 = static_cast<int32_T>(c10_d6);
      if ((c10_i63 < 1) || (c10_i63 > c10_z_lb_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i63, 1, c10_z_lb_size[0],
          &c10_jb_emlrtBCI, (emlrtConstCTX)c10_sp);
      }
    }

    for (c10_i40 = 0; c10_i40 < 21; c10_i40++) {
      c10_tmp_data[c10_i40] = (c10_i35 + c10_i37 * c10_i40) - 1;
    }

    for (c10_i43 = 0; c10_i43 < 21; c10_i43++) {
      c10_z_lb_data[c10_tmp_data[c10_i43]] = 0.0;
    }

    c10_d11 = c10_b_n_x_u * 20.0 + c10_b_n_x;
    c10_b24 = (c10_b_n_x_u == 0.0);
    c10_b25 = (c10_b_n_x_u > 0.0);
    c10_b26 = (c10_d11 < 2.0);
    c10_b27 = (c10_b25 && c10_b26);
    c10_b28 = (c10_b_n_x_u < 0.0);
    c10_b29 = (c10_d11 > 2.0);
    c10_b30 = (c10_b28 && c10_b29);
    c10_b31 = (c10_b27 || c10_b30);
    if (c10_b24 || c10_b31) {
      c10_i56 = 1;
      c10_i57 = 1;
    } else {
      c10_i55 = 2;
      if ((c10_i55 < 1) || (c10_i55 > c10_z_ub_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i55, 1, c10_z_ub_size[0],
          &c10_vf_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_i56 = c10_i55;
      if (c10_b_n_x_u != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_b_n_x_u)))) {
        emlrtIntegerCheckR2012b(c10_b_n_x_u, &c10_uf_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_d15 = trunc(c10_b_n_x_u);
      if (muDoubleScalarIsNaN(c10_d15) || muDoubleScalarIsInf(c10_d15)) {
        c10_d17 = 0.0;
      } else {
        c10_d17 = muDoubleScalarRem(c10_d15, 4.294967296E+9);
      }

      c10_d_roundFloatVar = trunc(c10_b_n_x_u);
      if (c10_d17 < 0.0) {
        c10_d_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d17));
      } else {
        c10_d_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d17));
      }

      if (c10_d_roundFloatVar < 0.0) {
        c10_d19 = muDoubleScalarCeil(c10_d_roundFloatVar);
      } else {
        c10_d19 = muDoubleScalarFloor(c10_d_roundFloatVar);
      }

      if (static_cast<real_T>(c10_d_fixedVar) != c10_d19) {
        sf_data_overflow_error(chartInstance->S, 0U, 0, 0);
      }

      c10_i57 = c10_d_fixedVar;
      if (c10_d11 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d11)))) {
        emlrtIntegerCheckR2012b(c10_d11, &c10_tf_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i76 = static_cast<int32_T>(c10_d11);
      if ((c10_i76 < 1) || (c10_i76 > c10_z_ub_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i76, 1, c10_z_ub_size[0],
          &c10_wf_emlrtBCI, (emlrtConstCTX)c10_sp);
      }
    }

    for (c10_i60 = 0; c10_i60 < 21; c10_i60++) {
      c10_tmp_data[c10_i60] = (c10_i56 + c10_i57 * c10_i60) - 1;
    }

    for (c10_i64 = 0; c10_i64 < 21; c10_i64++) {
      c10_z_ub_data[c10_tmp_data[c10_i64]] = c10_v_max;
    }

    c10_d16 = c10_b_n_x_u * 20.0 + c10_b_n_x;
    c10_b32 = (c10_b_n_x_u == 0.0);
    c10_b33 = (c10_b_n_x_u > 0.0);
    c10_b34 = (c10_d16 < 3.0);
    c10_b35 = (c10_b33 && c10_b34);
    c10_b36 = (c10_b_n_x_u < 0.0);
    c10_b37 = (c10_d16 > 3.0);
    c10_b38 = (c10_b36 && c10_b37);
    c10_b39 = (c10_b35 || c10_b38);
    if (c10_b32 || c10_b39) {
      c10_i71 = 1;
      c10_i72 = 1;
    } else {
      c10_i70 = 3;
      if ((c10_i70 < 1) || (c10_i70 > c10_z_lb_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i70, 1, c10_z_lb_size[0],
          &c10_kb_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_i71 = c10_i70;
      if (c10_b_n_x_u != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_b_n_x_u)))) {
        emlrtIntegerCheckR2012b(c10_b_n_x_u, &c10_jb_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_d20 = trunc(c10_b_n_x_u);
      if (muDoubleScalarIsNaN(c10_d20) || muDoubleScalarIsInf(c10_d20)) {
        c10_d22 = 0.0;
      } else {
        c10_d22 = muDoubleScalarRem(c10_d20, 4.294967296E+9);
      }

      c10_e_roundFloatVar = trunc(c10_b_n_x_u);
      if (c10_d22 < 0.0) {
        c10_e_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d22));
      } else {
        c10_e_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d22));
      }

      if (c10_e_roundFloatVar < 0.0) {
        c10_d23 = muDoubleScalarCeil(c10_e_roundFloatVar);
      } else {
        c10_d23 = muDoubleScalarFloor(c10_e_roundFloatVar);
      }

      if (static_cast<real_T>(c10_e_fixedVar) != c10_d23) {
        sf_data_overflow_error(chartInstance->S, 0U, 0, 0);
      }

      c10_i72 = c10_e_fixedVar;
      if (c10_d16 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d16)))) {
        emlrtIntegerCheckR2012b(c10_d16, &c10_ib_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i83 = static_cast<int32_T>(c10_d16);
      if ((c10_i83 < 1) || (c10_i83 > c10_z_lb_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i83, 1, c10_z_lb_size[0],
          &c10_mb_emlrtBCI, (emlrtConstCTX)c10_sp);
      }
    }

    for (c10_i74 = 0; c10_i74 < 20; c10_i74++) {
      c10_b_tmp_data[c10_i74] = (c10_i71 + c10_i72 * c10_i74) - 1;
    }

    for (c10_i77 = 0; c10_i77 < 20; c10_i77++) {
      c10_z_lb_data[c10_b_tmp_data[c10_i77]] = -8.0;
    }

    c10_d21 = c10_b_n_x_u * 20.0 + c10_b_n_x;
    c10_b40 = (c10_b_n_x_u == 0.0);
    c10_b41 = (c10_b_n_x_u > 0.0);
    c10_b42 = (c10_d21 < 3.0);
    c10_b43 = (c10_b41 && c10_b42);
    c10_b44 = (c10_b_n_x_u < 0.0);
    c10_b45 = (c10_d21 > 3.0);
    c10_b46 = (c10_b44 && c10_b45);
    c10_b47 = (c10_b43 || c10_b46);
    if (c10_b40 || c10_b47) {
      c10_i80 = 1;
      c10_i81 = 1;
    } else {
      c10_i79 = 3;
      if ((c10_i79 < 1) || (c10_i79 > c10_z_ub_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i79, 1, c10_z_ub_size[0],
          &c10_xf_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_i80 = c10_i79;
      if (c10_b_n_x_u != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_b_n_x_u)))) {
        emlrtIntegerCheckR2012b(c10_b_n_x_u, &c10_wf_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_d24 = trunc(c10_b_n_x_u);
      if (muDoubleScalarIsNaN(c10_d24) || muDoubleScalarIsInf(c10_d24)) {
        c10_d26 = 0.0;
      } else {
        c10_d26 = muDoubleScalarRem(c10_d24, 4.294967296E+9);
      }

      c10_f_roundFloatVar = trunc(c10_b_n_x_u);
      if (c10_d26 < 0.0) {
        c10_f_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d26));
      } else {
        c10_f_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d26));
      }

      if (c10_f_roundFloatVar < 0.0) {
        c10_d28 = muDoubleScalarCeil(c10_f_roundFloatVar);
      } else {
        c10_d28 = muDoubleScalarFloor(c10_f_roundFloatVar);
      }

      if (static_cast<real_T>(c10_f_fixedVar) != c10_d28) {
        sf_data_overflow_error(chartInstance->S, 0U, 0, 0);
      }

      c10_i81 = c10_f_fixedVar;
      if (c10_d21 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d21)))) {
        emlrtIntegerCheckR2012b(c10_d21, &c10_vf_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i103 = static_cast<int32_T>(c10_d21);
      if ((c10_i103 < 1) || (c10_i103 > c10_z_ub_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i103, 1, c10_z_ub_size[0],
          &c10_yf_emlrtBCI, (emlrtConstCTX)c10_sp);
      }
    }

    for (c10_i82 = 0; c10_i82 < 20; c10_i82++) {
      c10_b_tmp_data[c10_i82] = (c10_i80 + c10_i81 * c10_i82) - 1;
    }

    for (c10_i84 = 0; c10_i84 < 20; c10_i84++) {
      c10_z_ub_data[c10_b_tmp_data[c10_i84]] = 8.0;
    }

    c10_d25 = c10_b_n_x_u * 20.0 + c10_b_n_x;
    c10_b48 = (c10_b_n_x_u == 0.0);
    c10_b49 = (c10_b_n_x_u > 0.0);
    c10_b50 = (c10_d25 < 4.0);
    c10_b51 = (c10_b49 && c10_b50);
    c10_b52 = (c10_b_n_x_u < 0.0);
    c10_b53 = (c10_d25 > 4.0);
    c10_b54 = (c10_b52 && c10_b53);
    c10_b55 = (c10_b51 || c10_b54);
    if (c10_b48 || c10_b55) {
      c10_i97 = 1;
      c10_i98 = 1;
    } else {
      c10_i96 = 4;
      if ((c10_i96 < 1) || (c10_i96 > c10_z_lb_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i96, 1, c10_z_lb_size[0],
          &c10_ob_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_i97 = c10_i96;
      if (c10_b_n_x_u != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_b_n_x_u)))) {
        emlrtIntegerCheckR2012b(c10_b_n_x_u, &c10_mb_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_d30 = trunc(c10_b_n_x_u);
      if (muDoubleScalarIsNaN(c10_d30) || muDoubleScalarIsInf(c10_d30)) {
        c10_d32 = 0.0;
      } else {
        c10_d32 = muDoubleScalarRem(c10_d30, 4.294967296E+9);
      }

      c10_g_roundFloatVar = trunc(c10_b_n_x_u);
      if (c10_d32 < 0.0) {
        c10_g_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d32));
      } else {
        c10_g_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d32));
      }

      if (c10_g_roundFloatVar < 0.0) {
        c10_d34 = muDoubleScalarCeil(c10_g_roundFloatVar);
      } else {
        c10_d34 = muDoubleScalarFloor(c10_g_roundFloatVar);
      }

      if (static_cast<real_T>(c10_g_fixedVar) != c10_d34) {
        sf_data_overflow_error(chartInstance->S, 0U, 0, 0);
      }

      c10_i98 = c10_g_fixedVar;
      if (c10_d25 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d25)))) {
        emlrtIntegerCheckR2012b(c10_d25, &c10_kb_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i114 = static_cast<int32_T>(c10_d25);
      if ((c10_i114 < 1) || (c10_i114 > c10_z_lb_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i114, 1, c10_z_lb_size[0],
          &c10_pb_emlrtBCI, (emlrtConstCTX)c10_sp);
      }
    }

    for (c10_i100 = 0; c10_i100 < 20; c10_i100++) {
      c10_b_tmp_data[c10_i100] = (c10_i97 + c10_i98 * c10_i100) - 1;
    }

    for (c10_i104 = 0; c10_i104 < 20; c10_i104++) {
      c10_z_lb_data[c10_b_tmp_data[c10_i104]] = -8.0;
    }

    c10_d31 = c10_b_n_x_u * 20.0 + c10_b_n_x;
    c10_b56 = (c10_b_n_x_u == 0.0);
    c10_b57 = (c10_b_n_x_u > 0.0);
    c10_b58 = (c10_d31 < 4.0);
    c10_b59 = (c10_b57 && c10_b58);
    c10_b60 = (c10_b_n_x_u < 0.0);
    c10_b61 = (c10_d31 > 4.0);
    c10_b62 = (c10_b60 && c10_b61);
    c10_b63 = (c10_b59 || c10_b62);
    if (c10_b56 || c10_b63) {
      c10_i110 = 1;
      c10_i111 = 1;
    } else {
      c10_i109 = 4;
      if ((c10_i109 < 1) || (c10_i109 > c10_z_ub_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i109, 1, c10_z_ub_size[0],
          &c10_ag_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_i110 = c10_i109;
      if (c10_b_n_x_u != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_b_n_x_u)))) {
        emlrtIntegerCheckR2012b(c10_b_n_x_u, &c10_yf_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_d37 = trunc(c10_b_n_x_u);
      if (muDoubleScalarIsNaN(c10_d37) || muDoubleScalarIsInf(c10_d37)) {
        c10_d39 = 0.0;
      } else {
        c10_d39 = muDoubleScalarRem(c10_d37, 4.294967296E+9);
      }

      c10_h_roundFloatVar = trunc(c10_b_n_x_u);
      if (c10_d39 < 0.0) {
        c10_h_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d39));
      } else {
        c10_h_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d39));
      }

      if (c10_h_roundFloatVar < 0.0) {
        c10_d41 = muDoubleScalarCeil(c10_h_roundFloatVar);
      } else {
        c10_d41 = muDoubleScalarFloor(c10_h_roundFloatVar);
      }

      if (static_cast<real_T>(c10_h_fixedVar) != c10_d41) {
        sf_data_overflow_error(chartInstance->S, 0U, 0, 0);
      }

      c10_i111 = c10_h_fixedVar;
      if (c10_d31 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d31)))) {
        emlrtIntegerCheckR2012b(c10_d31, &c10_xf_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i123 = static_cast<int32_T>(c10_d31);
      if ((c10_i123 < 1) || (c10_i123 > c10_z_ub_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i123, 1, c10_z_ub_size[0],
          &c10_bg_emlrtBCI, (emlrtConstCTX)c10_sp);
      }
    }

    for (c10_i113 = 0; c10_i113 < 20; c10_i113++) {
      c10_b_tmp_data[c10_i113] = (c10_i110 + c10_i111 * c10_i113) - 1;
    }

    for (c10_i115 = 0; c10_i115 < 20; c10_i115++) {
      c10_z_ub_data[c10_b_tmp_data[c10_i115]] = 8.0;
    }

    c10_d38 = c10_b_n_x_u * 20.0 + c10_b_n_x;
    c10_b64 = (c10_b_n_x_u == 0.0);
    c10_b65 = (c10_b_n_x_u > 0.0);
    c10_b66 = (c10_d38 < 5.0);
    c10_b67 = (c10_b65 && c10_b66);
    c10_b68 = (c10_b_n_x_u < 0.0);
    c10_b69 = (c10_d38 > 5.0);
    c10_b70 = (c10_b68 && c10_b69);
    c10_b71 = (c10_b67 || c10_b70);
    if (c10_b64 || c10_b71) {
      c10_i119 = 1;
      c10_i120 = 1;
    } else {
      c10_i118 = 5;
      if ((c10_i118 < 1) || (c10_i118 > c10_z_lb_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i118, 1, c10_z_lb_size[0],
          &c10_qb_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_i119 = c10_i118;
      if (c10_b_n_x_u != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_b_n_x_u)))) {
        emlrtIntegerCheckR2012b(c10_b_n_x_u, &c10_pb_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_d43 = trunc(c10_b_n_x_u);
      if (muDoubleScalarIsNaN(c10_d43) || muDoubleScalarIsInf(c10_d43)) {
        c10_d46 = 0.0;
      } else {
        c10_d46 = muDoubleScalarRem(c10_d43, 4.294967296E+9);
      }

      c10_i_roundFloatVar = trunc(c10_b_n_x_u);
      if (c10_d46 < 0.0) {
        c10_i_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d46));
      } else {
        c10_i_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d46));
      }

      if (c10_i_roundFloatVar < 0.0) {
        c10_d48 = muDoubleScalarCeil(c10_i_roundFloatVar);
      } else {
        c10_d48 = muDoubleScalarFloor(c10_i_roundFloatVar);
      }

      if (static_cast<real_T>(c10_i_fixedVar) != c10_d48) {
        sf_data_overflow_error(chartInstance->S, 0U, 0, 0);
      }

      c10_i120 = c10_i_fixedVar;
      if (c10_d38 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d38)))) {
        emlrtIntegerCheckR2012b(c10_d38, &c10_ob_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i131 = static_cast<int32_T>(c10_d38);
      if ((c10_i131 < 1) || (c10_i131 > c10_z_lb_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i131, 1, c10_z_lb_size[0],
          &c10_rb_emlrtBCI, (emlrtConstCTX)c10_sp);
      }
    }

    for (c10_i121 = 0; c10_i121 < 20; c10_i121++) {
      c10_b_tmp_data[c10_i121] = (c10_i119 + c10_i120 * c10_i121) - 1;
    }

    for (c10_i124 = 0; c10_i124 < 20; c10_i124++) {
      c10_z_lb_data[c10_b_tmp_data[c10_i124]] = 0.0;
    }

    c10_d45 = c10_b_n_x_u * 20.0 + c10_b_n_x;
    c10_b72 = (c10_b_n_x_u == 0.0);
    c10_b73 = (c10_b_n_x_u > 0.0);
    c10_b74 = (c10_d45 < 5.0);
    c10_b75 = (c10_b73 && c10_b74);
    c10_b76 = (c10_b_n_x_u < 0.0);
    c10_b77 = (c10_d45 > 5.0);
    c10_b78 = (c10_b76 && c10_b77);
    c10_b79 = (c10_b75 || c10_b78);
    if (c10_b72 || c10_b79) {
      c10_i128 = 1;
      c10_i129 = 1;
    } else {
      c10_i127 = 5;
      if ((c10_i127 < 1) || (c10_i127 > c10_z_ub_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i127, 1, c10_z_ub_size[0],
          &c10_cg_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_i128 = c10_i127;
      if (c10_b_n_x_u != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_b_n_x_u)))) {
        emlrtIntegerCheckR2012b(c10_b_n_x_u, &c10_bg_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_d50 = trunc(c10_b_n_x_u);
      if (muDoubleScalarIsNaN(c10_d50) || muDoubleScalarIsInf(c10_d50)) {
        c10_d52 = 0.0;
      } else {
        c10_d52 = muDoubleScalarRem(c10_d50, 4.294967296E+9);
      }

      c10_j_roundFloatVar = trunc(c10_b_n_x_u);
      if (c10_d52 < 0.0) {
        c10_j_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d52));
      } else {
        c10_j_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d52));
      }

      if (c10_j_roundFloatVar < 0.0) {
        c10_d54 = muDoubleScalarCeil(c10_j_roundFloatVar);
      } else {
        c10_d54 = muDoubleScalarFloor(c10_j_roundFloatVar);
      }

      if (static_cast<real_T>(c10_j_fixedVar) != c10_d54) {
        sf_data_overflow_error(chartInstance->S, 0U, 0, 0);
      }

      c10_i129 = c10_j_fixedVar;
      if (c10_d45 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d45)))) {
        emlrtIntegerCheckR2012b(c10_d45, &c10_ag_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i140 = static_cast<int32_T>(c10_d45);
      if ((c10_i140 < 1) || (c10_i140 > c10_z_ub_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i140, 1, c10_z_ub_size[0],
          &c10_dg_emlrtBCI, (emlrtConstCTX)c10_sp);
      }
    }

    for (c10_i130 = 0; c10_i130 < 20; c10_i130++) {
      c10_b_tmp_data[c10_i130] = (c10_i128 + c10_i129 * c10_i130) - 1;
    }

    for (c10_i132 = 0; c10_i132 < 20; c10_i132++) {
      c10_z_ub_data[c10_b_tmp_data[c10_i132]] = rtInf;
    }

    c10_d51 = c10_b_n_x_u * 20.0 + c10_b_n_x;
    c10_b80 = (c10_b_n_x_u == 0.0);
    c10_b81 = (c10_b_n_x_u > 0.0);
    c10_b82 = (c10_d51 < 6.0);
    c10_b83 = (c10_b81 && c10_b82);
    c10_b84 = (c10_b_n_x_u < 0.0);
    c10_b85 = (c10_d51 > 6.0);
    c10_b86 = (c10_b84 && c10_b85);
    c10_b87 = (c10_b83 || c10_b86);
    if (c10_b80 || c10_b87) {
      c10_i136 = 1;
      c10_i137 = 1;
    } else {
      c10_i135 = 6;
      if ((c10_i135 < 1) || (c10_i135 > c10_z_lb_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i135, 1, c10_z_lb_size[0],
          &c10_sb_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_i136 = c10_i135;
      if (c10_b_n_x_u != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_b_n_x_u)))) {
        emlrtIntegerCheckR2012b(c10_b_n_x_u, &c10_rb_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_d56 = trunc(c10_b_n_x_u);
      if (muDoubleScalarIsNaN(c10_d56) || muDoubleScalarIsInf(c10_d56)) {
        c10_d58 = 0.0;
      } else {
        c10_d58 = muDoubleScalarRem(c10_d56, 4.294967296E+9);
      }

      c10_k_roundFloatVar = trunc(c10_b_n_x_u);
      if (c10_d58 < 0.0) {
        c10_k_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d58));
      } else {
        c10_k_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d58));
      }

      if (c10_k_roundFloatVar < 0.0) {
        c10_d60 = muDoubleScalarCeil(c10_k_roundFloatVar);
      } else {
        c10_d60 = muDoubleScalarFloor(c10_k_roundFloatVar);
      }

      if (static_cast<real_T>(c10_k_fixedVar) != c10_d60) {
        sf_data_overflow_error(chartInstance->S, 0U, 0, 0);
      }

      c10_i137 = c10_k_fixedVar;
      if (c10_d51 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d51)))) {
        emlrtIntegerCheckR2012b(c10_d51, &c10_qb_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i148 = static_cast<int32_T>(c10_d51);
      if ((c10_i148 < 1) || (c10_i148 > c10_z_lb_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i148, 1, c10_z_lb_size[0],
          &c10_tb_emlrtBCI, (emlrtConstCTX)c10_sp);
      }
    }

    for (c10_i139 = 0; c10_i139 < 20; c10_i139++) {
      c10_b_tmp_data[c10_i139] = (c10_i136 + c10_i137 * c10_i139) - 1;
    }

    for (c10_i141 = 0; c10_i141 < 20; c10_i141++) {
      c10_z_lb_data[c10_b_tmp_data[c10_i141]] = 0.0;
    }

    c10_d57 = c10_b_n_x_u * 20.0 + c10_b_n_x;
    c10_b88 = (c10_b_n_x_u == 0.0);
    c10_b89 = (c10_b_n_x_u > 0.0);
    c10_b90 = (c10_d57 < 6.0);
    c10_b91 = (c10_b89 && c10_b90);
    c10_b92 = (c10_b_n_x_u < 0.0);
    c10_b93 = (c10_d57 > 6.0);
    c10_b94 = (c10_b92 && c10_b93);
    c10_b95 = (c10_b91 || c10_b94);
    if (c10_b88 || c10_b95) {
      c10_i145 = 1;
      c10_i146 = 1;
    } else {
      c10_i144 = 6;
      if ((c10_i144 < 1) || (c10_i144 > c10_z_ub_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i144, 1, c10_z_ub_size[0],
          &c10_eg_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_i145 = c10_i144;
      if (c10_b_n_x_u != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_b_n_x_u)))) {
        emlrtIntegerCheckR2012b(c10_b_n_x_u, &c10_dg_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_d61 = trunc(c10_b_n_x_u);
      if (muDoubleScalarIsNaN(c10_d61) || muDoubleScalarIsInf(c10_d61)) {
        c10_d63 = 0.0;
      } else {
        c10_d63 = muDoubleScalarRem(c10_d61, 4.294967296E+9);
      }

      c10_m_roundFloatVar = trunc(c10_b_n_x_u);
      if (c10_d63 < 0.0) {
        c10_m_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d63));
      } else {
        c10_m_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d63));
      }

      if (c10_m_roundFloatVar < 0.0) {
        c10_d64 = muDoubleScalarCeil(c10_m_roundFloatVar);
      } else {
        c10_d64 = muDoubleScalarFloor(c10_m_roundFloatVar);
      }

      if (static_cast<real_T>(c10_m_fixedVar) != c10_d64) {
        sf_data_overflow_error(chartInstance->S, 0U, 0, 0);
      }

      c10_i146 = c10_m_fixedVar;
      if (c10_d57 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d57)))) {
        emlrtIntegerCheckR2012b(c10_d57, &c10_cg_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i163 = static_cast<int32_T>(c10_d57);
      if ((c10_i163 < 1) || (c10_i163 > c10_z_ub_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i163, 1, c10_z_ub_size[0],
          &c10_fg_emlrtBCI, (emlrtConstCTX)c10_sp);
      }
    }

    for (c10_i147 = 0; c10_i147 < 20; c10_i147++) {
      c10_b_tmp_data[c10_i147] = (c10_i145 + c10_i146 * c10_i147) - 1;
    }

    for (c10_i149 = 0; c10_i149 < 20; c10_i149++) {
      c10_z_ub_data[c10_b_tmp_data[c10_i149]] = rtInf;
    }

    c10_d62 = c10_b_n_x_u * 20.0 + c10_b_n_x;
    c10_b96 = (c10_b_n_x_u == 0.0);
    c10_b97 = (c10_b_n_x_u > 0.0);
    c10_b98 = (c10_d62 < 7.0);
    c10_b99 = (c10_b97 && c10_b98);
    c10_b100 = (c10_b_n_x_u < 0.0);
    c10_b101 = (c10_d62 > 7.0);
    c10_b102 = (c10_b100 && c10_b101);
    c10_b103 = (c10_b99 || c10_b102);
    if (c10_b96 || c10_b103) {
      c10_i157 = 1;
      c10_i158 = 1;
    } else {
      c10_i156 = 7;
      if ((c10_i156 < 1) || (c10_i156 > c10_z_lb_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i156, 1, c10_z_lb_size[0],
          &c10_ub_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_i157 = c10_i156;
      if (c10_b_n_x_u != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_b_n_x_u)))) {
        emlrtIntegerCheckR2012b(c10_b_n_x_u, &c10_tb_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_d66 = trunc(c10_b_n_x_u);
      if (muDoubleScalarIsNaN(c10_d66) || muDoubleScalarIsInf(c10_d66)) {
        c10_d68 = 0.0;
      } else {
        c10_d68 = muDoubleScalarRem(c10_d66, 4.294967296E+9);
      }

      c10_o_roundFloatVar = trunc(c10_b_n_x_u);
      if (c10_d68 < 0.0) {
        c10_o_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d68));
      } else {
        c10_o_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d68));
      }

      if (c10_o_roundFloatVar < 0.0) {
        c10_d69 = muDoubleScalarCeil(c10_o_roundFloatVar);
      } else {
        c10_d69 = muDoubleScalarFloor(c10_o_roundFloatVar);
      }

      if (static_cast<real_T>(c10_o_fixedVar) != c10_d69) {
        sf_data_overflow_error(chartInstance->S, 0U, 0, 0);
      }

      c10_i158 = c10_o_fixedVar;
      if (c10_d62 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d62)))) {
        emlrtIntegerCheckR2012b(c10_d62, &c10_sb_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i178 = static_cast<int32_T>(c10_d62);
      if ((c10_i178 < 1) || (c10_i178 > c10_z_lb_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i178, 1, c10_z_lb_size[0],
          &c10_vb_emlrtBCI, (emlrtConstCTX)c10_sp);
      }
    }

    for (c10_i160 = 0; c10_i160 < 20; c10_i160++) {
      c10_b_tmp_data[c10_i160] = (c10_i157 + c10_i158 * c10_i160) - 1;
    }

    for (c10_i164 = 0; c10_i164 < 20; c10_i164++) {
      c10_z_lb_data[c10_b_tmp_data[c10_i164]] = 0.0;
    }

    c10_d67 = c10_b_n_x_u * 20.0 + c10_b_n_x;
    c10_b104 = (c10_b_n_x_u == 0.0);
    c10_b105 = (c10_b_n_x_u > 0.0);
    c10_b106 = (c10_d67 < 7.0);
    c10_b107 = (c10_b105 && c10_b106);
    c10_b108 = (c10_b_n_x_u < 0.0);
    c10_b109 = (c10_d67 > 7.0);
    c10_b110 = (c10_b108 && c10_b109);
    c10_b111 = (c10_b107 || c10_b110);
    if (c10_b104 || c10_b111) {
      c10_i172 = 1;
      c10_i173 = 1;
    } else {
      c10_i171 = 7;
      if ((c10_i171 < 1) || (c10_i171 > c10_z_ub_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i171, 1, c10_z_ub_size[0],
          &c10_gg_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_i172 = c10_i171;
      if (c10_b_n_x_u != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_b_n_x_u)))) {
        emlrtIntegerCheckR2012b(c10_b_n_x_u, &c10_fg_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_d70 = trunc(c10_b_n_x_u);
      if (muDoubleScalarIsNaN(c10_d70) || muDoubleScalarIsInf(c10_d70)) {
        c10_d72 = 0.0;
      } else {
        c10_d72 = muDoubleScalarRem(c10_d70, 4.294967296E+9);
      }

      c10_p_roundFloatVar = trunc(c10_b_n_x_u);
      if (c10_d72 < 0.0) {
        c10_p_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d72));
      } else {
        c10_p_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d72));
      }

      if (c10_p_roundFloatVar < 0.0) {
        c10_d74 = muDoubleScalarCeil(c10_p_roundFloatVar);
      } else {
        c10_d74 = muDoubleScalarFloor(c10_p_roundFloatVar);
      }

      if (static_cast<real_T>(c10_p_fixedVar) != c10_d74) {
        sf_data_overflow_error(chartInstance->S, 0U, 0, 0);
      }

      c10_i173 = c10_p_fixedVar;
      if (c10_d67 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d67)))) {
        emlrtIntegerCheckR2012b(c10_d67, &c10_eg_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i191 = static_cast<int32_T>(c10_d67);
      if ((c10_i191 < 1) || (c10_i191 > c10_z_ub_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i191, 1, c10_z_ub_size[0],
          &c10_hg_emlrtBCI, (emlrtConstCTX)c10_sp);
      }
    }

    for (c10_i175 = 0; c10_i175 < 20; c10_i175++) {
      c10_b_tmp_data[c10_i175] = (c10_i172 + c10_i173 * c10_i175) - 1;
    }

    for (c10_i179 = 0; c10_i179 < 20; c10_i179++) {
      c10_z_ub_data[c10_b_tmp_data[c10_i179]] = rtInf;
    }

    c10_d71 = c10_b_n_x_u * 20.0 + c10_b_n_x;
    c10_b112 = (c10_b_n_x_u == 0.0);
    c10_b113 = (c10_b_n_x_u > 0.0);
    c10_b114 = (c10_d71 < 8.0);
    c10_b115 = (c10_b113 && c10_b114);
    c10_b116 = (c10_b_n_x_u < 0.0);
    c10_b117 = (c10_d71 > 8.0);
    c10_b118 = (c10_b116 && c10_b117);
    c10_b119 = (c10_b115 || c10_b118);
    if (c10_b112 || c10_b119) {
      c10_i187 = 1;
      c10_i188 = 1;
    } else {
      c10_i186 = 8;
      if ((c10_i186 < 1) || (c10_i186 > c10_z_lb_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i186, 1, c10_z_lb_size[0],
          &c10_wb_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_i187 = c10_i186;
      if (c10_b_n_x_u != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_b_n_x_u)))) {
        emlrtIntegerCheckR2012b(c10_b_n_x_u, &c10_vb_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_d75 = trunc(c10_b_n_x_u);
      if (muDoubleScalarIsNaN(c10_d75) || muDoubleScalarIsInf(c10_d75)) {
        c10_d77 = 0.0;
      } else {
        c10_d77 = muDoubleScalarRem(c10_d75, 4.294967296E+9);
      }

      c10_q_roundFloatVar = trunc(c10_b_n_x_u);
      if (c10_d77 < 0.0) {
        c10_q_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d77));
      } else {
        c10_q_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d77));
      }

      if (c10_q_roundFloatVar < 0.0) {
        c10_d78 = muDoubleScalarCeil(c10_q_roundFloatVar);
      } else {
        c10_d78 = muDoubleScalarFloor(c10_q_roundFloatVar);
      }

      if (static_cast<real_T>(c10_q_fixedVar) != c10_d78) {
        sf_data_overflow_error(chartInstance->S, 0U, 0, 0);
      }

      c10_i188 = c10_q_fixedVar;
      if (c10_d71 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d71)))) {
        emlrtIntegerCheckR2012b(c10_d71, &c10_ub_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i205 = static_cast<int32_T>(c10_d71);
      if ((c10_i205 < 1) || (c10_i205 > c10_z_lb_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i205, 1, c10_z_lb_size[0],
          &c10_xb_emlrtBCI, (emlrtConstCTX)c10_sp);
      }
    }

    for (c10_i189 = 0; c10_i189 < 20; c10_i189++) {
      c10_b_tmp_data[c10_i189] = (c10_i187 + c10_i188 * c10_i189) - 1;
    }

    for (c10_i192 = 0; c10_i192 < 20; c10_i192++) {
      c10_z_lb_data[c10_b_tmp_data[c10_i192]] = 0.0;
    }

    c10_d76 = c10_b_n_x_u * 20.0 + c10_b_n_x;
    c10_b120 = (c10_b_n_x_u == 0.0);
    c10_b121 = (c10_b_n_x_u > 0.0);
    c10_b122 = (c10_d76 < 8.0);
    c10_b123 = (c10_b121 && c10_b122);
    c10_b124 = (c10_b_n_x_u < 0.0);
    c10_b125 = (c10_d76 > 8.0);
    c10_b126 = (c10_b124 && c10_b125);
    c10_b127 = (c10_b123 || c10_b126);
    if (c10_b120 || c10_b127) {
      c10_i199 = 1;
      c10_i201 = 1;
    } else {
      c10_i198 = 8;
      if ((c10_i198 < 1) || (c10_i198 > c10_z_ub_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i198, 1, c10_z_ub_size[0],
          &c10_ig_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_i199 = c10_i198;
      if (c10_b_n_x_u != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_b_n_x_u)))) {
        emlrtIntegerCheckR2012b(c10_b_n_x_u, &c10_hg_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_d80 = trunc(c10_b_n_x_u);
      if (muDoubleScalarIsNaN(c10_d80) || muDoubleScalarIsInf(c10_d80)) {
        c10_d81 = 0.0;
      } else {
        c10_d81 = muDoubleScalarRem(c10_d80, 4.294967296E+9);
      }

      c10_r_roundFloatVar = trunc(c10_b_n_x_u);
      if (c10_d81 < 0.0) {
        c10_r_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d81));
      } else {
        c10_r_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d81));
      }

      if (c10_r_roundFloatVar < 0.0) {
        c10_d82 = muDoubleScalarCeil(c10_r_roundFloatVar);
      } else {
        c10_d82 = muDoubleScalarFloor(c10_r_roundFloatVar);
      }

      if (static_cast<real_T>(c10_r_fixedVar) != c10_d82) {
        sf_data_overflow_error(chartInstance->S, 0U, 0, 0);
      }

      c10_i201 = c10_r_fixedVar;
      if (c10_d76 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d76)))) {
        emlrtIntegerCheckR2012b(c10_d76, &c10_gg_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i216 = static_cast<int32_T>(c10_d76);
      if ((c10_i216 < 1) || (c10_i216 > c10_z_ub_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i216, 1, c10_z_ub_size[0],
          &c10_jg_emlrtBCI, (emlrtConstCTX)c10_sp);
      }
    }

    for (c10_i204 = 0; c10_i204 < 20; c10_i204++) {
      c10_b_tmp_data[c10_i204] = (c10_i199 + c10_i201 * c10_i204) - 1;
    }

    for (c10_i206 = 0; c10_i206 < 20; c10_i206++) {
      c10_z_ub_data[c10_b_tmp_data[c10_i206]] = rtInf;
    }
  } else if (covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 1,
              covrtRelationalopUpdateFcn(chartInstance->c10_covrtInstance, 14U,
               0U, 1U, c10_solverToUse, 1.0, -1, 0U, static_cast<int32_T>
               (c10_solverToUse == 1.0)))) {
    c10_b.set_size(&c10_fc_emlrtRTEI, c10_sp, 100);
    for (c10_i13 = 0; c10_i13 < 100; c10_i13++) {
      c10_b[c10_i13] = 1.0;
    }

    c10_c_loop_ub = c10_b.size(0) - 1;
    for (c10_i15 = 0; c10_i15 <= c10_c_loop_ub; c10_i15++) {
      c10_b[c10_i15] = rtMinusInf * c10_b[c10_i15];
    }

    c10_z_lb_size[0] = c10_b.size(0);
    c10_e_loop_ub = c10_b.size(0) - 1;
    for (c10_i17 = 0; c10_i17 <= c10_e_loop_ub; c10_i17++) {
      c10_z_lb_data[c10_i17] = c10_b[c10_i17];
    }

    c10_z_ub_size[0] = c10_z_lb_size[0];
    c10_g_loop_ub = c10_z_lb_size[0] - 1;
    for (c10_i22 = 0; c10_i22 <= c10_g_loop_ub; c10_i22++) {
      c10_z_ub_data[c10_i22] = -c10_z_lb_data[c10_i22];
    }
  } else {
    c10_b.set_size(&c10_cc_emlrtRTEI, c10_sp, 142);
    for (c10_i12 = 0; c10_i12 < 142; c10_i12++) {
      c10_b[c10_i12] = 1.0;
    }

    c10_b_loop_ub = c10_b.size(0) - 1;
    for (c10_i14 = 0; c10_i14 <= c10_b_loop_ub; c10_i14++) {
      c10_b[c10_i14] = rtMinusInf * c10_b[c10_i14];
    }

    c10_z_lb_size[0] = c10_b.size(0);
    c10_d_loop_ub = c10_b.size(0) - 1;
    for (c10_i16 = 0; c10_i16 <= c10_d_loop_ub; c10_i16++) {
      c10_z_lb_data[c10_i16] = c10_b[c10_i16];
    }

    c10_z_ub_size[0] = c10_z_lb_size[0];
    c10_f_loop_ub = c10_z_lb_size[0] - 1;
    for (c10_i21 = 0; c10_i21 <= c10_f_loop_ub; c10_i21++) {
      c10_z_ub_data[c10_i21] = -c10_z_lb_data[c10_i21];
    }
  }

  if (covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 2,
                     covrtRelationalopUpdateFcn(chartInstance->c10_covrtInstance,
        14U, 0U, 2U, c10_solverToUse, 2.0, -1, 0U, static_cast<int32_T>
        (c10_solverToUse == 2.0)))) {
    c10_scurr = 1.0;
    c10_vcurr = 2.0;
    c10_aprev = 3.0;
    c10_acurr = 4.0;
    c10_xi_v = 5.0;
    c10_xi_h = 6.0;
    c10_xi_s = 7.0;
    c10_xi_f = 8.0;
  } else {
    c10_scurr = 1.0;
    c10_vcurr = 2.0;
    c10_aprev = 3.0 - c10_b_n_x_u;
    c10_acurr = 3.0;
    c10_xi_v = 4.0;
    c10_xi_h = 5.0;
    c10_xi_s = 6.0;
    c10_xi_f = 7.0;
  }

  c10_cstrInd = 1.0;
  for (c10_kk = 0; c10_kk < 20; c10_kk++) {
    c10_b_kk = static_cast<real_T>(c10_kk);
    covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 0, 0, 1);
    c10_k = c10_b_kk + 1.0;
    if (c10_k != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_k)))) {
      emlrtIntegerCheckR2012b(c10_k, &c10_ig_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i32 = static_cast<int32_T>(c10_k);
    if ((c10_i32 < 1) || (c10_i32 > 20)) {
      emlrtDynamicBoundsCheckR2012b(c10_i32, 1, 20, &c10_kg_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_T = c10_b_Tvec.contents[c10_i32 - 1];
    c10_o = c10_b_kk * c10_b_n_x_u;
    c10_c_ii[0] = c10_o + c10_vcurr;
    c10_c_ii[1] = c10_o + c10_acurr;
    c10_b_a = c10_w_FC;
    c10_f_b[0] = 2.0 * c10_b_V.contents.p01 * c10_b_V.contents.F2;
    c10_f_b[2] = 0.0;
    c10_i36 = 0;
    for (c10_i39 = 0; c10_i39 < 2; c10_i39++) {
      c10_f_b[c10_i36 + 1] = 0.0;
      c10_i36 += 2;
    }

    for (c10_i41 = 0; c10_i41 < 4; c10_i41++) {
      c10_f_b[c10_i41] *= c10_b_a;
    }

    for (c10_i44 = 0; c10_i44 < 2; c10_i44++) {
      for (c10_i47 = 0; c10_i47 < 2; c10_i47++) {
        if (c10_c_ii[c10_i47] != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_c_ii[c10_i47])))) {
          emlrtIntegerCheckR2012b(c10_c_ii[c10_i47], &c10_og_emlrtDCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_i49 = static_cast<int32_T>(c10_c_ii[c10_i47]);
        if ((c10_i49 < 1) || (c10_i49 > 142)) {
          emlrtDynamicBoundsCheckR2012b(c10_i49, 1, 142, &c10_qg_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        if (c10_c_ii[c10_i44] != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_c_ii[c10_i44])))) {
          emlrtIntegerCheckR2012b(c10_c_ii[c10_i44], &c10_pg_emlrtDCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_i54 = static_cast<int32_T>(c10_c_ii[c10_i44]);
        if ((c10_i54 < 1) || (c10_i54 > 142)) {
          emlrtDynamicBoundsCheckR2012b(c10_i54, 1, 142, &c10_rg_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_d_H[c10_i47 + (c10_i44 << 1)] = c10_c_H[(c10_i49 + 142 * (c10_i54 -
          1)) - 1] + c10_f_b[c10_i47 + (c10_i44 << 1)];
      }
    }

    for (c10_i46 = 0; c10_i46 < 2; c10_i46++) {
      for (c10_i48 = 0; c10_i48 < 2; c10_i48++) {
        if (c10_c_ii[c10_i48] != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_c_ii[c10_i48])))) {
          emlrtIntegerCheckR2012b(c10_c_ii[c10_i48], &c10_qg_emlrtDCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_i50 = static_cast<int32_T>(c10_c_ii[c10_i48]);
        if ((c10_i50 < 1) || (c10_i50 > 142)) {
          emlrtDynamicBoundsCheckR2012b(c10_i50, 1, 142, &c10_sg_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        if (c10_c_ii[c10_i46] != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_c_ii[c10_i46])))) {
          emlrtIntegerCheckR2012b(c10_c_ii[c10_i46], &c10_qg_emlrtDCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_i59 = static_cast<int32_T>(c10_c_ii[c10_i46]);
        if ((c10_i59 < 1) || (c10_i59 > 142)) {
          emlrtDynamicBoundsCheckR2012b(c10_i59, 1, 142, &c10_sg_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_c_H[(c10_i50 + 142 * (c10_i59 - 1)) - 1] = c10_d_H[c10_i48 +
          (c10_i46 << 1)];
      }
    }

    c10_st.site = &c10_d_emlrtRSI;
    c10_indexShapeCheck(chartInstance);
    c10_c_a = c10_w_FC;
    c10_g_b[0] = c10_b_V.contents.p10;
    c10_g_b[1] = c10_b_V.contents.p01 * c10_b_V.contents.lambda *
      c10_b_V.contents.m;
    for (c10_i52 = 0; c10_i52 < 2; c10_i52++) {
      c10_g_b[c10_i52] *= c10_c_a;
    }

    for (c10_i53 = 0; c10_i53 < 2; c10_i53++) {
      if (c10_c_ii[c10_i53] != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_c_ii[c10_i53])))) {
        emlrtIntegerCheckR2012b(c10_c_ii[c10_i53], &c10_rg_emlrtDCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i61 = static_cast<int32_T>(c10_c_ii[c10_i53]);
      if ((c10_i61 < 1) || (c10_i61 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i61, 1, 142, &c10_tg_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_c[c10_i53] = c10_c_data[c10_i61 - 1] + c10_g_b[c10_i53];
    }

    for (c10_i58 = 0; c10_i58 < 2; c10_i58++) {
      if (c10_c_ii[c10_i58] != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_c_ii[c10_i58])))) {
        emlrtIntegerCheckR2012b(c10_c_ii[c10_i58], &c10_sg_emlrtDCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i65 = static_cast<int32_T>(c10_c_ii[c10_i58]);
      if ((c10_i65 < 1) || (c10_i65 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i65, 1, 142, &c10_ug_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_c_data[c10_i65 - 1] = c10_b_c[c10_i58];
    }

    c10_e_ii = c10_o + c10_acurr;
    if (c10_e_ii != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_e_ii)))) {
      emlrtIntegerCheckR2012b(c10_e_ii, &c10_tg_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i66 = static_cast<int32_T>(c10_e_ii);
    if ((c10_i66 < 1) || (c10_i66 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i66, 1, 142, &c10_vg_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    if (c10_e_ii != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_e_ii)))) {
      emlrtIntegerCheckR2012b(c10_e_ii, &c10_ug_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i68 = static_cast<int32_T>(c10_e_ii);
    if ((c10_i68 < 1) || (c10_i68 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i68, 1, 142, &c10_wg_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    if (c10_e_ii != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_e_ii)))) {
      emlrtIntegerCheckR2012b(c10_e_ii, &c10_vg_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i69 = static_cast<int32_T>(c10_e_ii);
    if ((c10_i69 < 1) || (c10_i69 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i69, 1, 142, &c10_xg_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    if (c10_e_ii != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_e_ii)))) {
      emlrtIntegerCheckR2012b(c10_e_ii, &c10_wg_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i75 = static_cast<int32_T>(c10_e_ii);
    if ((c10_i75 < 1) || (c10_i75 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i75, 1, 142, &c10_yg_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_c_H[(c10_i69 + 142 * (c10_i75 - 1)) - 1] = c10_c_H[(c10_i66 + 142 *
      (c10_i68 - 1)) - 1] + 2.0 * c10_w_a;
    if (covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 3,
                       covrtRelationalopUpdateFcn
                       (chartInstance->c10_covrtInstance, 14U, 0U, 3U, c10_b_kk,
                        0.0, -1, 0U, static_cast<int32_T>(c10_b_kk == 0.0)))) {
      c10_st.site = &c10_f_emlrtRSI;
      c10_d_a = c10_T;
      c10_b_st.site = &c10_k_emlrtRSI;
      c10_f_a = c10_d_a;
      c10_c_st.site = &c10_m_emlrtRSI;
      c10_h_a = c10_f_a;
      if (c10_fltpower_domain_error(chartInstance)) {
        sf_mex_call(&c10_c_st, &c10_emlrtMCI, "error", 0U, 2U, 14,
                    c10_emlrt_marshallOut(chartInstance, c10_cv), 14,
                    sf_mex_call(&c10_c_st, NULL, "getString", 1U, 1U, 14,
          sf_mex_call(&c10_c_st, NULL, "message", 1U, 1U, 14,
                      c10_emlrt_marshallOut(chartInstance, c10_cv))));
      }

      c10_j_a = c10_h_a;
      c10_k_a = c10_j_a;
      c10_c_c = c10_k_a * c10_k_a;
      if (c10_e_ii != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_e_ii)))) {
        emlrtIntegerCheckR2012b(c10_e_ii, &c10_xg_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i85 = static_cast<int32_T>(c10_e_ii);
      if ((c10_i85 < 1) || (c10_i85 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i85, 1, 142, &c10_ah_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      if (c10_e_ii != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_e_ii)))) {
        emlrtIntegerCheckR2012b(c10_e_ii, &c10_yg_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i90 = static_cast<int32_T>(c10_e_ii);
      if ((c10_i90 < 1) || (c10_i90 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i90, 1, 142, &c10_bh_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      if (c10_e_ii != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_e_ii)))) {
        emlrtIntegerCheckR2012b(c10_e_ii, &c10_ah_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i93 = static_cast<int32_T>(c10_e_ii);
      if ((c10_i93 < 1) || (c10_i93 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i93, 1, 142, &c10_ch_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      if (c10_e_ii != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_e_ii)))) {
        emlrtIntegerCheckR2012b(c10_e_ii, &c10_bh_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i101 = static_cast<int32_T>(c10_e_ii);
      if ((c10_i101 < 1) || (c10_i101 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i101, 1, 142, &c10_dh_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_c_H[(c10_i93 + 142 * (c10_i101 - 1)) - 1] = c10_c_H[(c10_i85 + 142 *
        (c10_i90 - 1)) - 1] + 2.0 * c10_w_j / c10_c_c;
      if (c10_e_ii != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_e_ii)))) {
        emlrtIntegerCheckR2012b(c10_e_ii, &c10_ch_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i106 = static_cast<int32_T>(c10_e_ii);
      if ((c10_i106 < 1) || (c10_i106 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i106, 1, 142, &c10_eh_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      if (c10_e_ii != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_e_ii)))) {
        emlrtIntegerCheckR2012b(c10_e_ii, &c10_dh_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i108 = static_cast<int32_T>(c10_e_ii);
      if ((c10_i108 < 1) || (c10_i108 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i108, 1, 142, &c10_fh_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_c_data[c10_i108 - 1] = c10_c_data[c10_i106 - 1] - 2.0 * c10_w_j /
        c10_T * c10_b_a_minus1;
    } else {
      c10_c_ii[0] = c10_o + c10_acurr;
      c10_c_ii[1] = c10_o + c10_aprev;
      c10_st.site = &c10_e_emlrtRSI;
      c10_e_a = c10_T;
      c10_b_st.site = &c10_k_emlrtRSI;
      c10_g_a = c10_e_a;
      c10_c_st.site = &c10_m_emlrtRSI;
      c10_i_a = c10_g_a;
      if (c10_fltpower_domain_error(chartInstance)) {
        sf_mex_call(&c10_c_st, &c10_emlrtMCI, "error", 0U, 2U, 14,
                    c10_emlrt_marshallOut(chartInstance, c10_cv), 14,
                    sf_mex_call(&c10_c_st, NULL, "getString", 1U, 1U, 14,
          sf_mex_call(&c10_c_st, NULL, "message", 1U, 1U, 14,
                      c10_emlrt_marshallOut(chartInstance, c10_cv))));
      }

      c10_m_a = c10_i_a;
      c10_o_a = c10_m_a;
      c10_d_c = c10_o_a * c10_o_a;
      c10_p_a = 2.0 * c10_w_j / c10_d_c;
      for (c10_i86 = 0; c10_i86 < 4; c10_i86++) {
        c10_f_b[c10_i86] = c10_p_a * c10_h_b[c10_i86];
      }

      for (c10_i87 = 0; c10_i87 < 2; c10_i87++) {
        for (c10_i89 = 0; c10_i89 < 2; c10_i89++) {
          if (c10_c_ii[c10_i89] != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_c_ii[c10_i89])))) {
            emlrtIntegerCheckR2012b(c10_c_ii[c10_i89], &c10_gh_emlrtDCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_i92 = static_cast<int32_T>(c10_c_ii[c10_i89]);
          if ((c10_i92 < 1) || (c10_i92 > 142)) {
            emlrtDynamicBoundsCheckR2012b(c10_i92, 1, 142, &c10_ih_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          if (c10_c_ii[c10_i87] != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_c_ii[c10_i87])))) {
            emlrtIntegerCheckR2012b(c10_c_ii[c10_i87], &c10_hh_emlrtDCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_i99 = static_cast<int32_T>(c10_c_ii[c10_i87]);
          if ((c10_i99 < 1) || (c10_i99 > 142)) {
            emlrtDynamicBoundsCheckR2012b(c10_i99, 1, 142, &c10_jh_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_e_H[c10_i89 + (c10_i87 << 1)] = c10_c_H[(c10_i92 + 142 * (c10_i99
            - 1)) - 1] + c10_f_b[c10_i89 + (c10_i87 << 1)];
        }
      }

      for (c10_i88 = 0; c10_i88 < 2; c10_i88++) {
        for (c10_i91 = 0; c10_i91 < 2; c10_i91++) {
          if (c10_c_ii[c10_i91] != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_c_ii[c10_i91])))) {
            emlrtIntegerCheckR2012b(c10_c_ii[c10_i91], &c10_kh_emlrtDCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_i95 = static_cast<int32_T>(c10_c_ii[c10_i91]);
          if ((c10_i95 < 1) || (c10_i95 > 142)) {
            emlrtDynamicBoundsCheckR2012b(c10_i95, 1, 142, &c10_oh_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          if (c10_c_ii[c10_i88] != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_c_ii[c10_i88])))) {
            emlrtIntegerCheckR2012b(c10_c_ii[c10_i88], &c10_kh_emlrtDCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_i102 = static_cast<int32_T>(c10_c_ii[c10_i88]);
          if ((c10_i102 < 1) || (c10_i102 > 142)) {
            emlrtDynamicBoundsCheckR2012b(c10_i102, 1, 142, &c10_oh_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_c_H[(c10_i95 + 142 * (c10_i102 - 1)) - 1] = c10_e_H[c10_i91 +
            (c10_i88 << 1)];
        }
      }
    }

    c10_d27 = c10_o + c10_xi_v;
    if (c10_d27 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d27)))) {
      emlrtIntegerCheckR2012b(c10_d27, &c10_eh_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i94 = static_cast<int32_T>(c10_d27);
    if ((c10_i94 < 1) || (c10_i94 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i94, 1, 142, &c10_gh_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_d29 = c10_o + c10_xi_v;
    if (c10_d29 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d29)))) {
      emlrtIntegerCheckR2012b(c10_d29, &c10_fh_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i105 = static_cast<int32_T>(c10_d29);
    if ((c10_i105 < 1) || (c10_i105 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i105, 1, 142, &c10_hh_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_c_data[c10_i105 - 1] = c10_c_data[c10_i94 - 1] + c10_w_v;
    c10_d33 = c10_o + c10_xi_h;
    if (c10_d33 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d33)))) {
      emlrtIntegerCheckR2012b(c10_d33, &c10_ih_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i107 = static_cast<int32_T>(c10_d33);
    if ((c10_i107 < 1) || (c10_i107 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i107, 1, 142, &c10_kh_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_d35 = c10_o + c10_xi_h;
    if (c10_d35 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d35)))) {
      emlrtIntegerCheckR2012b(c10_d35, &c10_jh_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i112 = static_cast<int32_T>(c10_d35);
    if ((c10_i112 < 1) || (c10_i112 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i112, 1, 142, &c10_mh_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_c_data[c10_i112 - 1] = c10_c_data[c10_i107 - 1] + 100.0 * c10_w_h;
    c10_d36 = c10_o + c10_xi_h;
    if (c10_d36 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d36)))) {
      emlrtIntegerCheckR2012b(c10_d36, &c10_mh_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i116 = static_cast<int32_T>(c10_d36);
    if ((c10_i116 < 1) || (c10_i116 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i116, 1, 142, &c10_ph_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_d40 = c10_o + c10_xi_h;
    if (c10_d40 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d40)))) {
      emlrtIntegerCheckR2012b(c10_d40, &c10_oh_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i117 = static_cast<int32_T>(c10_d40);
    if ((c10_i117 < 1) || (c10_i117 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i117, 1, 142, &c10_qh_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_d42 = c10_o + c10_xi_h;
    if (c10_d42 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d42)))) {
      emlrtIntegerCheckR2012b(c10_d42, &c10_ph_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i122 = static_cast<int32_T>(c10_d42);
    if ((c10_i122 < 1) || (c10_i122 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i122, 1, 142, &c10_sh_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_d44 = c10_o + c10_xi_h;
    if (c10_d44 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d44)))) {
      emlrtIntegerCheckR2012b(c10_d44, &c10_qh_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i125 = static_cast<int32_T>(c10_d44);
    if ((c10_i125 < 1) || (c10_i125 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i125, 1, 142, &c10_th_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_c_H[(c10_i122 + 142 * (c10_i125 - 1)) - 1] = c10_c_H[(c10_i116 + 142 *
      (c10_i117 - 1)) - 1] + 2.0 * c10_w_h;
    c10_d47 = c10_o + c10_xi_s;
    if (c10_d47 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d47)))) {
      emlrtIntegerCheckR2012b(c10_d47, &c10_sh_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i126 = static_cast<int32_T>(c10_d47);
    if ((c10_i126 < 1) || (c10_i126 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i126, 1, 142, &c10_uh_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_d49 = c10_o + c10_xi_s;
    if (c10_d49 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d49)))) {
      emlrtIntegerCheckR2012b(c10_d49, &c10_th_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i133 = static_cast<int32_T>(c10_d49);
    if ((c10_i133 < 1) || (c10_i133 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i133, 1, 142, &c10_vh_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_c_data[c10_i133 - 1] = c10_c_data[c10_i126 - 1] + c10_w_s;
    c10_d53 = c10_o + c10_xi_f;
    if (c10_d53 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d53)))) {
      emlrtIntegerCheckR2012b(c10_d53, &c10_uh_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i134 = static_cast<int32_T>(c10_d53);
    if ((c10_i134 < 1) || (c10_i134 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i134, 1, 142, &c10_wh_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_d55 = c10_o + c10_xi_f;
    if (c10_d55 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d55)))) {
      emlrtIntegerCheckR2012b(c10_d55, &c10_vh_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i138 = static_cast<int32_T>(c10_d55);
    if ((c10_i138 < 1) || (c10_i138 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i138, 1, 142, &c10_xh_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_c_data[c10_i138 - 1] = c10_c_data[c10_i134 - 1] + c10_w_f;
    if (covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 4,
                       covrtRelationalopUpdateFcn
                       (chartInstance->c10_covrtInstance, 14U, 0U, 4U,
                        c10_solverToUse, 2.0, -1, 0U, static_cast<int32_T>
                        (c10_solverToUse == 2.0)))) {
      c10_f_ii[0] = c10_o + c10_scurr;
      c10_f_ii[1] = c10_o + c10_vcurr;
      c10_f_ii[2] = c10_o + c10_acurr;
      c10_f_ii[3] = c10_o + (c10_b_n_x_u + c10_scurr);
      c10_f_ii[4] = c10_o + (c10_b_n_x_u + c10_vcurr);
      c10_f_ii[5] = c10_o + (c10_b_n_x_u + c10_aprev);
      c10_st.site = &c10_h_emlrtRSI;
      c10_r_a = c10_T;
      c10_b_st.site = &c10_k_emlrtRSI;
      c10_t_a = c10_r_a;
      c10_c_st.site = &c10_m_emlrtRSI;
      c10_v_a = c10_t_a;
      if (c10_fltpower_domain_error(chartInstance)) {
        sf_mex_call(&c10_c_st, &c10_emlrtMCI, "error", 0U, 2U, 14,
                    c10_emlrt_marshallOut(chartInstance, c10_cv), 14,
                    sf_mex_call(&c10_c_st, NULL, "getString", 1U, 1U, 14,
          sf_mex_call(&c10_c_st, NULL, "message", 1U, 1U, 14,
                      c10_emlrt_marshallOut(chartInstance, c10_cv))));
      }

      c10_y_a = c10_v_a;
      c10_bb_a = c10_y_a;
      c10_f_c = c10_bb_a * c10_bb_a;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_yc_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i152 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i152 < 1) || (c10_i152 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i152, 1, 602, &c10_bd_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_d_cstrInd = c10_i152 - 1;
      if (c10_f_ii[0] != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_f_ii[0])))) {
        emlrtIntegerCheckR2012b(c10_f_ii[0], &c10_wh_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i155 = static_cast<int32_T>(c10_f_ii[0]);
      if ((c10_i155 < 1) || (c10_i155 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i155, 1, 142, &c10_yh_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_c_G[c10_d_cstrInd + 602 * (c10_i155 - 1)] = 1.0;
      if (c10_f_ii[1] != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_f_ii[1])))) {
        emlrtIntegerCheckR2012b(c10_f_ii[1], &c10_wh_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i162 = static_cast<int32_T>(c10_f_ii[1]);
      if ((c10_i162 < 1) || (c10_i162 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i162, 1, 142, &c10_yh_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_c_G[c10_d_cstrInd + 602 * (c10_i162 - 1)] = c10_T;
      if (c10_f_ii[2] != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_f_ii[2])))) {
        emlrtIntegerCheckR2012b(c10_f_ii[2], &c10_wh_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i167 = static_cast<int32_T>(c10_f_ii[2]);
      if ((c10_i167 < 1) || (c10_i167 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i167, 1, 142, &c10_yh_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_c_G[c10_d_cstrInd + 602 * (c10_i167 - 1)] = 0.5 * c10_f_c;
      if (c10_f_ii[3] != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_f_ii[3])))) {
        emlrtIntegerCheckR2012b(c10_f_ii[3], &c10_wh_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i170 = static_cast<int32_T>(c10_f_ii[3]);
      if ((c10_i170 < 1) || (c10_i170 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i170, 1, 142, &c10_yh_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_c_G[c10_d_cstrInd + 602 * (c10_i170 - 1)] = -1.0;
      if (c10_f_ii[4] != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_f_ii[4])))) {
        emlrtIntegerCheckR2012b(c10_f_ii[4], &c10_wh_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i177 = static_cast<int32_T>(c10_f_ii[4]);
      if ((c10_i177 < 1) || (c10_i177 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i177, 1, 142, &c10_yh_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_c_G[c10_d_cstrInd + 602 * (c10_i177 - 1)] = 0.0;
      if (c10_f_ii[5] != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_f_ii[5])))) {
        emlrtIntegerCheckR2012b(c10_f_ii[5], &c10_wh_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i182 = static_cast<int32_T>(c10_f_ii[5]);
      if ((c10_i182 < 1) || (c10_i182 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i182, 1, 142, &c10_yh_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_c_G[c10_d_cstrInd + 602 * (c10_i182 - 1)] = 0.0;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_wb_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i185 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i185 < 1) || (c10_i185 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i185, 1, 602, &c10_yb_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_lb_data[c10_i185 - 1] = 0.0;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_te_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i193 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i193 < 1) || (c10_i193 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i193, 1, 602, &c10_ve_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_ub_data[c10_i193 - 1] = 0.0;
      c10_cstrInd++;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_ad_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i197 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i197 < 1) || (c10_i197 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i197, 1, 602, &c10_cd_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_f_cstrInd = c10_i197 - 1;
      if (c10_f_ii[0] != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_f_ii[0])))) {
        emlrtIntegerCheckR2012b(c10_f_ii[0], &c10_yh_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i203 = static_cast<int32_T>(c10_f_ii[0]);
      if ((c10_i203 < 1) || (c10_i203 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i203, 1, 142, &c10_bi_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_c_G[c10_f_cstrInd + 602 * (c10_i203 - 1)] = 0.0;
      if (c10_f_ii[1] != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_f_ii[1])))) {
        emlrtIntegerCheckR2012b(c10_f_ii[1], &c10_yh_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i209 = static_cast<int32_T>(c10_f_ii[1]);
      if ((c10_i209 < 1) || (c10_i209 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i209, 1, 142, &c10_bi_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_c_G[c10_f_cstrInd + 602 * (c10_i209 - 1)] = 1.0;
      if (c10_f_ii[2] != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_f_ii[2])))) {
        emlrtIntegerCheckR2012b(c10_f_ii[2], &c10_yh_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i212 = static_cast<int32_T>(c10_f_ii[2]);
      if ((c10_i212 < 1) || (c10_i212 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i212, 1, 142, &c10_bi_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_c_G[c10_f_cstrInd + 602 * (c10_i212 - 1)] = c10_T;
      if (c10_f_ii[3] != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_f_ii[3])))) {
        emlrtIntegerCheckR2012b(c10_f_ii[3], &c10_yh_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i215 = static_cast<int32_T>(c10_f_ii[3]);
      if ((c10_i215 < 1) || (c10_i215 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i215, 1, 142, &c10_bi_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_c_G[c10_f_cstrInd + 602 * (c10_i215 - 1)] = 0.0;
      if (c10_f_ii[4] != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_f_ii[4])))) {
        emlrtIntegerCheckR2012b(c10_f_ii[4], &c10_yh_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i219 = static_cast<int32_T>(c10_f_ii[4]);
      if ((c10_i219 < 1) || (c10_i219 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i219, 1, 142, &c10_bi_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_c_G[c10_f_cstrInd + 602 * (c10_i219 - 1)] = -1.0;
      if (c10_f_ii[5] != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_f_ii[5])))) {
        emlrtIntegerCheckR2012b(c10_f_ii[5], &c10_yh_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i222 = static_cast<int32_T>(c10_f_ii[5]);
      if ((c10_i222 < 1) || (c10_i222 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i222, 1, 142, &c10_bi_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_c_G[c10_f_cstrInd + 602 * (c10_i222 - 1)] = 0.0;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_xb_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i224 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i224 < 1) || (c10_i224 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i224, 1, 602, &c10_ac_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_lb_data[c10_i224 - 1] = 0.0;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_ue_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i227 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i227 < 1) || (c10_i227 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i227, 1, 602, &c10_we_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_ub_data[c10_i227 - 1] = 0.0;
      c10_cstrInd++;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_bd_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i230 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i230 < 1) || (c10_i230 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i230, 1, 602, &c10_dd_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_cstrInd = c10_i230 - 1;
      for (c10_i232 = 0; c10_i232 < 6; c10_i232++) {
        if (c10_f_ii[c10_i232] != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_f_ii[c10_i232])))) {
          emlrtIntegerCheckR2012b(c10_f_ii[c10_i232], &c10_bi_emlrtDCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_i236 = static_cast<int32_T>(c10_f_ii[c10_i232]);
        if ((c10_i236 < 1) || (c10_i236 > 142)) {
          emlrtDynamicBoundsCheckR2012b(c10_i236, 1, 142, &c10_di_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_c_G[c10_g_cstrInd + 602 * (c10_i236 - 1)] = c10_dv[c10_i232];
      }

      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_yb_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i235 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i235 < 1) || (c10_i235 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i235, 1, 602, &c10_bc_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_lb_data[c10_i235 - 1] = 0.0;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_ve_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i239 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i239 < 1) || (c10_i239 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i239, 1, 602, &c10_xe_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_ub_data[c10_i239 - 1] = 0.0;
      c10_cstrInd++;
      if (covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 5,
                         covrtRelationalopUpdateFcn
                         (chartInstance->c10_covrtInstance, 14U, 0U, 5U,
                          c10_b_kk, 0.0, -1, 0U, static_cast<int32_T>(c10_b_kk ==
             0.0)))) {
        if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_cstrInd)))) {
          emlrtIntegerCheckR2012b(c10_cstrInd, &c10_cd_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i242 = static_cast<int32_T>(c10_cstrInd);
        if ((c10_i242 < 1) || (c10_i242 > 602)) {
          emlrtDynamicBoundsCheckR2012b(c10_i242, 1, 602, &c10_ed_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_d87 = c10_o + c10_scurr;
        if (c10_d87 != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_d87)))) {
          emlrtIntegerCheckR2012b(c10_d87, &c10_dd_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i245 = static_cast<int32_T>(c10_d87);
        if ((c10_i245 < 1) || (c10_i245 > 142)) {
          emlrtDynamicBoundsCheckR2012b(c10_i245, 1, 142, &c10_fd_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_c_G[(c10_i242 + 602 * (c10_i245 - 1)) - 1] = 1.0;
        if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_cstrInd)))) {
          emlrtIntegerCheckR2012b(c10_cstrInd, &c10_ac_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i249 = static_cast<int32_T>(c10_cstrInd);
        if ((c10_i249 < 1) || (c10_i249 > 602)) {
          emlrtDynamicBoundsCheckR2012b(c10_i249, 1, 602, &c10_cc_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_g_lb_data[c10_i249 - 1] = c10_s_0;
        if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_cstrInd)))) {
          emlrtIntegerCheckR2012b(c10_cstrInd, &c10_we_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i252 = static_cast<int32_T>(c10_cstrInd);
        if ((c10_i252 < 1) || (c10_i252 > 602)) {
          emlrtDynamicBoundsCheckR2012b(c10_i252, 1, 602, &c10_ye_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_g_ub_data[c10_i252 - 1] = c10_s_0;
        c10_cstrInd++;
        if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_cstrInd)))) {
          emlrtIntegerCheckR2012b(c10_cstrInd, &c10_ed_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i255 = static_cast<int32_T>(c10_cstrInd);
        if ((c10_i255 < 1) || (c10_i255 > 602)) {
          emlrtDynamicBoundsCheckR2012b(c10_i255, 1, 602, &c10_gd_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_d93 = c10_o + c10_vcurr;
        if (c10_d93 != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_d93)))) {
          emlrtIntegerCheckR2012b(c10_d93, &c10_fd_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i259 = static_cast<int32_T>(c10_d93);
        if ((c10_i259 < 1) || (c10_i259 > 142)) {
          emlrtDynamicBoundsCheckR2012b(c10_i259, 1, 142, &c10_hd_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_c_G[(c10_i255 + 602 * (c10_i259 - 1)) - 1] = 1.0;
        if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_cstrInd)))) {
          emlrtIntegerCheckR2012b(c10_cstrInd, &c10_bc_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i262 = static_cast<int32_T>(c10_cstrInd);
        if ((c10_i262 < 1) || (c10_i262 > 602)) {
          emlrtDynamicBoundsCheckR2012b(c10_i262, 1, 602, &c10_dc_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_g_lb_data[c10_i262 - 1] = c10_v_0;
        if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_cstrInd)))) {
          emlrtIntegerCheckR2012b(c10_cstrInd, &c10_xe_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i265 = static_cast<int32_T>(c10_cstrInd);
        if ((c10_i265 < 1) || (c10_i265 > 602)) {
          emlrtDynamicBoundsCheckR2012b(c10_i265, 1, 602, &c10_af_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_g_ub_data[c10_i265 - 1] = c10_v_0;
        c10_cstrInd++;
        if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_cstrInd)))) {
          emlrtIntegerCheckR2012b(c10_cstrInd, &c10_gd_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i267 = static_cast<int32_T>(c10_cstrInd);
        if ((c10_i267 < 1) || (c10_i267 > 602)) {
          emlrtDynamicBoundsCheckR2012b(c10_i267, 1, 602, &c10_id_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_d94 = c10_o + c10_aprev;
        if (c10_d94 != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_d94)))) {
          emlrtIntegerCheckR2012b(c10_d94, &c10_hd_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i268 = static_cast<int32_T>(c10_d94);
        if ((c10_i268 < 1) || (c10_i268 > 142)) {
          emlrtDynamicBoundsCheckR2012b(c10_i268, 1, 142, &c10_jd_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_c_G[(c10_i267 + 602 * (c10_i268 - 1)) - 1] = 1.0;
        if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_cstrInd)))) {
          emlrtIntegerCheckR2012b(c10_cstrInd, &c10_cc_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i270 = static_cast<int32_T>(c10_cstrInd);
        if ((c10_i270 < 1) || (c10_i270 > 602)) {
          emlrtDynamicBoundsCheckR2012b(c10_i270, 1, 602, &c10_ec_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_g_lb_data[c10_i270 - 1] = c10_b_a_minus1;
        if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_cstrInd)))) {
          emlrtIntegerCheckR2012b(c10_cstrInd, &c10_ye_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i273 = static_cast<int32_T>(c10_cstrInd);
        if ((c10_i273 < 1) || (c10_i273 > 602)) {
          emlrtDynamicBoundsCheckR2012b(c10_i273, 1, 602, &c10_bf_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_g_ub_data[c10_i273 - 1] = c10_b_a_minus1;
        c10_cstrInd++;
      }
    } else {
      if (covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 6,
                         covrtRelationalopUpdateFcn
                         (chartInstance->c10_covrtInstance, 14U, 0U, 6U,
                          c10_solverToUse, 0.0, -1, 0U, static_cast<int32_T>
                          (c10_solverToUse == 0.0)))) {
        c10_g_ii[0] = c10_o + c10_scurr;
        c10_g_ii[1] = c10_o + c10_vcurr;
        c10_g_ii[2] = c10_o + c10_acurr;
        c10_g_ii[3] = c10_o + (c10_b_n_x_u + c10_scurr);
        c10_g_ii[4] = c10_o + (c10_b_n_x_u + c10_vcurr);
        c10_st.site = &c10_g_emlrtRSI;
        c10_q_a = c10_T;
        c10_b_st.site = &c10_k_emlrtRSI;
        c10_s_a = c10_q_a;
        c10_c_st.site = &c10_m_emlrtRSI;
        c10_u_a = c10_s_a;
        if (c10_fltpower_domain_error(chartInstance)) {
          sf_mex_call(&c10_c_st, &c10_emlrtMCI, "error", 0U, 2U, 14,
                      c10_emlrt_marshallOut(chartInstance, c10_cv), 14,
                      sf_mex_call(&c10_c_st, NULL, "getString", 1U, 1U, 14,
            sf_mex_call(&c10_c_st, NULL, "message", 1U, 1U, 14,
                        c10_emlrt_marshallOut(chartInstance, c10_cv))));
        }

        c10_x_a = c10_u_a;
        c10_ab_a = c10_x_a;
        c10_e_c = c10_ab_a * c10_ab_a;
        if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_cstrInd)))) {
          emlrtIntegerCheckR2012b(c10_cstrInd, &c10_id_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i151 = static_cast<int32_T>(c10_cstrInd);
        if ((c10_i151 < 1) || (c10_i151 > 602)) {
          emlrtDynamicBoundsCheckR2012b(c10_i151, 1, 602, &c10_kd_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_c_cstrInd = c10_i151 - 1;
        if (c10_g_ii[0] != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_g_ii[0])))) {
          emlrtIntegerCheckR2012b(c10_g_ii[0], &c10_xh_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i154 = static_cast<int32_T>(c10_g_ii[0]);
        if ((c10_i154 < 1) || (c10_i154 > 142)) {
          emlrtDynamicBoundsCheckR2012b(c10_i154, 1, 142, &c10_ai_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_c_G[c10_c_cstrInd + 602 * (c10_i154 - 1)] = 1.0;
        if (c10_g_ii[1] != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_g_ii[1])))) {
          emlrtIntegerCheckR2012b(c10_g_ii[1], &c10_xh_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i161 = static_cast<int32_T>(c10_g_ii[1]);
        if ((c10_i161 < 1) || (c10_i161 > 142)) {
          emlrtDynamicBoundsCheckR2012b(c10_i161, 1, 142, &c10_ai_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_c_G[c10_c_cstrInd + 602 * (c10_i161 - 1)] = c10_T;
        if (c10_g_ii[2] != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_g_ii[2])))) {
          emlrtIntegerCheckR2012b(c10_g_ii[2], &c10_xh_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i166 = static_cast<int32_T>(c10_g_ii[2]);
        if ((c10_i166 < 1) || (c10_i166 > 142)) {
          emlrtDynamicBoundsCheckR2012b(c10_i166, 1, 142, &c10_ai_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_c_G[c10_c_cstrInd + 602 * (c10_i166 - 1)] = c10_e_c;
        if (c10_g_ii[3] != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_g_ii[3])))) {
          emlrtIntegerCheckR2012b(c10_g_ii[3], &c10_xh_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i169 = static_cast<int32_T>(c10_g_ii[3]);
        if ((c10_i169 < 1) || (c10_i169 > 142)) {
          emlrtDynamicBoundsCheckR2012b(c10_i169, 1, 142, &c10_ai_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_c_G[c10_c_cstrInd + 602 * (c10_i169 - 1)] = -1.0;
        if (c10_g_ii[4] != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_g_ii[4])))) {
          emlrtIntegerCheckR2012b(c10_g_ii[4], &c10_xh_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i176 = static_cast<int32_T>(c10_g_ii[4]);
        if ((c10_i176 < 1) || (c10_i176 > 142)) {
          emlrtDynamicBoundsCheckR2012b(c10_i176, 1, 142, &c10_ai_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_c_G[c10_c_cstrInd + 602 * (c10_i176 - 1)] = 0.0;
        if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_cstrInd)))) {
          emlrtIntegerCheckR2012b(c10_cstrInd, &c10_dc_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i181 = static_cast<int32_T>(c10_cstrInd);
        if ((c10_i181 < 1) || (c10_i181 > 602)) {
          emlrtDynamicBoundsCheckR2012b(c10_i181, 1, 602, &c10_fc_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_g_lb_data[c10_i181 - 1] = 0.0;
        if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_cstrInd)))) {
          emlrtIntegerCheckR2012b(c10_cstrInd, &c10_af_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i184 = static_cast<int32_T>(c10_cstrInd);
        if ((c10_i184 < 1) || (c10_i184 > 602)) {
          emlrtDynamicBoundsCheckR2012b(c10_i184, 1, 602, &c10_cf_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_g_ub_data[c10_i184 - 1] = 0.0;
        c10_cstrInd++;
        if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_cstrInd)))) {
          emlrtIntegerCheckR2012b(c10_cstrInd, &c10_jd_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i194 = static_cast<int32_T>(c10_cstrInd);
        if ((c10_i194 < 1) || (c10_i194 > 602)) {
          emlrtDynamicBoundsCheckR2012b(c10_i194, 1, 602, &c10_md_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_e_cstrInd = c10_i194 - 1;
        if (c10_g_ii[0] != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_g_ii[0])))) {
          emlrtIntegerCheckR2012b(c10_g_ii[0], &c10_ai_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i196 = static_cast<int32_T>(c10_g_ii[0]);
        if ((c10_i196 < 1) || (c10_i196 > 142)) {
          emlrtDynamicBoundsCheckR2012b(c10_i196, 1, 142, &c10_ci_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_c_G[c10_e_cstrInd + 602 * (c10_i196 - 1)] = 0.0;
        if (c10_g_ii[1] != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_g_ii[1])))) {
          emlrtIntegerCheckR2012b(c10_g_ii[1], &c10_ai_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i202 = static_cast<int32_T>(c10_g_ii[1]);
        if ((c10_i202 < 1) || (c10_i202 > 142)) {
          emlrtDynamicBoundsCheckR2012b(c10_i202, 1, 142, &c10_ci_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_c_G[c10_e_cstrInd + 602 * (c10_i202 - 1)] = 1.0;
        if (c10_g_ii[2] != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_g_ii[2])))) {
          emlrtIntegerCheckR2012b(c10_g_ii[2], &c10_ai_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i208 = static_cast<int32_T>(c10_g_ii[2]);
        if ((c10_i208 < 1) || (c10_i208 > 142)) {
          emlrtDynamicBoundsCheckR2012b(c10_i208, 1, 142, &c10_ci_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_c_G[c10_e_cstrInd + 602 * (c10_i208 - 1)] = c10_T;
        if (c10_g_ii[3] != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_g_ii[3])))) {
          emlrtIntegerCheckR2012b(c10_g_ii[3], &c10_ai_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i211 = static_cast<int32_T>(c10_g_ii[3]);
        if ((c10_i211 < 1) || (c10_i211 > 142)) {
          emlrtDynamicBoundsCheckR2012b(c10_i211, 1, 142, &c10_ci_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_c_G[c10_e_cstrInd + 602 * (c10_i211 - 1)] = 0.0;
        if (c10_g_ii[4] != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_g_ii[4])))) {
          emlrtIntegerCheckR2012b(c10_g_ii[4], &c10_ai_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i214 = static_cast<int32_T>(c10_g_ii[4]);
        if ((c10_i214 < 1) || (c10_i214 > 142)) {
          emlrtDynamicBoundsCheckR2012b(c10_i214, 1, 142, &c10_ci_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_c_G[c10_e_cstrInd + 602 * (c10_i214 - 1)] = -1.0;
        if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_cstrInd)))) {
          emlrtIntegerCheckR2012b(c10_cstrInd, &c10_ec_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i218 = static_cast<int32_T>(c10_cstrInd);
        if ((c10_i218 < 1) || (c10_i218 > 602)) {
          emlrtDynamicBoundsCheckR2012b(c10_i218, 1, 602, &c10_gc_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_g_lb_data[c10_i218 - 1] = 0.0;
        if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_cstrInd)))) {
          emlrtIntegerCheckR2012b(c10_cstrInd, &c10_bf_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i221 = static_cast<int32_T>(c10_cstrInd);
        if ((c10_i221 < 1) || (c10_i221 > 602)) {
          emlrtDynamicBoundsCheckR2012b(c10_i221, 1, 602, &c10_df_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_g_ub_data[c10_i221 - 1] = 0.0;
        c10_cstrInd++;
        if (covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 7,
                           covrtRelationalopUpdateFcn
                           (chartInstance->c10_covrtInstance, 14U, 0U, 7U,
                            c10_b_kk, 0.0, -1, 0U, static_cast<int32_T>(c10_b_kk
               == 0.0)))) {
          if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_cstrInd)))) {
            emlrtIntegerCheckR2012b(c10_cstrInd, &c10_kd_emlrtDCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_i225 = static_cast<int32_T>(c10_cstrInd);
          if ((c10_i225 < 1) || (c10_i225 > 602)) {
            emlrtDynamicBoundsCheckR2012b(c10_i225, 1, 602, &c10_od_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_d84 = c10_o + c10_scurr;
          if (c10_d84 != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_d84)))) {
            emlrtIntegerCheckR2012b(c10_d84, &c10_md_emlrtDCI, (emlrtConstCTX)
              c10_sp);
          }

          c10_i228 = static_cast<int32_T>(c10_d84);
          if ((c10_i228 < 1) || (c10_i228 > 142)) {
            emlrtDynamicBoundsCheckR2012b(c10_i228, 1, 142, &c10_pd_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_c_G[(c10_i225 + 602 * (c10_i228 - 1)) - 1] = 1.0;
          if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_cstrInd)))) {
            emlrtIntegerCheckR2012b(c10_cstrInd, &c10_fc_emlrtDCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_i231 = static_cast<int32_T>(c10_cstrInd);
          if ((c10_i231 < 1) || (c10_i231 > 602)) {
            emlrtDynamicBoundsCheckR2012b(c10_i231, 1, 602, &c10_hc_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_g_lb_data[c10_i231 - 1] = c10_s_0;
          if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_cstrInd)))) {
            emlrtIntegerCheckR2012b(c10_cstrInd, &c10_cf_emlrtDCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_i234 = static_cast<int32_T>(c10_cstrInd);
          if ((c10_i234 < 1) || (c10_i234 > 602)) {
            emlrtDynamicBoundsCheckR2012b(c10_i234, 1, 602, &c10_ef_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_g_ub_data[c10_i234 - 1] = c10_s_0;
          c10_cstrInd++;
          if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_cstrInd)))) {
            emlrtIntegerCheckR2012b(c10_cstrInd, &c10_od_emlrtDCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_i238 = static_cast<int32_T>(c10_cstrInd);
          if ((c10_i238 < 1) || (c10_i238 > 602)) {
            emlrtDynamicBoundsCheckR2012b(c10_i238, 1, 602, &c10_qd_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_d86 = c10_o + c10_vcurr;
          if (c10_d86 != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_d86)))) {
            emlrtIntegerCheckR2012b(c10_d86, &c10_pd_emlrtDCI, (emlrtConstCTX)
              c10_sp);
          }

          c10_i241 = static_cast<int32_T>(c10_d86);
          if ((c10_i241 < 1) || (c10_i241 > 142)) {
            emlrtDynamicBoundsCheckR2012b(c10_i241, 1, 142, &c10_rd_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_c_G[(c10_i238 + 602 * (c10_i241 - 1)) - 1] = 1.0;
          if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_cstrInd)))) {
            emlrtIntegerCheckR2012b(c10_cstrInd, &c10_gc_emlrtDCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_i244 = static_cast<int32_T>(c10_cstrInd);
          if ((c10_i244 < 1) || (c10_i244 > 602)) {
            emlrtDynamicBoundsCheckR2012b(c10_i244, 1, 602, &c10_ic_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_g_lb_data[c10_i244 - 1] = c10_v_0;
          if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_cstrInd)))) {
            emlrtIntegerCheckR2012b(c10_cstrInd, &c10_df_emlrtDCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_i247 = static_cast<int32_T>(c10_cstrInd);
          if ((c10_i247 < 1) || (c10_i247 > 602)) {
            emlrtDynamicBoundsCheckR2012b(c10_i247, 1, 602, &c10_ff_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_g_ub_data[c10_i247 - 1] = c10_v_0;
          c10_cstrInd++;
        }
      }

      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_qd_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i142 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i142 < 1) || (c10_i142 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i142, 1, 602, &c10_sd_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_d59 = c10_o + c10_scurr;
      if (c10_d59 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d59)))) {
        emlrtIntegerCheckR2012b(c10_d59, &c10_rd_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i143 = static_cast<int32_T>(c10_d59);
      if ((c10_i143 < 1) || (c10_i143 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i143, 1, 142, &c10_td_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_c_G[(c10_i142 + 602 * (c10_i143 - 1)) - 1] = 1.0;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_hc_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i150 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i150 < 1) || (c10_i150 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i150, 1, 602, &c10_jc_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_lb_data[c10_i150 - 1] = 0.0;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_ef_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i153 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i153 < 1) || (c10_i153 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i153, 1, 602, &c10_gf_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_ub_data[c10_i153 - 1] = c10_s_max;
      c10_cstrInd++;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_sd_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i159 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i159 < 1) || (c10_i159 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i159, 1, 602, &c10_ud_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_d65 = c10_o + c10_vcurr;
      if (c10_d65 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d65)))) {
        emlrtIntegerCheckR2012b(c10_d65, &c10_td_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i165 = static_cast<int32_T>(c10_d65);
      if ((c10_i165 < 1) || (c10_i165 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i165, 1, 142, &c10_vd_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_c_G[(c10_i159 + 602 * (c10_i165 - 1)) - 1] = 1.0;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_ic_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i168 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i168 < 1) || (c10_i168 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i168, 1, 602, &c10_kc_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_lb_data[c10_i168 - 1] = 0.0;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_ff_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i174 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i174 < 1) || (c10_i174 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i174, 1, 602, &c10_hf_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_ub_data[c10_i174 - 1] = c10_v_max;
      c10_cstrInd++;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_ud_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i180 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i180 < 1) || (c10_i180 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i180, 1, 602, &c10_wd_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_d73 = c10_o + c10_xi_v;
      if (c10_d73 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d73)))) {
        emlrtIntegerCheckR2012b(c10_d73, &c10_vd_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i183 = static_cast<int32_T>(c10_d73);
      if ((c10_i183 < 1) || (c10_i183 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i183, 1, 142, &c10_xd_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_c_G[(c10_i180 + 602 * (c10_i183 - 1)) - 1] = 1.0;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_jc_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i190 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i190 < 1) || (c10_i190 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i190, 1, 602, &c10_mc_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_lb_data[c10_i190 - 1] = 0.0;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_gf_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i195 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i195 < 1) || (c10_i195 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i195, 1, 602, &c10_if_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_ub_data[c10_i195 - 1] = rtInf;
      c10_cstrInd++;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_wd_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i200 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i200 < 1) || (c10_i200 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i200, 1, 602, &c10_yd_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_d79 = c10_o + c10_xi_h;
      if (c10_d79 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d79)))) {
        emlrtIntegerCheckR2012b(c10_d79, &c10_xd_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i207 = static_cast<int32_T>(c10_d79);
      if ((c10_i207 < 1) || (c10_i207 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i207, 1, 142, &c10_ae_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_c_G[(c10_i200 + 602 * (c10_i207 - 1)) - 1] = 1.0;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_kc_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i210 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i210 < 1) || (c10_i210 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i210, 1, 602, &c10_oc_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_lb_data[c10_i210 - 1] = 0.0;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_hf_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i213 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i213 < 1) || (c10_i213 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i213, 1, 602, &c10_jf_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_ub_data[c10_i213 - 1] = rtInf;
      c10_cstrInd++;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_yd_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i217 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i217 < 1) || (c10_i217 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i217, 1, 602, &c10_be_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_d83 = c10_o + c10_xi_s;
      if (c10_d83 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d83)))) {
        emlrtIntegerCheckR2012b(c10_d83, &c10_ae_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i220 = static_cast<int32_T>(c10_d83);
      if ((c10_i220 < 1) || (c10_i220 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i220, 1, 142, &c10_ce_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_c_G[(c10_i217 + 602 * (c10_i220 - 1)) - 1] = 1.0;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_mc_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i223 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i223 < 1) || (c10_i223 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i223, 1, 602, &c10_pc_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_lb_data[c10_i223 - 1] = 0.0;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_if_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i226 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i226 < 1) || (c10_i226 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i226, 1, 602, &c10_kf_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_ub_data[c10_i226 - 1] = rtInf;
      c10_cstrInd++;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_be_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i229 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i229 < 1) || (c10_i229 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i229, 1, 602, &c10_de_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_d85 = c10_o + c10_xi_f;
      if (c10_d85 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d85)))) {
        emlrtIntegerCheckR2012b(c10_d85, &c10_ce_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i233 = static_cast<int32_T>(c10_d85);
      if ((c10_i233 < 1) || (c10_i233 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i233, 1, 142, &c10_ee_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_c_G[(c10_i229 + 602 * (c10_i233 - 1)) - 1] = 1.0;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_oc_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i237 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i237 < 1) || (c10_i237 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i237, 1, 602, &c10_qc_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_lb_data[c10_i237 - 1] = 0.0;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_jf_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i240 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i240 < 1) || (c10_i240 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i240, 1, 602, &c10_mf_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_ub_data[c10_i240 - 1] = rtInf;
      c10_cstrInd++;
    }

    if (c10_k != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_k)))) {
      emlrtIntegerCheckR2012b(c10_k, &c10_ci_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i243 = static_cast<int32_T>(c10_k);
    if ((c10_i243 < 1) || (c10_i243 > 20)) {
      emlrtDynamicBoundsCheckR2012b(c10_i243, 1, 20, &c10_ei_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_d88 = c10_Mb[c10_i243 - 1];
    if (covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 8,
                       covrtRelationalopUpdateFcn
                       (chartInstance->c10_covrtInstance, 14U, 0U, 8U, c10_d88,
                        1.0, -1, 0U, static_cast<int32_T>(c10_d88 == 1.0)))) {
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_de_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i246 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i246 < 1) || (c10_i246 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i246, 1, 602, &c10_fe_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_h_cstrInd = c10_i246 - 1;
      c10_d89 = c10_o + c10_aprev;
      if (c10_d89 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d89)))) {
        emlrtIntegerCheckR2012b(c10_d89, &c10_di_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i250 = static_cast<int32_T>(c10_d89);
      if ((c10_i250 < 1) || (c10_i250 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i250, 1, 142, &c10_fi_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_c_o[0] = c10_i250 - 1;
      c10_d91 = c10_o + c10_acurr;
      if (c10_d91 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d91)))) {
        emlrtIntegerCheckR2012b(c10_d91, &c10_di_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i253 = static_cast<int32_T>(c10_d91);
      if ((c10_i253 < 1) || (c10_i253 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i253, 1, 142, &c10_fi_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_c_o[1] = c10_i253 - 1;
      for (c10_i256 = 0; c10_i256 < 2; c10_i256++) {
        c10_c_G[c10_h_cstrInd + 602 * c10_c_o[c10_i256]] = 1.0 + -2.0 *
          static_cast<real_T>(c10_i256);
      }

      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_pc_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i258 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i258 < 1) || (c10_i258 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i258, 1, 602, &c10_rc_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_lb_data[c10_i258 - 1] = 0.0;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_kf_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i261 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i261 < 1) || (c10_i261 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i261, 1, 602, &c10_of_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_ub_data[c10_i261 - 1] = 0.0;
      c10_cstrInd++;
    }

    if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
         (muDoubleScalarFloor(c10_cstrInd)))) {
      emlrtIntegerCheckR2012b(c10_cstrInd, &c10_ee_emlrtDCI, (emlrtConstCTX)
        c10_sp);
    }

    c10_i248 = static_cast<int32_T>(c10_cstrInd);
    if ((c10_i248 < 1) || (c10_i248 > 602)) {
      emlrtDynamicBoundsCheckR2012b(c10_i248, 1, 602, &c10_ge_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_i_cstrInd = c10_i248 - 1;
    c10_d90 = c10_o + c10_acurr;
    if (c10_d90 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d90)))) {
      emlrtIntegerCheckR2012b(c10_d90, &c10_ei_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i251 = static_cast<int32_T>(c10_d90);
    if ((c10_i251 < 1) || (c10_i251 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i251, 1, 142, &c10_gi_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_d_o[0] = c10_i251 - 1;
    c10_d92 = c10_o + c10_xi_f;
    if (c10_d92 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d92)))) {
      emlrtIntegerCheckR2012b(c10_d92, &c10_ei_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i254 = static_cast<int32_T>(c10_d92);
    if ((c10_i254 < 1) || (c10_i254 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i254, 1, 142, &c10_gi_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_d_o[1] = c10_i254 - 1;
    for (c10_i257 = 0; c10_i257 < 2; c10_i257++) {
      c10_c_G[c10_i_cstrInd + 602 * c10_d_o[c10_i257]] = 1.0 + -2.0 *
        static_cast<real_T>(c10_i257);
    }

    if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
         (muDoubleScalarFloor(c10_cstrInd)))) {
      emlrtIntegerCheckR2012b(c10_cstrInd, &c10_qc_emlrtDCI, (emlrtConstCTX)
        c10_sp);
    }

    c10_i260 = static_cast<int32_T>(c10_cstrInd);
    if ((c10_i260 < 1) || (c10_i260 > 602)) {
      emlrtDynamicBoundsCheckR2012b(c10_i260, 1, 602, &c10_sc_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_g_lb_data[c10_i260 - 1] = rtMinusInf;
    if (c10_k != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_k)))) {
      emlrtIntegerCheckR2012b(c10_k, &c10_fi_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i263 = static_cast<int32_T>(c10_k);
    if ((c10_i263 < 1) || (c10_i263 > 20)) {
      emlrtDynamicBoundsCheckR2012b(c10_i263, 1, 20, &c10_hi_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
         (muDoubleScalarFloor(c10_cstrInd)))) {
      emlrtIntegerCheckR2012b(c10_cstrInd, &c10_gi_emlrtDCI, (emlrtConstCTX)
        c10_sp);
    }

    c10_i264 = static_cast<int32_T>(c10_cstrInd);
    if ((c10_i264 < 1) || (c10_i264 > 602)) {
      emlrtDynamicBoundsCheckR2012b(c10_i264, 1, 602, &c10_ii_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_g_ub_data[c10_i264 - 1] = c10_a_max_est[c10_i263 - 1];
    c10_cstrInd++;
    if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
         (muDoubleScalarFloor(c10_cstrInd)))) {
      emlrtIntegerCheckR2012b(c10_cstrInd, &c10_fe_emlrtDCI, (emlrtConstCTX)
        c10_sp);
    }

    c10_i266 = static_cast<int32_T>(c10_cstrInd);
    if ((c10_i266 < 1) || (c10_i266 > 602)) {
      emlrtDynamicBoundsCheckR2012b(c10_i266, 1, 602, &c10_he_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_j_cstrInd = c10_i266 - 1;
    c10_d95 = c10_o + c10_acurr;
    if (c10_d95 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d95)))) {
      emlrtIntegerCheckR2012b(c10_d95, &c10_hi_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i269 = static_cast<int32_T>(c10_d95);
    if ((c10_i269 < 1) || (c10_i269 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i269, 1, 142, &c10_ji_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_e_o[0] = c10_i269 - 1;
    c10_d96 = c10_o + c10_xi_f;
    if (c10_d96 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d96)))) {
      emlrtIntegerCheckR2012b(c10_d96, &c10_hi_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i271 = static_cast<int32_T>(c10_d96);
    if ((c10_i271 < 1) || (c10_i271 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i271, 1, 142, &c10_ji_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_e_o[1] = c10_i271 - 1;
    for (c10_i272 = 0; c10_i272 < 2; c10_i272++) {
      c10_c_G[c10_j_cstrInd + 602 * c10_e_o[c10_i272]] = 1.0;
    }

    if (c10_k != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_k)))) {
      emlrtIntegerCheckR2012b(c10_k, &c10_ii_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i274 = static_cast<int32_T>(c10_k);
    if ((c10_i274 < 1) || (c10_i274 > 20)) {
      emlrtDynamicBoundsCheckR2012b(c10_i274, 1, 20, &c10_ki_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
         (muDoubleScalarFloor(c10_cstrInd)))) {
      emlrtIntegerCheckR2012b(c10_cstrInd, &c10_ji_emlrtDCI, (emlrtConstCTX)
        c10_sp);
    }

    c10_i275 = static_cast<int32_T>(c10_cstrInd);
    if ((c10_i275 < 1) || (c10_i275 > 602)) {
      emlrtDynamicBoundsCheckR2012b(c10_i275, 1, 602, &c10_mi_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_g_lb_data[c10_i275 - 1] = c10_a_min_est[c10_i274 - 1];
    if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
         (muDoubleScalarFloor(c10_cstrInd)))) {
      emlrtIntegerCheckR2012b(c10_cstrInd, &c10_mf_emlrtDCI, (emlrtConstCTX)
        c10_sp);
    }

    c10_i276 = static_cast<int32_T>(c10_cstrInd);
    if ((c10_i276 < 1) || (c10_i276 > 602)) {
      emlrtDynamicBoundsCheckR2012b(c10_i276, 1, 602, &c10_pf_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_g_ub_data[c10_i276 - 1] = rtInf;
    c10_cstrInd++;
    if (covrtEmlCondEval(chartInstance->c10_covrtInstance, 14U, 0, 0,
                         covrtRelationalopUpdateFcn
                         (chartInstance->c10_covrtInstance, 14U, 0U, 9U,
                          c10_b_kk, 0.0, -1, 4U, static_cast<int32_T>(c10_b_kk >
           0.0))) || covrtEmlCondEval(chartInstance->c10_covrtInstance, 14U, 0,
         1, covrtRelationalopUpdateFcn(chartInstance->c10_covrtInstance, 14U, 0U,
          10U, c10_solverToUse, 2.0, -1, 0U, static_cast<int32_T>
          (c10_solverToUse == 2.0)))) {
      covrtEmlMcdcEval(chartInstance->c10_covrtInstance, 14U, 0, 0, true);
      covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 9, true);
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_ge_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i278 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i278 < 1) || (c10_i278 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i278, 1, 602, &c10_ie_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_m_cstrInd = c10_i278 - 1;
      c10_d98 = c10_o + c10_aprev;
      if (c10_d98 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d98)))) {
        emlrtIntegerCheckR2012b(c10_d98, &c10_mi_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i280 = static_cast<int32_T>(c10_d98);
      if ((c10_i280 < 1) || (c10_i280 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i280, 1, 142, &c10_pi_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_o[0] = c10_i280 - 1;
      c10_d100 = c10_o + c10_acurr;
      if (c10_d100 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d100)))) {
        emlrtIntegerCheckR2012b(c10_d100, &c10_mi_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i282 = static_cast<int32_T>(c10_d100);
      if ((c10_i282 < 1) || (c10_i282 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i282, 1, 142, &c10_pi_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_o[1] = c10_i282 - 1;
      c10_d101 = c10_o + c10_xi_f;
      if (c10_d101 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d101)))) {
        emlrtIntegerCheckR2012b(c10_d101, &c10_mi_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i284 = static_cast<int32_T>(c10_d101);
      if ((c10_i284 < 1) || (c10_i284 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i284, 1, 142, &c10_pi_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_o[2] = c10_i284 - 1;
      for (c10_i286 = 0; c10_i286 < 3; c10_i286++) {
        c10_c_G[c10_m_cstrInd + 602 * c10_g_o[c10_i286]] = c10_dv1[c10_i286];
      }

      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_rc_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i288 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i288 < 1) || (c10_i288 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i288, 1, 602, &c10_tc_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_lb_data[c10_i288 - 1] = rtMinusInf;
      if (c10_k != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
            (c10_k)))) {
        emlrtIntegerCheckR2012b(c10_k, &c10_qi_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i290 = static_cast<int32_T>(c10_k);
      if ((c10_i290 < 1) || (c10_i290 > 20)) {
        emlrtDynamicBoundsCheckR2012b(c10_i290, 1, 20, &c10_si_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_ri_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i292 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i292 < 1) || (c10_i292 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i292, 1, 602, &c10_ti_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_ub_data[c10_i292 - 1] = c10_T * c10_j_max_est[c10_i290 - 1];
      c10_cstrInd++;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_he_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i294 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i294 < 1) || (c10_i294 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i294, 1, 602, &c10_je_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_p_cstrInd = c10_i294 - 1;
      c10_d104 = c10_o + c10_aprev;
      if (c10_d104 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d104)))) {
        emlrtIntegerCheckR2012b(c10_d104, &c10_ti_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i296 = static_cast<int32_T>(c10_d104);
      if ((c10_i296 < 1) || (c10_i296 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i296, 1, 142, &c10_vi_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i_o[0] = c10_i296 - 1;
      c10_d105 = c10_o + c10_acurr;
      if (c10_d105 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d105)))) {
        emlrtIntegerCheckR2012b(c10_d105, &c10_ti_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i298 = static_cast<int32_T>(c10_d105);
      if ((c10_i298 < 1) || (c10_i298 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i298, 1, 142, &c10_vi_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i_o[1] = c10_i298 - 1;
      c10_d106 = c10_o + c10_xi_f;
      if (c10_d106 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d106)))) {
        emlrtIntegerCheckR2012b(c10_d106, &c10_ti_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i301 = static_cast<int32_T>(c10_d106);
      if ((c10_i301 < 1) || (c10_i301 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i301, 1, 142, &c10_vi_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i_o[2] = c10_i301 - 1;
      for (c10_i302 = 0; c10_i302 < 3; c10_i302++) {
        c10_c_G[c10_p_cstrInd + 602 * c10_i_o[c10_i302]] = c10_dv2[c10_i302];
      }

      if (c10_k != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
            (c10_k)))) {
        emlrtIntegerCheckR2012b(c10_k, &c10_wi_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i304 = static_cast<int32_T>(c10_k);
      if ((c10_i304 < 1) || (c10_i304 > 20)) {
        emlrtDynamicBoundsCheckR2012b(c10_i304, 1, 20, &c10_yi_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_xi_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i306 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i306 < 1) || (c10_i306 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i306, 1, 602, &c10_aj_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_lb_data[c10_i306 - 1] = c10_T * c10_j_min_est[c10_i304 - 1];
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_of_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i307 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i307 < 1) || (c10_i307 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i307, 1, 602, &c10_qf_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_ub_data[c10_i307 - 1] = rtInf;
      c10_cstrInd++;
    } else {
      covrtEmlMcdcEval(chartInstance->c10_covrtInstance, 14U, 0, 0, false);
      covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 9, false);
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_ie_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i277 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i277 < 1) || (c10_i277 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i277, 1, 602, &c10_ke_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_k_cstrInd = c10_i277 - 1;
      c10_d97 = c10_o + c10_acurr;
      if (c10_d97 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d97)))) {
        emlrtIntegerCheckR2012b(c10_d97, &c10_ki_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i279 = static_cast<int32_T>(c10_d97);
      if ((c10_i279 < 1) || (c10_i279 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i279, 1, 142, &c10_oi_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_f_o[0] = c10_i279 - 1;
      c10_d99 = c10_o + c10_xi_f;
      if (c10_d99 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d99)))) {
        emlrtIntegerCheckR2012b(c10_d99, &c10_ki_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i281 = static_cast<int32_T>(c10_d99);
      if ((c10_i281 < 1) || (c10_i281 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i281, 1, 142, &c10_oi_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_f_o[1] = c10_i281 - 1;
      for (c10_i283 = 0; c10_i283 < 2; c10_i283++) {
        c10_c_G[c10_k_cstrInd + 602 * c10_f_o[c10_i283]] = 1.0 + -2.0 *
          static_cast<real_T>(c10_i283);
      }

      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_sc_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i285 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i285 < 1) || (c10_i285 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i285, 1, 602, &c10_uc_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_lb_data[c10_i285 - 1] = rtMinusInf;
      if (c10_k != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
            (c10_k)))) {
        emlrtIntegerCheckR2012b(c10_k, &c10_oi_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i287 = static_cast<int32_T>(c10_k);
      if ((c10_i287 < 1) || (c10_i287 > 20)) {
        emlrtDynamicBoundsCheckR2012b(c10_i287, 1, 20, &c10_qi_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_pi_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i289 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i289 < 1) || (c10_i289 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i289, 1, 602, &c10_ri_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_ub_data[c10_i289 - 1] = c10_T * c10_j_max_est[c10_i287 - 1] +
        c10_b_a_minus1;
      c10_cstrInd++;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_je_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i291 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i291 < 1) || (c10_i291 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i291, 1, 602, &c10_me_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_o_cstrInd = c10_i291 - 1;
      c10_d102 = c10_o + c10_acurr;
      if (c10_d102 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d102)))) {
        emlrtIntegerCheckR2012b(c10_d102, &c10_si_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i293 = static_cast<int32_T>(c10_d102);
      if ((c10_i293 < 1) || (c10_i293 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i293, 1, 142, &c10_ui_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_h_o[0] = c10_i293 - 1;
      c10_d103 = c10_o + c10_xi_f;
      if (c10_d103 != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_d103)))) {
        emlrtIntegerCheckR2012b(c10_d103, &c10_si_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i295 = static_cast<int32_T>(c10_d103);
      if ((c10_i295 < 1) || (c10_i295 > 142)) {
        emlrtDynamicBoundsCheckR2012b(c10_i295, 1, 142, &c10_ui_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_h_o[1] = c10_i295 - 1;
      for (c10_i297 = 0; c10_i297 < 2; c10_i297++) {
        c10_c_G[c10_o_cstrInd + 602 * c10_h_o[c10_i297]] = 1.0;
      }

      if (c10_k != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
            (c10_k)))) {
        emlrtIntegerCheckR2012b(c10_k, &c10_ui_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i299 = static_cast<int32_T>(c10_k);
      if ((c10_i299 < 1) || (c10_i299 > 20)) {
        emlrtDynamicBoundsCheckR2012b(c10_i299, 1, 20, &c10_wi_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_vi_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i300 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i300 < 1) || (c10_i300 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i300, 1, 602, &c10_xi_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_lb_data[c10_i300 - 1] = c10_T * c10_j_min_est[c10_i299 - 1] +
        c10_b_a_minus1;
      if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_cstrInd)))) {
        emlrtIntegerCheckR2012b(c10_cstrInd, &c10_pf_emlrtDCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_i303 = static_cast<int32_T>(c10_cstrInd);
      if ((c10_i303 < 1) || (c10_i303 > 602)) {
        emlrtDynamicBoundsCheckR2012b(c10_i303, 1, 602, &c10_rf_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_g_ub_data[c10_i303 - 1] = rtInf;
      c10_cstrInd++;
    }

    if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
         (muDoubleScalarFloor(c10_cstrInd)))) {
      emlrtIntegerCheckR2012b(c10_cstrInd, &c10_ke_emlrtDCI, (emlrtConstCTX)
        c10_sp);
    }

    c10_i305 = static_cast<int32_T>(c10_cstrInd);
    if ((c10_i305 < 1) || (c10_i305 > 602)) {
      emlrtDynamicBoundsCheckR2012b(c10_i305, 1, 602, &c10_oe_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_q_cstrInd = c10_i305 - 1;
    c10_d107 = c10_o + c10_vcurr;
    if (c10_d107 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d107)))) {
      emlrtIntegerCheckR2012b(c10_d107, &c10_yi_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i308 = static_cast<int32_T>(c10_d107);
    if ((c10_i308 < 1) || (c10_i308 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i308, 1, 142, &c10_bj_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_j_o[0] = c10_i308 - 1;
    c10_d108 = c10_o + c10_xi_v;
    if (c10_d108 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d108)))) {
      emlrtIntegerCheckR2012b(c10_d108, &c10_yi_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i309 = static_cast<int32_T>(c10_d108);
    if ((c10_i309 < 1) || (c10_i309 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i309, 1, 142, &c10_bj_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_j_o[1] = c10_i309 - 1;
    for (c10_i310 = 0; c10_i310 < 2; c10_i310++) {
      c10_c_G[c10_q_cstrInd + 602 * c10_j_o[c10_i310]] = 1.0;
    }

    if (c10_k != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_k)))) {
      emlrtIntegerCheckR2012b(c10_k, &c10_aj_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i311 = static_cast<int32_T>(c10_k);
    if ((c10_i311 < 1) || (c10_i311 > 20)) {
      emlrtDynamicBoundsCheckR2012b(c10_i311, 1, 20, &c10_cj_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
         (muDoubleScalarFloor(c10_cstrInd)))) {
      emlrtIntegerCheckR2012b(c10_cstrInd, &c10_bj_emlrtDCI, (emlrtConstCTX)
        c10_sp);
    }

    c10_i312 = static_cast<int32_T>(c10_cstrInd);
    if ((c10_i312 < 1) || (c10_i312 > 602)) {
      emlrtDynamicBoundsCheckR2012b(c10_i312, 1, 602, &c10_dj_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_g_lb_data[c10_i312 - 1] = c10_v_minIncentive[c10_i311 - 1];
    if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
         (muDoubleScalarFloor(c10_cstrInd)))) {
      emlrtIntegerCheckR2012b(c10_cstrInd, &c10_qf_emlrtDCI, (emlrtConstCTX)
        c10_sp);
    }

    c10_i313 = static_cast<int32_T>(c10_cstrInd);
    if ((c10_i313 < 1) || (c10_i313 > 602)) {
      emlrtDynamicBoundsCheckR2012b(c10_i313, 1, 602, &c10_sf_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_g_ub_data[c10_i313 - 1] = rtInf;
    c10_cstrInd++;
    if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
         (muDoubleScalarFloor(c10_cstrInd)))) {
      emlrtIntegerCheckR2012b(c10_cstrInd, &c10_me_emlrtDCI, (emlrtConstCTX)
        c10_sp);
    }

    c10_i314 = static_cast<int32_T>(c10_cstrInd);
    if ((c10_i314 < 1) || (c10_i314 > 602)) {
      emlrtDynamicBoundsCheckR2012b(c10_i314, 1, 602, &c10_pe_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_r_cstrInd = c10_i314 - 1;
    c10_d109 = c10_o + c10_scurr;
    if (c10_d109 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d109)))) {
      emlrtIntegerCheckR2012b(c10_d109, &c10_cj_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i315 = static_cast<int32_T>(c10_d109);
    if ((c10_i315 < 1) || (c10_i315 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i315, 1, 142, &c10_ej_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_k_o[0] = c10_i315 - 1;
    c10_d110 = c10_o + c10_xi_s;
    if (c10_d110 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d110)))) {
      emlrtIntegerCheckR2012b(c10_d110, &c10_cj_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i316 = static_cast<int32_T>(c10_d110);
    if ((c10_i316 < 1) || (c10_i316 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i316, 1, 142, &c10_ej_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_k_o[1] = c10_i316 - 1;
    for (c10_i317 = 0; c10_i317 < 2; c10_i317++) {
      c10_c_G[c10_r_cstrInd + 602 * c10_k_o[c10_i317]] = 1.0 + -2.0 *
        static_cast<real_T>(c10_i317);
    }

    if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
         (muDoubleScalarFloor(c10_cstrInd)))) {
      emlrtIntegerCheckR2012b(c10_cstrInd, &c10_tc_emlrtDCI, (emlrtConstCTX)
        c10_sp);
    }

    c10_i318 = static_cast<int32_T>(c10_cstrInd);
    if ((c10_i318 < 1) || (c10_i318 > 602)) {
      emlrtDynamicBoundsCheckR2012b(c10_i318, 1, 602, &c10_vc_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_g_lb_data[c10_i318 - 1] = rtMinusInf;
    if (c10_k != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_k)))) {
      emlrtIntegerCheckR2012b(c10_k, &c10_dj_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i319 = static_cast<int32_T>(c10_k);
    if ((c10_i319 < 1) || (c10_i319 > 20)) {
      emlrtDynamicBoundsCheckR2012b(c10_i319, 1, 20, &c10_fj_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
         (muDoubleScalarFloor(c10_cstrInd)))) {
      emlrtIntegerCheckR2012b(c10_cstrInd, &c10_ej_emlrtDCI, (emlrtConstCTX)
        c10_sp);
    }

    c10_i320 = static_cast<int32_T>(c10_cstrInd);
    if ((c10_i320 < 1) || (c10_i320 > 602)) {
      emlrtDynamicBoundsCheckR2012b(c10_i320, 1, 602, &c10_gj_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_g_ub_data[c10_i320 - 1] = c10_b_s_tv_est[c10_i319 - 1] - c10_h_min;
    c10_cstrInd++;
    if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
         (muDoubleScalarFloor(c10_cstrInd)))) {
      emlrtIntegerCheckR2012b(c10_cstrInd, &c10_oe_emlrtDCI, (emlrtConstCTX)
        c10_sp);
    }

    c10_i321 = static_cast<int32_T>(c10_cstrInd);
    if ((c10_i321 < 1) || (c10_i321 > 602)) {
      emlrtDynamicBoundsCheckR2012b(c10_i321, 1, 602, &c10_qe_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_s_cstrInd = c10_i321 - 1;
    c10_d111 = c10_o + c10_scurr;
    if (c10_d111 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d111)))) {
      emlrtIntegerCheckR2012b(c10_d111, &c10_fj_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i322 = static_cast<int32_T>(c10_d111);
    if ((c10_i322 < 1) || (c10_i322 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i322, 1, 142, &c10_hj_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_m_o[0] = c10_i322 - 1;
    c10_d112 = c10_o + c10_vcurr;
    if (c10_d112 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d112)))) {
      emlrtIntegerCheckR2012b(c10_d112, &c10_fj_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i323 = static_cast<int32_T>(c10_d112);
    if ((c10_i323 < 1) || (c10_i323 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i323, 1, 142, &c10_hj_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_m_o[1] = c10_i323 - 1;
    c10_d113 = c10_o + c10_xi_s;
    if (c10_d113 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d113)))) {
      emlrtIntegerCheckR2012b(c10_d113, &c10_fj_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i324 = static_cast<int32_T>(c10_d113);
    if ((c10_i324 < 1) || (c10_i324 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i324, 1, 142, &c10_hj_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_m_o[2] = c10_i324 - 1;
    c10_c_G[c10_s_cstrInd + 602 * c10_m_o[0]] = 1.0;
    c10_c_G[c10_s_cstrInd + 602 * c10_m_o[1]] = c10_tau_min;
    c10_c_G[c10_s_cstrInd + 602 * c10_m_o[2]] = -1.0;
    if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
         (muDoubleScalarFloor(c10_cstrInd)))) {
      emlrtIntegerCheckR2012b(c10_cstrInd, &c10_uc_emlrtDCI, (emlrtConstCTX)
        c10_sp);
    }

    c10_i325 = static_cast<int32_T>(c10_cstrInd);
    if ((c10_i325 < 1) || (c10_i325 > 602)) {
      emlrtDynamicBoundsCheckR2012b(c10_i325, 1, 602, &c10_wc_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_g_lb_data[c10_i325 - 1] = rtMinusInf;
    if (c10_k != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_k)))) {
      emlrtIntegerCheckR2012b(c10_k, &c10_gj_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i326 = static_cast<int32_T>(c10_k);
    if ((c10_i326 < 1) || (c10_i326 > 20)) {
      emlrtDynamicBoundsCheckR2012b(c10_i326, 1, 20, &c10_ij_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
         (muDoubleScalarFloor(c10_cstrInd)))) {
      emlrtIntegerCheckR2012b(c10_cstrInd, &c10_hj_emlrtDCI, (emlrtConstCTX)
        c10_sp);
    }

    c10_i327 = static_cast<int32_T>(c10_cstrInd);
    if ((c10_i327 < 1) || (c10_i327 > 602)) {
      emlrtDynamicBoundsCheckR2012b(c10_i327, 1, 602, &c10_jj_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_g_ub_data[c10_i327 - 1] = c10_b_s_tv_est[c10_i326 - 1];
    c10_cstrInd++;
    if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
         (muDoubleScalarFloor(c10_cstrInd)))) {
      emlrtIntegerCheckR2012b(c10_cstrInd, &c10_pe_emlrtDCI, (emlrtConstCTX)
        c10_sp);
    }

    c10_i328 = static_cast<int32_T>(c10_cstrInd);
    if ((c10_i328 < 1) || (c10_i328 > 602)) {
      emlrtDynamicBoundsCheckR2012b(c10_i328, 1, 602, &c10_re_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_t_cstrInd = c10_i328 - 1;
    c10_d114 = c10_o + c10_scurr;
    if (c10_d114 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d114)))) {
      emlrtIntegerCheckR2012b(c10_d114, &c10_ij_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i329 = static_cast<int32_T>(c10_d114);
    if ((c10_i329 < 1) || (c10_i329 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i329, 1, 142, &c10_kj_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_o_o[0] = c10_i329 - 1;
    c10_d115 = c10_o + c10_vcurr;
    if (c10_d115 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d115)))) {
      emlrtIntegerCheckR2012b(c10_d115, &c10_ij_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i330 = static_cast<int32_T>(c10_d115);
    if ((c10_i330 < 1) || (c10_i330 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i330, 1, 142, &c10_kj_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_o_o[1] = c10_i330 - 1;
    c10_d116 = c10_o + c10_xi_h;
    if (c10_d116 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_d116)))) {
      emlrtIntegerCheckR2012b(c10_d116, &c10_ij_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i331 = static_cast<int32_T>(c10_d116);
    if ((c10_i331 < 1) || (c10_i331 > 142)) {
      emlrtDynamicBoundsCheckR2012b(c10_i331, 1, 142, &c10_kj_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_o_o[2] = c10_i331 - 1;
    c10_c_G[c10_t_cstrInd + 602 * c10_o_o[0]] = 1.0;
    if (c10_k != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_k)))) {
      emlrtIntegerCheckR2012b(c10_k, &c10_jj_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i332 = static_cast<int32_T>(c10_k);
    if ((c10_i332 < 1) || (c10_i332 > 20)) {
      emlrtDynamicBoundsCheckR2012b(c10_i332, 1, 20, &c10_mj_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_c_G[c10_t_cstrInd + 602 * c10_o_o[1]] = 2.0 + -0.038381 *
      c10_b_v_est[c10_i332 - 1];
    c10_c_G[c10_t_cstrInd + 602 * c10_o_o[2]] = -1.0;
    if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
         (muDoubleScalarFloor(c10_cstrInd)))) {
      emlrtIntegerCheckR2012b(c10_cstrInd, &c10_vc_emlrtDCI, (emlrtConstCTX)
        c10_sp);
    }

    c10_i333 = static_cast<int32_T>(c10_cstrInd);
    if ((c10_i333 < 1) || (c10_i333 > 602)) {
      emlrtDynamicBoundsCheckR2012b(c10_i333, 1, 602, &c10_xc_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_g_lb_data[c10_i333 - 1] = rtMinusInf;
    if (c10_k != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_k)))) {
      emlrtIntegerCheckR2012b(c10_k, &c10_kj_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i334 = static_cast<int32_T>(c10_k);
    if ((c10_i334 < 1) || (c10_i334 > 20)) {
      emlrtDynamicBoundsCheckR2012b(c10_i334, 1, 20, &c10_oj_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
         (muDoubleScalarFloor(c10_cstrInd)))) {
      emlrtIntegerCheckR2012b(c10_cstrInd, &c10_mj_emlrtDCI, (emlrtConstCTX)
        c10_sp);
    }

    c10_i335 = static_cast<int32_T>(c10_cstrInd);
    if ((c10_i335 < 1) || (c10_i335 > 602)) {
      emlrtDynamicBoundsCheckR2012b(c10_i335, 1, 602, &c10_pj_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_g_ub_data[c10_i335 - 1] = c10_b_s_tv_est[c10_i334 - 1] - 2.0;
    c10_cstrInd++;
    _SF_MEX_LISTEN_FOR_CTRL_C(chartInstance->S);
  }

  covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 0, 0, 0);
  c10_o = 20.0 * c10_b_n_x_u;
  if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
       (muDoubleScalarFloor(c10_cstrInd)))) {
    emlrtIntegerCheckR2012b(c10_cstrInd, &c10_qe_emlrtDCI, (emlrtConstCTX)c10_sp);
  }

  c10_i31 = static_cast<int32_T>(c10_cstrInd);
  if ((c10_i31 < 1) || (c10_i31 > 602)) {
    emlrtDynamicBoundsCheckR2012b(c10_i31, 1, 602, &c10_se_emlrtBCI,
      (emlrtConstCTX)c10_sp);
  }

  c10_d8 = c10_o + c10_scurr;
  if (c10_d8 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
        (c10_d8)))) {
    emlrtIntegerCheckR2012b(c10_d8, &c10_re_emlrtDCI, (emlrtConstCTX)c10_sp);
  }

  c10_i33 = static_cast<int32_T>(c10_d8);
  if ((c10_i33 < 1) || (c10_i33 > 142)) {
    emlrtDynamicBoundsCheckR2012b(c10_i33, 1, 142, &c10_te_emlrtBCI,
      (emlrtConstCTX)c10_sp);
  }

  c10_c_G[(c10_i31 + 602 * (c10_i33 - 1)) - 1] = 1.0;
  if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
       (muDoubleScalarFloor(c10_cstrInd)))) {
    emlrtIntegerCheckR2012b(c10_cstrInd, &c10_wc_emlrtDCI, (emlrtConstCTX)c10_sp);
  }

  c10_i38 = static_cast<int32_T>(c10_cstrInd);
  if ((c10_i38 < 1) || (c10_i38 > 602)) {
    emlrtDynamicBoundsCheckR2012b(c10_i38, 1, 602, &c10_yc_emlrtBCI,
      (emlrtConstCTX)c10_sp);
  }

  c10_g_lb_data[c10_i38 - 1] = rtMinusInf;
  if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
       (muDoubleScalarFloor(c10_cstrInd)))) {
    emlrtIntegerCheckR2012b(c10_cstrInd, &c10_jg_emlrtDCI, (emlrtConstCTX)c10_sp);
  }

  c10_i45 = static_cast<int32_T>(c10_cstrInd);
  if ((c10_i45 < 1) || (c10_i45 > 602)) {
    emlrtDynamicBoundsCheckR2012b(c10_i45, 1, 602, &c10_mg_emlrtBCI,
      (emlrtConstCTX)c10_sp);
  }

  c10_g_ub_data[c10_i45 - 1] = c10_b_s_tv_est[19] - c10_h_min;
  c10_cstrInd++;
  if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
       (muDoubleScalarFloor(c10_cstrInd)))) {
    emlrtIntegerCheckR2012b(c10_cstrInd, &c10_se_emlrtDCI, (emlrtConstCTX)c10_sp);
  }

  c10_i51 = static_cast<int32_T>(c10_cstrInd);
  if ((c10_i51 < 1) || (c10_i51 > 602)) {
    emlrtDynamicBoundsCheckR2012b(c10_i51, 1, 602, &c10_ue_emlrtBCI,
      (emlrtConstCTX)c10_sp);
  }

  c10_b_cstrInd = c10_i51 - 1;
  c10_d14 = c10_o + c10_scurr;
  if (c10_d14 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
        (c10_d14)))) {
    emlrtIntegerCheckR2012b(c10_d14, &c10_kg_emlrtDCI, (emlrtConstCTX)c10_sp);
  }

  c10_i62 = static_cast<int32_T>(c10_d14);
  if ((c10_i62 < 1) || (c10_i62 > 142)) {
    emlrtDynamicBoundsCheckR2012b(c10_i62, 1, 142, &c10_og_emlrtBCI,
      (emlrtConstCTX)c10_sp);
  }

  c10_b_o[0] = c10_i62 - 1;
  c10_d18 = c10_o + c10_vcurr;
  if (c10_d18 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
        (c10_d18)))) {
    emlrtIntegerCheckR2012b(c10_d18, &c10_kg_emlrtDCI, (emlrtConstCTX)c10_sp);
  }

  c10_i67 = static_cast<int32_T>(c10_d18);
  if ((c10_i67 < 1) || (c10_i67 > 142)) {
    emlrtDynamicBoundsCheckR2012b(c10_i67, 1, 142, &c10_og_emlrtBCI,
      (emlrtConstCTX)c10_sp);
  }

  c10_b_o[1] = c10_i67 - 1;
  c10_c_G[c10_b_cstrInd + 602 * c10_b_o[0]] = 1.0;
  c10_c_G[c10_b_cstrInd + 602 * c10_b_o[1]] = c10_tau_min;
  if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
       (muDoubleScalarFloor(c10_cstrInd)))) {
    emlrtIntegerCheckR2012b(c10_cstrInd, &c10_xc_emlrtDCI, (emlrtConstCTX)c10_sp);
  }

  c10_i73 = static_cast<int32_T>(c10_cstrInd);
  if ((c10_i73 < 1) || (c10_i73 > 602)) {
    emlrtDynamicBoundsCheckR2012b(c10_i73, 1, 602, &c10_ad_emlrtBCI,
      (emlrtConstCTX)c10_sp);
  }

  c10_g_lb_data[c10_i73 - 1] = rtMinusInf;
  if (c10_cstrInd != static_cast<real_T>(static_cast<int32_T>
       (muDoubleScalarFloor(c10_cstrInd)))) {
    emlrtIntegerCheckR2012b(c10_cstrInd, &c10_mg_emlrtDCI, (emlrtConstCTX)c10_sp);
  }

  c10_i78 = static_cast<int32_T>(c10_cstrInd);
  if ((c10_i78 < 1) || (c10_i78 > 602)) {
    emlrtDynamicBoundsCheckR2012b(c10_i78, 1, 602, &c10_pg_emlrtBCI,
      (emlrtConstCTX)c10_sp);
  }

  c10_g_ub_data[c10_i78 - 1] = c10_b_s_tv_est[19];
}

static void c10_SetParametersInternally(SFc10_ACCMPCInstanceStruct
  *chartInstance, c10_struct_g7LanElifcGF2oK3jOrI5C *c10_b_V)
{
  static real_T c10_dv2[8] = { 4.714, 3.314, 2.106, 1.667, 1.285, 1.0, 0.839,
    0.667 };

  static real_T c10_dv[7] = { 3.9682539682539679, 6.6137566137566131,
    7.9365079365079358, 10.582010582010581, 14.550264550264549,
    18.518518518518519, 22.486772486772484 };

  static real_T c10_dv1[7] = { 1.3888888888888888, 6.9444444444444446,
    5.5555555555555554, 8.3333333333333339, 11.111111111111111,
    13.888888888888889, 16.666666666666668 };

  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  covrtEmlFcnEval(chartInstance->c10_covrtInstance, 14U, 0, 1);
  c10_b_V->m = 2620.0;
  c10_b_V->A_f = 4.614;
  c10_b_V->c_d = 0.46;
  c10_b_V->L = 3.52;
  c10_b_V->h_g = 1.2;
  c10_b_V->WD_s_F = 0.45;
  c10_b_V->L_f = 1.584;
  c10_b_V->L_r = 1.936;
  c10_b_V->F0 = 275.0;
  c10_b_V->F1 = 0.0;
  c10_b_V->F2 = 1.305072;
  c10_b_V->k00 = -2.134;
  c10_b_V->k10 = 0.01164;
  c10_b_V->k01 = 0.01041;
  c10_b_V->p00 = -1.178;
  c10_b_V->p10 = 0.1154;
  c10_b_V->p01 = 0.001764;
  c10_b_V->P_m_max = 125000.0;
  c10_b_V->T_m_max = 250.0;
  c10_b_V->omega_m_r = 502.6548245743669;
  c10_b_V->omega_m_max = 1193.8052083641214;
  c10_b_V->c_r = 0.0107;
  c10_b_V->R_w = 0.361;
  c10_b_V->beta_gb = 9.665;
  c10_b_V->beta_fd = 1.0;
  c10_b_V->phi = 26.7729;
  for (c10_i = 0; c10_i < 7; c10_i++) {
    c10_b_V->upSpd[c10_i] = c10_dv[c10_i];
  }

  for (c10_i1 = 0; c10_i1 < 7; c10_i1++) {
    c10_b_V->downSpd[c10_i1] = c10_dv1[c10_i1];
  }

  for (c10_i2 = 0; c10_i2 < 8; c10_i2++) {
    c10_b_V->tau_gb[c10_i2] = c10_dv2[c10_i2];
  }

  c10_b_V->tau_fd = 3.615;
  c10_b_V->eta_drive = 0.88359999999999994;
  c10_b_V->U_N = 353.0;
  c10_b_V->Q_N = 94.0;
  c10_b_V->E_b_gross = 1.1952000000000001E+8;
  c10_b_V->E_b_net = 9.792E+7;
  c10_b_V->v_max = 41.666666666666664;
  c10_b_V->t_acc = 7.3;
  c10_b_V->E_v = 471.6;
  c10_b_V->D_r = 300000.0;
  c10_b_V->eta_i = 0.95;
  c10_b_V->eta_gb = 0.985;
  c10_b_V->eta_fd = 0.93;
  c10_b_V->eta_TF = 0.9161;
  c10_b_V->lambda = 1.05;
  c10_b_V->P_aux = 250.0;
  c10_b_V->mu = 0.8;
  c10_b_V->rho_a = 1.225;
  c10_b_V->g = 9.81;
  c10_b_V->zeta_a = 1.3;
}

static void c10_LUTgearInternally(SFc10_ACCMPCInstanceStruct *chartInstance,
  c10_captured_var *c10_b_V, real_T c10_b_v_measured, real_T *c10_tau_measured,
  real_T *c10_gear_measured)
{
  covrtEmlFcnEval(chartInstance->c10_covrtInstance, 14U, 0, 3);
  covrtEmlFcnEval(chartInstance->c10_covrtInstance, 14U, 0, 4);
  c10_b_V->contents = c10_r;
  if (covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 32,
                     covrtRelationalopUpdateFcn(chartInstance->c10_covrtInstance,
        14U, 0U, 35U, c10_b_v_measured, c10_b_V->contents.upSpd[0], -1, 2U,
        static_cast<int32_T>(c10_b_v_measured < c10_b_V->contents.upSpd[0])))) {
    *c10_tau_measured = c10_b_V->contents.tau_gb[0];
    *c10_gear_measured = 1.0;
  } else if (covrtEmlCondEval(chartInstance->c10_covrtInstance, 14U, 0, 8,
              covrtRelationalopUpdateFcn(chartInstance->c10_covrtInstance, 14U,
               0U, 36U, c10_b_v_measured, c10_b_V->contents.upSpd[0], -1, 4U,
               static_cast<int32_T>(c10_b_v_measured > c10_b_V->contents.upSpd[0])))
             && covrtEmlCondEval(chartInstance->c10_covrtInstance, 14U, 0, 9,
              covrtRelationalopUpdateFcn(chartInstance->c10_covrtInstance, 14U,
               0U, 37U, c10_b_v_measured, c10_b_V->contents.upSpd[1], -1, 2U,
               static_cast<int32_T>(c10_b_v_measured < c10_b_V->contents.upSpd[1]))))
  {
    covrtEmlMcdcEval(chartInstance->c10_covrtInstance, 14U, 0, 4, true);
    covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 33, true);
    *c10_tau_measured = c10_b_V->contents.tau_gb[1];
    *c10_gear_measured = 2.0;
  } else {
    covrtEmlMcdcEval(chartInstance->c10_covrtInstance, 14U, 0, 4, false);
    covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 33, false);
    if (covrtEmlCondEval(chartInstance->c10_covrtInstance, 14U, 0, 10,
                         covrtRelationalopUpdateFcn
                         (chartInstance->c10_covrtInstance, 14U, 0U, 38U,
                          c10_b_v_measured, c10_b_V->contents.upSpd[1], -1, 4U,
                          static_cast<int32_T>(c10_b_v_measured >
           c10_b_V->contents.upSpd[1]))) && covrtEmlCondEval
        (chartInstance->c10_covrtInstance, 14U, 0, 11,
         covrtRelationalopUpdateFcn(chartInstance->c10_covrtInstance, 14U, 0U,
          39U, c10_b_v_measured, c10_b_V->contents.upSpd[2], -1, 2U,
          static_cast<int32_T>(c10_b_v_measured < c10_b_V->contents.upSpd[2]))))
    {
      covrtEmlMcdcEval(chartInstance->c10_covrtInstance, 14U, 0, 5, true);
      covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 34, true);
      *c10_tau_measured = c10_b_V->contents.tau_gb[2];
      *c10_gear_measured = 3.0;
    } else {
      covrtEmlMcdcEval(chartInstance->c10_covrtInstance, 14U, 0, 5, false);
      covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 34, false);
      if (covrtEmlCondEval(chartInstance->c10_covrtInstance, 14U, 0, 12,
                           covrtRelationalopUpdateFcn
                           (chartInstance->c10_covrtInstance, 14U, 0U, 40U,
                            c10_b_v_measured, c10_b_V->contents.upSpd[2], -1, 4U,
                            static_cast<int32_T>(c10_b_v_measured >
             c10_b_V->contents.upSpd[2]))) && covrtEmlCondEval
          (chartInstance->c10_covrtInstance, 14U, 0, 13,
           covrtRelationalopUpdateFcn(chartInstance->c10_covrtInstance, 14U, 0U,
            41U, c10_b_v_measured, c10_b_V->contents.upSpd[3], -1, 2U,
            static_cast<int32_T>(c10_b_v_measured < c10_b_V->contents.upSpd[3]))))
      {
        covrtEmlMcdcEval(chartInstance->c10_covrtInstance, 14U, 0, 6, true);
        covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 35, true);
        *c10_tau_measured = c10_b_V->contents.tau_gb[3];
        *c10_gear_measured = 4.0;
      } else {
        covrtEmlMcdcEval(chartInstance->c10_covrtInstance, 14U, 0, 6, false);
        covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 35, false);
        if (covrtEmlCondEval(chartInstance->c10_covrtInstance, 14U, 0, 14,
                             covrtRelationalopUpdateFcn
                             (chartInstance->c10_covrtInstance, 14U, 0U, 42U,
                              c10_b_v_measured, c10_b_V->contents.upSpd[3], -1,
                              4U, static_cast<int32_T>(c10_b_v_measured >
               c10_b_V->contents.upSpd[3]))) && covrtEmlCondEval
            (chartInstance->c10_covrtInstance, 14U, 0, 15,
             covrtRelationalopUpdateFcn(chartInstance->c10_covrtInstance, 14U,
              0U, 43U, c10_b_v_measured, c10_b_V->contents.upSpd[4], -1, 2U,
              static_cast<int32_T>(c10_b_v_measured < c10_b_V->contents.upSpd[4]))))
        {
          covrtEmlMcdcEval(chartInstance->c10_covrtInstance, 14U, 0, 7, true);
          covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 36, true);
          *c10_tau_measured = c10_b_V->contents.tau_gb[4];
          *c10_gear_measured = 5.0;
        } else {
          covrtEmlMcdcEval(chartInstance->c10_covrtInstance, 14U, 0, 7, false);
          covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 36, false);
          if (covrtEmlCondEval(chartInstance->c10_covrtInstance, 14U, 0, 16,
                               covrtRelationalopUpdateFcn
                               (chartInstance->c10_covrtInstance, 14U, 0U, 44U,
                                c10_b_v_measured, c10_b_V->contents.upSpd[4], -1,
                                4U, static_cast<int32_T>(c10_b_v_measured >
                 c10_b_V->contents.upSpd[4]))) && covrtEmlCondEval
              (chartInstance->c10_covrtInstance, 14U, 0, 17,
               covrtRelationalopUpdateFcn(chartInstance->c10_covrtInstance, 14U,
                0U, 45U, c10_b_v_measured, c10_b_V->contents.upSpd[5], -1, 2U,
                static_cast<int32_T>(c10_b_v_measured < c10_b_V->contents.upSpd
                 [5])))) {
            covrtEmlMcdcEval(chartInstance->c10_covrtInstance, 14U, 0, 8, true);
            covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 37, true);
            *c10_tau_measured = c10_b_V->contents.tau_gb[5];
            *c10_gear_measured = 6.0;
          } else {
            covrtEmlMcdcEval(chartInstance->c10_covrtInstance, 14U, 0, 8, false);
            covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 37, false);
            if (covrtEmlCondEval(chartInstance->c10_covrtInstance, 14U, 0, 18,
                                 covrtRelationalopUpdateFcn
                                 (chartInstance->c10_covrtInstance, 14U, 0U, 46U,
                                  c10_b_v_measured, c10_b_V->contents.upSpd[5],
                                  -1, 4U, static_cast<int32_T>(c10_b_v_measured >
                   c10_b_V->contents.upSpd[5]))) && covrtEmlCondEval
                (chartInstance->c10_covrtInstance, 14U, 0, 19,
                 covrtRelationalopUpdateFcn(chartInstance->c10_covrtInstance,
                  14U, 0U, 47U, c10_b_v_measured, c10_b_V->contents.upSpd[6], -1,
                  2U, static_cast<int32_T>(c10_b_v_measured <
                   c10_b_V->contents.upSpd[6])))) {
              covrtEmlMcdcEval(chartInstance->c10_covrtInstance, 14U, 0, 9, true);
              covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 38, true);
              *c10_tau_measured = c10_b_V->contents.tau_gb[6];
              *c10_gear_measured = 7.0;
            } else {
              covrtEmlMcdcEval(chartInstance->c10_covrtInstance, 14U, 0, 9,
                               false);
              covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 38, false);
              if (covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 39,
                                 covrtRelationalopUpdateFcn
                                 (chartInstance->c10_covrtInstance, 14U, 0U, 48U,
                                  c10_b_v_measured, c10_b_V->contents.upSpd[6],
                                  -1, 4U, static_cast<int32_T>(c10_b_v_measured >
                     c10_b_V->contents.upSpd[6])))) {
                *c10_tau_measured = c10_b_V->contents.tau_gb[7];
                *c10_gear_measured = 8.0;
              } else {
                *c10_tau_measured = 0.0;
                *c10_gear_measured = 0.0;
              }
            }
          }
        }
      }
    }
  }
}

static void c10_EstimateBoundsInternally(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_captured_var *c10_b_V,
  c10_captured_var_1 *c10_b_Tvec, c10_s1bpVdlY1OIZfsh1YT30byD *c10_b_OPTsettings,
  real_T c10_b_s_est[20], real_T c10_b_v_est[20], real_T c10_slope_est[20],
  real_T c10_v_lim_max[20], real_T c10_v_curv_max[20], real_T c10_a_min_est[20],
  real_T c10_a_max_est[20], real_T c10_j_min_est[20], real_T c10_j_max_est[20],
  real_T c10_tau_est[20])
{
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  const mxArray *c10_b_y = NULL;
  const mxArray *c10_c_y = NULL;
  const mxArray *c10_d_y = NULL;
  const mxArray *c10_y = NULL;
  real_T c10_curvature[4];
  real_T c10_s_curv[4];
  real_T c10_s_speedLim[4];
  real_T c10_v_speedLim[4];
  real_T c10_s_slope[2];
  real_T c10_slope[2];
  real_T c10_a__2;
  real_T c10_alpha_TTL;
  real_T c10_b_a;
  real_T c10_b_c;
  real_T c10_b_j;
  real_T c10_b_x;
  real_T c10_c_a;
  real_T c10_c_c;
  real_T c10_c_x;
  real_T c10_d;
  real_T c10_d1;
  real_T c10_d10;
  real_T c10_d11;
  real_T c10_d12;
  real_T c10_d13;
  real_T c10_d14;
  real_T c10_d15;
  real_T c10_d16;
  real_T c10_d2;
  real_T c10_d3;
  real_T c10_d4;
  real_T c10_d5;
  real_T c10_d6;
  real_T c10_d7;
  real_T c10_d8;
  real_T c10_d9;
  real_T c10_d_a;
  real_T c10_d_x;
  real_T c10_e_a;
  real_T c10_e_i;
  real_T c10_e_x;
  real_T c10_f_a;
  real_T c10_f_x;
  real_T c10_g_a;
  real_T c10_h_a;
  real_T c10_i_a;
  real_T c10_j_a;
  real_T c10_k_a;
  real_T c10_m_a;
  real_T c10_o_a;
  real_T c10_p_a;
  real_T c10_q_a;
  real_T c10_r_a;
  real_T c10_s_a;
  real_T c10_x;
  int32_T c10_c_i;
  int32_T c10_c_j;
  int32_T c10_exitg1;
  int32_T c10_f_i;
  int32_T c10_h_i;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i19;
  int32_T c10_i2;
  int32_T c10_i20;
  int32_T c10_i21;
  int32_T c10_i22;
  int32_T c10_i23;
  int32_T c10_i24;
  int32_T c10_i25;
  int32_T c10_i26;
  int32_T c10_i27;
  int32_T c10_i28;
  int32_T c10_i29;
  int32_T c10_i3;
  int32_T c10_i30;
  int32_T c10_i31;
  int32_T c10_i32;
  int32_T c10_i33;
  int32_T c10_i34;
  int32_T c10_i35;
  int32_T c10_i36;
  int32_T c10_i37;
  int32_T c10_i38;
  int32_T c10_i39;
  int32_T c10_i4;
  int32_T c10_i40;
  int32_T c10_i41;
  int32_T c10_i42;
  int32_T c10_i43;
  int32_T c10_i44;
  int32_T c10_i45;
  int32_T c10_i46;
  int32_T c10_i47;
  int32_T c10_i48;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_j;
  int32_T c10_j_i;
  int32_T c10_k_i;
  int32_T c10_o_i;
  int32_T c10_p_i;
  boolean_T c10_b_guard1;
  boolean_T c10_b_p;
  boolean_T c10_c_p;
  boolean_T c10_d_p;
  boolean_T c10_e_p;
  boolean_T c10_f_p;
  boolean_T c10_guard1;
  boolean_T c10_guard2;
  boolean_T c10_p;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  covrtEmlFcnEval(chartInstance->c10_covrtInstance, 14U, 0, 2);
  for (c10_i = 0; c10_i < 4; c10_i++) {
    c10_s_speedLim[c10_i] = c10_b_OPTsettings->s_speedLim[c10_i];
  }

  for (c10_i1 = 0; c10_i1 < 4; c10_i1++) {
    c10_v_speedLim[c10_i1] = c10_b_OPTsettings->v_speedLim[c10_i1];
  }

  for (c10_i2 = 0; c10_i2 < 4; c10_i2++) {
    c10_s_curv[c10_i2] = c10_b_OPTsettings->s_curv[c10_i2];
  }

  for (c10_i3 = 0; c10_i3 < 4; c10_i3++) {
    c10_curvature[c10_i3] = c10_b_OPTsettings->curvature[c10_i3];
  }

  for (c10_i4 = 0; c10_i4 < 2; c10_i4++) {
    c10_s_slope[c10_i4] = c10_b_OPTsettings->s_slope[c10_i4];
  }

  for (c10_i5 = 0; c10_i5 < 2; c10_i5++) {
    c10_slope[c10_i5] = c10_b_OPTsettings->slope[c10_i5];
  }

  c10_alpha_TTL = c10_b_OPTsettings->alpha_TTL;
  for (c10_i6 = 0; c10_i6 < 20; c10_i6++) {
    c10_b_Tvec->contents[c10_i6] = c10_b_OPTsettings->Tvec[c10_i6];
  }

  covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 10,
                 covrtRelationalopUpdateFcn(chartInstance->c10_covrtInstance,
    14U, 0U, 11U, 0.0, 1.0, -1, 0U, 0));
  covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 11,
                 covrtRelationalopUpdateFcn(chartInstance->c10_covrtInstance,
    14U, 0U, 12U, 0.0, 2.0, -1, 0U, 0));
  for (c10_c_i = 0; c10_c_i < 20; c10_c_i++) {
    c10_e_i = 1.0 + static_cast<real_T>(c10_c_i);
    covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 0, 1, 1);
    if (c10_e_i != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_e_i)))) {
      emlrtIntegerCheckR2012b(c10_e_i, &c10_ak_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i8 = static_cast<int32_T>(c10_e_i);
    if ((c10_i8 < 1) || (c10_i8 > 20)) {
      emlrtDynamicBoundsCheckR2012b(c10_i8, 1, 20, &c10_ck_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_st.site = &c10_o_emlrtRSI;
    c10_LUTgearInternally(chartInstance, c10_b_V, c10_b_v_est[c10_i8 - 1],
                          &c10_d, &c10_a__2);
    if (c10_e_i != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_e_i)))) {
      emlrtIntegerCheckR2012b(c10_e_i, &c10_yj_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i11 = static_cast<int32_T>(c10_e_i);
    if ((c10_i11 < 1) || (c10_i11 > 20)) {
      emlrtDynamicBoundsCheckR2012b(c10_i11, 1, 20, &c10_bk_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_tau_est[c10_i11 - 1] = c10_d;
    _SF_MEX_LISTEN_FOR_CTRL_C(chartInstance->S);
  }

  covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 0, 1, 0);
  for (c10_i7 = 0; c10_i7 < 20; c10_i7++) {
    c10_slope_est[c10_i7] = 0.0;
  }

  for (c10_f_i = 0; c10_f_i < 20; c10_f_i++) {
    c10_e_i = 1.0 + static_cast<real_T>(c10_f_i);
    covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 0, 2, 1);
    covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 0, 3, 1);
    covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 12, true);
    if (covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 13,
                       covrtRelationalopUpdateFcn
                       (chartInstance->c10_covrtInstance, 14U, 0U, 13U, 1.0, 2.0,
                        -1, 0U, 0))) {
      if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_e_i)))) {
        emlrtIntegerCheckR2012b(c10_e_i, &c10_ck_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i13 = static_cast<int32_T>(c10_e_i);
      if ((c10_i13 < 1) || (c10_i13 > 20)) {
        emlrtDynamicBoundsCheckR2012b(c10_i13, 1, 20, &c10_ek_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_slope_est[c10_i13 - 1] = c10_slope[1];
    } else {
      if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_e_i)))) {
        emlrtIntegerCheckR2012b(c10_e_i, &c10_bk_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i12 = static_cast<int32_T>(c10_e_i);
      if ((c10_i12 < 1) || (c10_i12 > 20)) {
        emlrtDynamicBoundsCheckR2012b(c10_i12, 1, 20, &c10_dk_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_d1 = c10_b_s_est[c10_i12 - 1];
      c10_d2 = c10_s_slope[0];
      c10_guard1 = false;
      if (covrtEmlCondEval(chartInstance->c10_covrtInstance, 14U, 0, 2,
                           covrtRelationalopUpdateFcn
                           (chartInstance->c10_covrtInstance, 14U, 0U, 14U,
                            c10_d1, c10_d2, -1, 5U, static_cast<int32_T>(c10_d1 >=
             c10_d2)))) {
        if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_e_i)))) {
          emlrtIntegerCheckR2012b(c10_e_i, &c10_dk_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i14 = static_cast<int32_T>(c10_e_i);
        if ((c10_i14 < 1) || (c10_i14 > 20)) {
          emlrtDynamicBoundsCheckR2012b(c10_i14, 1, 20, &c10_fk_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_d3 = c10_b_s_est[c10_i14 - 1];
        c10_d4 = c10_s_slope[1];
        if (covrtEmlCondEval(chartInstance->c10_covrtInstance, 14U, 0, 3,
                             covrtRelationalopUpdateFcn
                             (chartInstance->c10_covrtInstance, 14U, 0U, 15U,
                              c10_d3, c10_d4, -1, 2U, static_cast<int32_T>
                              (c10_d3 < c10_d4)))) {
          covrtEmlMcdcEval(chartInstance->c10_covrtInstance, 14U, 0, 1, true);
          covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 14, true);
          if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_e_i)))) {
            emlrtIntegerCheckR2012b(c10_e_i, &c10_ik_emlrtDCI, (emlrtConstCTX)
              c10_sp);
          }

          c10_i21 = static_cast<int32_T>(c10_e_i);
          if ((c10_i21 < 1) || (c10_i21 > 20)) {
            emlrtDynamicBoundsCheckR2012b(c10_i21, 1, 20, &c10_kk_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_slope_est[c10_i21 - 1] = c10_slope[0];
        } else {
          c10_guard1 = true;
        }
      } else {
        c10_guard1 = true;
      }

      if (c10_guard1) {
        covrtEmlMcdcEval(chartInstance->c10_covrtInstance, 14U, 0, 1, false);
        covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 14, false);
        if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_e_i)))) {
          emlrtIntegerCheckR2012b(c10_e_i, &c10_ek_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i17 = static_cast<int32_T>(c10_e_i);
        if ((c10_i17 < 1) || (c10_i17 > 20)) {
          emlrtDynamicBoundsCheckR2012b(c10_i17, 1, 20, &c10_gk_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_slope_est[c10_i17 - 1] = c10_slope[0];
      }
    }

    _SF_MEX_LISTEN_FOR_CTRL_C(chartInstance->S);
  }

  covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 0, 2, 0);
  for (c10_i9 = 0; c10_i9 < 20; c10_i9++) {
    c10_v_lim_max[c10_i9] = 0.0;
  }

  for (c10_h_i = 0; c10_h_i < 20; c10_h_i++) {
    c10_e_i = 1.0 + static_cast<real_T>(c10_h_i);
    covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 0, 4, 1);
    c10_j = 0;
    do {
      c10_exitg1 = 0;
      if (c10_j < 4) {
        c10_b_j = 1.0 + static_cast<real_T>(c10_j);
        covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 0, 5, 1);
        c10_b_guard1 = false;
        c10_guard2 = false;
        if (covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 15,
                           covrtRelationalopUpdateFcn
                           (chartInstance->c10_covrtInstance, 14U, 0U, 16U,
                            c10_b_j, 4.0, -1, 0U, static_cast<int32_T>(c10_b_j ==
               4.0)))) {
          if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_e_i)))) {
            emlrtIntegerCheckR2012b(c10_e_i, &c10_gk_emlrtDCI, (emlrtConstCTX)
              c10_sp);
          }

          c10_i16 = static_cast<int32_T>(c10_e_i);
          if ((c10_i16 < 1) || (c10_i16 > 20)) {
            emlrtDynamicBoundsCheckR2012b(c10_i16, 1, 20, &c10_ik_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_v_lim_max[c10_i16 - 1] = c10_s_speedLim[3];
          c10_b_guard1 = true;
        } else {
          if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_e_i)))) {
            emlrtIntegerCheckR2012b(c10_e_i, &c10_fk_emlrtDCI, (emlrtConstCTX)
              c10_sp);
          }

          c10_i15 = static_cast<int32_T>(c10_e_i);
          if ((c10_i15 < 1) || (c10_i15 > 20)) {
            emlrtDynamicBoundsCheckR2012b(c10_i15, 1, 20, &c10_hk_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_d5 = c10_b_s_est[c10_i15 - 1];
          if (c10_b_j != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_b_j)))) {
            emlrtIntegerCheckR2012b(c10_b_j, &c10_hk_emlrtDCI, (emlrtConstCTX)
              c10_sp);
          }

          c10_i20 = static_cast<int32_T>(c10_b_j);
          if ((c10_i20 < 1) || (c10_i20 > 4)) {
            emlrtDynamicBoundsCheckR2012b(c10_i20, 1, 4, &c10_jk_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_d8 = c10_s_speedLim[c10_i20 - 1];
          if (covrtEmlCondEval(chartInstance->c10_covrtInstance, 14U, 0, 4,
                               covrtRelationalopUpdateFcn
                               (chartInstance->c10_covrtInstance, 14U, 0U, 17U,
                                c10_d5, c10_d8, -1, 5U, static_cast<int32_T>
                                (c10_d5 >= c10_d8)))) {
            if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
                 (muDoubleScalarFloor(c10_e_i)))) {
              emlrtIntegerCheckR2012b(c10_e_i, &c10_jk_emlrtDCI, (emlrtConstCTX)
                c10_sp);
            }

            c10_i25 = static_cast<int32_T>(c10_e_i);
            if ((c10_i25 < 1) || (c10_i25 > 20)) {
              emlrtDynamicBoundsCheckR2012b(c10_i25, 1, 20, &c10_mk_emlrtBCI,
                (emlrtConstCTX)c10_sp);
            }

            c10_d11 = c10_b_s_est[c10_i25 - 1];
            c10_d12 = c10_b_j + 1.0;
            if (c10_d12 != static_cast<real_T>(static_cast<int32_T>
                 (muDoubleScalarFloor(c10_d12)))) {
              emlrtIntegerCheckR2012b(c10_d12, &c10_mk_emlrtDCI, (emlrtConstCTX)
                c10_sp);
            }

            c10_i30 = static_cast<int32_T>(c10_d12);
            if ((c10_i30 < 1) || (c10_i30 > 4)) {
              emlrtDynamicBoundsCheckR2012b(c10_i30, 1, 4, &c10_pk_emlrtBCI,
                (emlrtConstCTX)c10_sp);
            }

            c10_d15 = c10_s_speedLim[c10_i30 - 1];
            if (covrtEmlCondEval(chartInstance->c10_covrtInstance, 14U, 0, 5,
                                 covrtRelationalopUpdateFcn
                                 (chartInstance->c10_covrtInstance, 14U, 0U, 18U,
                                  c10_d11, c10_d15, -1, 2U, static_cast<int32_T>
                                  (c10_d11 < c10_d15)))) {
              covrtEmlMcdcEval(chartInstance->c10_covrtInstance, 14U, 0, 2, true);
              covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 16, true);
              if (c10_b_j != static_cast<real_T>(static_cast<int32_T>
                   (muDoubleScalarFloor(c10_b_j)))) {
                emlrtIntegerCheckR2012b(c10_b_j, &c10_rk_emlrtDCI,
                  (emlrtConstCTX)c10_sp);
              }

              c10_i36 = static_cast<int32_T>(c10_b_j);
              if ((c10_i36 < 1) || (c10_i36 > 4)) {
                emlrtDynamicBoundsCheckR2012b(c10_i36, 1, 4, &c10_tk_emlrtBCI,
                  (emlrtConstCTX)c10_sp);
              }

              if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
                   (muDoubleScalarFloor(c10_e_i)))) {
                emlrtIntegerCheckR2012b(c10_e_i, &c10_sk_emlrtDCI,
                  (emlrtConstCTX)c10_sp);
              }

              c10_i40 = static_cast<int32_T>(c10_e_i);
              if ((c10_i40 < 1) || (c10_i40 > 20)) {
                emlrtDynamicBoundsCheckR2012b(c10_i40, 1, 20, &c10_uk_emlrtBCI,
                  (emlrtConstCTX)c10_sp);
              }

              c10_v_lim_max[c10_i40 - 1] = c10_v_speedLim[c10_i36 - 1];
              c10_exitg1 = 1;
            } else {
              c10_guard2 = true;
            }
          } else {
            c10_guard2 = true;
          }
        }

        if (c10_guard2) {
          covrtEmlMcdcEval(chartInstance->c10_covrtInstance, 14U, 0, 2, false);
          covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 16, false);
          c10_b_guard1 = true;
        }

        if (c10_b_guard1) {
          c10_j++;
          _SF_MEX_LISTEN_FOR_CTRL_C(chartInstance->S);
        }
      } else {
        covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 0, 5, 0);
        c10_exitg1 = 1;
      }
    } while (c10_exitg1 == 0);

    _SF_MEX_LISTEN_FOR_CTRL_C(chartInstance->S);
  }

  covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 0, 4, 0);
  for (c10_i10 = 0; c10_i10 < 20; c10_i10++) {
    c10_v_curv_max[c10_i10] = 0.0;
  }

  for (c10_j_i = 0; c10_j_i < 20; c10_j_i++) {
    c10_e_i = 1.0 + static_cast<real_T>(c10_j_i);
    covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 0, 6, 1);
    c10_c_j = 0;
    do {
      c10_exitg1 = 0;
      if (c10_c_j < 4) {
        c10_b_j = 1.0 + static_cast<real_T>(c10_c_j);
        covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 0, 7, 1);
        c10_b_guard1 = false;
        c10_guard2 = false;
        if (covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 17,
                           covrtRelationalopUpdateFcn
                           (chartInstance->c10_covrtInstance, 14U, 0U, 19U,
                            c10_b_j, 4.0, -1, 0U, static_cast<int32_T>(c10_b_j ==
               4.0)))) {
          c10_st.site = &c10_q_emlrtRSI;
          c10_x = c10_curvature[3];
          c10_b_x = c10_x;
          c10_c_x = c10_b_x;
          c10_b_a = muDoubleScalarAbs(c10_c_x);
          c10_b_st.site = &c10_k_emlrtRSI;
          c10_c_a = c10_b_a;
          c10_c_st.site = &c10_m_emlrtRSI;
          c10_d_a = c10_c_a;
          c10_e_a = c10_d_a;
          c10_f_a = c10_e_a;
          c10_g_a = c10_f_a;
          c10_p = (c10_g_a < 0.0);
          if (c10_p) {
            c10_b_p = true;
          } else {
            c10_b_p = false;
          }

          c10_c_p = c10_b_p;
          if (c10_c_p) {
            c10_y = NULL;
            sf_mex_assign(&c10_y, sf_mex_create("y", c10_cv, 10, 0U, 1U, 0U, 2,
              1, 31), false);
            c10_b_y = NULL;
            sf_mex_assign(&c10_b_y, sf_mex_create("y", c10_cv, 10, 0U, 1U, 0U, 2,
              1, 31), false);
            sf_mex_call(&c10_c_st, &c10_emlrtMCI, "error", 0U, 2U, 14, c10_y, 14,
                        sf_mex_call(&c10_c_st, NULL, "getString", 1U, 1U, 14,
              sf_mex_call(&c10_c_st, NULL, "message", 1U, 1U, 14, c10_b_y)));
          }

          c10_h_a = c10_d_a;
          c10_i_a = c10_h_a;
          c10_b_c = muDoubleScalarPower(c10_i_a, -0.33333333333333331);
          if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_e_i)))) {
            emlrtIntegerCheckR2012b(c10_e_i, &c10_qj_emlrtDCI, (emlrtConstCTX)
              c10_sp);
          }

          c10_i35 = static_cast<int32_T>(c10_e_i);
          if ((c10_i35 < 1) || (c10_i35 > 20)) {
            emlrtDynamicBoundsCheckR2012b(c10_i35, 1, 20, &c10_sj_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_v_curv_max[c10_i35 - 1] = c10_alpha_TTL * c10_b_c;
          c10_b_guard1 = true;
        } else {
          if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_e_i)))) {
            emlrtIntegerCheckR2012b(c10_e_i, &c10_kk_emlrtDCI, (emlrtConstCTX)
              c10_sp);
          }

          c10_i18 = static_cast<int32_T>(c10_e_i);
          if ((c10_i18 < 1) || (c10_i18 > 20)) {
            emlrtDynamicBoundsCheckR2012b(c10_i18, 1, 20, &c10_ok_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_d6 = c10_b_s_est[c10_i18 - 1];
          if (c10_b_j != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_b_j)))) {
            emlrtIntegerCheckR2012b(c10_b_j, &c10_ok_emlrtDCI, (emlrtConstCTX)
              c10_sp);
          }

          c10_i22 = static_cast<int32_T>(c10_b_j);
          if ((c10_i22 < 1) || (c10_i22 > 4)) {
            emlrtDynamicBoundsCheckR2012b(c10_i22, 1, 4, &c10_qk_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_d9 = c10_s_curv[c10_i22 - 1];
          if (covrtEmlCondEval(chartInstance->c10_covrtInstance, 14U, 0, 6,
                               covrtRelationalopUpdateFcn
                               (chartInstance->c10_covrtInstance, 14U, 0U, 20U,
                                c10_d6, c10_d9, -1, 4U, static_cast<int32_T>
                                (c10_d6 > c10_d9)))) {
            if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
                 (muDoubleScalarFloor(c10_e_i)))) {
              emlrtIntegerCheckR2012b(c10_e_i, &c10_pk_emlrtDCI, (emlrtConstCTX)
                c10_sp);
            }

            c10_i26 = static_cast<int32_T>(c10_e_i);
            if ((c10_i26 < 1) || (c10_i26 > 20)) {
              emlrtDynamicBoundsCheckR2012b(c10_i26, 1, 20, &c10_rk_emlrtBCI,
                (emlrtConstCTX)c10_sp);
            }

            c10_d13 = c10_b_s_est[c10_i26 - 1];
            c10_d14 = c10_b_j + 1.0;
            if (c10_d14 != static_cast<real_T>(static_cast<int32_T>
                 (muDoubleScalarFloor(c10_d14)))) {
              emlrtIntegerCheckR2012b(c10_d14, &c10_qk_emlrtDCI, (emlrtConstCTX)
                c10_sp);
            }

            c10_i33 = static_cast<int32_T>(c10_d14);
            if ((c10_i33 < 1) || (c10_i33 > 4)) {
              emlrtDynamicBoundsCheckR2012b(c10_i33, 1, 4, &c10_sk_emlrtBCI,
                (emlrtConstCTX)c10_sp);
            }

            c10_d16 = c10_s_curv[c10_i33 - 1];
            if (covrtEmlCondEval(chartInstance->c10_covrtInstance, 14U, 0, 7,
                                 covrtRelationalopUpdateFcn
                                 (chartInstance->c10_covrtInstance, 14U, 0U, 21U,
                                  c10_d13, c10_d16, -1, 2U, static_cast<int32_T>
                                  (c10_d13 < c10_d16)))) {
              covrtEmlMcdcEval(chartInstance->c10_covrtInstance, 14U, 0, 3, true);
              covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 18, true);
              c10_st.site = &c10_p_emlrtRSI;
              if (c10_b_j != static_cast<real_T>(static_cast<int32_T>
                   (muDoubleScalarFloor(c10_b_j)))) {
                emlrtIntegerCheckR2012b(c10_b_j, &c10_uk_emlrtDCI, &c10_st);
              }

              c10_i41 = static_cast<int32_T>(c10_b_j);
              if ((c10_i41 < 1) || (c10_i41 > 4)) {
                emlrtDynamicBoundsCheckR2012b(c10_i41, 1, 4, &c10_wk_emlrtBCI,
                  &c10_st);
              }

              c10_d_x = c10_curvature[c10_i41 - 1];
              c10_e_x = c10_d_x;
              c10_f_x = c10_e_x;
              c10_j_a = muDoubleScalarAbs(c10_f_x);
              c10_b_st.site = &c10_k_emlrtRSI;
              c10_k_a = c10_j_a;
              c10_c_st.site = &c10_m_emlrtRSI;
              c10_m_a = c10_k_a;
              c10_o_a = c10_m_a;
              c10_p_a = c10_o_a;
              c10_q_a = c10_p_a;
              c10_d_p = (c10_q_a < 0.0);
              if (c10_d_p) {
                c10_e_p = true;
              } else {
                c10_e_p = false;
              }

              c10_f_p = c10_e_p;
              if (c10_f_p) {
                c10_c_y = NULL;
                sf_mex_assign(&c10_c_y, sf_mex_create("y", c10_cv, 10, 0U, 1U,
                  0U, 2, 1, 31), false);
                c10_d_y = NULL;
                sf_mex_assign(&c10_d_y, sf_mex_create("y", c10_cv, 10, 0U, 1U,
                  0U, 2, 1, 31), false);
                sf_mex_call(&c10_c_st, &c10_emlrtMCI, "error", 0U, 2U, 14,
                            c10_c_y, 14, sf_mex_call(&c10_c_st, NULL,
                  "getString", 1U, 1U, 14, sf_mex_call(&c10_c_st, NULL,
                  "message", 1U, 1U, 14, c10_d_y)));
              }

              c10_r_a = c10_m_a;
              c10_s_a = c10_r_a;
              c10_c_c = muDoubleScalarPower(c10_s_a, -0.33333333333333331);
              if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
                   (muDoubleScalarFloor(c10_e_i)))) {
                emlrtIntegerCheckR2012b(c10_e_i, &c10_rj_emlrtDCI,
                  (emlrtConstCTX)c10_sp);
              }

              c10_i48 = static_cast<int32_T>(c10_e_i);
              if ((c10_i48 < 1) || (c10_i48 > 20)) {
                emlrtDynamicBoundsCheckR2012b(c10_i48, 1, 20, &c10_tj_emlrtBCI,
                  (emlrtConstCTX)c10_sp);
              }

              c10_v_curv_max[c10_i48 - 1] = c10_alpha_TTL * c10_c_c;
              c10_exitg1 = 1;
            } else {
              c10_guard2 = true;
            }
          } else {
            c10_guard2 = true;
          }
        }

        if (c10_guard2) {
          covrtEmlMcdcEval(chartInstance->c10_covrtInstance, 14U, 0, 3, false);
          covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 18, false);
          c10_b_guard1 = true;
        }

        if (c10_b_guard1) {
          c10_c_j++;
          _SF_MEX_LISTEN_FOR_CTRL_C(chartInstance->S);
        }
      } else {
        covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 0, 7, 0);
        c10_exitg1 = 1;
      }
    } while (c10_exitg1 == 0);

    _SF_MEX_LISTEN_FOR_CTRL_C(chartInstance->S);
  }

  covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 0, 6, 0);
  for (c10_k_i = 0; c10_k_i < 20; c10_k_i++) {
    covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 0, 8, 1);
    covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 0, 9, 0);
    _SF_MEX_LISTEN_FOR_CTRL_C(chartInstance->S);
  }

  covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 0, 8, 0);
  for (c10_o_i = 0; c10_o_i < 20; c10_o_i++) {
    covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 0, 10, 1);
    covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 0, 11, 0);
    _SF_MEX_LISTEN_FOR_CTRL_C(chartInstance->S);
  }

  covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 0, 10, 0);
  for (c10_p_i = 0; c10_p_i < 20; c10_p_i++) {
    c10_e_i = 1.0 + static_cast<real_T>(c10_p_i);
    covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 0, 12, 1);
    covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 24,
                   covrtRelationalopUpdateFcn(chartInstance->c10_covrtInstance,
      14U, 0U, 27U, 0.0, 0.0, -1, 0U, 1));
    if (c10_e_i != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
          (c10_e_i)))) {
      emlrtIntegerCheckR2012b(c10_e_i, &c10_tk_emlrtDCI, (emlrtConstCTX)c10_sp);
    }

    c10_i19 = static_cast<int32_T>(c10_e_i);
    if ((c10_i19 < 1) || (c10_i19 > 20)) {
      emlrtDynamicBoundsCheckR2012b(c10_i19, 1, 20, &c10_vk_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_d7 = c10_b_v_est[c10_i19 - 1];
    if (covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 25,
                       covrtRelationalopUpdateFcn
                       (chartInstance->c10_covrtInstance, 14U, 0U, 28U, c10_d7,
                        5.0, -1, 2U, static_cast<int32_T>(c10_d7 < 5.0)))) {
      if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_e_i)))) {
        emlrtIntegerCheckR2012b(c10_e_i, &c10_oj_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i24 = static_cast<int32_T>(c10_e_i);
      if ((c10_i24 < 1) || (c10_i24 > 20)) {
        emlrtDynamicBoundsCheckR2012b(c10_i24, 1, 20, &c10_qj_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_a_min_est[c10_i24 - 1] = -5.0;
      if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_e_i)))) {
        emlrtIntegerCheckR2012b(c10_e_i, &c10_uj_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i27 = static_cast<int32_T>(c10_e_i);
      if ((c10_i27 < 1) || (c10_i27 > 20)) {
        emlrtDynamicBoundsCheckR2012b(c10_i27, 1, 20, &c10_wj_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_a_max_est[c10_i27 - 1] = 4.0;
      if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_e_i)))) {
        emlrtIntegerCheckR2012b(c10_e_i, &c10_wj_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i32 = static_cast<int32_T>(c10_e_i);
      if ((c10_i32 < 1) || (c10_i32 > 20)) {
        emlrtDynamicBoundsCheckR2012b(c10_i32, 1, 20, &c10_yj_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_j_min_est[c10_i32 - 1] = -5.0;
      if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_e_i)))) {
        emlrtIntegerCheckR2012b(c10_e_i, &c10_sj_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i38 = static_cast<int32_T>(c10_e_i);
      if ((c10_i38 < 1) || (c10_i38 > 20)) {
        emlrtDynamicBoundsCheckR2012b(c10_i38, 1, 20, &c10_uj_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_j_max_est[c10_i38 - 1] = 5.0;
    } else {
      if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
           (muDoubleScalarFloor(c10_e_i)))) {
        emlrtIntegerCheckR2012b(c10_e_i, &c10_vk_emlrtDCI, (emlrtConstCTX)c10_sp);
      }

      c10_i23 = static_cast<int32_T>(c10_e_i);
      if ((c10_i23 < 1) || (c10_i23 > 20)) {
        emlrtDynamicBoundsCheckR2012b(c10_i23, 1, 20, &c10_xk_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_d10 = c10_b_v_est[c10_i23 - 1];
      if (covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 0, 26,
                         covrtRelationalopUpdateFcn
                         (chartInstance->c10_covrtInstance, 14U, 0U, 29U,
                          c10_d10, 20.0, -1, 2U, static_cast<int32_T>(c10_d10 <
             20.0)))) {
        if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_e_i)))) {
          emlrtIntegerCheckR2012b(c10_e_i, &c10_wk_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i29 = static_cast<int32_T>(c10_e_i);
        if ((c10_i29 < 1) || (c10_i29 > 20)) {
          emlrtDynamicBoundsCheckR2012b(c10_i29, 1, 20, &c10_yk_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_e_i)))) {
          emlrtIntegerCheckR2012b(c10_e_i, &c10_xk_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i31 = static_cast<int32_T>(c10_e_i);
        if ((c10_i31 < 1) || (c10_i31 > 20)) {
          emlrtDynamicBoundsCheckR2012b(c10_i31, 1, 20, &c10_am_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_a_min_est[c10_i31 - 1] = -5.5 + c10_b_v_est[c10_i29 - 1] / 10.0;
        if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_e_i)))) {
          emlrtIntegerCheckR2012b(c10_e_i, &c10_yk_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i37 = static_cast<int32_T>(c10_e_i);
        if ((c10_i37 < 1) || (c10_i37 > 20)) {
          emlrtDynamicBoundsCheckR2012b(c10_i37, 1, 20, &c10_bm_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_e_i)))) {
          emlrtIntegerCheckR2012b(c10_e_i, &c10_am_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i42 = static_cast<int32_T>(c10_e_i);
        if ((c10_i42 < 1) || (c10_i42 > 20)) {
          emlrtDynamicBoundsCheckR2012b(c10_i42, 1, 20, &c10_cm_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_a_max_est[c10_i42 - 1] = 4.666666666666667 - 2.0 *
          c10_b_v_est[c10_i37 - 1] / 15.0;
        if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_e_i)))) {
          emlrtIntegerCheckR2012b(c10_e_i, &c10_bm_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i44 = static_cast<int32_T>(c10_e_i);
        if ((c10_i44 < 1) || (c10_i44 > 20)) {
          emlrtDynamicBoundsCheckR2012b(c10_i44, 1, 20, &c10_dm_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_e_i)))) {
          emlrtIntegerCheckR2012b(c10_e_i, &c10_cm_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i45 = static_cast<int32_T>(c10_e_i);
        if ((c10_i45 < 1) || (c10_i45 > 20)) {
          emlrtDynamicBoundsCheckR2012b(c10_i45, 1, 20, &c10_em_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_j_min_est[c10_i45 - 1] = -5.833333333333333 + c10_b_v_est[c10_i44 -
          1] / 6.0;
        if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_e_i)))) {
          emlrtIntegerCheckR2012b(c10_e_i, &c10_dm_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i46 = static_cast<int32_T>(c10_e_i);
        if ((c10_i46 < 1) || (c10_i46 > 20)) {
          emlrtDynamicBoundsCheckR2012b(c10_i46, 1, 20, &c10_fm_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_e_i)))) {
          emlrtIntegerCheckR2012b(c10_e_i, &c10_em_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i47 = static_cast<int32_T>(c10_e_i);
        if ((c10_i47 < 1) || (c10_i47 > 20)) {
          emlrtDynamicBoundsCheckR2012b(c10_i47, 1, 20, &c10_gm_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_j_max_est[c10_i47 - 1] = 5.833333333333333 - c10_b_v_est[c10_i46 - 1]
          / 6.0;
      } else {
        if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_e_i)))) {
          emlrtIntegerCheckR2012b(c10_e_i, &c10_pj_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i28 = static_cast<int32_T>(c10_e_i);
        if ((c10_i28 < 1) || (c10_i28 > 20)) {
          emlrtDynamicBoundsCheckR2012b(c10_i28, 1, 20, &c10_rj_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_a_min_est[c10_i28 - 1] = -3.5;
        if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_e_i)))) {
          emlrtIntegerCheckR2012b(c10_e_i, &c10_vj_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i34 = static_cast<int32_T>(c10_e_i);
        if ((c10_i34 < 1) || (c10_i34 > 20)) {
          emlrtDynamicBoundsCheckR2012b(c10_i34, 1, 20, &c10_xj_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_a_max_est[c10_i34 - 1] = 2.0;
        if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_e_i)))) {
          emlrtIntegerCheckR2012b(c10_e_i, &c10_xj_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i39 = static_cast<int32_T>(c10_e_i);
        if ((c10_i39 < 1) || (c10_i39 > 20)) {
          emlrtDynamicBoundsCheckR2012b(c10_i39, 1, 20, &c10_ak_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_j_min_est[c10_i39 - 1] = -2.5;
        if (c10_e_i != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_e_i)))) {
          emlrtIntegerCheckR2012b(c10_e_i, &c10_tj_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i43 = static_cast<int32_T>(c10_e_i);
        if ((c10_i43 < 1) || (c10_i43 > 20)) {
          emlrtDynamicBoundsCheckR2012b(c10_i43, 1, 20, &c10_vj_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_j_max_est[c10_i43 - 1] = 2.5;
      }
    }

    _SF_MEX_LISTEN_FOR_CTRL_C(chartInstance->S);
  }

  covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 0, 12, 0);
}

static void c10_cat(SFc10_ACCMPCInstanceStruct *chartInstance, real_T
                    c10_varargin_1[20], real_T c10_varargin_2[20], real_T c10_y
                    [40])
{
  int32_T c10_b_iy;
  int32_T c10_b_j;
  int32_T c10_c_j;
  int32_T c10_j;
  c10_b_iy = -1;
  for (c10_j = 0; c10_j < 20; c10_j++) {
    c10_c_j = c10_j;
    c10_b_iy++;
    c10_y[c10_b_iy] = c10_varargin_1[c10_c_j];
  }

  for (c10_b_j = 0; c10_b_j < 20; c10_b_j++) {
    c10_c_j = c10_b_j;
    c10_b_iy++;
    c10_y[c10_b_iy] = c10_varargin_2[c10_c_j];
  }
}

static void c10_minimum(SFc10_ACCMPCInstanceStruct *chartInstance, real_T c10_x
  [40], real_T c10_b_ex[20])
{
  real_T c10_b;
  real_T c10_b_a;
  real_T c10_b_x;
  real_T c10_c_a;
  real_T c10_c_x;
  real_T c10_e_b;
  int32_T c10_c_i;
  int32_T c10_e_i;
  int32_T c10_i;
  boolean_T c10_f_b;
  boolean_T c10_g_b;
  boolean_T c10_p;
  for (c10_i = 0; c10_i < 20; c10_i++) {
    c10_e_i = c10_i;
    c10_b_ex[c10_e_i] = c10_x[c10_e_i];
  }

  for (c10_c_i = 0; c10_c_i < 20; c10_c_i++) {
    c10_e_i = c10_c_i;
    c10_b_a = c10_b_ex[c10_e_i];
    c10_b = c10_x[20 + c10_e_i];
    c10_c_a = c10_b_a;
    c10_e_b = c10_b;
    c10_b_x = c10_e_b;
    c10_f_b = muDoubleScalarIsNaN(c10_b_x);
    if (c10_f_b) {
      c10_p = false;
    } else {
      c10_c_x = c10_c_a;
      c10_g_b = muDoubleScalarIsNaN(c10_c_x);
      if (c10_g_b) {
        c10_p = true;
      } else {
        c10_p = (c10_c_a > c10_e_b);
      }
    }

    if (c10_p) {
      c10_b_ex[c10_e_i] = c10_x[20 + c10_e_i];
    }
  }
}

static void c10_indexShapeCheck(SFc10_ACCMPCInstanceStruct *chartInstance)
{
}

static boolean_T c10_fltpower_domain_error(SFc10_ACCMPCInstanceStruct
  *chartInstance)
{
  return false;
}

static void c10_toLogicalCheck(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_x)
{
  static char_T c10_b_cv[19] = { 'M', 'A', 'T', 'L', 'A', 'B', ':', 'n', 'o',
    'l', 'o', 'g', 'i', 'c', 'a', 'l', 'n', 'a', 'n' };

  const mxArray *c10_b_y = NULL;
  const mxArray *c10_y = NULL;
  real_T c10_b_k;
  real_T c10_b_x;
  int32_T c10_k;
  boolean_T c10_b;
  for (c10_k = 0; c10_k < 85484; c10_k++) {
    c10_b_k = static_cast<real_T>(c10_k) + 1.0;
    c10_b_x = c10_x[static_cast<int32_T>(c10_b_k) - 1];
    c10_b = muDoubleScalarIsNaN(c10_b_x);
    if (c10_b) {
      c10_y = NULL;
      sf_mex_assign(&c10_y, sf_mex_create("y", c10_b_cv, 10, 0U, 1U, 0U, 2, 1,
        19), false);
      c10_b_y = NULL;
      sf_mex_assign(&c10_b_y, sf_mex_create("y", c10_b_cv, 10, 0U, 1U, 0U, 2, 1,
        19), false);
      sf_mex_call(c10_sp, &c10_c_emlrtMCI, "error", 0U, 2U, 14, c10_y, 14,
                  sf_mex_call(c10_sp, NULL, "getString", 1U, 1U, 14, sf_mex_call
        (c10_sp, NULL, "message", 1U, 1U, 14, c10_b_y)));
    }
  }
}

static void c10_all(SFc10_ACCMPCInstanceStruct *chartInstance, const emlrtStack *
                    c10_sp, coder::array<boolean_T, 2U> &c10_x, boolean_T
                    c10_y_data[], int32_T c10_y_size[1])
{
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  int32_T c10_b;
  int32_T c10_b_a;
  int32_T c10_b_iy;
  int32_T c10_c_a;
  int32_T c10_d_a;
  int32_T c10_e_a;
  int32_T c10_e_b;
  int32_T c10_f_a;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_ix;
  int32_T c10_j;
  boolean_T c10_exitg1;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_st.site = &c10_s_emlrtRSI;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_y_size[0] = 602;
  for (c10_i = 0; c10_i < 602; c10_i++) {
    c10_y_data[c10_i] = true;
  }

  c10_b_iy = -1;
  c10_i1 = 0;
  c10_i2 = 84882;
  c10_b_st.site = &c10_t_emlrtRSI;
  for (c10_j = 0; c10_j < 602; c10_j++) {
    c10_b_a = c10_i1 + 1;
    c10_i1 = c10_b_a;
    c10_c_a = c10_i2 + 1;
    c10_i2 = c10_c_a;
    c10_d_a = c10_b_iy + 1;
    c10_b_iy = c10_d_a;
    c10_b_st.site = &c10_u_emlrtRSI;
    c10_e_a = c10_i1;
    c10_b = c10_i2;
    c10_f_a = c10_e_a;
    c10_e_b = c10_b;
    if (c10_f_a > c10_e_b) {
      c10_overflow = false;
    } else {
      c10_overflow = (c10_e_b > 2147483045);
    }

    if (c10_overflow) {
      c10_c_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
    }

    c10_ix = c10_i1;
    c10_exitg1 = false;
    while ((!c10_exitg1) && (c10_ix <= c10_i2)) {
      if (!c10_x[c10_ix - 1]) {
        c10_y_data[c10_b_iy] = false;
        c10_exitg1 = true;
      } else {
        c10_ix += 602;
      }
    }
  }
}

static void c10_check_forloop_overflow_error(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp)
{
  static char_T c10_b_cv[34] = { 'C', 'o', 'd', 'e', 'r', ':', 't', 'o', 'o',
    'l', 'b', 'o', 'x', ':', 'i', 'n', 't', '_', 'f', 'o', 'r', 'l', 'o', 'o',
    'p', '_', 'o', 'v', 'e', 'r', 'f', 'l', 'o', 'w' };

  static char_T c10_b_cv1[5] = { 'i', 'n', 't', '3', '2' };

  const mxArray *c10_b_y = NULL;
  const mxArray *c10_c_y = NULL;
  const mxArray *c10_y = NULL;
  c10_y = NULL;
  sf_mex_assign(&c10_y, sf_mex_create("y", c10_b_cv, 10, 0U, 1U, 0U, 2, 1, 34),
                false);
  c10_b_y = NULL;
  sf_mex_assign(&c10_b_y, sf_mex_create("y", c10_b_cv, 10, 0U, 1U, 0U, 2, 1, 34),
                false);
  c10_c_y = NULL;
  sf_mex_assign(&c10_c_y, sf_mex_create("y", c10_b_cv1, 10, 0U, 1U, 0U, 2, 1, 5),
                false);
  sf_mex_call(c10_sp, &c10_d_emlrtMCI, "error", 0U, 2U, 14, c10_y, 14,
              sf_mex_call(c10_sp, NULL, "getString", 1U, 1U, 14, sf_mex_call
    (c10_sp, NULL, "message", 1U, 2U, 14, c10_b_y, 14, c10_c_y)));
}

static void c10_nullAssignment(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_x, boolean_T c10_idx_data[],
  coder::array<real_T, 2U> &c10_b_x)
{
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_loop_ub;
  boolean_T c10_b_idx_data[602];
  c10_b_x.set_size(&c10_cd_emlrtRTEI, c10_sp, c10_x.size(0), 142);
  c10_loop_ub = c10_x.size(0) * 142 - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_b_x[c10_i] = c10_x[c10_i];
  }

  for (c10_i1 = 0; c10_i1 < 602; c10_i1++) {
    c10_b_idx_data[c10_i1] = c10_idx_data[c10_i1];
  }

  c10_b_nullAssignment(chartInstance, c10_sp, c10_b_x, c10_b_idx_data);
}

static void c10_b_indexShapeCheck(SFc10_ACCMPCInstanceStruct *chartInstance)
{
}

static void c10_TransformToDenseFormulation(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, real_T c10_b_N_hor, coder::array<
  real_T, 3U> &c10_A, coder::array<real_T, 3U> &c10_c_B, coder::array<real_T, 2U>
  &c10_b_D, coder::array<real_T, 2U> &c10_H_sparse, real_T c10_c_sparse_data[],
  coder::array<real_T, 2U> &c10_G_sparse, real_T c10_g_lb_sparse_data[], int32_T
  c10_g_lb_sparse_size[1], real_T c10_g_ub_sparse_data[], int32_T
  c10_g_ub_sparse_size[1], real_T c10_b_n_x, real_T c10_b_n_u, real_T
  c10_b_s_curr, real_T c10_b_v_curr, coder::array<real_T, 2U> &c10_c_H, coder::
  array<real_T, 1U> &c10_b_c, coder::array<real_T, 2U> &c10_c_G, real_T
  c10_g_lb_data[], int32_T c10_g_lb_size[1], real_T c10_g_ub_data[], int32_T
  c10_g_ub_size[1], coder::array<real_T, 2U> &c10_Psi, coder::array<real_T, 1U>
  &c10_d)
{
  coder::array<real_T, 2U> c10_b_a;
  coder::array<real_T, 2U> c10_b_y;
  coder::array<real_T, 2U> c10_c_a;
  coder::array<real_T, 2U> c10_e_b;
  coder::array<real_T, 2U> c10_r1;
  coder::array<real_T, 2U> c10_y;
  coder::array<int32_T, 2U> c10_r2;
  coder::array<int32_T, 1U> c10_b_r;
  coder::array<int32_T, 1U> c10_r3;
  emlrtStack c10_b_st;
  emlrtStack c10_st;
  real_T c10_y_data[602];
  real_T c10_b_data[142];
  real_T c10_d_tmp_data[25];
  real_T c10_tmp_data[25];
  real_T c10_b_B_data[10];
  real_T c10_e_tmp_data[10];
  real_T c10_f_tmp_data[5];
  real_T c10_A__data[4];
  real_T c10_b_A_data[4];
  real_T c10_c_A_data[4];
  real_T c10_d_A_data[4];
  real_T c10_b_tmp_data[2];
  real_T c10_c_b_data[2];
  real_T c10_c_tmp_data[2];
  real_T c10_x_0[2];
  real_T c10_b_j;
  real_T c10_b_k;
  real_T c10_b_roundFloatVar;
  real_T c10_c_N_hor;
  real_T c10_c_d;
  real_T c10_c_roundFloatVar;
  real_T c10_d1;
  real_T c10_d10;
  real_T c10_d11;
  real_T c10_d12;
  real_T c10_d13;
  real_T c10_d14;
  real_T c10_d15;
  real_T c10_d16;
  real_T c10_d17;
  real_T c10_d18;
  real_T c10_d19;
  real_T c10_d2;
  real_T c10_d20;
  real_T c10_d21;
  real_T c10_d22;
  real_T c10_d23;
  real_T c10_d24;
  real_T c10_d25;
  real_T c10_d26;
  real_T c10_d27;
  real_T c10_d28;
  real_T c10_d29;
  real_T c10_d3;
  real_T c10_d30;
  real_T c10_d31;
  real_T c10_d32;
  real_T c10_d33;
  real_T c10_d34;
  real_T c10_d35;
  real_T c10_d36;
  real_T c10_d37;
  real_T c10_d38;
  real_T c10_d39;
  real_T c10_d4;
  real_T c10_d40;
  real_T c10_d41;
  real_T c10_d42;
  real_T c10_d43;
  real_T c10_d44;
  real_T c10_d45;
  real_T c10_d46;
  real_T c10_d47;
  real_T c10_d48;
  real_T c10_d49;
  real_T c10_d5;
  real_T c10_d50;
  real_T c10_d51;
  real_T c10_d6;
  real_T c10_d7;
  real_T c10_d8;
  real_T c10_d9;
  real_T c10_d_k;
  real_T c10_d_roundFloatVar;
  real_T c10_e_i;
  real_T c10_e_roundFloatVar;
  real_T c10_f_roundFloatVar;
  real_T c10_kk;
  real_T c10_o;
  real_T c10_roundFloatVar;
  int32_T c10_A_size[3];
  int32_T c10_B_size[3];
  int32_T c10_b_A_size[3];
  int32_T c10_c_A_size[3];
  int32_T c10_d_tmp_size[2];
  int32_T c10_iv[2];
  int32_T c10_iv1[2];
  int32_T c10_iv2[2];
  int32_T c10_iv3[2];
  int32_T c10_iv4[2];
  int32_T c10_iv5[2];
  int32_T c10_tmp_size[2];
  int32_T c10_b_tmp_size[1];
  int32_T c10_c_tmp_size[1];
  int32_T c10_y_size[1];
  int32_T c10_ab_loop_ub;
  int32_T c10_b_fixedVar;
  int32_T c10_b_innerDimA;
  int32_T c10_b_innerDimB;
  int32_T c10_b_kk;
  int32_T c10_b_loop_ub;
  int32_T c10_bb_loop_ub;
  int32_T c10_c_fixedVar;
  int32_T c10_c_i;
  int32_T c10_c_innerDimA;
  int32_T c10_c_innerDimB;
  int32_T c10_c_j;
  int32_T c10_c_kk;
  int32_T c10_c_loop_ub;
  int32_T c10_cb_loop_ub;
  int32_T c10_d_fixedVar;
  int32_T c10_d_innerDimA;
  int32_T c10_d_innerDimB;
  int32_T c10_d_kk;
  int32_T c10_d_loop_ub;
  int32_T c10_db_loop_ub;
  int32_T c10_e_fixedVar;
  int32_T c10_e_innerDimA;
  int32_T c10_e_innerDimB;
  int32_T c10_e_loop_ub;
  int32_T c10_eb_loop_ub;
  int32_T c10_f_fixedVar;
  int32_T c10_f_i;
  int32_T c10_f_innerDimA;
  int32_T c10_f_innerDimB;
  int32_T c10_f_loop_ub;
  int32_T c10_fb_loop_ub;
  int32_T c10_fixedVar;
  int32_T c10_g_innerDimA;
  int32_T c10_g_innerDimB;
  int32_T c10_g_loop_ub;
  int32_T c10_gb_loop_ub;
  int32_T c10_h_i;
  int32_T c10_h_innerDimA;
  int32_T c10_h_innerDimB;
  int32_T c10_h_loop_ub;
  int32_T c10_hb_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i100;
  int32_T c10_i101;
  int32_T c10_i102;
  int32_T c10_i103;
  int32_T c10_i104;
  int32_T c10_i105;
  int32_T c10_i106;
  int32_T c10_i107;
  int32_T c10_i108;
  int32_T c10_i109;
  int32_T c10_i11;
  int32_T c10_i110;
  int32_T c10_i111;
  int32_T c10_i112;
  int32_T c10_i113;
  int32_T c10_i114;
  int32_T c10_i115;
  int32_T c10_i116;
  int32_T c10_i117;
  int32_T c10_i118;
  int32_T c10_i119;
  int32_T c10_i12;
  int32_T c10_i120;
  int32_T c10_i121;
  int32_T c10_i122;
  int32_T c10_i123;
  int32_T c10_i124;
  int32_T c10_i125;
  int32_T c10_i126;
  int32_T c10_i127;
  int32_T c10_i128;
  int32_T c10_i129;
  int32_T c10_i13;
  int32_T c10_i130;
  int32_T c10_i131;
  int32_T c10_i132;
  int32_T c10_i133;
  int32_T c10_i134;
  int32_T c10_i135;
  int32_T c10_i136;
  int32_T c10_i137;
  int32_T c10_i138;
  int32_T c10_i139;
  int32_T c10_i14;
  int32_T c10_i140;
  int32_T c10_i141;
  int32_T c10_i142;
  int32_T c10_i143;
  int32_T c10_i144;
  int32_T c10_i145;
  int32_T c10_i146;
  int32_T c10_i147;
  int32_T c10_i148;
  int32_T c10_i149;
  int32_T c10_i15;
  int32_T c10_i150;
  int32_T c10_i151;
  int32_T c10_i152;
  int32_T c10_i153;
  int32_T c10_i154;
  int32_T c10_i155;
  int32_T c10_i156;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i19;
  int32_T c10_i2;
  int32_T c10_i20;
  int32_T c10_i21;
  int32_T c10_i22;
  int32_T c10_i23;
  int32_T c10_i24;
  int32_T c10_i25;
  int32_T c10_i26;
  int32_T c10_i27;
  int32_T c10_i28;
  int32_T c10_i29;
  int32_T c10_i3;
  int32_T c10_i30;
  int32_T c10_i31;
  int32_T c10_i32;
  int32_T c10_i33;
  int32_T c10_i34;
  int32_T c10_i35;
  int32_T c10_i36;
  int32_T c10_i37;
  int32_T c10_i38;
  int32_T c10_i39;
  int32_T c10_i4;
  int32_T c10_i40;
  int32_T c10_i41;
  int32_T c10_i42;
  int32_T c10_i43;
  int32_T c10_i44;
  int32_T c10_i45;
  int32_T c10_i46;
  int32_T c10_i47;
  int32_T c10_i48;
  int32_T c10_i49;
  int32_T c10_i5;
  int32_T c10_i50;
  int32_T c10_i51;
  int32_T c10_i52;
  int32_T c10_i53;
  int32_T c10_i54;
  int32_T c10_i55;
  int32_T c10_i56;
  int32_T c10_i57;
  int32_T c10_i58;
  int32_T c10_i59;
  int32_T c10_i6;
  int32_T c10_i60;
  int32_T c10_i61;
  int32_T c10_i62;
  int32_T c10_i63;
  int32_T c10_i64;
  int32_T c10_i65;
  int32_T c10_i66;
  int32_T c10_i67;
  int32_T c10_i68;
  int32_T c10_i69;
  int32_T c10_i7;
  int32_T c10_i70;
  int32_T c10_i71;
  int32_T c10_i72;
  int32_T c10_i73;
  int32_T c10_i74;
  int32_T c10_i75;
  int32_T c10_i76;
  int32_T c10_i77;
  int32_T c10_i78;
  int32_T c10_i79;
  int32_T c10_i8;
  int32_T c10_i80;
  int32_T c10_i81;
  int32_T c10_i82;
  int32_T c10_i83;
  int32_T c10_i84;
  int32_T c10_i85;
  int32_T c10_i86;
  int32_T c10_i87;
  int32_T c10_i88;
  int32_T c10_i89;
  int32_T c10_i9;
  int32_T c10_i90;
  int32_T c10_i91;
  int32_T c10_i92;
  int32_T c10_i93;
  int32_T c10_i94;
  int32_T c10_i95;
  int32_T c10_i96;
  int32_T c10_i97;
  int32_T c10_i98;
  int32_T c10_i99;
  int32_T c10_i_innerDimB;
  int32_T c10_i_loop_ub;
  int32_T c10_ib_loop_ub;
  int32_T c10_innerDimA;
  int32_T c10_innerDimB;
  int32_T c10_j;
  int32_T c10_j_i;
  int32_T c10_j_loop_ub;
  int32_T c10_jb_loop_ub;
  int32_T c10_k;
  int32_T c10_k_i;
  int32_T c10_k_loop_ub;
  int32_T c10_kb_loop_ub;
  int32_T c10_loop_ub;
  int32_T c10_m_loop_ub;
  int32_T c10_mb_loop_ub;
  int32_T c10_o_loop_ub;
  int32_T c10_ob_loop_ub;
  int32_T c10_p_loop_ub;
  int32_T c10_pb_loop_ub;
  int32_T c10_q_loop_ub;
  int32_T c10_qb_loop_ub;
  int32_T c10_r_loop_ub;
  int32_T c10_rb_loop_ub;
  int32_T c10_s_loop_ub;
  int32_T c10_sb_loop_ub;
  int32_T c10_t_loop_ub;
  int32_T c10_tb_loop_ub;
  int32_T c10_u_loop_ub;
  int32_T c10_ub_loop_ub;
  int32_T c10_v_loop_ub;
  int32_T c10_w_loop_ub;
  int32_T c10_x_loop_ub;
  int32_T c10_y_loop_ub;
  boolean_T c10_b;
  boolean_T c10_b1;
  boolean_T c10_b10;
  boolean_T c10_b11;
  boolean_T c10_b12;
  boolean_T c10_b13;
  boolean_T c10_b14;
  boolean_T c10_b15;
  boolean_T c10_b16;
  boolean_T c10_b17;
  boolean_T c10_b18;
  boolean_T c10_b19;
  boolean_T c10_b2;
  boolean_T c10_b20;
  boolean_T c10_b21;
  boolean_T c10_b22;
  boolean_T c10_b23;
  boolean_T c10_b24;
  boolean_T c10_b25;
  boolean_T c10_b26;
  boolean_T c10_b27;
  boolean_T c10_b28;
  boolean_T c10_b29;
  boolean_T c10_b3;
  boolean_T c10_b30;
  boolean_T c10_b31;
  boolean_T c10_b32;
  boolean_T c10_b33;
  boolean_T c10_b34;
  boolean_T c10_b35;
  boolean_T c10_b36;
  boolean_T c10_b37;
  boolean_T c10_b38;
  boolean_T c10_b39;
  boolean_T c10_b4;
  boolean_T c10_b40;
  boolean_T c10_b41;
  boolean_T c10_b42;
  boolean_T c10_b43;
  boolean_T c10_b5;
  boolean_T c10_b6;
  boolean_T c10_b7;
  boolean_T c10_b8;
  boolean_T c10_b9;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  covrtEmlFcnEval(chartInstance->c10_covrtInstance, 14U, 1, 0);
  c10_c_d = c10_b_N_hor * c10_b_n_u + c10_b_N_hor * c10_b_n_x;
  if (!(c10_c_d >= 0.0)) {
    emlrtNonNegativeCheckR2012b(c10_c_d, &c10_qo_emlrtDCI, (emlrtConstCTX)c10_sp);
  }

  c10_d1 = c10_c_d;
  if (c10_d1 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
        (c10_d1)))) {
    emlrtIntegerCheckR2012b(c10_d1, &c10_po_emlrtDCI, (emlrtConstCTX)c10_sp);
  }

  c10_d2 = c10_b_N_hor * c10_b_n_u;
  if (!(c10_d2 >= 0.0)) {
    emlrtNonNegativeCheckR2012b(c10_d2, &c10_so_emlrtDCI, (emlrtConstCTX)c10_sp);
  }

  c10_d3 = c10_d2;
  if (c10_d3 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
        (c10_d3)))) {
    emlrtIntegerCheckR2012b(c10_d3, &c10_ro_emlrtDCI, (emlrtConstCTX)c10_sp);
  }

  c10_d4 = trunc(c10_d1);
  if (muDoubleScalarIsNaN(c10_d4) || muDoubleScalarIsInf(c10_d4)) {
    c10_d5 = 0.0;
  } else {
    c10_d5 = muDoubleScalarRem(c10_d4, 4.294967296E+9);
  }

  c10_roundFloatVar = trunc(c10_d1);
  if (c10_d5 < 0.0) {
    c10_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d5));
  } else {
    c10_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d5));
  }

  if (c10_roundFloatVar < 0.0) {
    c10_d6 = muDoubleScalarCeil(c10_roundFloatVar);
  } else {
    c10_d6 = muDoubleScalarFloor(c10_roundFloatVar);
  }

  if (static_cast<real_T>(c10_fixedVar) != c10_d6) {
    sf_data_overflow_error(chartInstance->S, 0U, 0, 0);
  }

  c10_d7 = trunc(c10_d3);
  if (muDoubleScalarIsNaN(c10_d7) || muDoubleScalarIsInf(c10_d7)) {
    c10_d8 = 0.0;
  } else {
    c10_d8 = muDoubleScalarRem(c10_d7, 4.294967296E+9);
  }

  c10_b_roundFloatVar = trunc(c10_d3);
  if (c10_d8 < 0.0) {
    c10_b_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d8));
  } else {
    c10_b_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d8));
  }

  if (c10_b_roundFloatVar < 0.0) {
    c10_d9 = muDoubleScalarCeil(c10_b_roundFloatVar);
  } else {
    c10_d9 = muDoubleScalarFloor(c10_b_roundFloatVar);
  }

  if (static_cast<real_T>(c10_b_fixedVar) != c10_d9) {
    sf_data_overflow_error(chartInstance->S, 0U, 0, 0);
  }

  c10_Psi.set_size(&c10_dd_emlrtRTEI, c10_sp, c10_fixedVar, c10_b_fixedVar);
  c10_d10 = c10_b_N_hor * c10_b_n_u + c10_b_N_hor * c10_b_n_x;
  if (!(c10_d10 >= 0.0)) {
    emlrtNonNegativeCheckR2012b(c10_d10, &c10_ko_emlrtDCI, (emlrtConstCTX)c10_sp);
  }

  c10_d11 = c10_d10;
  if (c10_d11 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
        (c10_d11)))) {
    emlrtIntegerCheckR2012b(c10_d11, &c10_jo_emlrtDCI, (emlrtConstCTX)c10_sp);
  }

  c10_d12 = c10_b_N_hor * c10_b_n_u;
  if (!(c10_d12 >= 0.0)) {
    emlrtNonNegativeCheckR2012b(c10_d12, &c10_ko_emlrtDCI, (emlrtConstCTX)c10_sp);
  }

  c10_d13 = c10_d12;
  if (c10_d13 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
        (c10_d13)))) {
    emlrtIntegerCheckR2012b(c10_d13, &c10_jo_emlrtDCI, (emlrtConstCTX)c10_sp);
  }

  c10_d14 = trunc(c10_d11);
  if (muDoubleScalarIsNaN(c10_d14) || muDoubleScalarIsInf(c10_d14)) {
    c10_d15 = 0.0;
  } else {
    c10_d15 = muDoubleScalarRem(c10_d14, 4.294967296E+9);
  }

  c10_c_roundFloatVar = trunc(c10_d11);
  if (c10_d15 < 0.0) {
    c10_c_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d15));
  } else {
    c10_c_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d15));
  }

  if (c10_c_roundFloatVar < 0.0) {
    c10_d16 = muDoubleScalarCeil(c10_c_roundFloatVar);
  } else {
    c10_d16 = muDoubleScalarFloor(c10_c_roundFloatVar);
  }

  if (static_cast<real_T>(c10_c_fixedVar) != c10_d16) {
    sf_data_overflow_error(chartInstance->S, 0U, 0, 0);
  }

  c10_d17 = trunc(c10_d13);
  if (muDoubleScalarIsNaN(c10_d17) || muDoubleScalarIsInf(c10_d17)) {
    c10_d18 = 0.0;
  } else {
    c10_d18 = muDoubleScalarRem(c10_d17, 4.294967296E+9);
  }

  c10_d_roundFloatVar = trunc(c10_d13);
  if (c10_d18 < 0.0) {
    c10_d_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d18));
  } else {
    c10_d_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d18));
  }

  if (c10_d_roundFloatVar < 0.0) {
    c10_d19 = muDoubleScalarCeil(c10_d_roundFloatVar);
  } else {
    c10_d19 = muDoubleScalarFloor(c10_d_roundFloatVar);
  }

  if (static_cast<real_T>(c10_d_fixedVar) != c10_d19) {
    sf_data_overflow_error(chartInstance->S, 0U, 0, 0);
  }

  c10_loop_ub = c10_c_fixedVar * c10_d_fixedVar - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_Psi[c10_i] = 0.0;
  }

  c10_d20 = c10_b_N_hor * c10_b_n_u + (c10_b_N_hor + 1.0) * c10_b_n_x;
  if (!(c10_d20 >= 0.0)) {
    emlrtNonNegativeCheckR2012b(c10_d20, &c10_oo_emlrtDCI, (emlrtConstCTX)c10_sp);
  }

  c10_d21 = c10_d20;
  if (c10_d21 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
        (c10_d21)))) {
    emlrtIntegerCheckR2012b(c10_d21, &c10_mo_emlrtDCI, (emlrtConstCTX)c10_sp);
  }

  c10_d22 = trunc(c10_d21);
  if (muDoubleScalarIsNaN(c10_d22) || muDoubleScalarIsInf(c10_d22)) {
    c10_d23 = 0.0;
  } else {
    c10_d23 = muDoubleScalarRem(c10_d22, 4.294967296E+9);
  }

  c10_e_roundFloatVar = trunc(c10_d21);
  if (c10_d23 < 0.0) {
    c10_e_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d23));
  } else {
    c10_e_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d23));
  }

  if (c10_e_roundFloatVar < 0.0) {
    c10_d24 = muDoubleScalarCeil(c10_e_roundFloatVar);
  } else {
    c10_d24 = muDoubleScalarFloor(c10_e_roundFloatVar);
  }

  if (static_cast<real_T>(c10_e_fixedVar) != c10_d24) {
    sf_data_overflow_error(chartInstance->S, 0U, 0, 0);
  }

  c10_d.set_size(&c10_ed_emlrtRTEI, c10_sp, c10_e_fixedVar);
  c10_d25 = c10_b_N_hor * c10_b_n_u + (c10_b_N_hor + 1.0) * c10_b_n_x;
  if (!(c10_d25 >= 0.0)) {
    emlrtNonNegativeCheckR2012b(c10_d25, &c10_oo_emlrtDCI, (emlrtConstCTX)c10_sp);
  }

  c10_d26 = c10_d25;
  if (c10_d26 != static_cast<real_T>(static_cast<int32_T>(muDoubleScalarFloor
        (c10_d26)))) {
    emlrtIntegerCheckR2012b(c10_d26, &c10_mo_emlrtDCI, (emlrtConstCTX)c10_sp);
  }

  c10_d27 = trunc(c10_d26);
  if (muDoubleScalarIsNaN(c10_d27) || muDoubleScalarIsInf(c10_d27)) {
    c10_d28 = 0.0;
  } else {
    c10_d28 = muDoubleScalarRem(c10_d27, 4.294967296E+9);
  }

  c10_f_roundFloatVar = trunc(c10_d26);
  if (c10_d28 < 0.0) {
    c10_f_fixedVar = -static_cast<int32_T>(static_cast<uint32_T>(-c10_d28));
  } else {
    c10_f_fixedVar = static_cast<int32_T>(static_cast<uint32_T>(c10_d28));
  }

  if (c10_f_roundFloatVar < 0.0) {
    c10_d29 = muDoubleScalarCeil(c10_f_roundFloatVar);
  } else {
    c10_d29 = muDoubleScalarFloor(c10_f_roundFloatVar);
  }

  if (static_cast<real_T>(c10_f_fixedVar) != c10_d29) {
    sf_data_overflow_error(chartInstance->S, 0U, 0, 0);
  }

  c10_b_loop_ub = c10_f_fixedVar - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_d[c10_i1] = 0.0;
  }

  c10_x_0[0] = c10_b_s_curr;
  c10_x_0[1] = c10_b_v_curr;
  c10_o = 1.0;
  c10_c_N_hor = c10_b_N_hor;
  c10_i2 = static_cast<int32_T>(c10_c_N_hor + 1.0);
  emlrtForLoopVectorCheckR2021a(0.0, 1.0, c10_c_N_hor, mxDOUBLE_CLASS, c10_i2,
    &c10_qi_emlrtRTEI, (emlrtConstCTX)c10_sp);
  for (c10_k = 0; c10_k < c10_i2; c10_k++) {
    c10_b_k = static_cast<real_T>(c10_k);
    covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 1, 0, 1);
    c10_kk = c10_b_k + 1.0;
    if (covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 1, 0,
                       covrtRelationalopUpdateFcn
                       (chartInstance->c10_covrtInstance, 14U, 1U, 0U, c10_b_k,
                        0.0, -1, 4U, static_cast<int32_T>(c10_b_k > 0.0)))) {
      c10_d31 = c10_b_k - 1.0;
      c10_i3 = static_cast<int32_T>(c10_d31 + 1.0);
      emlrtForLoopVectorCheckR2021a(0.0, 1.0, c10_d31, mxDOUBLE_CLASS, c10_i3,
        &c10_ri_emlrtRTEI, (emlrtConstCTX)c10_sp);
      for (c10_c_i = 0; c10_c_i < c10_i3; c10_c_i++) {
        c10_e_i = static_cast<real_T>(c10_c_i);
        covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 1, 1, 1);
        c10_st.site = &c10_cb_emlrtRSI;
        c10_eye(chartInstance, &c10_st, c10_b_n_x, c10_tmp_data, c10_tmp_size);
        for (c10_i10 = 0; c10_i10 < 4; c10_i10++) {
          c10_A__data[c10_i10] = c10_tmp_data[c10_i10];
        }

        c10_d32 = (c10_b_k - c10_e_i) - 1.0;
        c10_i13 = static_cast<int32_T>(c10_d32);
        emlrtForLoopVectorCheckR2021a(1.0, 1.0, c10_d32, mxDOUBLE_CLASS, c10_i13,
          &c10_si_emlrtRTEI, (emlrtConstCTX)c10_sp);
        for (c10_j = 0; c10_j < c10_i13; c10_j++) {
          c10_b_j = 1.0 + static_cast<real_T>(c10_j);
          covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 1, 2, 1);
          c10_st.site = &c10_db_emlrtRSI;
          c10_b_a.set_size(&c10_id_emlrtRTEI, &c10_st, 2, 2);
          c10_i_loop_ub = 3;
          for (c10_i24 = 0; c10_i24 <= c10_i_loop_ub; c10_i24++) {
            c10_b_a[c10_i24] = c10_A__data[c10_i24];
          }

          c10_d37 = c10_kk - c10_b_j;
          if (c10_d37 != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_d37)))) {
            emlrtIntegerCheckR2012b(c10_d37, &c10_fm_emlrtDCI, &c10_st);
          }

          c10_i39 = c10_A.size(0);
          c10_i42 = static_cast<int32_T>(c10_d37);
          if ((c10_i42 < 1) || (c10_i42 > c10_i39)) {
            emlrtDynamicBoundsCheckR2012b(c10_i42, 1, c10_i39, &c10_hm_emlrtBCI,
              &c10_st);
          }

          c10_c_kk = c10_i42 - 1;
          c10_b_A_size[0] = 1;
          c10_b_A_size[1] = 2;
          c10_b_A_size[2] = 2;
          c10_i57 = 0;
          for (c10_i60 = 0; c10_i60 < 2; c10_i60++) {
            for (c10_i64 = 0; c10_i64 < 2; c10_i64++) {
              c10_c_A_data[c10_i64 + c10_i57] = c10_A[(c10_c_kk + c10_A.size(0) *
                c10_i64) + (c10_A.size(0) << 1) * c10_i60];
            }

            c10_i57 += 2;
          }

          c10_b_st.site = &c10_db_emlrtRSI;
          c10_squeeze(chartInstance, &c10_b_st, c10_c_A_data, c10_b_A_size,
                      c10_tmp_data, c10_tmp_size);
          c10_e_b.set_size(&c10_kd_emlrtRTEI, &c10_st, c10_tmp_size[0],
                           c10_tmp_size[1]);
          c10_s_loop_ub = c10_tmp_size[0] * c10_tmp_size[1] - 1;
          for (c10_i67 = 0; c10_i67 <= c10_s_loop_ub; c10_i67++) {
            c10_e_b[c10_i67] = c10_tmp_data[c10_i67];
          }

          c10_e_innerDimA = c10_b_a.size(1);
          c10_d_innerDimB = c10_e_b.size(0);
          c10_b_st.site = &c10_ac_emlrtRSI;
          c10_dynamic_size_checks(chartInstance, &c10_b_st, c10_b_a, c10_e_b,
            c10_e_innerDimA, c10_d_innerDimB);
          c10_b_st.site = &c10_bc_emlrtRSI;
          c10_mtimes(chartInstance, &c10_b_st, c10_b_a, c10_e_b, c10_b_y);
          for (c10_i84 = 0; c10_i84 < 4; c10_i84++) {
            c10_A__data[c10_i84] = c10_b_y[c10_i84];
          }

          _SF_MEX_LISTEN_FOR_CTRL_C(chartInstance->S);
        }

        covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 1, 2, 0);
        c10_d34 = (c10_o + c10_b_n_x) - 1.0;
        c10_b6 = (c10_o > c10_d34);
        c10_b9 = c10_b6;
        c10_b12 = false;
        c10_b14 = (c10_b9 || c10_b12);
        if (c10_b14) {
          c10_i27 = 1;
          c10_i30 = 0;
        } else {
          if (c10_o != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_o)))) {
            emlrtIntegerCheckR2012b(c10_o, &c10_ym_emlrtDCI, (emlrtConstCTX)
              c10_sp);
          }

          c10_i35 = c10_Psi.size(0);
          c10_i38 = static_cast<int32_T>(c10_o);
          if ((c10_i38 < 1) || (c10_i38 > c10_i35)) {
            emlrtDynamicBoundsCheckR2012b(c10_i38, 1, c10_i35, &c10_bo_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_i27 = c10_i38;
          if (c10_d34 != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_d34)))) {
            emlrtIntegerCheckR2012b(c10_d34, &c10_ao_emlrtDCI, (emlrtConstCTX)
              c10_sp);
          }

          c10_i47 = c10_Psi.size(0);
          c10_i51 = static_cast<int32_T>(c10_d34);
          if ((c10_i51 < 1) || (c10_i51 > c10_i47)) {
            emlrtDynamicBoundsCheckR2012b(c10_i51, 1, c10_i47, &c10_co_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_i30 = c10_i51;
        }

        c10_d38 = c10_e_i * c10_b_n_u + 1.0;
        c10_d39 = c10_e_i * c10_b_n_u + c10_b_n_u;
        c10_b16 = (c10_d38 > c10_d39);
        c10_b17 = c10_b16;
        c10_b18 = false;
        c10_b19 = (c10_b17 || c10_b18);
        if (c10_b19) {
          c10_i52 = 1;
          c10_i56 = 0;
        } else {
          if (c10_d38 != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_d38)))) {
            emlrtIntegerCheckR2012b(c10_d38, &c10_bo_emlrtDCI, (emlrtConstCTX)
              c10_sp);
          }

          c10_i59 = c10_Psi.size(1);
          c10_i63 = static_cast<int32_T>(c10_d38);
          if ((c10_i63 < 1) || (c10_i63 > c10_i59)) {
            emlrtDynamicBoundsCheckR2012b(c10_i63, 1, c10_i59, &c10_do_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_i52 = c10_i63;
          if (c10_d39 != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_d39)))) {
            emlrtIntegerCheckR2012b(c10_d39, &c10_co_emlrtDCI, (emlrtConstCTX)
              c10_sp);
          }

          c10_i68 = c10_Psi.size(1);
          c10_i71 = static_cast<int32_T>(c10_d39);
          if ((c10_i71 < 1) || (c10_i71 > c10_i68)) {
            emlrtDynamicBoundsCheckR2012b(c10_i71, 1, c10_i68, &c10_eo_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_i56 = c10_i71;
        }

        c10_b_r.set_size(&c10_od_emlrtRTEI, c10_sp, (c10_i30 - c10_i27) + 1);
        c10_q_loop_ub = c10_i30 - c10_i27;
        for (c10_i65 = 0; c10_i65 <= c10_q_loop_ub; c10_i65++) {
          c10_b_r[c10_i65] = (c10_i27 + c10_i65) - 1;
        }

        c10_r3.set_size(&c10_pd_emlrtRTEI, c10_sp, (c10_i56 - c10_i52) + 1);
        c10_t_loop_ub = c10_i56 - c10_i52;
        for (c10_i69 = 0; c10_i69 <= c10_t_loop_ub; c10_i69++) {
          c10_r3[c10_i69] = (c10_i52 + c10_i69) - 1;
        }

        c10_st.site = &c10_eb_emlrtRSI;
        c10_b_a.set_size(&c10_qd_emlrtRTEI, &c10_st, 2, 2);
        c10_v_loop_ub = 3;
        for (c10_i78 = 0; c10_i78 <= c10_v_loop_ub; c10_i78++) {
          c10_b_a[c10_i78] = c10_A__data[c10_i78];
        }

        c10_d43 = c10_e_i + 1.0;
        if (c10_d43 != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_d43)))) {
          emlrtIntegerCheckR2012b(c10_d43, &c10_gm_emlrtDCI, &c10_st);
        }

        c10_i86 = c10_c_B.size(0);
        c10_i88 = static_cast<int32_T>(c10_d43);
        if ((c10_i88 < 1) || (c10_i88 > c10_i86)) {
          emlrtDynamicBoundsCheckR2012b(c10_i88, 1, c10_i86, &c10_im_emlrtBCI,
            &c10_st);
        }

        c10_h_i = c10_i88 - 1;
        c10_B_size[0] = 1;
        c10_B_size[1] = 2;
        c10_B_size[2] = 5;
        c10_i99 = 0;
        for (c10_i101 = 0; c10_i101 < 5; c10_i101++) {
          for (c10_i102 = 0; c10_i102 < 2; c10_i102++) {
            c10_b_B_data[c10_i102 + c10_i99] = c10_c_B[(c10_h_i + c10_c_B.size(0)
              * c10_i102) + (c10_c_B.size(0) << 1) * c10_i101];
          }

          c10_i99 += 2;
        }

        c10_b_st.site = &c10_eb_emlrtRSI;
        c10_squeeze(chartInstance, &c10_b_st, c10_b_B_data, c10_B_size,
                    c10_tmp_data, c10_tmp_size);
        c10_e_b.set_size(&c10_sd_emlrtRTEI, &c10_st, c10_tmp_size[0],
                         c10_tmp_size[1]);
        c10_db_loop_ub = c10_tmp_size[0] * c10_tmp_size[1] - 1;
        for (c10_i106 = 0; c10_i106 <= c10_db_loop_ub; c10_i106++) {
          c10_e_b[c10_i106] = c10_tmp_data[c10_i106];
        }

        c10_g_innerDimA = c10_b_a.size(1);
        c10_h_innerDimB = c10_e_b.size(0);
        c10_b_st.site = &c10_ac_emlrtRSI;
        c10_dynamic_size_checks(chartInstance, &c10_b_st, c10_b_a, c10_e_b,
          c10_g_innerDimA, c10_h_innerDimB);
        c10_b_st.site = &c10_bc_emlrtRSI;
        c10_mtimes(chartInstance, &c10_b_st, c10_b_a, c10_e_b, c10_b_y);
        c10_d_tmp_size[0] = c10_b_y.size(0);
        c10_d_tmp_size[1] = c10_b_y.size(1);
        c10_fb_loop_ub = c10_b_y.size(0) * c10_b_y.size(1) - 1;
        for (c10_i112 = 0; c10_i112 <= c10_fb_loop_ub; c10_i112++) {
          c10_e_tmp_data[c10_i112] = c10_b_y[c10_i112];
        }

        c10_iv4[0] = c10_b_r.size(0);
        c10_iv4[1] = c10_r3.size(0);
        emlrtSubAssignSizeCheckR2012b(&c10_iv4[0], 2, &c10_d_tmp_size[0], 2,
          &c10_d_emlrtECI, (void *)c10_sp);
        c10_iv5[0] = c10_b_r.size(0);
        c10_iv5[1] = c10_r3.size(0);
        c10_kb_loop_ub = c10_iv5[1] - 1;
        for (c10_i123 = 0; c10_i123 <= c10_kb_loop_ub; c10_i123++) {
          c10_mb_loop_ub = c10_iv5[0] - 1;
          for (c10_i127 = 0; c10_i127 <= c10_mb_loop_ub; c10_i127++) {
            c10_Psi[c10_b_r[c10_i127] + c10_Psi.size(0) * c10_r3[c10_i123]] =
              c10_e_tmp_data[c10_i127 + c10_iv5[0] * c10_i123];
          }
        }

        _SF_MEX_LISTEN_FOR_CTRL_C(chartInstance->S);
      }

      covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 1, 1, 0);
      c10_st.site = &c10_fb_emlrtRSI;
      c10_eye(chartInstance, &c10_st, c10_b_n_x, c10_tmp_data, c10_tmp_size);
      for (c10_i8 = 0; c10_i8 < 4; c10_i8++) {
        c10_A__data[c10_i8] = c10_tmp_data[c10_i8];
      }

      c10_d_k = c10_b_k;
      c10_i12 = static_cast<int32_T>(c10_d_k);
      emlrtForLoopVectorCheckR2021a(1.0, 1.0, c10_d_k, mxDOUBLE_CLASS, c10_i12,
        &c10_ti_emlrtRTEI, (emlrtConstCTX)c10_sp);
      for (c10_f_i = 0; c10_f_i < c10_i12; c10_f_i++) {
        c10_e_i = 1.0 + static_cast<real_T>(c10_f_i);
        covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 1, 3, 1);
        c10_st.site = &c10_gb_emlrtRSI;
        c10_b_a.set_size(&c10_ud_emlrtRTEI, &c10_st, 2, 2);
        c10_h_loop_ub = 3;
        for (c10_i23 = 0; c10_i23 <= c10_h_loop_ub; c10_i23++) {
          c10_b_a[c10_i23] = c10_A__data[c10_i23];
        }

        c10_d36 = c10_kk - c10_e_i;
        if (c10_d36 != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_d36)))) {
          emlrtIntegerCheckR2012b(c10_d36, &c10_hm_emlrtDCI, &c10_st);
        }

        c10_i34 = c10_A.size(0);
        c10_i37 = static_cast<int32_T>(c10_d36);
        if ((c10_i37 < 1) || (c10_i37 > c10_i34)) {
          emlrtDynamicBoundsCheckR2012b(c10_i37, 1, c10_i34, &c10_jm_emlrtBCI,
            &c10_st);
        }

        c10_b_kk = c10_i37 - 1;
        c10_A_size[0] = 1;
        c10_A_size[1] = 2;
        c10_A_size[2] = 2;
        c10_i50 = 0;
        for (c10_i55 = 0; c10_i55 < 2; c10_i55++) {
          for (c10_i62 = 0; c10_i62 < 2; c10_i62++) {
            c10_b_A_data[c10_i62 + c10_i50] = c10_A[(c10_b_kk + c10_A.size(0) *
              c10_i62) + (c10_A.size(0) << 1) * c10_i55];
          }

          c10_i50 += 2;
        }

        c10_b_st.site = &c10_gb_emlrtRSI;
        c10_squeeze(chartInstance, &c10_b_st, c10_b_A_data, c10_A_size,
                    c10_tmp_data, c10_tmp_size);
        c10_e_b.set_size(&c10_kd_emlrtRTEI, &c10_st, c10_tmp_size[0],
                         c10_tmp_size[1]);
        c10_r_loop_ub = c10_tmp_size[0] * c10_tmp_size[1] - 1;
        for (c10_i66 = 0; c10_i66 <= c10_r_loop_ub; c10_i66++) {
          c10_e_b[c10_i66] = c10_tmp_data[c10_i66];
        }

        c10_d_innerDimA = c10_b_a.size(1);
        c10_c_innerDimB = c10_e_b.size(0);
        c10_b_st.site = &c10_ac_emlrtRSI;
        c10_dynamic_size_checks(chartInstance, &c10_b_st, c10_b_a, c10_e_b,
          c10_d_innerDimA, c10_c_innerDimB);
        c10_b_st.site = &c10_bc_emlrtRSI;
        c10_mtimes(chartInstance, &c10_b_st, c10_b_a, c10_e_b, c10_b_y);
        for (c10_i80 = 0; c10_i80 < 4; c10_i80++) {
          c10_A__data[c10_i80] = c10_b_y[c10_i80];
        }

        _SF_MEX_LISTEN_FOR_CTRL_C(chartInstance->S);
      }

      covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 1, 3, 0);
      c10_d33 = (c10_o + c10_b_n_x) - 1.0;
      c10_b4 = (c10_o > c10_d33);
      c10_b5 = c10_b4;
      c10_b8 = false;
      c10_b11 = (c10_b5 || c10_b8);
      if (c10_b11) {
        c10_i25 = 1;
        c10_i26 = 0;
      } else {
        if (c10_o != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_o)))) {
          emlrtIntegerCheckR2012b(c10_o, &c10_im_emlrtDCI, (emlrtConstCTX)c10_sp);
        }

        c10_i29 = c10_d.size(0);
        c10_i33 = static_cast<int32_T>(c10_o);
        if ((c10_i33 < 1) || (c10_i33 > c10_i29)) {
          emlrtDynamicBoundsCheckR2012b(c10_i33, 1, c10_i29, &c10_km_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_i25 = c10_i33;
        if (c10_d33 != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_d33)))) {
          emlrtIntegerCheckR2012b(c10_d33, &c10_jm_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i44 = c10_d.size(0);
        c10_i46 = static_cast<int32_T>(c10_d33);
        if ((c10_i46 < 1) || (c10_i46 > c10_i44)) {
          emlrtDynamicBoundsCheckR2012b(c10_i46, 1, c10_i44, &c10_mm_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_i26 = c10_i46;
      }

      c10_st.site = &c10_hb_emlrtRSI;
      c10_b_indexShapeCheck(chartInstance);
      c10_r1.set_size(&c10_xd_emlrtRTEI, c10_sp, 1, (c10_i26 - c10_i25) + 1);
      c10_k_loop_ub = c10_i26 - c10_i25;
      for (c10_i43 = 0; c10_i43 <= c10_k_loop_ub; c10_i43++) {
        c10_r1[c10_i43] = c10_d[(c10_i25 + c10_i43) - 1];
      }

      c10_st.site = &c10_hb_emlrtRSI;
      c10_b_st.site = &c10_bc_emlrtRSI;
      c10_b_mtimes(chartInstance, c10_A__data, c10_x_0, c10_b_tmp_data,
                   c10_b_tmp_size);
      c10_i54 = c10_r1.size(1);
      if ((c10_i54 != 2) && (c10_i54 != 1)) {
        emlrtDimSizeImpxCheckR2021b(c10_i54, 2, &c10_e_emlrtECI, (emlrtConstCTX)
          c10_sp);
      }

      c10_d40 = (c10_o + c10_b_n_x) - 1.0;
      c10_b20 = (c10_o > c10_d40);
      c10_b21 = c10_b20;
      c10_b22 = false;
      c10_b24 = (c10_b21 || c10_b22);
      if (c10_b24) {
        c10_i70 = 1;
        c10_i72 = 0;
      } else {
        if (c10_o != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_o)))) {
          emlrtIntegerCheckR2012b(c10_o, &c10_km_emlrtDCI, (emlrtConstCTX)c10_sp);
        }

        c10_i73 = c10_d.size(0);
        c10_i76 = static_cast<int32_T>(c10_o);
        if ((c10_i76 < 1) || (c10_i76 > c10_i73)) {
          emlrtDynamicBoundsCheckR2012b(c10_i76, 1, c10_i73, &c10_om_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_i70 = c10_i76;
        if (c10_d40 != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_d40)))) {
          emlrtIntegerCheckR2012b(c10_d40, &c10_mm_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i85 = c10_d.size(0);
        c10_i87 = static_cast<int32_T>(c10_d40);
        if ((c10_i87 < 1) || (c10_i87 > c10_i85)) {
          emlrtDynamicBoundsCheckR2012b(c10_i87, 1, c10_i85, &c10_pm_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_i72 = c10_i87;
      }

      if (c10_r1.size(1) == 2) {
        c10_c_tmp_size[0] = c10_r1.size(1);
        c10_w_loop_ub = c10_r1.size(1) - 1;
        for (c10_i83 = 0; c10_i83 <= c10_w_loop_ub; c10_i83++) {
          c10_c_tmp_data[c10_i83] = c10_r1[c10_i83] + c10_b_tmp_data[c10_i83];
        }
      } else {
        c10_binary_expand_op_1(chartInstance, c10_c_tmp_data, c10_c_tmp_size,
          c10_r1, c10_b_tmp_data);
      }

      c10_i82 = (c10_i72 - c10_i70) + 1;
      if (c10_i82 != 2) {
        emlrtSubAssignSizeCheck1dR2017a(c10_i82, 2, &c10_f_emlrtECI,
          (emlrtConstCTX)c10_sp);
      }

      c10_r2.set_size(&c10_yd_emlrtRTEI, c10_sp, 1, (c10_i72 - c10_i70) + 1);
      c10_x_loop_ub = c10_i72 - c10_i70;
      for (c10_i89 = 0; c10_i89 <= c10_x_loop_ub; c10_i89++) {
        c10_r2[c10_i89] = (c10_i70 + c10_i89) - 1;
      }

      c10_ab_loop_ub = c10_r2.size(1) - 1;
      for (c10_i95 = 0; c10_i95 <= c10_ab_loop_ub; c10_i95++) {
        c10_d[c10_r2[c10_i95]] = c10_c_tmp_data[c10_i95];
      }

      c10_d45 = c10_b_k - 1.0;
      c10_i98 = static_cast<int32_T>(c10_d45 + 1.0);
      emlrtForLoopVectorCheckR2021a(0.0, 1.0, c10_d45, mxDOUBLE_CLASS, c10_i98,
        &c10_ui_emlrtRTEI, (emlrtConstCTX)c10_sp);
      for (c10_j_i = 0; c10_j_i < c10_i98; c10_j_i++) {
        c10_e_i = static_cast<real_T>(c10_j_i);
        covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 1, 4, 1);
        c10_st.site = &c10_ib_emlrtRSI;
        c10_eye(chartInstance, &c10_st, c10_b_n_x, c10_tmp_data, c10_tmp_size);
        for (c10_i107 = 0; c10_i107 < 4; c10_i107++) {
          c10_A__data[c10_i107] = c10_tmp_data[c10_i107];
        }

        c10_d46 = (c10_b_k - c10_e_i) - 1.0;
        c10_i110 = static_cast<int32_T>(c10_d46);
        emlrtForLoopVectorCheckR2021a(1.0, 1.0, c10_d46, mxDOUBLE_CLASS,
          c10_i110, &c10_vi_emlrtRTEI, (emlrtConstCTX)c10_sp);
        for (c10_c_j = 0; c10_c_j < c10_i110; c10_c_j++) {
          c10_b_j = 1.0 + static_cast<real_T>(c10_c_j);
          covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 1, 5, 1);
          c10_st.site = &c10_jb_emlrtRSI;
          c10_b_a.set_size(&c10_be_emlrtRTEI, &c10_st, 2, 2);
          c10_ib_loop_ub = 3;
          for (c10_i115 = 0; c10_i115 <= c10_ib_loop_ub; c10_i115++) {
            c10_b_a[c10_i115] = c10_A__data[c10_i115];
          }

          c10_d49 = c10_kk - c10_b_j;
          if (c10_d49 != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_d49)))) {
            emlrtIntegerCheckR2012b(c10_d49, &c10_om_emlrtDCI, &c10_st);
          }

          c10_i121 = c10_A.size(0);
          c10_i122 = static_cast<int32_T>(c10_d49);
          if ((c10_i122 < 1) || (c10_i122 > c10_i121)) {
            emlrtDynamicBoundsCheckR2012b(c10_i122, 1, c10_i121,
              &c10_qm_emlrtBCI, &c10_st);
          }

          c10_d_kk = c10_i122 - 1;
          c10_c_A_size[0] = 1;
          c10_c_A_size[1] = 2;
          c10_c_A_size[2] = 2;
          c10_i135 = 0;
          for (c10_i136 = 0; c10_i136 < 2; c10_i136++) {
            for (c10_i139 = 0; c10_i139 < 2; c10_i139++) {
              c10_d_A_data[c10_i139 + c10_i135] = c10_A[(c10_d_kk + c10_A.size(0)
                * c10_i139) + (c10_A.size(0) << 1) * c10_i136];
            }

            c10_i135 += 2;
          }

          c10_b_st.site = &c10_jb_emlrtRSI;
          c10_squeeze(chartInstance, &c10_b_st, c10_d_A_data, c10_c_A_size,
                      c10_tmp_data, c10_tmp_size);
          c10_e_b.set_size(&c10_kd_emlrtRTEI, &c10_st, c10_tmp_size[0],
                           c10_tmp_size[1]);
          c10_rb_loop_ub = c10_tmp_size[0] * c10_tmp_size[1] - 1;
          for (c10_i144 = 0; c10_i144 <= c10_rb_loop_ub; c10_i144++) {
            c10_e_b[c10_i144] = c10_tmp_data[c10_i144];
          }

          c10_h_innerDimA = c10_b_a.size(1);
          c10_i_innerDimB = c10_e_b.size(0);
          c10_b_st.site = &c10_ac_emlrtRSI;
          c10_dynamic_size_checks(chartInstance, &c10_b_st, c10_b_a, c10_e_b,
            c10_h_innerDimA, c10_i_innerDimB);
          c10_b_st.site = &c10_bc_emlrtRSI;
          c10_mtimes(chartInstance, &c10_b_st, c10_b_a, c10_e_b, c10_b_y);
          for (c10_i146 = 0; c10_i146 < 4; c10_i146++) {
            c10_A__data[c10_i146] = c10_b_y[c10_i146];
          }

          _SF_MEX_LISTEN_FOR_CTRL_C(chartInstance->S);
        }

        covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 1, 5, 0);
        c10_d47 = (c10_o + c10_b_n_x) - 1.0;
        c10_b32 = (c10_o > c10_d47);
        c10_b33 = c10_b32;
        c10_b34 = false;
        c10_b35 = (c10_b33 || c10_b34);
        if (c10_b35) {
          c10_i117 = 1;
          c10_i118 = 0;
        } else {
          if (c10_o != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_o)))) {
            emlrtIntegerCheckR2012b(c10_o, &c10_pm_emlrtDCI, (emlrtConstCTX)
              c10_sp);
          }

          c10_i119 = c10_d.size(0);
          c10_i120 = static_cast<int32_T>(c10_o);
          if ((c10_i120 < 1) || (c10_i120 > c10_i119)) {
            emlrtDynamicBoundsCheckR2012b(c10_i120, 1, c10_i119,
              &c10_rm_emlrtBCI, (emlrtConstCTX)c10_sp);
          }

          c10_i117 = c10_i120;
          if (c10_d47 != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_d47)))) {
            emlrtIntegerCheckR2012b(c10_d47, &c10_qm_emlrtDCI, (emlrtConstCTX)
              c10_sp);
          }

          c10_i131 = c10_d.size(0);
          c10_i134 = static_cast<int32_T>(c10_d47);
          if ((c10_i134 < 1) || (c10_i134 > c10_i131)) {
            emlrtDynamicBoundsCheckR2012b(c10_i134, 1, c10_i131,
              &c10_sm_emlrtBCI, (emlrtConstCTX)c10_sp);
          }

          c10_i118 = c10_i134;
        }

        c10_st.site = &c10_kb_emlrtRSI;
        c10_b_indexShapeCheck(chartInstance);
        c10_d50 = c10_e_i + 1.0;
        if (c10_d50 != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_d50)))) {
          emlrtIntegerCheckR2012b(c10_d50, &c10_rm_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i130 = c10_b_D.size(0);
        c10_i132 = static_cast<int32_T>(c10_d50);
        if ((c10_i132 < 1) || (c10_i132 > c10_i130)) {
          emlrtDynamicBoundsCheckR2012b(c10_i132, 1, c10_i130, &c10_tm_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_k_i = c10_i132 - 1;
        for (c10_i137 = 0; c10_i137 < 2; c10_i137++) {
          c10_c_b_data[c10_i137] = c10_b_D[c10_k_i + c10_b_D.size(0) * c10_i137];
        }

        c10_r1.set_size(&c10_fe_emlrtRTEI, c10_sp, 1, (c10_i118 - c10_i117) + 1);
        c10_pb_loop_ub = c10_i118 - c10_i117;
        for (c10_i142 = 0; c10_i142 <= c10_pb_loop_ub; c10_i142++) {
          c10_r1[c10_i142] = c10_d[(c10_i117 + c10_i142) - 1];
        }

        c10_st.site = &c10_kb_emlrtRSI;
        c10_b_st.site = &c10_bc_emlrtRSI;
        c10_c_mtimes(chartInstance, c10_A__data, c10_c_b_data, c10_b_tmp_data,
                     c10_b_tmp_size);
        c10_i145 = c10_r1.size(1);
        if ((c10_i145 != 2) && (c10_i145 != 1)) {
          emlrtDimSizeImpxCheckR2021b(c10_i145, 2, &c10_g_emlrtECI,
            (emlrtConstCTX)c10_sp);
        }

        c10_d51 = (c10_o + c10_b_n_x) - 1.0;
        c10_b40 = (c10_o > c10_d51);
        c10_b41 = c10_b40;
        c10_b42 = false;
        c10_b43 = (c10_b41 || c10_b42);
        if (c10_b43) {
          c10_i147 = 1;
          c10_i148 = 0;
        } else {
          if (c10_o != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_o)))) {
            emlrtIntegerCheckR2012b(c10_o, &c10_sm_emlrtDCI, (emlrtConstCTX)
              c10_sp);
          }

          c10_i149 = c10_d.size(0);
          c10_i150 = static_cast<int32_T>(c10_o);
          if ((c10_i150 < 1) || (c10_i150 > c10_i149)) {
            emlrtDynamicBoundsCheckR2012b(c10_i150, 1, c10_i149,
              &c10_um_emlrtBCI, (emlrtConstCTX)c10_sp);
          }

          c10_i147 = c10_i150;
          if (c10_d51 != static_cast<real_T>(static_cast<int32_T>
               (muDoubleScalarFloor(c10_d51)))) {
            emlrtIntegerCheckR2012b(c10_d51, &c10_tm_emlrtDCI, (emlrtConstCTX)
              c10_sp);
          }

          c10_i153 = c10_d.size(0);
          c10_i154 = static_cast<int32_T>(c10_d51);
          if ((c10_i154 < 1) || (c10_i154 > c10_i153)) {
            emlrtDynamicBoundsCheckR2012b(c10_i154, 1, c10_i153,
              &c10_vm_emlrtBCI, (emlrtConstCTX)c10_sp);
          }

          c10_i148 = c10_i154;
        }

        if (c10_r1.size(1) == 2) {
          c10_c_tmp_size[0] = c10_r1.size(1);
          c10_sb_loop_ub = c10_r1.size(1) - 1;
          for (c10_i152 = 0; c10_i152 <= c10_sb_loop_ub; c10_i152++) {
            c10_c_tmp_data[c10_i152] = c10_r1[c10_i152] +
              c10_b_tmp_data[c10_i152];
          }
        } else {
          c10_binary_expand_op_1(chartInstance, c10_c_tmp_data, c10_c_tmp_size,
            c10_r1, c10_b_tmp_data);
        }

        c10_i151 = (c10_i148 - c10_i147) + 1;
        if (c10_i151 != 2) {
          emlrtSubAssignSizeCheck1dR2017a(c10_i151, 2, &c10_h_emlrtECI,
            (emlrtConstCTX)c10_sp);
        }

        c10_r2.set_size(&c10_ge_emlrtRTEI, c10_sp, 1, (c10_i148 - c10_i147) + 1);
        c10_tb_loop_ub = c10_i148 - c10_i147;
        for (c10_i155 = 0; c10_i155 <= c10_tb_loop_ub; c10_i155++) {
          c10_r2[c10_i155] = (c10_i147 + c10_i155) - 1;
        }

        c10_ub_loop_ub = c10_r2.size(1) - 1;
        for (c10_i156 = 0; c10_i156 <= c10_ub_loop_ub; c10_i156++) {
          c10_d[c10_r2[c10_i156]] = c10_c_tmp_data[c10_i156];
        }

        _SF_MEX_LISTEN_FOR_CTRL_C(chartInstance->S);
      }

      covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 1, 4, 0);
    } else {
      c10_d30 = (c10_o + c10_b_n_x) - 1.0;
      c10_b = (c10_o > c10_d30);
      c10_b1 = c10_b;
      c10_b2 = false;
      c10_b3 = (c10_b1 || c10_b2);
      if (c10_b3) {
        c10_i5 = 1;
        c10_i6 = 0;
      } else {
        if (c10_o != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_o)))) {
          emlrtIntegerCheckR2012b(c10_o, &c10_do_emlrtDCI, (emlrtConstCTX)c10_sp);
        }

        c10_i7 = c10_Psi.size(0);
        c10_i9 = static_cast<int32_T>(c10_o);
        if ((c10_i9 < 1) || (c10_i9 > c10_i7)) {
          emlrtDynamicBoundsCheckR2012b(c10_i9, 1, c10_i7, &c10_fo_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_i5 = c10_i9;
        if (c10_d30 != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_d30)))) {
          emlrtIntegerCheckR2012b(c10_d30, &c10_eo_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i15 = c10_Psi.size(0);
        c10_i16 = static_cast<int32_T>(c10_d30);
        if ((c10_i16 < 1) || (c10_i16 > c10_i15)) {
          emlrtDynamicBoundsCheckR2012b(c10_i16, 1, c10_i15, &c10_go_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_i6 = c10_i16;
      }

      c10_b_r.set_size(&c10_fd_emlrtRTEI, c10_sp, c10_Psi.size(1));
      c10_d_loop_ub = c10_Psi.size(1) - 1;
      for (c10_i11 = 0; c10_i11 <= c10_d_loop_ub; c10_i11++) {
        c10_b_r[c10_i11] = 1 + c10_i11;
      }

      c10_iv[0] = (c10_i6 - c10_i5) + 1;
      c10_iv[1] = c10_b_r.size(0);
      c10_e_loop_ub = c10_iv[1] - 1;
      for (c10_i17 = 0; c10_i17 <= c10_e_loop_ub; c10_i17++) {
        c10_f_loop_ub = c10_iv[0] - 1;
        for (c10_i21 = 0; c10_i21 <= c10_f_loop_ub; c10_i21++) {
          c10_Psi[((c10_i5 + c10_i21) + c10_Psi.size(0) * (c10_b_r[c10_i17] - 1))
            - 1] = 0.0;
        }
      }

      c10_d35 = (c10_o + c10_b_n_x) - 1.0;
      c10_b7 = (c10_o > c10_d35);
      c10_b10 = c10_b7;
      c10_b13 = false;
      c10_b15 = (c10_b10 || c10_b13);
      if (c10_b15) {
        c10_i28 = 1;
        c10_i32 = 0;
      } else {
        if (c10_o != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_o)))) {
          emlrtIntegerCheckR2012b(c10_o, &c10_um_emlrtDCI, (emlrtConstCTX)c10_sp);
        }

        c10_i36 = c10_d.size(0);
        c10_i40 = static_cast<int32_T>(c10_o);
        if ((c10_i40 < 1) || (c10_i40 > c10_i36)) {
          emlrtDynamicBoundsCheckR2012b(c10_i40, 1, c10_i36, &c10_wm_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_i28 = c10_i40;
        if (c10_d35 != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_d35)))) {
          emlrtIntegerCheckR2012b(c10_d35, &c10_vm_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i49 = c10_d.size(0);
        c10_i53 = static_cast<int32_T>(c10_d35);
        if ((c10_i53 < 1) || (c10_i53 > c10_i49)) {
          emlrtDynamicBoundsCheckR2012b(c10_i53, 1, c10_i49, &c10_xm_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_i32 = c10_i53;
      }

      c10_i41 = (c10_i32 - c10_i28) + 1;
      if (c10_i41 != 2) {
        emlrtSubAssignSizeCheck1dR2017a(c10_i41, 2, &c10_c_emlrtECI,
          (emlrtConstCTX)c10_sp);
      }

      c10_r2.set_size(&c10_gd_emlrtRTEI, c10_sp, 1, (c10_i32 - c10_i28) + 1);
      c10_m_loop_ub = c10_i32 - c10_i28;
      for (c10_i45 = 0; c10_i45 <= c10_m_loop_ub; c10_i45++) {
        c10_r2[c10_i45] = (c10_i28 + c10_i45) - 1;
      }

      c10_p_loop_ub = c10_r2.size(1) - 1;
      for (c10_i58 = 0; c10_i58 <= c10_p_loop_ub; c10_i58++) {
        c10_d[c10_r2[c10_i58]] = c10_x_0[c10_i58];
      }
    }

    c10_o += c10_b_n_x;
    if (covrtEmlIfEval(chartInstance->c10_covrtInstance, 14U, 1, 1,
                       covrtRelationalopUpdateFcn
                       (chartInstance->c10_covrtInstance, 14U, 1U, 1U, c10_b_k,
                        c10_b_N_hor, -1, 2U, static_cast<int32_T>(c10_b_k <
           c10_b_N_hor)))) {
      c10_d41 = (c10_o + c10_b_n_u) - 1.0;
      c10_b23 = (c10_o > c10_d41);
      c10_b25 = c10_b23;
      c10_b26 = false;
      c10_b27 = (c10_b25 || c10_b26);
      if (c10_b27) {
        c10_i75 = 1;
        c10_i77 = 0;
      } else {
        if (c10_o != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_o)))) {
          emlrtIntegerCheckR2012b(c10_o, &c10_fo_emlrtDCI, (emlrtConstCTX)c10_sp);
        }

        c10_i79 = c10_Psi.size(0);
        c10_i81 = static_cast<int32_T>(c10_o);
        if ((c10_i81 < 1) || (c10_i81 > c10_i79)) {
          emlrtDynamicBoundsCheckR2012b(c10_i81, 1, c10_i79, &c10_ho_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_i75 = c10_i81;
        if (c10_d41 != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_d41)))) {
          emlrtIntegerCheckR2012b(c10_d41, &c10_go_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i90 = c10_Psi.size(0);
        c10_i92 = static_cast<int32_T>(c10_d41);
        if ((c10_i92 < 1) || (c10_i92 > c10_i90)) {
          emlrtDynamicBoundsCheckR2012b(c10_i92, 1, c10_i90, &c10_io_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_i77 = c10_i92;
      }

      c10_d42 = c10_b_k * c10_b_n_u + 1.0;
      c10_d44 = (c10_b_k + 1.0) * c10_b_n_u;
      c10_b28 = (c10_d42 > c10_d44);
      c10_b29 = c10_b28;
      c10_b30 = false;
      c10_b31 = (c10_b29 || c10_b30);
      if (c10_b31) {
        c10_i93 = 1;
        c10_i94 = 0;
      } else {
        if (c10_d42 != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_d42)))) {
          emlrtIntegerCheckR2012b(c10_d42, &c10_ho_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i96 = c10_Psi.size(1);
        c10_i97 = static_cast<int32_T>(c10_d42);
        if ((c10_i97 < 1) || (c10_i97 > c10_i96)) {
          emlrtDynamicBoundsCheckR2012b(c10_i97, 1, c10_i96, &c10_jo_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_i93 = c10_i97;
        if (c10_d44 != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_d44)))) {
          emlrtIntegerCheckR2012b(c10_d44, &c10_io_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i103 = c10_Psi.size(1);
        c10_i105 = static_cast<int32_T>(c10_d44);
        if ((c10_i105 < 1) || (c10_i105 > c10_i103)) {
          emlrtDynamicBoundsCheckR2012b(c10_i105, 1, c10_i103, &c10_ko_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_i94 = c10_i105;
      }

      c10_b_r.set_size(&c10_he_emlrtRTEI, c10_sp, (c10_i77 - c10_i75) + 1);
      c10_bb_loop_ub = c10_i77 - c10_i75;
      for (c10_i100 = 0; c10_i100 <= c10_bb_loop_ub; c10_i100++) {
        c10_b_r[c10_i100] = (c10_i75 + c10_i100) - 1;
      }

      c10_r3.set_size(&c10_ie_emlrtRTEI, c10_sp, (c10_i94 - c10_i93) + 1);
      c10_cb_loop_ub = c10_i94 - c10_i93;
      for (c10_i104 = 0; c10_i104 <= c10_cb_loop_ub; c10_i104++) {
        c10_r3[c10_i104] = (c10_i93 + c10_i104) - 1;
      }

      c10_st.site = &c10_mb_emlrtRSI;
      c10_eye(chartInstance, &c10_st, c10_b_n_u, c10_tmp_data, c10_tmp_size);
      for (c10_i109 = 0; c10_i109 < 25; c10_i109++) {
        c10_d_tmp_data[c10_i109] = c10_tmp_data[c10_i109];
      }

      c10_iv1[0] = c10_b_r.size(0);
      c10_iv1[1] = c10_r3.size(0);
      for (c10_i111 = 0; c10_i111 < 2; c10_i111++) {
        c10_iv2[c10_i111] = 5;
      }

      emlrtSubAssignSizeCheckR2012b(&c10_iv1[0], 2, &c10_iv2[0], 2,
        &c10_i_emlrtECI, (void *)c10_sp);
      c10_iv3[0] = c10_b_r.size(0);
      c10_iv3[1] = c10_r3.size(0);
      c10_hb_loop_ub = c10_iv3[1] - 1;
      for (c10_i114 = 0; c10_i114 <= c10_hb_loop_ub; c10_i114++) {
        c10_jb_loop_ub = c10_iv3[0] - 1;
        for (c10_i116 = 0; c10_i116 <= c10_jb_loop_ub; c10_i116++) {
          c10_Psi[c10_b_r[c10_i116] + c10_Psi.size(0) * c10_r3[c10_i114]] =
            c10_d_tmp_data[c10_i116 + c10_iv3[0] * c10_i114];
        }
      }

      c10_d48 = (c10_o + c10_b_n_u) - 1.0;
      c10_b36 = (c10_o > c10_d48);
      c10_b37 = c10_b36;
      c10_b38 = false;
      c10_b39 = (c10_b37 || c10_b38);
      if (c10_b39) {
        c10_i124 = 1;
        c10_i125 = 0;
      } else {
        if (c10_o != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_o)))) {
          emlrtIntegerCheckR2012b(c10_o, &c10_wm_emlrtDCI, (emlrtConstCTX)c10_sp);
        }

        c10_i126 = c10_d.size(0);
        c10_i128 = static_cast<int32_T>(c10_o);
        if ((c10_i128 < 1) || (c10_i128 > c10_i126)) {
          emlrtDynamicBoundsCheckR2012b(c10_i128, 1, c10_i126, &c10_ym_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_i124 = c10_i128;
        if (c10_d48 != static_cast<real_T>(static_cast<int32_T>
             (muDoubleScalarFloor(c10_d48)))) {
          emlrtIntegerCheckR2012b(c10_d48, &c10_xm_emlrtDCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i138 = c10_d.size(0);
        c10_i140 = static_cast<int32_T>(c10_d48);
        if ((c10_i140 < 1) || (c10_i140 > c10_i138)) {
          emlrtDynamicBoundsCheckR2012b(c10_i140, 1, c10_i138, &c10_ao_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_i125 = c10_i140;
      }

      for (c10_i129 = 0; c10_i129 < 5; c10_i129++) {
        c10_f_tmp_data[c10_i129] = 0.0;
      }

      c10_i133 = (c10_i125 - c10_i124) + 1;
      if (c10_i133 != 5) {
        emlrtSubAssignSizeCheck1dR2017a(c10_i133, 5, &c10_j_emlrtECI,
          (emlrtConstCTX)c10_sp);
      }

      c10_r2.set_size(&c10_me_emlrtRTEI, c10_sp, 1, (c10_i125 - c10_i124) + 1);
      c10_ob_loop_ub = c10_i125 - c10_i124;
      for (c10_i141 = 0; c10_i141 <= c10_ob_loop_ub; c10_i141++) {
        c10_r2[c10_i141] = (c10_i124 + c10_i141) - 1;
      }

      c10_qb_loop_ub = c10_r2.size(1) - 1;
      for (c10_i143 = 0; c10_i143 <= c10_qb_loop_ub; c10_i143++) {
        c10_d[c10_r2[c10_i143]] = c10_f_tmp_data[c10_i143];
      }

      c10_o += c10_b_n_u;
    }

    _SF_MEX_LISTEN_FOR_CTRL_C(chartInstance->S);
  }

  covrtEmlForEval(chartInstance->c10_covrtInstance, 14U, 1, 0, 0);
  c10_st.site = &c10_ob_emlrtRSI;
  c10_innerDimA = c10_Psi.size(0);
  c10_b_st.site = &c10_ac_emlrtRSI;
  c10_dynamic_size_checks(chartInstance, &c10_b_st, c10_Psi, c10_H_sparse,
    c10_innerDimA, 142);
  c10_b_st.site = &c10_bc_emlrtRSI;
  c10_d_mtimes(chartInstance, &c10_b_st, c10_Psi, c10_H_sparse, c10_y);
  c10_st.site = &c10_ob_emlrtRSI;
  c10_b_a.set_size(&c10_oe_emlrtRTEI, &c10_st, c10_y.size(0), 142);
  c10_c_loop_ub = c10_y.size(0) * 142 - 1;
  for (c10_i4 = 0; c10_i4 <= c10_c_loop_ub; c10_i4++) {
    c10_b_a[c10_i4] = c10_y[c10_i4];
  }

  c10_b_innerDimA = c10_b_a.size(1);
  c10_innerDimB = c10_Psi.size(0);
  c10_b_st.site = &c10_ac_emlrtRSI;
  c10_dynamic_size_checks(chartInstance, &c10_b_st, c10_b_a, c10_Psi,
    c10_b_innerDimA, c10_innerDimB);
  c10_b_st.site = &c10_bc_emlrtRSI;
  c10_mtimes(chartInstance, &c10_b_st, c10_b_a, c10_Psi, c10_c_H);
  c10_e_b.set_size(&c10_pe_emlrtRTEI, c10_sp, 142, 142);
  for (c10_i14 = 0; c10_i14 < 142; c10_i14++) {
    for (c10_i19 = 0; c10_i19 < 142; c10_i19++) {
      c10_e_b[c10_i19 + c10_e_b.size(0) * c10_i14] = c10_H_sparse[c10_i19 + 142 *
        c10_i14] + c10_H_sparse[c10_i14 + 142 * c10_i19];
    }
  }

  c10_i18 = c10_e_b.size(0) * c10_e_b.size(1);
  c10_i20 = c10_i18;
  c10_g_loop_ub = c10_i20 - 1;
  for (c10_i22 = 0; c10_i22 <= c10_g_loop_ub; c10_i22++) {
    c10_e_b[c10_i22] = 0.5 * c10_e_b[c10_i22];
  }

  c10_st.site = &c10_pb_emlrtRSI;
  c10_c_a.set_size(&c10_qe_emlrtRTEI, &c10_st, c10_e_b.size(0), c10_e_b.size(1));
  c10_j_loop_ub = c10_e_b.size(0) * c10_e_b.size(1) - 1;
  for (c10_i31 = 0; c10_i31 <= c10_j_loop_ub; c10_i31++) {
    c10_c_a[c10_i31] = c10_e_b[c10_i31];
  }

  c10_b_innerDimB = c10_d.size(0);
  c10_b_st.site = &c10_ac_emlrtRSI;
  c10_b_dynamic_size_checks(chartInstance, &c10_b_st, c10_c_a, 142,
    c10_b_innerDimB);
  c10_b_st.site = &c10_bc_emlrtRSI;
  c10_e_mtimes(chartInstance, c10_c_a, c10_d, c10_y_data, c10_y_size);
  c10_o_loop_ub = c10_y_size[0] - 1;
  for (c10_i48 = 0; c10_i48 <= c10_o_loop_ub; c10_i48++) {
    c10_b_data[c10_i48] = c10_y_data[c10_i48];
  }

  c10_st.site = &c10_pb_emlrtRSI;
  for (c10_i61 = 0; c10_i61 < 142; c10_i61++) {
    c10_b_data[c10_i61] += c10_c_sparse_data[c10_i61];
  }

  c10_c_innerDimA = c10_Psi.size(0);
  c10_b_st.site = &c10_ac_emlrtRSI;
  c10_b_dynamic_size_checks(chartInstance, &c10_b_st, c10_Psi, c10_c_innerDimA,
    142);
  c10_b_st.site = &c10_bc_emlrtRSI;
  c10_f_mtimes(chartInstance, &c10_b_st, c10_Psi, c10_b_data, c10_b_c);
  c10_st.site = &c10_qb_emlrtRSI;
  c10_b_a.set_size(&c10_re_emlrtRTEI, &c10_st, c10_G_sparse.size(0), 142);
  c10_u_loop_ub = c10_G_sparse.size(0) * 142 - 1;
  for (c10_i74 = 0; c10_i74 <= c10_u_loop_ub; c10_i74++) {
    c10_b_a[c10_i74] = c10_G_sparse[c10_i74];
  }

  c10_f_innerDimA = c10_b_a.size(1);
  c10_e_innerDimB = c10_Psi.size(0);
  c10_b_st.site = &c10_ac_emlrtRSI;
  c10_dynamic_size_checks(chartInstance, &c10_b_st, c10_b_a, c10_Psi,
    c10_f_innerDimA, c10_e_innerDimB);
  c10_b_st.site = &c10_bc_emlrtRSI;
  c10_mtimes(chartInstance, &c10_b_st, c10_b_a, c10_Psi, c10_b_y);
  c10_c_G.set_size(&c10_se_emlrtRTEI, c10_sp, c10_b_y.size(0), c10_b_y.size(1));
  c10_y_loop_ub = c10_b_y.size(0) * c10_b_y.size(1) - 1;
  for (c10_i91 = 0; c10_i91 <= c10_y_loop_ub; c10_i91++) {
    c10_c_G[c10_i91] = c10_b_y[c10_i91];
  }

  c10_st.site = &c10_rb_emlrtRSI;
  c10_f_innerDimB = c10_d.size(0);
  c10_b_st.site = &c10_ac_emlrtRSI;
  c10_b_dynamic_size_checks(chartInstance, &c10_b_st, c10_G_sparse, 142,
    c10_f_innerDimB);
  c10_b_st.site = &c10_bc_emlrtRSI;
  c10_e_mtimes(chartInstance, c10_G_sparse, c10_d, c10_g_lb_data, c10_g_lb_size);
  if ((c10_g_lb_sparse_size[0] != c10_g_lb_size[0]) && ((c10_g_lb_sparse_size[0]
        != 1) && (c10_g_lb_size[0] != 1))) {
    emlrtDimSizeImpxCheckR2021b(c10_g_lb_sparse_size[0], c10_g_lb_size[0],
      &c10_p_emlrtECI, (emlrtConstCTX)c10_sp);
  }

  if (c10_g_lb_sparse_size[0] == c10_g_lb_size[0]) {
    c10_g_lb_size[0] = c10_g_lb_sparse_size[0];
    c10_eb_loop_ub = c10_g_lb_sparse_size[0] - 1;
    for (c10_i108 = 0; c10_i108 <= c10_eb_loop_ub; c10_i108++) {
      c10_g_lb_data[c10_i108] = c10_g_lb_sparse_data[c10_i108] -
        c10_g_lb_data[c10_i108];
    }
  } else {
    c10_minus(chartInstance, c10_g_lb_data, c10_g_lb_size, c10_g_lb_sparse_data,
              c10_g_lb_sparse_size);
  }

  c10_st.site = &c10_sb_emlrtRSI;
  c10_g_innerDimB = c10_d.size(0);
  c10_b_st.site = &c10_ac_emlrtRSI;
  c10_b_dynamic_size_checks(chartInstance, &c10_b_st, c10_G_sparse, 142,
    c10_g_innerDimB);
  c10_e_mtimes(chartInstance, c10_G_sparse, c10_d, c10_g_ub_data, c10_g_ub_size);
  if ((c10_g_ub_sparse_size[0] != c10_g_ub_size[0]) && ((c10_g_ub_sparse_size[0]
        != 1) && (c10_g_ub_size[0] != 1))) {
    emlrtDimSizeImpxCheckR2021b(c10_g_ub_sparse_size[0], c10_g_ub_size[0],
      &c10_q_emlrtECI, (emlrtConstCTX)c10_sp);
  }

  if (c10_g_ub_sparse_size[0] == c10_g_ub_size[0]) {
    c10_g_ub_size[0] = c10_g_ub_sparse_size[0];
    c10_gb_loop_ub = c10_g_ub_sparse_size[0] - 1;
    for (c10_i113 = 0; c10_i113 <= c10_gb_loop_ub; c10_i113++) {
      c10_g_ub_data[c10_i113] = c10_g_ub_sparse_data[c10_i113] -
        c10_g_ub_data[c10_i113];
    }
  } else {
    c10_minus(chartInstance, c10_g_ub_data, c10_g_ub_size, c10_g_ub_sparse_data,
              c10_g_ub_sparse_size);
  }
}

static void c10_eye(SFc10_ACCMPCInstanceStruct *chartInstance, const emlrtStack *
                    c10_sp, real_T c10_varargin_1, real_T c10_I_data[], int32_T
                    c10_I_size[2])
{
  static char_T c10_b_cv[28] = { 'C', 'o', 'd', 'e', 'r', ':', 'M', 'A', 'T',
    'L', 'A', 'B', ':', 'N', 'o', 'n', 'I', 'n', 't', 'e', 'g', 'e', 'r', 'I',
    'n', 'p', 'u', 't' };

  emlrtStack c10_b_st;
  emlrtStack c10_st;
  const mxArray *c10_b_y = NULL;
  const mxArray *c10_c_y = NULL;
  const mxArray *c10_d_y = NULL;
  const mxArray *c10_y = NULL;
  real_T c10_arg;
  real_T c10_b_varargin_1;
  real_T c10_c_varargin_1;
  real_T c10_fullk;
  real_T c10_x;
  int32_T c10_b_k;
  int32_T c10_b_u;
  int32_T c10_e_b;
  int32_T c10_f_b;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_k;
  int32_T c10_loop_ub;
  int32_T c10_m;
  int32_T c10_u;
  boolean_T c10_b;
  boolean_T c10_overflow;
  boolean_T c10_p;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_st.site = &c10_tb_emlrtRSI;
  c10_b_varargin_1 = c10_varargin_1;
  c10_x = c10_b_varargin_1;
  c10_fullk = c10_x;
  c10_b_st.site = &c10_vb_emlrtRSI;
  c10_c_varargin_1 = c10_fullk;
  c10_arg = c10_c_varargin_1;
  if (c10_arg != c10_arg) {
    c10_p = false;
  } else {
    c10_p = true;
  }

  if (c10_p) {
    c10_b = true;
  } else {
    c10_b = false;
  }

  if (!c10_b) {
    c10_y = NULL;
    sf_mex_assign(&c10_y, sf_mex_create("y", c10_b_cv, 10, 0U, 1U, 0U, 2, 1, 28),
                  false);
    c10_b_y = NULL;
    sf_mex_assign(&c10_b_y, sf_mex_create("y", c10_b_cv, 10, 0U, 1U, 0U, 2, 1,
      28), false);
    c10_u = MIN_int32_T;
    c10_c_y = NULL;
    sf_mex_assign(&c10_c_y, sf_mex_create("y", &c10_u, 6, 0U, 0U, 0U, 0), false);
    c10_b_u = MAX_int32_T;
    c10_d_y = NULL;
    sf_mex_assign(&c10_d_y, sf_mex_create("y", &c10_b_u, 6, 0U, 0U, 0U, 0),
                  false);
    sf_mex_call(&c10_b_st, &c10_f_emlrtMCI, "error", 0U, 2U, 14, c10_y, 14,
                sf_mex_call(&c10_b_st, NULL, "getString", 1U, 1U, 14,
      sf_mex_call(&c10_b_st, NULL, "message", 1U, 3U, 14, c10_b_y, 14, c10_c_y,
                  14, c10_d_y)));
  }

  c10_m = static_cast<int32_T>(c10_fullk);
  c10_I_size[0] = c10_m;
  c10_I_size[1] = c10_m;
  c10_loop_ub = c10_m * c10_m - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_I_data[c10_i] = 0.0;
  }

  c10_st.site = &c10_ub_emlrtRSI;
  c10_e_b = c10_m;
  c10_f_b = c10_e_b;
  if (c10_f_b < 1) {
    c10_overflow = false;
  } else {
    c10_overflow = (c10_f_b > 2147483646);
  }

  if (c10_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  c10_i1 = static_cast<uint8_T>(c10_m) - 1;
  for (c10_k = 0; c10_k <= c10_i1; c10_k++) {
    c10_b_k = c10_k;
    c10_I_data[c10_b_k + c10_I_size[0] * c10_b_k] = 1.0;
  }
}

static void c10_squeeze(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, real_T c10_e_a_data[], int32_T c10_d_a_size[3], real_T
  c10_b_data[], int32_T c10_b_b_size[2])
{
  static char_T c10_b_cv1[40] = { 'C', 'o', 'd', 'e', 'r', ':', 'M', 'A', 'T',
    'L', 'A', 'B', ':', 'g', 'e', 't', 'R', 'e', 's', 'h', 'a', 'p', 'e', 'D',
    'i', 'm', 's', '_', 'n', 'o', 't', 'S', 'a', 'm', 'e', 'N', 'u', 'm', 'e',
    'l' };

  static char_T c10_b_cv[39] = { 'C', 'o', 'd', 'e', 'r', ':', 't', 'o', 'o',
    'l', 'b', 'o', 'x', ':', 'r', 'e', 's', 'h', 'a', 'p', 'e', '_', 'e', 'm',
    'p', 't', 'y', 'R', 'e', 's', 'h', 'a', 'p', 'e', 'L', 'i', 'm', 'i', 't' };

  emlrtStack c10_st;
  const mxArray *c10_b_y = NULL;
  const mxArray *c10_c_y = NULL;
  const mxArray *c10_d_y = NULL;
  const mxArray *c10_e_y = NULL;
  const mxArray *c10_f_y = NULL;
  const mxArray *c10_y = NULL;
  int32_T c10_szb[2];
  int32_T c10_b_varargin_1;
  int32_T c10_b_varargin_2;
  int32_T c10_c_nx;
  int32_T c10_c_varargin_1;
  int32_T c10_c_varargin_2;
  int32_T c10_f_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_loop_ub;
  int32_T c10_maxdimlen;
  int32_T c10_result;
  int32_T c10_varargin_1;
  int32_T c10_varargin_2;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_szb[0] = 2;
  c10_szb[1] = c10_d_a_size[2];
  c10_i = c10_szb[0];
  c10_i1 = c10_szb[1];
  c10_st.site = &c10_wb_emlrtRSI;
  c10_varargin_1 = c10_i;
  c10_varargin_2 = c10_i1;
  c10_c_nx = c10_d_a_size[2] << 1;
  c10_szb[0] = c10_varargin_1;
  c10_szb[1] = c10_varargin_2;
  c10_f_n = 2;
  if (c10_d_a_size[2] > 2) {
    c10_f_n = c10_d_a_size[2];
  }

  c10_maxdimlen = muIntScalarMax_sint32(c10_c_nx, c10_f_n);
  if (c10_szb[0] > c10_maxdimlen) {
    c10_y = NULL;
    sf_mex_assign(&c10_y, sf_mex_create("y", c10_b_cv, 10, 0U, 1U, 0U, 2, 1, 39),
                  false);
    c10_c_y = NULL;
    sf_mex_assign(&c10_c_y, sf_mex_create("y", c10_b_cv, 10, 0U, 1U, 0U, 2, 1,
      39), false);
    sf_mex_call(&c10_st, &c10_g_emlrtMCI, "error", 0U, 2U, 14, c10_y, 14,
                sf_mex_call(&c10_st, NULL, "getString", 1U, 1U, 14, sf_mex_call(
      &c10_st, NULL, "message", 1U, 1U, 14, c10_c_y)));
  }

  if (c10_szb[1] > c10_maxdimlen) {
    c10_b_y = NULL;
    sf_mex_assign(&c10_b_y, sf_mex_create("y", c10_b_cv, 10, 0U, 1U, 0U, 2, 1,
      39), false);
    c10_d_y = NULL;
    sf_mex_assign(&c10_d_y, sf_mex_create("y", c10_b_cv, 10, 0U, 1U, 0U, 2, 1,
      39), false);
    sf_mex_call(&c10_st, &c10_g_emlrtMCI, "error", 0U, 2U, 14, c10_b_y, 14,
                sf_mex_call(&c10_st, NULL, "getString", 1U, 1U, 14, sf_mex_call(
      &c10_st, NULL, "message", 1U, 1U, 14, c10_d_y)));
  }

  c10_b_varargin_1 = c10_szb[0];
  c10_b_varargin_2 = c10_szb[1];
  c10_c_varargin_1 = c10_b_varargin_1;
  c10_c_varargin_2 = c10_b_varargin_2;
  c10_result = c10_c_varargin_1 * c10_c_varargin_2;
  if (c10_result != c10_c_nx) {
    c10_e_y = NULL;
    sf_mex_assign(&c10_e_y, sf_mex_create("y", c10_b_cv1, 10, 0U, 1U, 0U, 2, 1,
      40), false);
    c10_f_y = NULL;
    sf_mex_assign(&c10_f_y, sf_mex_create("y", c10_b_cv1, 10, 0U, 1U, 0U, 2, 1,
      40), false);
    sf_mex_call(&c10_st, &c10_i_emlrtMCI, "error", 0U, 2U, 14, c10_e_y, 14,
                sf_mex_call(&c10_st, NULL, "getString", 1U, 1U, 14, sf_mex_call(
      &c10_st, NULL, "message", 1U, 1U, 14, c10_f_y)));
  }

  c10_b_b_size[0] = c10_i;
  c10_b_b_size[1] = c10_i1;
  c10_loop_ub = c10_i * c10_i1 - 1;
  for (c10_i2 = 0; c10_i2 <= c10_loop_ub; c10_i2++) {
    c10_b_data[c10_i2] = c10_e_a_data[c10_i2];
  }
}

static void c10_dynamic_size_checks(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_b_a, coder::array<
  real_T, 2U> &c10_b, int32_T c10_innerDimA, int32_T c10_innerDimB)
{
  const mxArray *c10_b_y = NULL;
  const mxArray *c10_c_y = NULL;
  const mxArray *c10_d_y = NULL;
  const mxArray *c10_y = NULL;
  boolean_T c10_b1;
  boolean_T c10_b2;
  boolean_T c10_b3;
  boolean_T c10_e_b;
  boolean_T c10_guard1;
  boolean_T c10_innerDimOk;
  c10_innerDimOk = (c10_innerDimA == c10_innerDimB);
  if (!c10_innerDimOk) {
    c10_e_b = (c10_b_a.size(0) == 1);
    c10_b1 = (c10_b_a.size(1) == 1);
    c10_guard1 = false;
    if (c10_e_b && c10_b1) {
      c10_guard1 = true;
    } else {
      c10_b2 = (c10_b.size(0) == 1);
      c10_b3 = (c10_b.size(1) == 1);
      if (c10_b2 && c10_b3) {
        c10_guard1 = true;
      } else {
        c10_y = NULL;
        sf_mex_assign(&c10_y, sf_mex_create("y", c10_cv2, 10, 0U, 1U, 0U, 2, 1,
          15), false);
        c10_c_y = NULL;
        sf_mex_assign(&c10_c_y, sf_mex_create("y", c10_cv2, 10, 0U, 1U, 0U, 2, 1,
          15), false);
        sf_mex_call(c10_sp, &c10_k_emlrtMCI, "error", 0U, 2U, 14, c10_y, 14,
                    sf_mex_call(c10_sp, NULL, "getString", 1U, 1U, 14,
          sf_mex_call(c10_sp, NULL, "message", 1U, 1U, 14, c10_c_y)));
      }
    }

    if (c10_guard1) {
      c10_b_y = NULL;
      sf_mex_assign(&c10_b_y, sf_mex_create("y", c10_cv1, 10, 0U, 1U, 0U, 2, 1,
        45), false);
      c10_d_y = NULL;
      sf_mex_assign(&c10_d_y, sf_mex_create("y", c10_cv1, 10, 0U, 1U, 0U, 2, 1,
        45), false);
      sf_mex_call(c10_sp, &c10_j_emlrtMCI, "error", 0U, 2U, 14, c10_b_y, 14,
                  sf_mex_call(c10_sp, NULL, "getString", 1U, 1U, 14, sf_mex_call
        (c10_sp, NULL, "message", 1U, 1U, 14, c10_d_y)));
    }
  }
}

static void c10_mtimes(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_A, coder::array<real_T, 2U>
  &c10_c_B, coder::array<real_T, 2U> &c10_g_C)
{
  ptrdiff_t c10_k_t;
  ptrdiff_t c10_lda_t;
  ptrdiff_t c10_ldb_t;
  ptrdiff_t c10_ldc_t;
  ptrdiff_t c10_m_t;
  ptrdiff_t c10_n_t;
  emlrtStack c10_b_st;
  emlrtStack c10_st;
  real_T c10_alpha1;
  real_T c10_beta1;
  int32_T c10_LD1;
  int32_T c10_LD2;
  int32_T c10_LDC;
  int32_T c10_b_M;
  int32_T c10_b_k;
  int32_T c10_b_ldc;
  int32_T c10_b_mA;
  int32_T c10_b_mB;
  int32_T c10_b_mc;
  int32_T c10_b_nA;
  int32_T c10_b_nB;
  int32_T c10_b_nc;
  int32_T c10_b_var;
  int32_T c10_c_m;
  int32_T c10_c_mA;
  int32_T c10_c_nA;
  int32_T c10_c_nB;
  int32_T c10_c_var;
  int32_T c10_d_var;
  int32_T c10_e_K;
  int32_T c10_e_var;
  int32_T c10_f_n;
  int32_T c10_f_var;
  int32_T c10_g_N;
  int32_T c10_h_n;
  int32_T c10_i;
  int32_T c10_k;
  int32_T c10_lda;
  int32_T c10_ldb;
  int32_T c10_loop_ub;
  int32_T c10_m;
  int32_T c10_mC;
  int32_T c10_nC;
  int32_T c10_var;
  char_T c10_TRANSA1;
  char_T c10_TRANSB1;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_b_mA = c10_A.size(0);
  c10_b_nA = c10_A.size(1);
  c10_b_mB = c10_c_B.size(0);
  c10_b_nB = c10_c_B.size(1);
  c10_c_mA = c10_b_mA;
  c10_c_nA = c10_b_nA;
  c10_c_nB = c10_b_nB;
  c10_m = c10_c_mA;
  c10_f_n = c10_c_nB;
  c10_k = c10_c_nA;
  if ((c10_b_mA == 0) || (c10_b_nA == 0) || (c10_b_mB == 0) || (c10_b_nB == 0))
  {
    c10_g_C.set_size(&c10_ye_emlrtRTEI, c10_sp, c10_b_mA, c10_b_nB);
    c10_loop_ub = c10_b_mA * c10_b_nB - 1;
    for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
      c10_g_C[c10_i] = 0.0;
    }
  } else {
    c10_st.site = &c10_cc_emlrtRSI;
    c10_b_M = c10_m;
    c10_g_N = c10_f_n;
    c10_e_K = c10_k;
    c10_LD1 = c10_b_mA;
    c10_LD2 = c10_b_mB;
    c10_mC = c10_b_mA;
    c10_nC = c10_b_nB;
    c10_LDC = c10_m;
    c10_b_st.site = &c10_ic_emlrtRSI;
    c10_c_m = c10_b_M;
    c10_h_n = c10_g_N;
    c10_b_k = c10_e_K;
    c10_lda = c10_LD1;
    c10_ldb = c10_LD2;
    c10_b_mc = c10_mC;
    c10_b_nc = c10_nC;
    c10_b_ldc = c10_LDC;
    c10_TRANSB1 = 'N';
    c10_TRANSA1 = 'N';
    c10_alpha1 = 1.0;
    c10_beta1 = 0.0;
    c10_var = c10_c_m;
    c10_m_t = (ptrdiff_t)c10_var;
    c10_b_var = c10_h_n;
    c10_n_t = (ptrdiff_t)c10_b_var;
    c10_c_var = c10_b_k;
    c10_k_t = (ptrdiff_t)c10_c_var;
    c10_d_var = c10_lda;
    c10_lda_t = (ptrdiff_t)c10_d_var;
    c10_e_var = c10_ldb;
    c10_ldb_t = (ptrdiff_t)c10_e_var;
    c10_f_var = c10_b_ldc;
    c10_ldc_t = (ptrdiff_t)c10_f_var;
    c10_g_C.set_size(&c10_xe_emlrtRTEI, &c10_b_st, c10_b_mc, c10_b_nc);
    dgemm(&c10_TRANSA1, &c10_TRANSB1, &c10_m_t, &c10_n_t, &c10_k_t, &c10_alpha1,
          &(c10_A.data())[0], &c10_lda_t, &(c10_c_B.data())[0], &c10_ldb_t,
          &c10_beta1, &(c10_g_C.data())[0], &c10_ldc_t);
  }
}

static void c10_b_mtimes(SFc10_ACCMPCInstanceStruct *chartInstance, real_T
  c10_b_A_data[], real_T c10_c_B[2], real_T c10_b_C_data[], int32_T
  c10_b_C_size[1])
{
  ptrdiff_t c10_k_t;
  ptrdiff_t c10_lda_t;
  ptrdiff_t c10_ldb_t;
  ptrdiff_t c10_ldc_t;
  ptrdiff_t c10_m_t;
  ptrdiff_t c10_n_t;
  real_T c10_alpha1;
  real_T c10_beta1;
  char_T c10_TRANSA1;
  char_T c10_TRANSB1;
  c10_TRANSB1 = 'N';
  c10_TRANSA1 = 'N';
  c10_alpha1 = 1.0;
  c10_beta1 = 0.0;
  c10_m_t = (ptrdiff_t)2;
  c10_n_t = (ptrdiff_t)1;
  c10_k_t = (ptrdiff_t)2;
  c10_lda_t = (ptrdiff_t)2;
  c10_ldb_t = (ptrdiff_t)2;
  c10_ldc_t = (ptrdiff_t)2;
  c10_b_C_size[0] = 2;
  dgemm(&c10_TRANSA1, &c10_TRANSB1, &c10_m_t, &c10_n_t, &c10_k_t, &c10_alpha1,
        &c10_b_A_data[0], &c10_lda_t, &c10_c_B[0], &c10_ldb_t, &c10_beta1,
        &c10_b_C_data[0], &c10_ldc_t);
}

static void c10_c_mtimes(SFc10_ACCMPCInstanceStruct *chartInstance, real_T
  c10_b_A_data[], real_T c10_b_B_data[], real_T c10_b_C_data[], int32_T
  c10_b_C_size[1])
{
  ptrdiff_t c10_k_t;
  ptrdiff_t c10_lda_t;
  ptrdiff_t c10_ldb_t;
  ptrdiff_t c10_ldc_t;
  ptrdiff_t c10_m_t;
  ptrdiff_t c10_n_t;
  real_T c10_alpha1;
  real_T c10_beta1;
  char_T c10_TRANSA1;
  char_T c10_TRANSB1;
  c10_TRANSB1 = 'T';
  c10_TRANSA1 = 'N';
  c10_alpha1 = 1.0;
  c10_beta1 = 0.0;
  c10_m_t = (ptrdiff_t)2;
  c10_n_t = (ptrdiff_t)1;
  c10_k_t = (ptrdiff_t)2;
  c10_lda_t = (ptrdiff_t)2;
  c10_ldb_t = (ptrdiff_t)1;
  c10_ldc_t = (ptrdiff_t)2;
  c10_b_C_size[0] = 2;
  dgemm(&c10_TRANSA1, &c10_TRANSB1, &c10_m_t, &c10_n_t, &c10_k_t, &c10_alpha1,
        &c10_b_A_data[0], &c10_lda_t, &c10_b_B_data[0], &c10_ldb_t, &c10_beta1,
        &c10_b_C_data[0], &c10_ldc_t);
}

static void c10_d_mtimes(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_A, coder::array<real_T, 2U>
  &c10_c_B, coder::array<real_T, 2U> &c10_g_C)
{
  ptrdiff_t c10_k_t;
  ptrdiff_t c10_lda_t;
  ptrdiff_t c10_ldb_t;
  ptrdiff_t c10_ldc_t;
  ptrdiff_t c10_m_t;
  ptrdiff_t c10_n_t;
  emlrtStack c10_b_st;
  emlrtStack c10_st;
  real_T c10_alpha1;
  real_T c10_beta1;
  int32_T c10_LD1;
  int32_T c10_LDC;
  int32_T c10_b_M;
  int32_T c10_b_k;
  int32_T c10_b_ldc;
  int32_T c10_b_mA;
  int32_T c10_b_mc;
  int32_T c10_b_nA;
  int32_T c10_b_var;
  int32_T c10_c_m;
  int32_T c10_c_mA;
  int32_T c10_c_nA;
  int32_T c10_c_var;
  int32_T c10_d_var;
  int32_T c10_e_K;
  int32_T c10_i;
  int32_T c10_k;
  int32_T c10_lda;
  int32_T c10_loop_ub;
  int32_T c10_m;
  int32_T c10_mC;
  int32_T c10_var;
  char_T c10_TRANSA1;
  char_T c10_TRANSB1;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_b_mA = c10_A.size(0);
  c10_b_nA = c10_A.size(1);
  c10_c_mA = c10_b_mA;
  c10_c_nA = c10_b_nA;
  c10_m = c10_c_nA;
  c10_k = c10_c_mA;
  if ((c10_b_mA == 0) || (c10_b_nA == 0)) {
    c10_g_C.set_size(&c10_ye_emlrtRTEI, c10_sp, c10_b_nA, 142);
    c10_loop_ub = c10_b_nA * 142 - 1;
    for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
      c10_g_C[c10_i] = 0.0;
    }
  } else {
    c10_st.site = &c10_cc_emlrtRSI;
    c10_b_M = c10_m;
    c10_e_K = c10_k;
    c10_LD1 = c10_b_mA;
    c10_mC = c10_b_nA;
    c10_LDC = c10_m;
    c10_b_st.site = &c10_ic_emlrtRSI;
    c10_c_m = c10_b_M;
    c10_b_k = c10_e_K;
    c10_lda = c10_LD1;
    c10_b_mc = c10_mC;
    c10_b_ldc = c10_LDC;
    c10_TRANSB1 = 'N';
    c10_TRANSA1 = 'T';
    c10_alpha1 = 1.0;
    c10_beta1 = 0.0;
    c10_var = c10_c_m;
    c10_m_t = (ptrdiff_t)c10_var;
    c10_n_t = (ptrdiff_t)142;
    c10_b_var = c10_b_k;
    c10_k_t = (ptrdiff_t)c10_b_var;
    c10_c_var = c10_lda;
    c10_lda_t = (ptrdiff_t)c10_c_var;
    c10_ldb_t = (ptrdiff_t)142;
    c10_d_var = c10_b_ldc;
    c10_ldc_t = (ptrdiff_t)c10_d_var;
    c10_g_C.set_size(&c10_xe_emlrtRTEI, &c10_b_st, c10_b_mc, 142);
    dgemm(&c10_TRANSA1, &c10_TRANSB1, &c10_m_t, &c10_n_t, &c10_k_t, &c10_alpha1,
          &(c10_A.data())[0], &c10_lda_t, &(c10_c_B.data())[0], &c10_ldb_t,
          &c10_beta1, &(c10_g_C.data())[0], &c10_ldc_t);
  }
}

static void c10_b_dynamic_size_checks(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_b_a, int32_T
  c10_innerDimA, int32_T c10_innerDimB)
{
  const mxArray *c10_b_y = NULL;
  const mxArray *c10_c_y = NULL;
  const mxArray *c10_d_y = NULL;
  const mxArray *c10_y = NULL;
  boolean_T c10_b;
  boolean_T c10_b1;
  boolean_T c10_innerDimOk;
  c10_innerDimOk = (c10_innerDimA == c10_innerDimB);
  if (!c10_innerDimOk) {
    c10_b = (c10_b_a.size(0) == 1);
    c10_b1 = (c10_b_a.size(1) == 1);
    if (c10_b && c10_b1) {
      c10_b_y = NULL;
      sf_mex_assign(&c10_b_y, sf_mex_create("y", c10_cv1, 10, 0U, 1U, 0U, 2, 1,
        45), false);
      c10_d_y = NULL;
      sf_mex_assign(&c10_d_y, sf_mex_create("y", c10_cv1, 10, 0U, 1U, 0U, 2, 1,
        45), false);
      sf_mex_call(c10_sp, &c10_j_emlrtMCI, "error", 0U, 2U, 14, c10_b_y, 14,
                  sf_mex_call(c10_sp, NULL, "getString", 1U, 1U, 14, sf_mex_call
        (c10_sp, NULL, "message", 1U, 1U, 14, c10_d_y)));
    } else {
      c10_y = NULL;
      sf_mex_assign(&c10_y, sf_mex_create("y", c10_cv2, 10, 0U, 1U, 0U, 2, 1, 15),
                    false);
      c10_c_y = NULL;
      sf_mex_assign(&c10_c_y, sf_mex_create("y", c10_cv2, 10, 0U, 1U, 0U, 2, 1,
        15), false);
      sf_mex_call(c10_sp, &c10_k_emlrtMCI, "error", 0U, 2U, 14, c10_y, 14,
                  sf_mex_call(c10_sp, NULL, "getString", 1U, 1U, 14, sf_mex_call
        (c10_sp, NULL, "message", 1U, 1U, 14, c10_c_y)));
    }
  }
}

static void c10_e_mtimes(SFc10_ACCMPCInstanceStruct *chartInstance, coder::array<
  real_T, 2U> &c10_A, coder::array<real_T, 1U> &c10_c_B, real_T c10_b_C_data[],
  int32_T c10_b_C_size[1])
{
  ptrdiff_t c10_k_t;
  ptrdiff_t c10_lda_t;
  ptrdiff_t c10_ldb_t;
  ptrdiff_t c10_ldc_t;
  ptrdiff_t c10_m_t;
  ptrdiff_t c10_n_t;
  real_T c10_alpha1;
  real_T c10_beta1;
  int32_T c10_LD1;
  int32_T c10_LD2;
  int32_T c10_LDC;
  int32_T c10_b_M;
  int32_T c10_b_ldc;
  int32_T c10_b_mA;
  int32_T c10_b_mB;
  int32_T c10_b_mc;
  int32_T c10_b_var;
  int32_T c10_c_m;
  int32_T c10_c_mA;
  int32_T c10_c_var;
  int32_T c10_d_var;
  int32_T c10_i;
  int32_T c10_lda;
  int32_T c10_ldb;
  int32_T c10_loop_ub;
  int32_T c10_m;
  int32_T c10_mC;
  int32_T c10_var;
  char_T c10_TRANSA1;
  char_T c10_TRANSB1;
  c10_b_mA = c10_A.size(0);
  c10_b_mB = c10_c_B.size(0);
  c10_c_mA = c10_b_mA;
  c10_m = c10_c_mA;
  if (c10_b_mA == 0) {
    c10_b_C_size[0] = c10_b_mA;
    c10_loop_ub = c10_b_mA - 1;
    for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
      c10_b_C_data[c10_i] = 0.0;
    }
  } else {
    c10_b_M = c10_m;
    c10_LD1 = c10_b_mA;
    c10_LD2 = c10_b_mB;
    c10_mC = c10_b_mA;
    c10_LDC = c10_m;
    c10_c_m = c10_b_M;
    c10_lda = c10_LD1;
    c10_ldb = c10_LD2;
    c10_b_mc = c10_mC;
    c10_b_ldc = c10_LDC;
    c10_TRANSB1 = 'N';
    c10_TRANSA1 = 'N';
    c10_alpha1 = 1.0;
    c10_beta1 = 0.0;
    c10_var = c10_c_m;
    c10_m_t = (ptrdiff_t)c10_var;
    c10_n_t = (ptrdiff_t)1;
    c10_k_t = (ptrdiff_t)142;
    c10_b_var = c10_lda;
    c10_lda_t = (ptrdiff_t)c10_b_var;
    c10_c_var = c10_ldb;
    c10_ldb_t = (ptrdiff_t)c10_c_var;
    c10_d_var = c10_b_ldc;
    c10_ldc_t = (ptrdiff_t)c10_d_var;
    c10_b_C_size[0] = c10_b_mc;
    dgemm(&c10_TRANSA1, &c10_TRANSB1, &c10_m_t, &c10_n_t, &c10_k_t, &c10_alpha1,
          &(c10_A.data())[0], &c10_lda_t, &(c10_c_B.data())[0], &c10_ldb_t,
          &c10_beta1, &c10_b_C_data[0], &c10_ldc_t);
  }
}

static void c10_f_mtimes(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_A, real_T c10_b_B_data[],
  coder::array<real_T, 1U> &c10_g_C)
{
  ptrdiff_t c10_k_t;
  ptrdiff_t c10_lda_t;
  ptrdiff_t c10_ldb_t;
  ptrdiff_t c10_ldc_t;
  ptrdiff_t c10_m_t;
  ptrdiff_t c10_n_t;
  emlrtStack c10_b_st;
  emlrtStack c10_st;
  real_T c10_alpha1;
  real_T c10_beta1;
  int32_T c10_LD1;
  int32_T c10_LDC;
  int32_T c10_b_M;
  int32_T c10_b_k;
  int32_T c10_b_ldc;
  int32_T c10_b_mA;
  int32_T c10_b_mc;
  int32_T c10_b_nA;
  int32_T c10_b_var;
  int32_T c10_c_m;
  int32_T c10_c_mA;
  int32_T c10_c_nA;
  int32_T c10_c_var;
  int32_T c10_d_var;
  int32_T c10_e_K;
  int32_T c10_i;
  int32_T c10_k;
  int32_T c10_lda;
  int32_T c10_loop_ub;
  int32_T c10_m;
  int32_T c10_mC;
  int32_T c10_var;
  char_T c10_TRANSA1;
  char_T c10_TRANSB1;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_b_mA = c10_A.size(0);
  c10_b_nA = c10_A.size(1);
  c10_c_mA = c10_b_mA;
  c10_c_nA = c10_b_nA;
  c10_m = c10_c_nA;
  c10_k = c10_c_mA;
  if ((c10_b_mA == 0) || (c10_b_nA == 0)) {
    c10_g_C.set_size(&c10_ye_emlrtRTEI, c10_sp, c10_b_nA);
    c10_loop_ub = c10_b_nA - 1;
    for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
      c10_g_C[c10_i] = 0.0;
    }
  } else {
    c10_st.site = &c10_cc_emlrtRSI;
    c10_b_M = c10_m;
    c10_e_K = c10_k;
    c10_LD1 = c10_b_mA;
    c10_mC = c10_b_nA;
    c10_LDC = c10_m;
    c10_b_st.site = &c10_ic_emlrtRSI;
    c10_c_m = c10_b_M;
    c10_b_k = c10_e_K;
    c10_lda = c10_LD1;
    c10_b_mc = c10_mC;
    c10_b_ldc = c10_LDC;
    c10_TRANSB1 = 'N';
    c10_TRANSA1 = 'T';
    c10_alpha1 = 1.0;
    c10_beta1 = 0.0;
    c10_var = c10_c_m;
    c10_m_t = (ptrdiff_t)c10_var;
    c10_n_t = (ptrdiff_t)1;
    c10_b_var = c10_b_k;
    c10_k_t = (ptrdiff_t)c10_b_var;
    c10_c_var = c10_lda;
    c10_lda_t = (ptrdiff_t)c10_c_var;
    c10_ldb_t = (ptrdiff_t)142;
    c10_d_var = c10_b_ldc;
    c10_ldc_t = (ptrdiff_t)c10_d_var;
    c10_g_C.set_size(&c10_xe_emlrtRTEI, &c10_b_st, c10_b_mc);
    dgemm(&c10_TRANSA1, &c10_TRANSB1, &c10_m_t, &c10_n_t, &c10_k_t, &c10_alpha1,
          &(c10_A.data())[0], &c10_lda_t, &c10_b_B_data[0], &c10_ldb_t,
          &c10_beta1, &(c10_g_C.data())[0], &c10_ldc_t);
  }
}

static void c10_quadprog(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_c_H, coder::array<real_T, 1U>
  &c10_f, coder::array<real_T, 2U> &c10_Aeq, real_T c10_beq_data[], int32_T
  c10_beq_size[1], real_T c10_lb_data[], int32_T c10_lb_size[1], real_T
  c10_ub_data[], int32_T c10_ub_size[1], coder::array<real_T, 2U> &c10_b_x0,
  c10_scZhlMkNxPxOgM0FLkVrfPH *c10_b_options, coder::array<real_T, 2U> &c10_x,
  real_T *c10_b_fval, real_T *c10_b_exitflag, c10_skLNHjLOlx0hU1nw1PS4uP
  *c10_output, c10_s_rT6K4jgKQs07oLkxgXMCC *c10_lambda)
{
  static c10_skLNHjLOlx0hU1nw1PS4uP c10_b_r = { { 'a', 'c', 't', 'i', 'v', 'e',
      '-', 's', 'e', 't' },            /* algorithm */
    0.0,                               /* firstorderopt */
    0.0,                               /* constrviolation */
    0.0                                /* iterations */
  };

  static char_T c10_b_cv[50] = { 'o', 'p', 't', 'i', 'm', 'l', 'i', 'b', '_',
    'c', 'o', 'd', 'e', 'g', 'e', 'n', ':', 'o', 'p', 't', 'i', 'm', 'o', 'p',
    't', 'i', 'o', 'n', 's', ':', 'I', 'n', 'v', 'a', 'l', 'i', 'd', 'S', 'o',
    'l', 'v', 'e', 'r', 'O', 'p', 't', 'i', 'o', 'n', 's' };

  static char_T c10_b_cv2[41] = { 'o', 'p', 't', 'i', 'm', 'l', 'i', 'b', '_',
    'c', 'o', 'd', 'e', 'g', 'e', 'n', ':', 'o', 'p', 't', 'i', 'm', 'o', 'p',
    't', 'i', 'o', 'n', 's', ':', 'I', 'n', 'v', 'a', 'l', 'i', 'd', 'T', 'y',
    'p', 'e' };

  static char_T c10_cv8[35] = { 'o', 'p', 't', 'i', 'm', ':', 'q', 'u', 'a', 'd',
    'p', 'r', 'o', 'g', ':', 'I', 'n', 'v', 'a', 'l', 'i', 'd', 'S', 'i', 'z',
    'e', 's', 'O', 'f', 'H', 'A', 'n', 'd', 'X', '0' };

  static char_T c10_b_cv5[34] = { 'o', 'p', 't', 'i', 'm', '_', 'c', 'o', 'd',
    'e', 'g', 'e', 'n', ':', 'q', 'u', 'a', 'd', 'p', 'r', 'o', 'g', ':', 'N',
    'u', 'l', 'l', 'H', 'e', 's', 's', 'i', 'a', 'n' };

  static char_T c10_cv7[34] = { 'o', 'p', 't', 'i', 'm', ':', 'q', 'u', 'a', 'd',
    'p', 'r', 'o', 'g', ':', 'M', 'i', 's', 'm', 'a', 't', 'c', 'h', 'O', 'b',
    'j', 'C', 'o', 'e', 'f', 'S', 'i', 'z', 'e' };

  static char_T c10_b_cv6[31] = { 'o', 'p', 't', 'i', 'm', ':', 'q', 'u', 'a',
    'd', 'p', 'r', 'o', 'g', ':', 'N', 'o', 'n', 'S', 'q', 'u', 'a', 'r', 'e',
    'H', 'e', 's', 's', 'i', 'a', 'n' };

  static char_T c10_b_cv4[13] = { '\r', '\'', 'a', 'c', 't', 'i', 'v', 'e', '-',
    's', 'e', 't', '\'' };

  static char_T c10_e_b[10] = { 'a', 'c', 't', 'i', 'v', 'e', '-', 's', 'e', 't'
  };

  static char_T c10_b_cv3[9] = { 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm' };

  static char_T c10_b[8] = { 'q', 'u', 'a', 'd', 'p', 'r', 'o', 'g' };

  static char_T c10_b_cv1[8] = { 'q', 'u', 'a', 'd', 'p', 'r', 'o', 'g' };

  ptrdiff_t c10_b_incx_t;
  ptrdiff_t c10_b_incy_t;
  ptrdiff_t c10_b_n_t;
  ptrdiff_t c10_c_incx_t;
  ptrdiff_t c10_c_n_t;
  ptrdiff_t c10_idxmax_t;
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 2U> c10_b_Aeq;
  coder::array<real_T, 2U> c10_d_H;
  coder::array<real_T, 2U> c10_e_H;
  coder::array<real_T, 2U> c10_o_b;
  coder::array<real_T, 2U> c10_s_H;
  coder::array<real_T, 2U> c10_t_H;
  coder::array<real_T, 1U> c10_b_f;
  coder::array<real_T, 1U> c10_b_solution;
  coder::array<real_T, 1U> c10_c_f;
  coder::array<real_T, 1U> c10_c_solution;
  coder::array<real_T, 1U> c10_d_f;
  coder::array<real_T, 1U> c10_d_solution;
  coder::array<real_T, 1U> c10_e_f;
  coder::array<real_T, 1U> c10_g_b;
  coder::array<int32_T, 1U> c10_p_b;
  coder::array<int32_T, 1U> c10_r1;
  coder::array<int32_T, 1U> c10_r2;
  c10_sL9bDKomAYkxZSVrG9w6En c10_runTimeOptions;
  c10_s_l1Gll5dfO9DpqQrvRqAf7E c10_QRManager;
  c10_s_lryvQQZbN23ozlLWy4I3pD c10_CholRegManager;
  c10_s_pF7WiHvRtoO0ktfmCER3HD c10_solution;
  c10_s_pIaUYPkQBTqVmAKxFPiGQF c10_memspace;
  c10_s_saWPFfMboRdWeRqIEJ4x8C c10_QPObjective;
  c10_scZhlMkNxPxOgM0FLkVrfPH c10_c_options;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  const mxArray *c10_b_y = NULL;
  const mxArray *c10_c_y = NULL;
  const mxArray *c10_d_y = NULL;
  const mxArray *c10_e_y = NULL;
  const mxArray *c10_f_y = NULL;
  const mxArray *c10_g_y = NULL;
  const mxArray *c10_h_y = NULL;
  const mxArray *c10_i_y = NULL;
  const mxArray *c10_j_y = NULL;
  const mxArray *c10_k_y = NULL;
  const mxArray *c10_m_y = NULL;
  const mxArray *c10_o_y = NULL;
  const mxArray *c10_p_y = NULL;
  const mxArray *c10_r_y = NULL;
  const mxArray *c10_s_y = NULL;
  const mxArray *c10_t_y = NULL;
  const mxArray *c10_u_y = NULL;
  const mxArray *c10_v_y = NULL;
  const mxArray *c10_w_y = NULL;
  const mxArray *c10_y = NULL;
  real_T c10_tmp_data[1489];
  real_T c10_b_beq_data[1204];
  real_T c10_b_lb_data[142];
  real_T c10_b_ub_data[142];
  real_T c10_c_lb_data[142];
  real_T c10_c_ub_data[142];
  real_T c10_dv[2];
  real_T c10_b_x;
  real_T c10_c_exitflag;
  real_T c10_c_fval;
  real_T c10_c_maxval;
  real_T c10_c_x;
  real_T c10_d;
  real_T c10_d1;
  real_T c10_d_fval;
  real_T c10_d_x;
  real_T c10_e_varargin_2;
  real_T c10_f_n;
  real_T c10_h_n;
  real_T c10_q_y;
  real_T c10_u_b;
  real_T c10_ub_y;
  real_T c10_vb_y;
  real_T c10_wb_y;
  real_T c10_xb_y;
  real_T c10_yb_y;
  int32_T c10_iv1[2];
  int32_T c10_b_beq_size[1];
  int32_T c10_b_lb_size[1];
  int32_T c10_b_ub_size[1];
  int32_T c10_c_lb_size[1];
  int32_T c10_c_ub_size[1];
  int32_T c10_iv[1];
  int32_T c10_tmp_size[1];
  int32_T c10_MaxVars;
  int32_T c10_NumVars;
  int32_T c10_QRRowBound;
  int32_T c10_ab_loop_ub;
  int32_T c10_ab_y;
  int32_T c10_ac_loop_ub;
  int32_T c10_ad_loop_ub;
  int32_T c10_b_MaxDims;
  int32_T c10_b_loop_ub;
  int32_T c10_b_maxval;
  int32_T c10_b_nVar;
  int32_T c10_b_ret;
  int32_T c10_b_var;
  int32_T c10_b_varargin_1;
  int32_T c10_b_varargin_2;
  int32_T c10_bb_loop_ub;
  int32_T c10_bb_y;
  int32_T c10_bc_loop_ub;
  int32_T c10_bd_loop_ub;
  int32_T c10_c_loop_ub;
  int32_T c10_c_nVar;
  int32_T c10_c_var;
  int32_T c10_c_varargin_2;
  int32_T c10_cb_loop_ub;
  int32_T c10_cb_y;
  int32_T c10_cc_loop_ub;
  int32_T c10_cd_loop_ub;
  int32_T c10_d_a;
  int32_T c10_d_loop_ub;
  int32_T c10_d_varargin_2;
  int32_T c10_db_loop_ub;
  int32_T c10_db_y;
  int32_T c10_dc_loop_ub;
  int32_T c10_defaultIterations;
  int32_T c10_e_a;
  int32_T c10_e_loop_ub;
  int32_T c10_e_x;
  int32_T c10_eb_loop_ub;
  int32_T c10_eb_y;
  int32_T c10_ec_loop_ub;
  int32_T c10_f_loop_ub;
  int32_T c10_f_x;
  int32_T c10_fb_loop_ub;
  int32_T c10_fb_y;
  int32_T c10_fc_loop_ub;
  int32_T c10_g_loop_ub;
  int32_T c10_g_x;
  int32_T c10_gb_loop_ub;
  int32_T c10_gb_y;
  int32_T c10_gc_loop_ub;
  int32_T c10_h_b;
  int32_T c10_h_loop_ub;
  int32_T c10_hb_loop_ub;
  int32_T c10_hb_y;
  int32_T c10_hc_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i19;
  int32_T c10_i2;
  int32_T c10_i20;
  int32_T c10_i21;
  int32_T c10_i22;
  int32_T c10_i23;
  int32_T c10_i24;
  int32_T c10_i25;
  int32_T c10_i26;
  int32_T c10_i27;
  int32_T c10_i28;
  int32_T c10_i29;
  int32_T c10_i3;
  int32_T c10_i30;
  int32_T c10_i31;
  int32_T c10_i32;
  int32_T c10_i33;
  int32_T c10_i34;
  int32_T c10_i35;
  int32_T c10_i36;
  int32_T c10_i37;
  int32_T c10_i38;
  int32_T c10_i39;
  int32_T c10_i4;
  int32_T c10_i40;
  int32_T c10_i41;
  int32_T c10_i42;
  int32_T c10_i43;
  int32_T c10_i44;
  int32_T c10_i45;
  int32_T c10_i46;
  int32_T c10_i47;
  int32_T c10_i48;
  int32_T c10_i49;
  int32_T c10_i5;
  int32_T c10_i50;
  int32_T c10_i51;
  int32_T c10_i52;
  int32_T c10_i53;
  int32_T c10_i54;
  int32_T c10_i55;
  int32_T c10_i56;
  int32_T c10_i57;
  int32_T c10_i58;
  int32_T c10_i59;
  int32_T c10_i6;
  int32_T c10_i60;
  int32_T c10_i61;
  int32_T c10_i62;
  int32_T c10_i63;
  int32_T c10_i64;
  int32_T c10_i65;
  int32_T c10_i66;
  int32_T c10_i67;
  int32_T c10_i68;
  int32_T c10_i69;
  int32_T c10_i7;
  int32_T c10_i70;
  int32_T c10_i71;
  int32_T c10_i72;
  int32_T c10_i73;
  int32_T c10_i74;
  int32_T c10_i75;
  int32_T c10_i76;
  int32_T c10_i77;
  int32_T c10_i78;
  int32_T c10_i79;
  int32_T c10_i8;
  int32_T c10_i80;
  int32_T c10_i81;
  int32_T c10_i82;
  int32_T c10_i83;
  int32_T c10_i84;
  int32_T c10_i85;
  int32_T c10_i86;
  int32_T c10_i9;
  int32_T c10_i_loop_ub;
  int32_T c10_i_n;
  int32_T c10_ib_loop_ub;
  int32_T c10_ib_y;
  int32_T c10_ic_loop_ub;
  int32_T c10_idxmax;
  int32_T c10_j_b;
  int32_T c10_j_loop_ub;
  int32_T c10_j_n;
  int32_T c10_j_x;
  int32_T c10_jb_loop_ub;
  int32_T c10_jb_y;
  int32_T c10_jc_loop_ub;
  int32_T c10_k_b;
  int32_T c10_k_loop_ub;
  int32_T c10_k_n;
  int32_T c10_k_x;
  int32_T c10_kb_loop_ub;
  int32_T c10_kb_y;
  int32_T c10_kc_loop_ub;
  int32_T c10_loop_ub;
  int32_T c10_mConstr;
  int32_T c10_mConstrMax;
  int32_T c10_mEq;
  int32_T c10_mFixed;
  int32_T c10_mLB;
  int32_T c10_mLinEq;
  int32_T c10_mUB;
  int32_T c10_m_loop_ub;
  int32_T c10_m_n;
  int32_T c10_m_x;
  int32_T c10_maxCols;
  int32_T c10_maxDims;
  int32_T c10_maxRows;
  int32_T c10_maxval;
  int32_T c10_mb_loop_ub;
  int32_T c10_mb_y;
  int32_T c10_mc_loop_ub;
  int32_T c10_minRowCol;
  int32_T c10_nVar;
  int32_T c10_nVarMax;
  int32_T c10_o_loop_ub;
  int32_T c10_o_n;
  int32_T c10_o_x;
  int32_T c10_ob_loop_ub;
  int32_T c10_ob_y;
  int32_T c10_oc_loop_ub;
  int32_T c10_p_loop_ub;
  int32_T c10_p_n;
  int32_T c10_p_x;
  int32_T c10_pb_loop_ub;
  int32_T c10_pb_y;
  int32_T c10_pc_loop_ub;
  int32_T c10_q_b;
  int32_T c10_q_loop_ub;
  int32_T c10_q_n;
  int32_T c10_q_x;
  int32_T c10_qb_loop_ub;
  int32_T c10_qb_y;
  int32_T c10_qc_loop_ub;
  int32_T c10_r_loop_ub;
  int32_T c10_r_x;
  int32_T c10_rb_loop_ub;
  int32_T c10_rb_y;
  int32_T c10_rc_loop_ub;
  int32_T c10_ret;
  int32_T c10_s_b;
  int32_T c10_s_loop_ub;
  int32_T c10_sb_loop_ub;
  int32_T c10_sb_y;
  int32_T c10_sc_loop_ub;
  int32_T c10_sizeLB;
  int32_T c10_sizeUB;
  int32_T c10_t_b;
  int32_T c10_t_loop_ub;
  int32_T c10_tb_loop_ub;
  int32_T c10_tb_y;
  int32_T c10_tc_loop_ub;
  int32_T c10_u_loop_ub;
  int32_T c10_ub_loop_ub;
  int32_T c10_uc_loop_ub;
  int32_T c10_v_loop_ub;
  int32_T c10_var;
  int32_T c10_varargin_1;
  int32_T c10_varargin_2;
  int32_T c10_vb_loop_ub;
  int32_T c10_vc_loop_ub;
  int32_T c10_w_loop_ub;
  int32_T c10_wb_loop_ub;
  int32_T c10_wc_loop_ub;
  int32_T c10_x_loop_ub;
  int32_T c10_x_y;
  int32_T c10_xb_loop_ub;
  int32_T c10_xc_loop_ub;
  int32_T c10_y_loop_ub;
  int32_T c10_y_y;
  int32_T c10_yb_loop_ub;
  int32_T c10_yc_loop_ub;
  char_T c10_c_a[10];
  char_T c10_b_a[8];
  boolean_T c10_b1;
  boolean_T c10_b2;
  boolean_T c10_b3;
  boolean_T c10_b4;
  boolean_T c10_b_bool;
  boolean_T c10_bool;
  boolean_T c10_f_b;
  boolean_T c10_hasLinear;
  boolean_T c10_p;
  c10_b_r.constrviolation = rtInf;
  c10_b_r.firstorderopt = rtInf;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_st.site = &c10_mc_emlrtRSI;
  for (c10_i = 0; c10_i < 8; c10_i++) {
    c10_b_a[c10_i] = c10_b_options->SolverName[c10_i];
  }

  c10_ret = memcmp(&c10_b_a[0], &c10_b[0], 8);
  c10_bool = (c10_ret == 0);
  if (!c10_bool) {
    c10_y = NULL;
    sf_mex_assign(&c10_y, sf_mex_create("y", c10_b_cv, 10, 0U, 1U, 0U, 2, 1, 50),
                  false);
    c10_b_y = NULL;
    sf_mex_assign(&c10_b_y, sf_mex_create("y", c10_b_cv, 10, 0U, 1U, 0U, 2, 1,
      50), false);
    c10_c_y = NULL;
    sf_mex_assign(&c10_c_y, sf_mex_create("y", c10_b_cv1, 10, 0U, 1U, 0U, 2, 1,
      8), false);
    sf_mex_call(&c10_st, &c10_p_emlrtMCI, "error", 0U, 2U, 14, c10_y, 14,
                sf_mex_call(&c10_st, NULL, "getString", 1U, 1U, 14, sf_mex_call(
      &c10_st, NULL, "message", 1U, 2U, 14, c10_b_y, 14, c10_c_y)));
  }

  for (c10_i1 = 0; c10_i1 < 10; c10_i1++) {
    c10_c_a[c10_i1] = c10_b_options->Algorithm[c10_i1];
  }

  c10_b_ret = memcmp(&c10_c_a[0], &c10_e_b[0], 10);
  c10_b_bool = (c10_b_ret == 0);
  if (!c10_b_bool) {
    c10_d_y = NULL;
    sf_mex_assign(&c10_d_y, sf_mex_create("y", c10_b_cv2, 10, 0U, 1U, 0U, 2, 1,
      41), false);
    c10_e_y = NULL;
    sf_mex_assign(&c10_e_y, sf_mex_create("y", c10_b_cv2, 10, 0U, 1U, 0U, 2, 1,
      41), false);
    c10_g_y = NULL;
    sf_mex_assign(&c10_g_y, sf_mex_create("y", c10_b_cv3, 10, 0U, 1U, 0U, 2, 1,
      9), false);
    c10_i_y = NULL;
    sf_mex_assign(&c10_i_y, sf_mex_create("y", c10_b_cv1, 10, 0U, 1U, 0U, 2, 1,
      8), false);
    c10_j_y = NULL;
    sf_mex_assign(&c10_j_y, sf_mex_create("y", c10_b_cv4, 10, 0U, 1U, 0U, 2, 1,
      13), false);
    sf_mex_call(&c10_st, &c10_p_emlrtMCI, "error", 0U, 2U, 14, c10_d_y, 14,
                sf_mex_call(&c10_st, NULL, "getString", 1U, 1U, 14, sf_mex_call(
      &c10_st, NULL, "message", 1U, 4U, 14, c10_e_y, 14, c10_g_y, 14, c10_i_y,
      14, c10_j_y)));
  }

  c10_f_b = (c10_b_x0.size(0) == 0);
  c10_b1 = (c10_b_x0.size(1) == 0);
  if (!((!c10_f_b) && (!c10_b1))) {
    c10_f_y = NULL;
    sf_mex_assign(&c10_f_y, sf_mex_create("y", c10_cv3, 10, 0U, 1U, 0U, 2, 1, 30),
                  false);
    c10_h_y = NULL;
    sf_mex_assign(&c10_h_y, sf_mex_create("y", c10_cv3, 10, 0U, 1U, 0U, 2, 1, 30),
                  false);
    sf_mex_call(c10_sp, &c10_o_emlrtMCI, "error", 0U, 2U, 14, c10_f_y, 14,
                sf_mex_call(c10_sp, NULL, "getString", 1U, 1U, 14, sf_mex_call
      (c10_sp, NULL, "message", 1U, 1U, 14, c10_h_y)));
  }

  c10_nVar = c10_b_x0.size(0) * c10_b_x0.size(1);
  c10_nVarMax = c10_nVar + 1;
  c10_st.site = &c10_mc_emlrtRSI;
  c10_checkQuadraticObjective(chartInstance, &c10_st, c10_c_H, c10_f);
  c10_b2 = (c10_c_H.size(0) == 0);
  c10_b3 = (c10_c_H.size(1) == 0);
  if (!((!c10_b2) && (!c10_b3))) {
    c10_k_y = NULL;
    sf_mex_assign(&c10_k_y, sf_mex_create("y", c10_b_cv5, 10, 0U, 1U, 0U, 2, 1,
      34), false);
    c10_o_y = NULL;
    sf_mex_assign(&c10_o_y, sf_mex_create("y", c10_b_cv5, 10, 0U, 1U, 0U, 2, 1,
      34), false);
    sf_mex_call(c10_sp, &c10_o_emlrtMCI, "error", 0U, 2U, 14, c10_k_y, 14,
                sf_mex_call(c10_sp, NULL, "getString", 1U, 1U, 14, sf_mex_call
      (c10_sp, NULL, "message", 1U, 1U, 14, c10_o_y)));
  }

  if (static_cast<real_T>(c10_c_H.size(0)) != static_cast<real_T>(c10_c_H.size(1)))
  {
    c10_m_y = NULL;
    sf_mex_assign(&c10_m_y, sf_mex_create("y", c10_b_cv6, 10, 0U, 1U, 0U, 2, 1,
      31), false);
    c10_p_y = NULL;
    sf_mex_assign(&c10_p_y, sf_mex_create("y", c10_b_cv6, 10, 0U, 1U, 0U, 2, 1,
      31), false);
    sf_mex_call(c10_sp, &c10_o_emlrtMCI, "error", 0U, 2U, 14, c10_m_y, 14,
                sf_mex_call(c10_sp, NULL, "getString", 1U, 1U, 14, sf_mex_call
      (c10_sp, NULL, "message", 1U, 1U, 14, c10_p_y)));
  }

  c10_f_n = static_cast<real_T>(c10_c_H.size(0) * c10_c_H.size(1));
  if (c10_f_n < 1.0) {
    c10_idxmax = 0;
  } else {
    c10_h_n = c10_f_n;
    c10_d = muDoubleScalarRound(c10_h_n);
    if (c10_d < 2.147483648E+9) {
      if (c10_d >= -2.147483648E+9) {
        c10_i3 = static_cast<int32_T>(c10_d);
      } else {
        c10_i3 = MIN_int32_T;
      }
    } else if (c10_d >= 2.147483648E+9) {
      c10_i3 = MAX_int32_T;
    } else {
      c10_i3 = 0;
    }

    c10_i_n = c10_i3;
    c10_var = c10_i_n;
    c10_n_t = (ptrdiff_t)c10_var;
    c10_incx_t = (ptrdiff_t)1;
    c10_idxmax_t = idamax(&c10_n_t, &(c10_c_H.data())[0], &c10_incx_t);
    c10_idxmax = (int32_T)c10_idxmax_t;
  }

  c10_i2 = c10_c_H.size(0) * c10_c_H.size(1);
  if ((c10_idxmax < 1) || (c10_idxmax > c10_i2)) {
    emlrtDynamicBoundsCheckR2012b(c10_idxmax, 1, c10_i2, &c10_mo_emlrtBCI,
      (emlrtConstCTX)c10_sp);
  }

  c10_b_x = c10_c_H[c10_idxmax - 1];
  c10_c_x = c10_b_x;
  c10_d_x = c10_c_x;
  c10_q_y = muDoubleScalarAbs(c10_d_x);
  if (c10_q_y < 2.2204460492503131E-16) {
    c10_r_y = NULL;
    sf_mex_assign(&c10_r_y, sf_mex_create("y", c10_b_cv5, 10, 0U, 1U, 0U, 2, 1,
      34), false);
    c10_s_y = NULL;
    sf_mex_assign(&c10_s_y, sf_mex_create("y", c10_b_cv5, 10, 0U, 1U, 0U, 2, 1,
      34), false);
    sf_mex_call(c10_sp, &c10_o_emlrtMCI, "error", 0U, 2U, 14, c10_r_y, 14,
                sf_mex_call(c10_sp, NULL, "getString", 1U, 1U, 14, sf_mex_call
      (c10_sp, NULL, "message", 1U, 1U, 14, c10_s_y)));
  }

  if ((c10_f.size(0) != 0) && (static_cast<real_T>(c10_f.size(0)) !=
       static_cast<real_T>(c10_c_H.size(0)))) {
    c10_b4 = true;
  } else {
    c10_b4 = false;
  }

  if (c10_b4) {
    c10_t_y = NULL;
    sf_mex_assign(&c10_t_y, sf_mex_create("y", c10_cv7, 10, 0U, 1U, 0U, 2, 1, 34),
                  false);
    c10_v_y = NULL;
    sf_mex_assign(&c10_v_y, sf_mex_create("y", c10_cv7, 10, 0U, 1U, 0U, 2, 1, 34),
                  false);
    sf_mex_call(c10_sp, &c10_o_emlrtMCI, "error", 0U, 2U, 14, c10_t_y, 14,
                sf_mex_call(c10_sp, NULL, "getString", 1U, 1U, 14, sf_mex_call
      (c10_sp, NULL, "message", 1U, 1U, 14, c10_v_y)));
  }

  if (static_cast<real_T>(c10_c_H.size(0)) != static_cast<real_T>(c10_b_x0.size
       (0) * c10_b_x0.size(1))) {
    c10_u_y = NULL;
    sf_mex_assign(&c10_u_y, sf_mex_create("y", c10_cv8, 10, 0U, 1U, 0U, 2, 1, 35),
                  false);
    c10_w_y = NULL;
    sf_mex_assign(&c10_w_y, sf_mex_create("y", c10_cv8, 10, 0U, 1U, 0U, 2, 1, 35),
                  false);
    sf_mex_call(c10_sp, &c10_o_emlrtMCI, "error", 0U, 2U, 14, c10_u_y, 14,
                sf_mex_call(c10_sp, NULL, "getString", 1U, 1U, 14, sf_mex_call
      (c10_sp, NULL, "message", 1U, 1U, 14, c10_w_y)));
  }

  c10_st.site = &c10_mc_emlrtRSI;
  c10_checkX0(chartInstance, &c10_st, c10_b_x0);
  c10_st.site = &c10_mc_emlrtRSI;
  c10_c_exitflag = c10_checkLinearInputs(chartInstance, &c10_st, c10_nVar,
    c10_Aeq, c10_beq_data, c10_beq_size, c10_lb_data, c10_lb_size, c10_ub_data,
    c10_ub_size);
  c10_mEq = c10_beq_size[0];
  c10_sizeLB = c10_lb_size[0] + 1;
  c10_sizeUB = c10_ub_size[0];
  c10_mConstrMax = (c10_mEq + c10_sizeLB) + c10_sizeUB;
  if (c10_c_exitflag == -2.0) {
    c10_b_nVar = c10_nVar;
    c10_mLinEq = c10_mEq;
    c10_lambda->eqlin.size[0] = c10_mLinEq;
    c10_b_loop_ub = c10_mLinEq - 1;
    for (c10_i5 = 0; c10_i5 <= c10_b_loop_ub; c10_i5++) {
      c10_lambda->eqlin.data[c10_i5] = 0.0;
    }

    c10_lambda->lower.set_size(&c10_af_emlrtRTEI, c10_sp, c10_b_nVar);
    c10_d_loop_ub = c10_b_nVar - 1;
    for (c10_i7 = 0; c10_i7 <= c10_d_loop_ub; c10_i7++) {
      c10_lambda->lower[c10_i7] = 0.0;
    }

    c10_lambda->upper.set_size(&c10_af_emlrtRTEI, c10_sp, c10_b_nVar);
    c10_e_loop_ub = c10_b_nVar - 1;
    for (c10_i8 = 0; c10_i8 <= c10_e_loop_ub; c10_i8++) {
      c10_lambda->upper[c10_i8] = 0.0;
    }

    c10_x.set_size(&c10_af_emlrtRTEI, c10_sp, c10_b_x0.size(0), c10_b_x0.size(1));
    c10_g_loop_ub = c10_b_x0.size(0) * c10_b_x0.size(1) - 1;
    for (c10_i10 = 0; c10_i10 <= c10_g_loop_ub; c10_i10++) {
      c10_x[c10_i10] = c10_b_x0[c10_i10];
    }

    c10_c_fval = rtInf;
    *c10_output = c10_b_r;
  } else {
    c10_g_b.set_size(&c10_af_emlrtRTEI, c10_sp, c10_nVarMax);
    c10_loop_ub = c10_nVarMax - 1;
    for (c10_i4 = 0; c10_i4 <= c10_loop_ub; c10_i4++) {
      c10_g_b[c10_i4] = 1.0;
    }

    c10_c_loop_ub = c10_g_b.size(0) - 1;
    for (c10_i6 = 0; c10_i6 <= c10_c_loop_ub; c10_i6++) {
      c10_g_b[c10_i6] = 1.7976931348623157E+308 * c10_g_b[c10_i6];
    }

    c10_iv[0] = c10_g_b.size(0);
    c10_solution.xstar.set_size(&c10_af_emlrtRTEI, c10_sp, c10_iv[0]);
    c10_solution.fstar = 0.0;
    c10_solution.firstorderopt = 0.0;
    c10_solution.lambda.size[0] = c10_mConstrMax;
    c10_f_loop_ub = c10_mConstrMax - 1;
    for (c10_i9 = 0; c10_i9 <= c10_f_loop_ub; c10_i9++) {
      c10_solution.lambda.data[c10_i9] = 0.0;
    }

    c10_solution.state = 0;
    c10_solution.maxConstr = 0.0;
    c10_solution.iterations = 0;
    c10_solution.searchDir.set_size(&c10_af_emlrtRTEI, c10_sp, c10_nVarMax);
    c10_h_loop_ub = c10_nVarMax - 1;
    for (c10_i11 = 0; c10_i11 <= c10_h_loop_ub; c10_i11++) {
      c10_solution.searchDir[c10_i11] = 0.0;
    }

    c10_st.site = &c10_mc_emlrtRSI;
    c10_j_n = c10_nVar;
    c10_g_b.set_size(&c10_af_emlrtRTEI, &c10_st, c10_solution.xstar.size(0));
    c10_i_loop_ub = c10_solution.xstar.size(0) - 1;
    for (c10_i12 = 0; c10_i12 <= c10_i_loop_ub; c10_i12++) {
      c10_g_b[c10_i12] = c10_solution.xstar[c10_i12];
    }

    c10_solution.xstar.set_size(&c10_af_emlrtRTEI, &c10_st, c10_g_b.size(0));
    c10_j_loop_ub = c10_g_b.size(0) - 1;
    for (c10_i13 = 0; c10_i13 <= c10_j_loop_ub; c10_i13++) {
      c10_solution.xstar[c10_i13] = c10_g_b[c10_i13];
    }

    if (!(c10_j_n < 1)) {
      c10_b_st.site = &c10_ad_emlrtRSI;
      c10_k_n = c10_j_n;
      c10_g_b.set_size(&c10_bf_emlrtRTEI, &c10_b_st, c10_solution.xstar.size(0));
      c10_m_loop_ub = c10_solution.xstar.size(0) - 1;
      for (c10_i15 = 0; c10_i15 <= c10_m_loop_ub; c10_i15++) {
        c10_g_b[c10_i15] = c10_solution.xstar[c10_i15];
      }

      c10_solution.xstar.set_size(&c10_af_emlrtRTEI, &c10_b_st, c10_g_b.size(0));
      c10_p_loop_ub = c10_g_b.size(0) - 1;
      for (c10_i17 = 0; c10_i17 <= c10_p_loop_ub; c10_i17++) {
        c10_solution.xstar[c10_i17] = c10_g_b[c10_i17];
      }

      c10_c_st.site = &c10_cd_emlrtRSI;
      c10_m_n = c10_k_n;
      c10_g_b.set_size(&c10_cf_emlrtRTEI, &c10_c_st, c10_solution.xstar.size(0));
      c10_r_loop_ub = c10_solution.xstar.size(0) - 1;
      for (c10_i19 = 0; c10_i19 <= c10_r_loop_ub; c10_i19++) {
        c10_g_b[c10_i19] = c10_solution.xstar[c10_i19];
      }

      c10_solution.xstar.set_size(&c10_af_emlrtRTEI, &c10_c_st, c10_g_b.size(0));
      c10_t_loop_ub = c10_g_b.size(0) - 1;
      for (c10_i21 = 0; c10_i21 <= c10_t_loop_ub; c10_i21++) {
        c10_solution.xstar[c10_i21] = c10_g_b[c10_i21];
      }

      c10_b_var = c10_m_n;
      c10_b_n_t = (ptrdiff_t)c10_b_var;
      c10_b_incx_t = (ptrdiff_t)1;
      c10_incy_t = (ptrdiff_t)1;
      dcopy(&c10_b_n_t, &(c10_b_x0.data())[0], &c10_b_incx_t,
            &(c10_solution.xstar.data())[0], &c10_incy_t);
    }

    c10_MaxVars = c10_nVarMax;
    c10_g_b.set_size(&c10_df_emlrtRTEI, c10_sp, c10_MaxVars);
    c10_k_loop_ub = c10_MaxVars - 1;
    for (c10_i14 = 0; c10_i14 <= c10_k_loop_ub; c10_i14++) {
      c10_g_b[c10_i14] = 1.0;
    }

    c10_o_loop_ub = c10_g_b.size(0) - 1;
    for (c10_i16 = 0; c10_i16 <= c10_o_loop_ub; c10_i16++) {
      c10_g_b[c10_i16] = 1.7976931348623157E+308 * c10_g_b[c10_i16];
    }

    c10_iv[0] = c10_g_b.size(0);
    c10_QPObjective.grad.set_size(&c10_df_emlrtRTEI, c10_sp, c10_iv[0]);
    c10_g_b.set_size(&c10_df_emlrtRTEI, c10_sp, c10_MaxVars - 1);
    c10_q_loop_ub = c10_MaxVars - 2;
    for (c10_i18 = 0; c10_i18 <= c10_q_loop_ub; c10_i18++) {
      c10_g_b[c10_i18] = 1.0;
    }

    c10_s_loop_ub = c10_g_b.size(0) - 1;
    for (c10_i20 = 0; c10_i20 <= c10_s_loop_ub; c10_i20++) {
      c10_g_b[c10_i20] = 1.7976931348623157E+308 * c10_g_b[c10_i20];
    }

    c10_iv[0] = c10_g_b.size(0);
    c10_QPObjective.Hx.set_size(&c10_df_emlrtRTEI, c10_sp, c10_iv[0]);
    c10_QPObjective.maxVar = c10_MaxVars;
    c10_QPObjective.beta = 0.0;
    c10_QPObjective.rho = 0.0;
    c10_QPObjective.prev_objtype = 3;
    c10_QPObjective.prev_nvar = 0;
    c10_QPObjective.prev_hasLinear = false;
    c10_QPObjective.gammaScalar = 0.0;
    c10_hasLinear = (c10_f.size(0) != 0);
    c10_NumVars = c10_nVar;
    c10_QPObjective.hasLinear = c10_hasLinear;
    c10_QPObjective.nvar = c10_NumVars;
    c10_QPObjective.objtype = 3;
    c10_varargin_1 = c10_nVarMax;
    c10_varargin_2 = c10_mConstrMax;
    c10_e_x = c10_varargin_1;
    c10_x_y = c10_varargin_2;
    c10_f_x = c10_e_x;
    c10_y_y = c10_x_y;
    c10_g_x = c10_f_x;
    c10_ab_y = c10_y_y;
    c10_d_a = c10_g_x;
    c10_h_b = c10_ab_y;
    c10_j_x = c10_d_a;
    c10_bb_y = c10_h_b;
    c10_k_x = c10_j_x;
    c10_cb_y = c10_bb_y;
    c10_maxDims = muIntScalarMax_sint32(c10_k_x, c10_cb_y);
    c10_b_varargin_2 = c10_mEq;
    c10_db_y = c10_b_varargin_2;
    c10_eb_y = c10_db_y;
    c10_fb_y = c10_eb_y;
    c10_j_b = c10_fb_y;
    c10_gb_y = c10_j_b;
    c10_hb_y = c10_gb_y;
    c10_maxval = muIntScalarMax_sint32(1, c10_hb_y);
    c10_QRRowBound = c10_nVar + c10_maxval;
    c10_maxRows = c10_QRRowBound;
    c10_maxCols = c10_maxDims;
    c10_b_varargin_1 = c10_maxRows;
    c10_c_varargin_2 = c10_maxCols;
    c10_m_x = c10_b_varargin_1;
    c10_ib_y = c10_c_varargin_2;
    c10_o_x = c10_m_x;
    c10_jb_y = c10_ib_y;
    c10_p_x = c10_o_x;
    c10_kb_y = c10_jb_y;
    c10_e_a = c10_p_x;
    c10_k_b = c10_kb_y;
    c10_q_x = c10_e_a;
    c10_mb_y = c10_k_b;
    c10_r_x = c10_q_x;
    c10_ob_y = c10_mb_y;
    c10_minRowCol = muIntScalarMin_sint32(c10_r_x, c10_ob_y);
    c10_QRManager.ldq = c10_maxRows;
    c10_o_b.set_size(&c10_ef_emlrtRTEI, c10_sp, c10_maxRows, c10_maxCols);
    c10_u_loop_ub = c10_maxRows * c10_maxCols - 1;
    for (c10_i22 = 0; c10_i22 <= c10_u_loop_ub; c10_i22++) {
      c10_o_b[c10_i22] = 1.0;
    }

    c10_i23 = c10_o_b.size(0) * c10_o_b.size(1);
    c10_i24 = c10_i23;
    c10_v_loop_ub = c10_i24 - 1;
    for (c10_i25 = 0; c10_i25 <= c10_v_loop_ub; c10_i25++) {
      c10_o_b[c10_i25] = 1.7976931348623157E+308 * c10_o_b[c10_i25];
    }

    for (c10_i26 = 0; c10_i26 < 2; c10_i26++) {
      c10_iv1[c10_i26] = c10_o_b.size(c10_i26);
    }

    c10_QRManager.QR.set_size(&c10_ef_emlrtRTEI, c10_sp, c10_iv1[0], c10_iv1[1]);
    c10_QRManager.Q.set_size(&c10_ef_emlrtRTEI, c10_sp, c10_maxRows, c10_maxRows);
    c10_w_loop_ub = c10_maxRows * c10_maxRows - 1;
    for (c10_i27 = 0; c10_i27 <= c10_w_loop_ub; c10_i27++) {
      c10_QRManager.Q[c10_i27] = 0.0;
    }

    c10_QRManager.jpvt.set_size(&c10_af_emlrtRTEI, c10_sp, c10_maxCols);
    c10_x_loop_ub = c10_maxCols - 1;
    for (c10_i28 = 0; c10_i28 <= c10_x_loop_ub; c10_i28++) {
      c10_QRManager.jpvt[c10_i28] = 0;
    }

    c10_QRManager.mrows = 0;
    c10_QRManager.ncols = 0;
    c10_g_b.set_size(&c10_ef_emlrtRTEI, c10_sp, c10_minRowCol);
    c10_y_loop_ub = c10_minRowCol - 1;
    for (c10_i29 = 0; c10_i29 <= c10_y_loop_ub; c10_i29++) {
      c10_g_b[c10_i29] = 1.0;
    }

    c10_ab_loop_ub = c10_g_b.size(0) - 1;
    for (c10_i30 = 0; c10_i30 <= c10_ab_loop_ub; c10_i30++) {
      c10_g_b[c10_i30] = 1.7976931348623157E+308 * c10_g_b[c10_i30];
    }

    c10_iv[0] = c10_g_b.size(0);
    c10_QRManager.tau.set_size(&c10_ef_emlrtRTEI, c10_sp, c10_iv[0]);
    c10_QRManager.minRowCol = 0;
    c10_QRManager.usedPivoting = false;
    c10_b_MaxDims = c10_QRRowBound;
    c10_g_b.set_size(&c10_ff_emlrtRTEI, c10_sp, c10_b_MaxDims * c10_b_MaxDims);
    c10_bb_loop_ub = c10_b_MaxDims * c10_b_MaxDims - 1;
    for (c10_i31 = 0; c10_i31 <= c10_bb_loop_ub; c10_i31++) {
      c10_g_b[c10_i31] = 1.0;
    }

    c10_cb_loop_ub = c10_g_b.size(0) - 1;
    for (c10_i32 = 0; c10_i32 <= c10_cb_loop_ub; c10_i32++) {
      c10_g_b[c10_i32] = 1.7976931348623157E+308 * c10_g_b[c10_i32];
    }

    c10_iv[0] = c10_g_b.size(0);
    c10_CholRegManager.FMat.set_size(&c10_ff_emlrtRTEI, c10_sp, c10_iv[0]);
    c10_CholRegManager.ldm = c10_b_MaxDims;
    c10_CholRegManager.ndims = 0;
    c10_CholRegManager.info = 0;
    c10_CholRegManager.ConvexCheck = true;
    c10_CholRegManager.regTol_ = 0.0;
    c10_g_b.set_size(&c10_ff_emlrtRTEI, c10_sp, 48 * c10_b_MaxDims);
    c10_db_loop_ub = 48 * c10_b_MaxDims - 1;
    for (c10_i33 = 0; c10_i33 <= c10_db_loop_ub; c10_i33++) {
      c10_g_b[c10_i33] = 1.0;
    }

    c10_eb_loop_ub = c10_g_b.size(0) - 1;
    for (c10_i34 = 0; c10_i34 <= c10_eb_loop_ub; c10_i34++) {
      c10_g_b[c10_i34] = 1.7976931348623157E+308 * c10_g_b[c10_i34];
    }

    c10_iv[0] = c10_g_b.size(0);
    c10_CholRegManager.workspace_.set_size(&c10_ff_emlrtRTEI, c10_sp, c10_iv[0]);
    c10_g_b.set_size(&c10_ff_emlrtRTEI, c10_sp, 48 * c10_b_MaxDims);
    c10_fb_loop_ub = 48 * c10_b_MaxDims - 1;
    for (c10_i35 = 0; c10_i35 <= c10_fb_loop_ub; c10_i35++) {
      c10_g_b[c10_i35] = 1.0;
    }

    c10_gb_loop_ub = c10_g_b.size(0) - 1;
    for (c10_i36 = 0; c10_i36 <= c10_gb_loop_ub; c10_i36++) {
      c10_g_b[c10_i36] = 1.7976931348623157E+308 * c10_g_b[c10_i36];
    }

    c10_iv[0] = c10_g_b.size(0);
    c10_CholRegManager.workspace2_.set_size(&c10_ff_emlrtRTEI, c10_sp, c10_iv[0]);
    c10_CholRegManager.scaleFactor = 100.0;
    c10_st.site = &c10_mc_emlrtRSI;
    c10_factoryConstruct(chartInstance, &c10_st, c10_mEq, c10_nVar, c10_nVarMax,
                         c10_mConstrMax, &chartInstance->c10_WorkingSet);
    c10_p_b.set_size(&c10_af_emlrtRTEI, c10_sp,
                     chartInstance->c10_WorkingSet.indexLB.size(0));
    c10_hb_loop_ub = chartInstance->c10_WorkingSet.indexLB.size(0) - 1;
    for (c10_i37 = 0; c10_i37 <= c10_hb_loop_ub; c10_i37++) {
      c10_p_b[c10_i37] = chartInstance->c10_WorkingSet.indexLB[c10_i37];
    }

    c10_r1.set_size(&c10_af_emlrtRTEI, c10_sp,
                    chartInstance->c10_WorkingSet.indexUB.size(0));
    c10_ib_loop_ub = chartInstance->c10_WorkingSet.indexUB.size(0) - 1;
    for (c10_i38 = 0; c10_i38 <= c10_ib_loop_ub; c10_i38++) {
      c10_r1[c10_i38] = chartInstance->c10_WorkingSet.indexUB[c10_i38];
    }

    c10_r2.set_size(&c10_af_emlrtRTEI, c10_sp,
                    chartInstance->c10_WorkingSet.indexFixed.size(0));
    c10_jb_loop_ub = chartInstance->c10_WorkingSet.indexFixed.size(0) - 1;
    for (c10_i39 = 0; c10_i39 <= c10_jb_loop_ub; c10_i39++) {
      c10_r2[c10_i39] = chartInstance->c10_WorkingSet.indexFixed[c10_i39];
    }

    c10_b_lb_size[0] = c10_lb_size[0];
    c10_kb_loop_ub = c10_lb_size[0] - 1;
    for (c10_i40 = 0; c10_i40 <= c10_kb_loop_ub; c10_i40++) {
      c10_b_lb_data[c10_i40] = c10_lb_data[c10_i40];
    }

    c10_b_ub_size[0] = c10_ub_size[0];
    c10_mb_loop_ub = c10_ub_size[0] - 1;
    for (c10_i41 = 0; c10_i41 <= c10_mb_loop_ub; c10_i41++) {
      c10_b_ub_data[c10_i41] = c10_ub_data[c10_i41];
    }

    c10_st.site = &c10_mc_emlrtRSI;
    c10_b_compressBounds(chartInstance, &c10_st, c10_nVar, c10_p_b, c10_r1,
                         c10_r2, c10_b_lb_data, c10_b_lb_size, c10_b_ub_data,
                         c10_b_ub_size, &c10_mLB, &c10_mUB, &c10_mFixed);
    chartInstance->c10_WorkingSet.indexLB.set_size(&c10_af_emlrtRTEI, c10_sp,
      c10_p_b.size(0));
    c10_ob_loop_ub = c10_p_b.size(0) - 1;
    for (c10_i42 = 0; c10_i42 <= c10_ob_loop_ub; c10_i42++) {
      chartInstance->c10_WorkingSet.indexLB[c10_i42] = c10_p_b[c10_i42];
    }

    chartInstance->c10_WorkingSet.indexUB.set_size(&c10_af_emlrtRTEI, c10_sp,
      c10_r1.size(0));
    c10_pb_loop_ub = c10_r1.size(0) - 1;
    for (c10_i43 = 0; c10_i43 <= c10_pb_loop_ub; c10_i43++) {
      chartInstance->c10_WorkingSet.indexUB[c10_i43] = c10_r1[c10_i43];
    }

    chartInstance->c10_WorkingSet.indexFixed.set_size(&c10_af_emlrtRTEI, c10_sp,
      c10_r2.size(0));
    c10_qb_loop_ub = c10_r2.size(0) - 1;
    for (c10_i44 = 0; c10_i44 <= c10_qb_loop_ub; c10_i44++) {
      chartInstance->c10_WorkingSet.indexFixed[c10_i44] = c10_r2[c10_i44];
    }

    c10_b_Aeq.set_size(&c10_af_emlrtRTEI, c10_sp, c10_Aeq.size(0), c10_Aeq.size
                       (1));
    c10_rb_loop_ub = c10_Aeq.size(0) * c10_Aeq.size(1) - 1;
    for (c10_i45 = 0; c10_i45 <= c10_rb_loop_ub; c10_i45++) {
      c10_b_Aeq[c10_i45] = c10_Aeq[c10_i45];
    }

    c10_b_beq_size[0] = c10_beq_size[0];
    c10_sb_loop_ub = c10_beq_size[0] - 1;
    for (c10_i46 = 0; c10_i46 <= c10_sb_loop_ub; c10_i46++) {
      c10_b_beq_data[c10_i46] = c10_beq_data[c10_i46];
    }

    c10_c_lb_size[0] = c10_lb_size[0];
    c10_tb_loop_ub = c10_lb_size[0] - 1;
    for (c10_i47 = 0; c10_i47 <= c10_tb_loop_ub; c10_i47++) {
      c10_c_lb_data[c10_i47] = c10_lb_data[c10_i47];
    }

    c10_c_ub_size[0] = c10_ub_size[0];
    c10_ub_loop_ub = c10_ub_size[0] - 1;
    for (c10_i48 = 0; c10_i48 <= c10_ub_loop_ub; c10_i48++) {
      c10_c_ub_data[c10_i48] = c10_ub_data[c10_i48];
    }

    c10_st.site = &c10_mc_emlrtRSI;
    c10_b_loadProblem(chartInstance, &c10_st, &chartInstance->c10_WorkingSet,
                      c10_mEq, c10_mEq, c10_b_Aeq, c10_b_beq_data,
                      c10_b_beq_size, c10_mLB, c10_c_lb_data, c10_c_lb_size,
                      c10_mUB, c10_c_ub_data, c10_c_ub_size, c10_mFixed,
                      c10_mConstrMax);
    c10_st.site = &c10_mc_emlrtRSI;
    c10_b_initActiveSet(chartInstance, &c10_st, &chartInstance->c10_WorkingSet);
    chartInstance->c10_WorkingSet.SLACK0 = 0.0;
    c10_d_varargin_2 = c10_nVarMax;
    c10_pb_y = c10_d_varargin_2;
    c10_qb_y = c10_pb_y;
    c10_rb_y = c10_qb_y;
    c10_q_b = c10_rb_y;
    c10_sb_y = c10_q_b;
    c10_tb_y = c10_sb_y;
    c10_s_b = c10_tb_y;
    c10_p = (static_cast<real_T>(c10_s_b) > 2.0);
    if (c10_p) {
      c10_b_maxval = c10_tb_y;
    } else {
      c10_b_maxval = 2;
    }

    c10_o_b.set_size(&c10_af_emlrtRTEI, c10_sp, c10_maxDims, c10_b_maxval);
    c10_vb_loop_ub = c10_maxDims * c10_b_maxval - 1;
    for (c10_i49 = 0; c10_i49 <= c10_vb_loop_ub; c10_i49++) {
      c10_o_b[c10_i49] = 1.0;
    }

    c10_i50 = c10_o_b.size(0) * c10_o_b.size(1);
    c10_i51 = c10_i50;
    c10_wb_loop_ub = c10_i51 - 1;
    for (c10_i52 = 0; c10_i52 <= c10_wb_loop_ub; c10_i52++) {
      c10_o_b[c10_i52] = 1.7976931348623157E+308 * c10_o_b[c10_i52];
    }

    for (c10_i53 = 0; c10_i53 < 2; c10_i53++) {
      c10_iv1[c10_i53] = c10_o_b.size(c10_i53);
    }

    c10_memspace.workspace_double.set_size(&c10_af_emlrtRTEI, c10_sp, c10_iv1[0],
      c10_iv1[1]);
    c10_p_b.set_size(&c10_af_emlrtRTEI, c10_sp, c10_maxDims);
    c10_xb_loop_ub = c10_maxDims - 1;
    for (c10_i54 = 0; c10_i54 <= c10_xb_loop_ub; c10_i54++) {
      c10_p_b[c10_i54] = 1;
    }

    c10_yb_loop_ub = c10_p_b.size(0) - 1;
    for (c10_i55 = 0; c10_i55 <= c10_yb_loop_ub; c10_i55++) {
      c10_p_b[c10_i55] = MAX_int32_T * c10_p_b[c10_i55];
    }

    c10_iv[0] = c10_p_b.size(0);
    c10_memspace.workspace_int.set_size(&c10_af_emlrtRTEI, c10_sp, c10_iv[0]);
    c10_p_b.set_size(&c10_af_emlrtRTEI, c10_sp, c10_maxDims);
    c10_ac_loop_ub = c10_maxDims - 1;
    for (c10_i56 = 0; c10_i56 <= c10_ac_loop_ub; c10_i56++) {
      c10_p_b[c10_i56] = 1;
    }

    c10_bc_loop_ub = c10_p_b.size(0) - 1;
    for (c10_i57 = 0; c10_i57 <= c10_bc_loop_ub; c10_i57++) {
      c10_p_b[c10_i57] = MAX_int32_T * c10_p_b[c10_i57];
    }

    c10_iv[0] = c10_p_b.size(0);
    c10_memspace.workspace_sort.set_size(&c10_af_emlrtRTEI, c10_sp, c10_iv[0]);
    c10_c_nVar = c10_nVar;
    c10_mConstr = ((c10_mFixed + c10_mEq) + c10_mLB) + c10_mUB;
    c10_t_b = c10_c_nVar + c10_mConstr;
    c10_defaultIterations = 10 * c10_t_b;
    c10_runTimeOptions.RemainFeasible = false;
    c10_runTimeOptions.MaxIterations = c10_defaultIterations;
    c10_st.site = &c10_mc_emlrtRSI;
    c10_runTimeOptions.ConstrRelTolFactor =
      c10_computePhaseOneRelativeTolerances(chartInstance, &c10_st,
      &chartInstance->c10_WorkingSet);
    c10_runTimeOptions.ProbRelTolFactor = c10_runTimeOptions.ConstrRelTolFactor;
    c10_d_H.set_size(&c10_af_emlrtRTEI, c10_sp, c10_c_H.size(0), c10_c_H.size(1));
    c10_cc_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
    for (c10_i58 = 0; c10_i58 <= c10_cc_loop_ub; c10_i58++) {
      c10_d_H[c10_i58] = c10_c_H[c10_i58];
    }

    c10_b_f.set_size(&c10_af_emlrtRTEI, c10_sp, c10_f.size(0));
    c10_dc_loop_ub = c10_f.size(0) - 1;
    for (c10_i59 = 0; c10_i59 <= c10_dc_loop_ub; c10_i59++) {
      c10_b_f[c10_i59] = c10_f[c10_i59];
    }

    c10_st.site = &c10_mc_emlrtRSI;
    c10_b_updateRelativeTolerancesForPhaseTwo(chartInstance, &c10_st,
      &c10_runTimeOptions.ProbRelTolFactor, c10_d_H, c10_b_f);
    c10_e_H.set_size(&c10_af_emlrtRTEI, c10_sp, c10_c_H.size(0), c10_c_H.size(1));
    c10_ec_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
    for (c10_i60 = 0; c10_i60 <= c10_ec_loop_ub; c10_i60++) {
      c10_e_H[c10_i60] = c10_c_H[c10_i60];
    }

    c10_c_f.set_size(&c10_af_emlrtRTEI, c10_sp, c10_f.size(0));
    c10_fc_loop_ub = c10_f.size(0) - 1;
    for (c10_i61 = 0; c10_i61 <= c10_fc_loop_ub; c10_i61++) {
      c10_c_f[c10_i61] = c10_f[c10_i61];
    }

    c10_st.site = &c10_mc_emlrtRSI;
    c10_c_options = *c10_b_options;
    c10_b_driver(chartInstance, &c10_st, c10_e_H, c10_c_f, &c10_solution,
                 &c10_memspace, &chartInstance->c10_WorkingSet, &c10_QRManager,
                 &c10_CholRegManager, &c10_QPObjective, &c10_c_options,
                 c10_runTimeOptions);
    for (c10_i62 = 0; c10_i62 < 2; c10_i62++) {
      c10_dv[c10_i62] = static_cast<real_T>(c10_b_x0.size(c10_i62));
    }

    c10_o_b.set_size(&c10_af_emlrtRTEI, c10_sp, static_cast<int32_T>(c10_dv[0]),
                     static_cast<int32_T>(c10_dv[1]));
    c10_gc_loop_ub = static_cast<int32_T>(c10_dv[0]) * static_cast<int32_T>
      (c10_dv[1]) - 1;
    for (c10_i63 = 0; c10_i63 <= c10_gc_loop_ub; c10_i63++) {
      c10_o_b[c10_i63] = 1.0;
    }

    c10_i64 = c10_o_b.size(0) * c10_o_b.size(1);
    c10_i65 = c10_i64;
    c10_hc_loop_ub = c10_i65 - 1;
    for (c10_i66 = 0; c10_i66 <= c10_hc_loop_ub; c10_i66++) {
      c10_o_b[c10_i66] = 1.7976931348623157E+308 * c10_o_b[c10_i66];
    }

    for (c10_i67 = 0; c10_i67 < 2; c10_i67++) {
      c10_iv1[c10_i67] = c10_o_b.size(c10_i67);
    }

    c10_x.set_size(&c10_af_emlrtRTEI, c10_sp, c10_iv1[0], c10_iv1[1]);
    c10_st.site = &c10_mc_emlrtRSI;
    c10_o_n = c10_nVar;
    c10_g_b.set_size(&c10_af_emlrtRTEI, &c10_st, c10_solution.xstar.size(0));
    c10_ic_loop_ub = c10_solution.xstar.size(0) - 1;
    for (c10_i68 = 0; c10_i68 <= c10_ic_loop_ub; c10_i68++) {
      c10_g_b[c10_i68] = c10_solution.xstar[c10_i68];
    }

    if (!(c10_o_n < 1)) {
      c10_b_st.site = &c10_ad_emlrtRSI;
      c10_p_n = c10_o_n;
      c10_q_n = c10_p_n;
      c10_c_var = c10_q_n;
      c10_c_n_t = (ptrdiff_t)c10_c_var;
      c10_c_incx_t = (ptrdiff_t)1;
      c10_b_incy_t = (ptrdiff_t)1;
      dcopy(&c10_c_n_t, &(c10_g_b.data())[0], &c10_c_incx_t, &(c10_x.data())[0],
            &c10_b_incy_t);
    }

    if (c10_solution.state > 0) {
      c10_c_fval = c10_solution.fstar;
    } else {
      c10_o_b.set_size(&c10_af_emlrtRTEI, c10_sp,
                       c10_memspace.workspace_double.size(0),
                       c10_memspace.workspace_double.size(1));
      c10_jc_loop_ub = c10_memspace.workspace_double.size(0) *
        c10_memspace.workspace_double.size(1) - 1;
      for (c10_i69 = 0; c10_i69 <= c10_jc_loop_ub; c10_i69++) {
        c10_o_b[c10_i69] = c10_memspace.workspace_double[c10_i69];
      }

      c10_s_H.set_size(&c10_af_emlrtRTEI, c10_sp, c10_c_H.size(0), c10_c_H.size
                       (1));
      c10_kc_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
      for (c10_i70 = 0; c10_i70 <= c10_kc_loop_ub; c10_i70++) {
        c10_s_H[c10_i70] = c10_c_H[c10_i70];
      }

      c10_d_f.set_size(&c10_af_emlrtRTEI, c10_sp, c10_f.size(0));
      c10_oc_loop_ub = c10_f.size(0) - 1;
      for (c10_i73 = 0; c10_i73 <= c10_oc_loop_ub; c10_i73++) {
        c10_d_f[c10_i73] = c10_f[c10_i73];
      }

      c10_c_solution.set_size(&c10_af_emlrtRTEI, c10_sp, c10_solution.xstar.size
        (0));
      c10_pc_loop_ub = c10_solution.xstar.size(0) - 1;
      for (c10_i74 = 0; c10_i74 <= c10_pc_loop_ub; c10_i74++) {
        c10_c_solution[c10_i74] = c10_solution.xstar[c10_i74];
      }

      c10_st.site = &c10_mc_emlrtRSI;
      c10_d_fval = c10_b_computeFval(chartInstance, &c10_st, &c10_QPObjective,
        c10_o_b, c10_s_H, c10_d_f, c10_c_solution);
      c10_c_fval = c10_d_fval;
      c10_memspace.workspace_double.set_size(&c10_af_emlrtRTEI, c10_sp,
        c10_o_b.size(0), c10_o_b.size(1));
      c10_rc_loop_ub = c10_o_b.size(0) * c10_o_b.size(1) - 1;
      for (c10_i76 = 0; c10_i76 <= c10_rc_loop_ub; c10_i76++) {
        c10_memspace.workspace_double[c10_i76] = c10_o_b[c10_i76];
      }
    }

    switch (c10_solution.state) {
     case 2:
      c10_solution.state = -3;
      break;

     case -3:
      c10_solution.state = -2;
      break;

     case 4:
      c10_solution.state = -2;
      break;
    }

    c10_c_exitflag = static_cast<real_T>(c10_solution.state);
    if (c10_solution.state == -2) {
      c10_solution.firstorderopt = rtInf;
    } else if (c10_solution.state <= 0) {
      c10_b_solution.set_size(&c10_af_emlrtRTEI, c10_sp, c10_solution.xstar.size
        (0));
      c10_mc_loop_ub = c10_solution.xstar.size(0) - 1;
      for (c10_i72 = 0; c10_i72 <= c10_mc_loop_ub; c10_i72++) {
        c10_b_solution[c10_i72] = c10_solution.xstar[c10_i72];
      }

      c10_st.site = &c10_mc_emlrtRSI;
      c10_d1 = c10_f_maxConstraintViolation(chartInstance, &c10_st,
        &chartInstance->c10_WorkingSet, c10_b_solution);
      c10_solution.maxConstr = c10_d1;
      if (c10_solution.maxConstr <= 1.0E-8 *
          c10_runTimeOptions.ConstrRelTolFactor) {
        c10_t_H.set_size(&c10_af_emlrtRTEI, c10_sp, c10_c_H.size(0),
                         c10_c_H.size(1));
        c10_qc_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
        for (c10_i75 = 0; c10_i75 <= c10_qc_loop_ub; c10_i75++) {
          c10_t_H[c10_i75] = c10_c_H[c10_i75];
        }

        c10_e_f.set_size(&c10_af_emlrtRTEI, c10_sp, c10_f.size(0));
        c10_sc_loop_ub = c10_f.size(0) - 1;
        for (c10_i77 = 0; c10_i77 <= c10_sc_loop_ub; c10_i77++) {
          c10_e_f[c10_i77] = c10_f[c10_i77];
        }

        c10_d_solution.set_size(&c10_af_emlrtRTEI, c10_sp,
          c10_solution.xstar.size(0));
        c10_uc_loop_ub = c10_solution.xstar.size(0) - 1;
        for (c10_i79 = 0; c10_i79 <= c10_uc_loop_ub; c10_i79++) {
          c10_d_solution[c10_i79] = c10_solution.xstar[c10_i79];
        }

        c10_st.site = &c10_mc_emlrtRSI;
        c10_b_computeGrad(chartInstance, &c10_st, &c10_QPObjective, c10_t_H,
                          c10_e_f, c10_d_solution);
        c10_o_b.set_size(&c10_af_emlrtRTEI, c10_sp,
                         c10_memspace.workspace_double.size(0),
                         c10_memspace.workspace_double.size(1));
        c10_wc_loop_ub = c10_memspace.workspace_double.size(0) *
          c10_memspace.workspace_double.size(1) - 1;
        for (c10_i81 = 0; c10_i81 <= c10_wc_loop_ub; c10_i81++) {
          c10_o_b[c10_i81] = c10_memspace.workspace_double[c10_i81];
        }

        chartInstance->c10_b_WorkingSet = chartInstance->c10_WorkingSet;
        c10_st.site = &c10_mc_emlrtRSI;
        c10_b_computeFirstOrderOpt(chartInstance, &c10_st, &c10_solution,
          &c10_QPObjective, &chartInstance->c10_b_WorkingSet, c10_o_b);
        c10_memspace.workspace_double.set_size(&c10_af_emlrtRTEI, c10_sp,
          c10_o_b.size(0), c10_o_b.size(1));
        c10_ad_loop_ub = c10_o_b.size(0) * c10_o_b.size(1) - 1;
        for (c10_i84 = 0; c10_i84 <= c10_ad_loop_ub; c10_i84++) {
          c10_memspace.workspace_double[c10_i84] = c10_o_b[c10_i84];
        }
      } else {
        c10_solution.firstorderopt = rtInf;
      }
    }

    for (c10_i71 = 0; c10_i71 < 10; c10_i71++) {
      c10_output->algorithm[c10_i71] = c10_e_b[c10_i71];
    }

    c10_output->firstorderopt = c10_solution.firstorderopt;
    c10_e_varargin_2 = c10_solution.maxConstr;
    c10_ub_y = c10_e_varargin_2;
    c10_vb_y = c10_ub_y;
    c10_wb_y = c10_vb_y;
    c10_u_b = c10_wb_y;
    c10_xb_y = c10_u_b;
    c10_yb_y = c10_xb_y;
    c10_c_maxval = muDoubleScalarMax(0.0, c10_yb_y);
    c10_output->constrviolation = c10_c_maxval;
    c10_output->iterations = static_cast<real_T>(c10_solution.iterations);
    c10_lambda->eqlin.size[0] = c10_mEq;
    c10_tc_loop_ub = c10_mEq - 1;
    for (c10_i78 = 0; c10_i78 <= c10_tc_loop_ub; c10_i78++) {
      c10_lambda->eqlin.data[c10_i78] = 0.0;
    }

    c10_lambda->lower.set_size(&c10_af_emlrtRTEI, c10_sp, c10_nVar);
    c10_vc_loop_ub = c10_nVar - 1;
    for (c10_i80 = 0; c10_i80 <= c10_vc_loop_ub; c10_i80++) {
      c10_lambda->lower[c10_i80] = 0.0;
    }

    c10_lambda->upper.set_size(&c10_af_emlrtRTEI, c10_sp, c10_nVar);
    c10_xc_loop_ub = c10_nVar - 1;
    for (c10_i82 = 0; c10_i82 <= c10_xc_loop_ub; c10_i82++) {
      c10_lambda->upper[c10_i82] = 0.0;
    }

    if (chartInstance->c10_WorkingSet.nActiveConstr > 0) {
      c10_tmp_size[0] = c10_solution.lambda.size[0];
      c10_yc_loop_ub = c10_solution.lambda.size[0] - 1;
      for (c10_i83 = 0; c10_i83 <= c10_yc_loop_ub; c10_i83++) {
        c10_tmp_data[c10_i83] = c10_solution.lambda.data[c10_i83];
      }

      c10_o_b.set_size(&c10_af_emlrtRTEI, c10_sp,
                       c10_memspace.workspace_double.size(0),
                       c10_memspace.workspace_double.size(1));
      c10_bd_loop_ub = c10_memspace.workspace_double.size(0) *
        c10_memspace.workspace_double.size(1) - 1;
      for (c10_i85 = 0; c10_i85 <= c10_bd_loop_ub; c10_i85++) {
        c10_o_b[c10_i85] = c10_memspace.workspace_double[c10_i85];
      }

      chartInstance->c10_c_WorkingSet = chartInstance->c10_WorkingSet;
      c10_st.site = &c10_mc_emlrtRSI;
      c10_b_sortLambdaQP(chartInstance, &c10_st, c10_tmp_data, c10_tmp_size,
                         &chartInstance->c10_c_WorkingSet, c10_o_b);
      c10_solution.lambda.size[0] = c10_tmp_size[0];
      c10_cd_loop_ub = c10_tmp_size[0] - 1;
      for (c10_i86 = 0; c10_i86 <= c10_cd_loop_ub; c10_i86++) {
        c10_solution.lambda.data[c10_i86] = c10_tmp_data[c10_i86];
      }

      c10_st.site = &c10_mc_emlrtRSI;
      c10_b_dealLambdaIntoStruct(chartInstance, &c10_st, c10_lambda,
        &c10_solution, &chartInstance->c10_WorkingSet);
    }
  }

  *c10_b_fval = c10_c_fval;
  *c10_b_exitflag = c10_c_exitflag;
}

static void c10_checkQuadraticObjective(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_c_H,
  coder::array<real_T, 1U> &c10_f)
{
  coder::array<real_T, 1U> c10_x;
  coder::array<boolean_T, 1U> c10_b;
  coder::array<boolean_T, 1U> c10_e_b;
  emlrtStack c10_st;
  const mxArray *c10_b_y = NULL;
  const mxArray *c10_c_y = NULL;
  const mxArray *c10_d_y = NULL;
  const mxArray *c10_e_y = NULL;
  const mxArray *c10_f_y = NULL;
  const mxArray *c10_y = NULL;
  int32_T c10_b_loop_ub;
  int32_T c10_c_loop_ub;
  int32_T c10_d_loop_ub;
  int32_T c10_e_loop_ub;
  int32_T c10_f_loop_ub;
  int32_T c10_g_loop_ub;
  int32_T c10_h_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_i_loop_ub;
  int32_T c10_j_loop_ub;
  int32_T c10_k_loop_ub;
  int32_T c10_loop_ub;
  char_T c10_b_u;
  char_T c10_u;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_x.set_size(&c10_gf_emlrtRTEI, c10_sp, c10_c_H.size(0) * c10_c_H.size(1));
  c10_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_x[c10_i] = c10_c_H[c10_i];
  }

  c10_b.set_size(&c10_hf_emlrtRTEI, c10_sp, c10_x.size(0));
  c10_b_loop_ub = c10_x.size(0) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_b[c10_i1] = muDoubleScalarIsInf(c10_x[c10_i1]);
  }

  c10_c_loop_ub = c10_b.size(0) - 1;
  for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
    c10_b[c10_i2] = !c10_b[c10_i2];
  }

  c10_e_b.set_size(&c10_if_emlrtRTEI, c10_sp, c10_x.size(0));
  c10_d_loop_ub = c10_x.size(0) - 1;
  for (c10_i3 = 0; c10_i3 <= c10_d_loop_ub; c10_i3++) {
    c10_e_b[c10_i3] = muDoubleScalarIsNaN(c10_x[c10_i3]);
  }

  c10_e_loop_ub = c10_e_b.size(0) - 1;
  for (c10_i4 = 0; c10_i4 <= c10_e_loop_ub; c10_i4++) {
    c10_e_b[c10_i4] = !c10_e_b[c10_i4];
  }

  c10_f_loop_ub = c10_b.size(0) - 1;
  for (c10_i5 = 0; c10_i5 <= c10_f_loop_ub; c10_i5++) {
    c10_b[c10_i5] = (c10_b[c10_i5] && c10_e_b[c10_i5]);
  }

  c10_st.site = &c10_oc_emlrtRSI;
  if (!c10_b_all(chartInstance, &c10_st, c10_b)) {
    c10_y = NULL;
    sf_mex_assign(&c10_y, sf_mex_create("y", c10_cv4, 10, 0U, 1U, 0U, 2, 1, 45),
                  false);
    c10_b_y = NULL;
    sf_mex_assign(&c10_b_y, sf_mex_create("y", c10_cv4, 10, 0U, 1U, 0U, 2, 1, 45),
                  false);
    c10_u = 'H';
    c10_c_y = NULL;
    sf_mex_assign(&c10_c_y, sf_mex_create("y", &c10_u, 10, 0U, 0U, 0U, 0), false);
    sf_mex_call(c10_sp, &c10_q_emlrtMCI, "error", 0U, 2U, 14, c10_y, 14,
                sf_mex_call(c10_sp, NULL, "getString", 1U, 1U, 14, sf_mex_call
      (c10_sp, NULL, "message", 1U, 2U, 14, c10_b_y, 14, c10_c_y)));
  }

  c10_b.set_size(&c10_hf_emlrtRTEI, c10_sp, c10_f.size(0));
  c10_g_loop_ub = c10_f.size(0) - 1;
  for (c10_i6 = 0; c10_i6 <= c10_g_loop_ub; c10_i6++) {
    c10_b[c10_i6] = muDoubleScalarIsInf(c10_f[c10_i6]);
  }

  c10_h_loop_ub = c10_b.size(0) - 1;
  for (c10_i7 = 0; c10_i7 <= c10_h_loop_ub; c10_i7++) {
    c10_b[c10_i7] = !c10_b[c10_i7];
  }

  c10_e_b.set_size(&c10_if_emlrtRTEI, c10_sp, c10_f.size(0));
  c10_i_loop_ub = c10_f.size(0) - 1;
  for (c10_i8 = 0; c10_i8 <= c10_i_loop_ub; c10_i8++) {
    c10_e_b[c10_i8] = muDoubleScalarIsNaN(c10_f[c10_i8]);
  }

  c10_j_loop_ub = c10_e_b.size(0) - 1;
  for (c10_i9 = 0; c10_i9 <= c10_j_loop_ub; c10_i9++) {
    c10_e_b[c10_i9] = !c10_e_b[c10_i9];
  }

  c10_k_loop_ub = c10_b.size(0) - 1;
  for (c10_i10 = 0; c10_i10 <= c10_k_loop_ub; c10_i10++) {
    c10_b[c10_i10] = (c10_b[c10_i10] && c10_e_b[c10_i10]);
  }

  c10_st.site = &c10_oc_emlrtRSI;
  if (!c10_b_all(chartInstance, &c10_st, c10_b)) {
    c10_d_y = NULL;
    sf_mex_assign(&c10_d_y, sf_mex_create("y", c10_cv4, 10, 0U, 1U, 0U, 2, 1, 45),
                  false);
    c10_e_y = NULL;
    sf_mex_assign(&c10_e_y, sf_mex_create("y", c10_cv4, 10, 0U, 1U, 0U, 2, 1, 45),
                  false);
    c10_b_u = 'f';
    c10_f_y = NULL;
    sf_mex_assign(&c10_f_y, sf_mex_create("y", &c10_b_u, 10, 0U, 0U, 0U, 0),
                  false);
    sf_mex_call(c10_sp, &c10_q_emlrtMCI, "error", 0U, 2U, 14, c10_d_y, 14,
                sf_mex_call(c10_sp, NULL, "getString", 1U, 1U, 14, sf_mex_call
      (c10_sp, NULL, "message", 1U, 2U, 14, c10_e_y, 14, c10_f_y)));
  }
}

static boolean_T c10_b_all(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<boolean_T, 1U> &c10_x)
{
  static char_T c10_b_cv[51] = { 'C', 'o', 'd', 'e', 'r', ':', 't', 'o', 'o',
    'l', 'b', 'o', 'x', ':', 'e', 'm', 'l', '_', 'a', 'l', 'l', '_', 'o', 'r',
    '_', 'a', 'n', 'y', '_', 'a', 'u', 't', 'o', 'D', 'i', 'm', 'I', 'n', 'c',
    'o', 'm', 'p', 'a', 't', 'i', 'b', 'i', 'l', 'i', 't', 'y' };

  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  const mxArray *c10_b_y = NULL;
  const mxArray *c10_c_y = NULL;
  real_T c10_b_a;
  real_T c10_vlen;
  int32_T c10_b_c;
  int32_T c10_c_a;
  int32_T c10_d_a;
  int32_T c10_e_b;
  int32_T c10_f_b;
  int32_T c10_g_b;
  int32_T c10_i2;
  int32_T c10_ix;
  int32_T c10_vspread;
  boolean_T c10_b;
  boolean_T c10_exitg1;
  boolean_T c10_overflow;
  boolean_T c10_y;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_st.site = &c10_pc_emlrtRSI;
  if ((c10_x.size(0) == 1) || (static_cast<real_T>(c10_x.size(0)) != 1.0)) {
    c10_b = true;
  } else {
    c10_b = false;
  }

  if (!c10_b) {
    c10_b_y = NULL;
    sf_mex_assign(&c10_b_y, sf_mex_create("y", c10_b_cv, 10, 0U, 1U, 0U, 2, 1,
      51), false);
    c10_c_y = NULL;
    sf_mex_assign(&c10_c_y, sf_mex_create("y", c10_b_cv, 10, 0U, 1U, 0U, 2, 1,
      51), false);
    sf_mex_call(&c10_st, &c10_r_emlrtMCI, "error", 0U, 2U, 14, c10_b_y, 14,
                sf_mex_call(&c10_st, NULL, "getString", 1U, 1U, 14, sf_mex_call(
      &c10_st, NULL, "message", 1U, 1U, 14, c10_c_y)));
  }

  c10_y = true;
  c10_vlen = static_cast<real_T>(c10_x.size(0));
  c10_b_a = c10_vlen;
  c10_b_c = static_cast<int32_T>(c10_b_a);
  c10_c_a = c10_b_c - 1;
  c10_vspread = c10_c_a;
  c10_e_b = c10_vspread;
  c10_i2 = c10_e_b;
  c10_d_a = c10_i2 + 1;
  c10_i2 = c10_d_a;
  c10_b_st.site = &c10_u_emlrtRSI;
  c10_f_b = c10_i2;
  c10_g_b = c10_f_b;
  if (c10_g_b < 1) {
    c10_overflow = false;
  } else {
    c10_overflow = (c10_g_b > 2147483646);
  }

  if (c10_overflow) {
    c10_c_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
  }

  c10_ix = 0;
  c10_exitg1 = false;
  while ((!c10_exitg1) && (c10_ix + 1 <= c10_i2)) {
    if (!c10_x[c10_ix]) {
      c10_y = false;
      c10_exitg1 = true;
    } else {
      c10_ix++;
    }
  }

  return c10_y;
}

static void c10_checkX0(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_b_x0)
{
  coder::array<boolean_T, 2U> c10_e_b;
  coder::array<boolean_T, 2U> c10_f_b;
  coder::array<boolean_T, 1U> c10_varargin_1;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_d_st;
  emlrtStack c10_e_st;
  emlrtStack c10_f_st;
  emlrtStack c10_g_st;
  emlrtStack c10_h_st;
  emlrtStack c10_st;
  const mxArray *c10_b_y = NULL;
  const mxArray *c10_y = NULL;
  real_T c10_b_a;
  real_T c10_vlen;
  int32_T c10_b_c;
  int32_T c10_b_loop_ub;
  int32_T c10_c_a;
  int32_T c10_c_i2;
  int32_T c10_c_loop_ub;
  int32_T c10_d_a;
  int32_T c10_d_loop_ub;
  int32_T c10_e_loop_ub;
  int32_T c10_f_loop_ub;
  int32_T c10_g_b;
  int32_T c10_h_b;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_j_b;
  int32_T c10_loop_ub;
  int32_T c10_vspread;
  boolean_T c10_b;
  boolean_T c10_b1;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_d_st.prev = &c10_c_st;
  c10_d_st.tls = c10_c_st.tls;
  c10_e_st.prev = &c10_d_st;
  c10_e_st.tls = c10_d_st.tls;
  c10_f_st.prev = &c10_e_st;
  c10_f_st.tls = c10_e_st.tls;
  c10_g_st.prev = &c10_f_st;
  c10_g_st.tls = c10_f_st.tls;
  c10_h_st.prev = &c10_g_st;
  c10_h_st.tls = c10_g_st.tls;
  c10_b = (c10_b_x0.size(0) == 0);
  c10_b1 = (c10_b_x0.size(1) == 0);
  if (!((!c10_b) && (!c10_b1))) {
    c10_y = NULL;
    sf_mex_assign(&c10_y, sf_mex_create("y", c10_cv3, 10, 0U, 1U, 0U, 2, 1, 30),
                  false);
    c10_b_y = NULL;
    sf_mex_assign(&c10_b_y, sf_mex_create("y", c10_cv3, 10, 0U, 1U, 0U, 2, 1, 30),
                  false);
    sf_mex_call(c10_sp, &c10_s_emlrtMCI, "error", 0U, 2U, 14, c10_y, 14,
                sf_mex_call(c10_sp, NULL, "getString", 1U, 1U, 14, sf_mex_call
      (c10_sp, NULL, "message", 1U, 1U, 14, c10_b_y)));
  }

  c10_e_b.set_size(&c10_hf_emlrtRTEI, c10_sp, c10_b_x0.size(0), c10_b_x0.size(1));
  c10_loop_ub = c10_b_x0.size(0) * c10_b_x0.size(1) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_e_b[c10_i] = muDoubleScalarIsInf(c10_b_x0[c10_i]);
  }

  c10_i1 = c10_e_b.size(0) * c10_e_b.size(1);
  c10_i2 = c10_i1;
  c10_b_loop_ub = c10_i2 - 1;
  for (c10_i3 = 0; c10_i3 <= c10_b_loop_ub; c10_i3++) {
    c10_e_b[c10_i3] = !c10_e_b[c10_i3];
  }

  c10_f_b.set_size(&c10_if_emlrtRTEI, c10_sp, c10_b_x0.size(0), c10_b_x0.size(1));
  c10_c_loop_ub = c10_b_x0.size(0) * c10_b_x0.size(1) - 1;
  for (c10_i4 = 0; c10_i4 <= c10_c_loop_ub; c10_i4++) {
    c10_f_b[c10_i4] = muDoubleScalarIsNaN(c10_b_x0[c10_i4]);
  }

  c10_i5 = c10_f_b.size(0) * c10_f_b.size(1);
  c10_i6 = c10_i5;
  c10_d_loop_ub = c10_i6 - 1;
  for (c10_i7 = 0; c10_i7 <= c10_d_loop_ub; c10_i7++) {
    c10_f_b[c10_i7] = !c10_f_b[c10_i7];
  }

  c10_i8 = c10_e_b.size(0) * c10_e_b.size(1);
  c10_i9 = c10_i8;
  c10_e_loop_ub = c10_i9 - 1;
  for (c10_i10 = 0; c10_i10 <= c10_e_loop_ub; c10_i10++) {
    c10_e_b[c10_i10] = (c10_e_b[c10_i10] && c10_f_b[c10_i10]);
  }

  c10_st.site = &c10_rc_emlrtRSI;
  c10_b_st.site = &c10_s_emlrtRSI;
  c10_c_st.site = &c10_sc_emlrtRSI;
  c10_d_st.site = &c10_tc_emlrtRSI;
  c10_varargin_1.set_size(&c10_jf_emlrtRTEI, &c10_d_st, c10_e_b.size(0) *
    c10_e_b.size(1));
  c10_f_loop_ub = c10_e_b.size(0) * c10_e_b.size(1) - 1;
  for (c10_i11 = 0; c10_i11 <= c10_f_loop_ub; c10_i11++) {
    c10_varargin_1[c10_i11] = c10_e_b[c10_i11];
  }

  c10_e_st.site = &c10_uc_emlrtRSI;
  c10_f_st.site = &c10_vc_emlrtRSI;
  c10_vlen = static_cast<real_T>(c10_varargin_1.size(0));
  c10_b_a = c10_vlen;
  c10_b_c = static_cast<int32_T>(c10_b_a);
  c10_c_a = c10_b_c - 1;
  c10_vspread = c10_c_a;
  c10_g_b = c10_vspread;
  c10_c_i2 = c10_g_b;
  c10_d_a = c10_c_i2 + 1;
  c10_c_i2 = c10_d_a;
  c10_g_st.site = &c10_u_emlrtRSI;
  c10_h_b = c10_c_i2;
  c10_j_b = c10_h_b;
  if (c10_j_b < 1) {
    c10_overflow = false;
  } else {
    c10_overflow = (c10_j_b > 2147483646);
  }

  if (c10_overflow) {
    c10_h_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_h_st);
  }
}

static real_T c10_checkLinearInputs(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, int32_T c10_nVar, coder::array<real_T, 2U> &c10_Aeq,
  real_T c10_beq_data[], int32_T c10_beq_size[1], real_T c10_lb_data[], int32_T
  c10_lb_size[1], real_T c10_ub_data[], int32_T c10_ub_size[1])
{
  static char_T c10_b_cv2[49] = { 'o', 'p', 't', 'i', 'm', 'l', 'i', 'b', '_',
    'c', 'o', 'd', 'e', 'g', 'e', 'n', ':', 'c', 'o', 'm', 'm', 'o', 'n', ':',
    'W', 'r', 'o', 'n', 'g', 'N', 'u', 'm', 'b', 'e', 'r', 'O', 'f', 'C', 'o',
    'l', 'u', 'm', 'n', 's', 'I', 'n', 'A', 'e', 'q' };

  static char_T c10_b_cv6[47] = { 'o', 'p', 't', 'i', 'm', 'l', 'i', 'b', '_',
    'c', 'o', 'd', 'e', 'g', 'e', 'n', ':', 'c', 'o', 'm', 'm', 'o', 'n', ':',
    'I', 'n', 'f', 'N', 'a', 'N', 'C', 'o', 'm', 'p', 'l', 'e', 'x', 'D', 'e',
    't', 'e', 'c', 't', 'e', 'd', 'L', 'B' };

  static char_T c10_cv8[47] = { 'o', 'p', 't', 'i', 'm', 'l', 'i', 'b', '_', 'c',
    'o', 'd', 'e', 'g', 'e', 'n', ':', 'c', 'o', 'm', 'm', 'o', 'n', ':', 'I',
    'n', 'f', 'N', 'a', 'N', 'C', 'o', 'm', 'p', 'l', 'e', 'x', 'D', 'e', 't',
    'e', 'c', 't', 'e', 'd', 'U', 'B' };

  static char_T c10_b_cv3[45] = { 'o', 'p', 't', 'i', 'm', 'l', 'i', 'b', '_',
    'c', 'o', 'd', 'e', 'g', 'e', 'n', ':', 'c', 'o', 'm', 'm', 'o', 'n', ':',
    'A', 'e', 'q', 'A', 'n', 'd', 'B', 'e', 'q', 'I', 'n', 'c', 'o', 'n', 's',
    'i', 's', 't', 'e', 'n', 't' };

  static char_T c10_b_cv4[44] = { 'o', 'p', 't', 'i', 'm', 'l', 'i', 'b', '_',
    'c', 'o', 'd', 'e', 'g', 'e', 'n', ':', 'c', 'o', 'm', 'm', 'o', 'n', ':',
    'I', 'n', 'v', 'a', 'l', 'i', 'd', 'P', 'a', 'r', 't', 'i', 'a', 'l', 'B',
    'o', 'u', 'n', 'd', 's' };

  static char_T c10_b_cv[3] = { 'A', 'e', 'q' };

  static char_T c10_b_cv1[3] = { 'B', 'e', 'q' };

  static char_T c10_b_cv5[2] = { 'l', 'b' };

  static char_T c10_cv7[2] = { 'u', 'b' };

  coder::array<real_T, 1U> c10_x;
  coder::array<boolean_T, 1U> c10_e_b;
  coder::array<boolean_T, 1U> c10_f_b;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  const mxArray *c10_b_y = NULL;
  const mxArray *c10_c_y = NULL;
  const mxArray *c10_d_y = NULL;
  const mxArray *c10_e_y = NULL;
  const mxArray *c10_f_y = NULL;
  const mxArray *c10_g_y = NULL;
  const mxArray *c10_h_y = NULL;
  const mxArray *c10_i_y = NULL;
  const mxArray *c10_j_y = NULL;
  const mxArray *c10_k_y = NULL;
  const mxArray *c10_m_y = NULL;
  const mxArray *c10_o_y = NULL;
  const mxArray *c10_p_y = NULL;
  const mxArray *c10_q_y = NULL;
  const mxArray *c10_r_y = NULL;
  const mxArray *c10_s_y = NULL;
  const mxArray *c10_t_y = NULL;
  const mxArray *c10_u_y = NULL;
  const mxArray *c10_v_y = NULL;
  const mxArray *c10_w_y = NULL;
  const mxArray *c10_x_y = NULL;
  const mxArray *c10_y = NULL;
  const mxArray *c10_y_y = NULL;
  real_T c10_b_exitflag;
  int32_T c10_b_lb_size[1];
  int32_T c10_b_ub_size[1];
  int32_T c10_iv[1];
  int32_T c10_iv1[1];
  int32_T c10_b_k;
  int32_T c10_b_loop_ub;
  int32_T c10_b_nVar;
  int32_T c10_c_loop_ub;
  int32_T c10_d_loop_ub;
  int32_T c10_e_loop_ub;
  int32_T c10_f_loop_ub;
  int32_T c10_g_b;
  int32_T c10_g_loop_ub;
  int32_T c10_h_b;
  int32_T c10_h_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_i_loop_ub;
  int32_T c10_j_loop_ub;
  int32_T c10_k;
  int32_T c10_k_loop_ub;
  int32_T c10_loop_ub;
  int32_T c10_m_loop_ub;
  int32_T c10_o_loop_ub;
  int32_T c10_p_loop_ub;
  int32_T c10_q_loop_ub;
  int32_T c10_r_loop_ub;
  int32_T c10_s_loop_ub;
  int32_T c10_t_loop_ub;
  boolean_T c10_b_lb_data[142];
  boolean_T c10_b_ub_data[142];
  boolean_T c10_b;
  boolean_T c10_b1;
  boolean_T c10_b10;
  boolean_T c10_b11;
  boolean_T c10_b12;
  boolean_T c10_b13;
  boolean_T c10_b2;
  boolean_T c10_b3;
  boolean_T c10_b4;
  boolean_T c10_b5;
  boolean_T c10_b6;
  boolean_T c10_b7;
  boolean_T c10_b8;
  boolean_T c10_b9;
  boolean_T c10_exitg1;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_b = (c10_Aeq.size(0) == 0);
  c10_b1 = (c10_Aeq.size(1) == 0);
  if (c10_b || c10_b1) {
    c10_b2 = true;
  } else {
    c10_x.set_size(&c10_kf_emlrtRTEI, c10_sp, c10_Aeq.size(0) * c10_Aeq.size(1));
    c10_loop_ub = c10_Aeq.size(0) * c10_Aeq.size(1) - 1;
    for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
      c10_x[c10_i] = c10_Aeq[c10_i];
    }

    c10_e_b.set_size(&c10_hf_emlrtRTEI, c10_sp, c10_x.size(0));
    c10_b_loop_ub = c10_x.size(0) - 1;
    for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
      c10_e_b[c10_i1] = muDoubleScalarIsInf(c10_x[c10_i1]);
    }

    c10_d_loop_ub = c10_e_b.size(0) - 1;
    for (c10_i3 = 0; c10_i3 <= c10_d_loop_ub; c10_i3++) {
      c10_e_b[c10_i3] = !c10_e_b[c10_i3];
    }

    c10_f_b.set_size(&c10_if_emlrtRTEI, c10_sp, c10_x.size(0));
    c10_f_loop_ub = c10_x.size(0) - 1;
    for (c10_i5 = 0; c10_i5 <= c10_f_loop_ub; c10_i5++) {
      c10_f_b[c10_i5] = muDoubleScalarIsNaN(c10_x[c10_i5]);
    }

    c10_h_loop_ub = c10_f_b.size(0) - 1;
    for (c10_i7 = 0; c10_i7 <= c10_h_loop_ub; c10_i7++) {
      c10_f_b[c10_i7] = !c10_f_b[c10_i7];
    }

    c10_j_loop_ub = c10_e_b.size(0) - 1;
    for (c10_i9 = 0; c10_i9 <= c10_j_loop_ub; c10_i9++) {
      c10_e_b[c10_i9] = (c10_e_b[c10_i9] && c10_f_b[c10_i9]);
    }

    c10_st.site = &c10_wc_emlrtRSI;
    if (c10_b_all(chartInstance, &c10_st, c10_e_b)) {
      c10_b2 = true;
    } else {
      c10_b2 = false;
    }
  }

  if (!c10_b2) {
    c10_y = NULL;
    sf_mex_assign(&c10_y, sf_mex_create("y", c10_cv4, 10, 0U, 1U, 0U, 2, 1, 45),
                  false);
    c10_b_y = NULL;
    sf_mex_assign(&c10_b_y, sf_mex_create("y", c10_cv4, 10, 0U, 1U, 0U, 2, 1, 45),
                  false);
    c10_c_y = NULL;
    sf_mex_assign(&c10_c_y, sf_mex_create("y", c10_b_cv, 10, 0U, 1U, 0U, 2, 1, 3),
                  false);
    sf_mex_call(c10_sp, &c10_t_emlrtMCI, "error", 0U, 2U, 14, c10_y, 14,
                sf_mex_call(c10_sp, NULL, "getString", 1U, 1U, 14, sf_mex_call
      (c10_sp, NULL, "message", 1U, 2U, 14, c10_b_y, 14, c10_c_y)));
  }

  if (c10_beq_size[0] == 0) {
    c10_b3 = true;
  } else {
    c10_x.set_size(&c10_kf_emlrtRTEI, c10_sp, c10_beq_size[0]);
    c10_c_loop_ub = c10_beq_size[0] - 1;
    for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
      c10_x[c10_i2] = c10_beq_data[c10_i2];
    }

    c10_e_b.set_size(&c10_hf_emlrtRTEI, c10_sp, c10_x.size(0));
    c10_e_loop_ub = c10_x.size(0) - 1;
    for (c10_i4 = 0; c10_i4 <= c10_e_loop_ub; c10_i4++) {
      c10_e_b[c10_i4] = muDoubleScalarIsInf(c10_x[c10_i4]);
    }

    c10_g_loop_ub = c10_e_b.size(0) - 1;
    for (c10_i6 = 0; c10_i6 <= c10_g_loop_ub; c10_i6++) {
      c10_e_b[c10_i6] = !c10_e_b[c10_i6];
    }

    c10_f_b.set_size(&c10_if_emlrtRTEI, c10_sp, c10_x.size(0));
    c10_i_loop_ub = c10_x.size(0) - 1;
    for (c10_i8 = 0; c10_i8 <= c10_i_loop_ub; c10_i8++) {
      c10_f_b[c10_i8] = muDoubleScalarIsNaN(c10_x[c10_i8]);
    }

    c10_k_loop_ub = c10_f_b.size(0) - 1;
    for (c10_i10 = 0; c10_i10 <= c10_k_loop_ub; c10_i10++) {
      c10_f_b[c10_i10] = !c10_f_b[c10_i10];
    }

    c10_m_loop_ub = c10_e_b.size(0) - 1;
    for (c10_i11 = 0; c10_i11 <= c10_m_loop_ub; c10_i11++) {
      c10_e_b[c10_i11] = (c10_e_b[c10_i11] && c10_f_b[c10_i11]);
    }

    c10_st.site = &c10_wc_emlrtRSI;
    if (c10_b_all(chartInstance, &c10_st, c10_e_b)) {
      c10_b3 = true;
    } else {
      c10_b3 = false;
    }
  }

  if (!c10_b3) {
    c10_d_y = NULL;
    sf_mex_assign(&c10_d_y, sf_mex_create("y", c10_cv4, 10, 0U, 1U, 0U, 2, 1, 45),
                  false);
    c10_e_y = NULL;
    sf_mex_assign(&c10_e_y, sf_mex_create("y", c10_cv4, 10, 0U, 1U, 0U, 2, 1, 45),
                  false);
    c10_f_y = NULL;
    sf_mex_assign(&c10_f_y, sf_mex_create("y", c10_b_cv1, 10, 0U, 1U, 0U, 2, 1,
      3), false);
    sf_mex_call(c10_sp, &c10_t_emlrtMCI, "error", 0U, 2U, 14, c10_d_y, 14,
                sf_mex_call(c10_sp, NULL, "getString", 1U, 1U, 14, sf_mex_call
      (c10_sp, NULL, "message", 1U, 2U, 14, c10_e_y, 14, c10_f_y)));
  }

  c10_b4 = (c10_Aeq.size(0) == 0);
  c10_b5 = (c10_Aeq.size(1) == 0);
  if ((!c10_b4) && (!c10_b5) && (c10_Aeq.size(1) != c10_nVar)) {
    c10_b6 = true;
  } else {
    c10_b6 = false;
  }

  if (c10_b6) {
    c10_g_y = NULL;
    sf_mex_assign(&c10_g_y, sf_mex_create("y", c10_b_cv2, 10, 0U, 1U, 0U, 2, 1,
      49), false);
    c10_h_y = NULL;
    sf_mex_assign(&c10_h_y, sf_mex_create("y", c10_b_cv2, 10, 0U, 1U, 0U, 2, 1,
      49), false);
    c10_i_y = NULL;
    sf_mex_assign(&c10_i_y, sf_mex_create("y", &c10_nVar, 6, 0U, 0U, 0U, 0),
                  false);
    sf_mex_call(c10_sp, &c10_t_emlrtMCI, "error", 0U, 2U, 14, c10_g_y, 14,
                sf_mex_call(c10_sp, NULL, "getString", 1U, 1U, 14, sf_mex_call
      (c10_sp, NULL, "message", 1U, 2U, 14, c10_h_y, 14, c10_i_y)));
  }

  c10_b7 = (c10_Aeq.size(0) == 0);
  c10_b8 = (c10_Aeq.size(1) == 0);
  if ((!c10_b7) && (!c10_b8) && (static_cast<real_T>(c10_Aeq.size(0)) !=
       static_cast<real_T>(c10_beq_size[0]))) {
    c10_b9 = true;
  } else {
    c10_b9 = false;
  }

  if (c10_b9) {
    c10_j_y = NULL;
    sf_mex_assign(&c10_j_y, sf_mex_create("y", c10_b_cv3, 10, 0U, 1U, 0U, 2, 1,
      45), false);
    c10_k_y = NULL;
    sf_mex_assign(&c10_k_y, sf_mex_create("y", c10_b_cv3, 10, 0U, 1U, 0U, 2, 1,
      45), false);
    sf_mex_call(c10_sp, &c10_t_emlrtMCI, "error", 0U, 2U, 14, c10_j_y, 14,
                sf_mex_call(c10_sp, NULL, "getString", 1U, 1U, 14, sf_mex_call
      (c10_sp, NULL, "message", 1U, 1U, 14, c10_k_y)));
  }

  c10_st.site = &c10_wc_emlrtRSI;
  c10_b_nVar = c10_nVar;
  if (c10_lb_size[0] == c10_b_nVar) {
    c10_b10 = true;
  } else {
    c10_b10 = false;
  }

  if (!c10_b10) {
    c10_m_y = NULL;
    sf_mex_assign(&c10_m_y, sf_mex_create("y", c10_b_cv4, 10, 0U, 1U, 0U, 2, 1,
      44), false);
    c10_o_y = NULL;
    sf_mex_assign(&c10_o_y, sf_mex_create("y", c10_b_cv4, 10, 0U, 1U, 0U, 2, 1,
      44), false);
    c10_p_y = NULL;
    sf_mex_assign(&c10_p_y, sf_mex_create("y", c10_b_cv5, 10, 0U, 1U, 0U, 2, 1,
      2), false);
    c10_q_y = NULL;
    sf_mex_assign(&c10_q_y, sf_mex_create("y", &c10_b_nVar, 6, 0U, 0U, 0U, 0),
                  false);
    sf_mex_call(&c10_st, &c10_u_emlrtMCI, "error", 0U, 2U, 14, c10_m_y, 14,
                sf_mex_call(&c10_st, NULL, "getString", 1U, 1U, 14, sf_mex_call(
      &c10_st, NULL, "message", 1U, 3U, 14, c10_o_y, 14, c10_p_y, 14, c10_q_y)));
  }

  c10_b_lb_size[0] = c10_lb_size[0];
  c10_o_loop_ub = c10_lb_size[0] - 1;
  for (c10_i12 = 0; c10_i12 <= c10_o_loop_ub; c10_i12++) {
    c10_b_lb_data[c10_i12] = (c10_lb_data[c10_i12] >= rtInf);
  }

  c10_b_st.site = &c10_xc_emlrtRSI;
  if (c10_any(chartInstance, &c10_b_st, c10_b_lb_data, c10_b_lb_size)) {
    c10_b11 = true;
  } else {
    c10_x.set_size(&c10_mf_emlrtRTEI, &c10_st, c10_lb_size[0]);
    c10_p_loop_ub = c10_lb_size[0] - 1;
    for (c10_i13 = 0; c10_i13 <= c10_p_loop_ub; c10_i13++) {
      c10_x[c10_i13] = c10_lb_data[c10_i13];
    }

    c10_e_b.set_size(&c10_if_emlrtRTEI, &c10_st, c10_x.size(0));
    c10_q_loop_ub = c10_x.size(0) - 1;
    for (c10_i14 = 0; c10_i14 <= c10_q_loop_ub; c10_i14++) {
      c10_e_b[c10_i14] = muDoubleScalarIsNaN(c10_x[c10_i14]);
    }

    c10_b_st.site = &c10_xc_emlrtRSI;
    c10_iv[0] = (*(int32_T (*)[1])c10_e_b.size())[0];
    if (c10_any(chartInstance, &c10_b_st, (boolean_T *)c10_e_b.data(), c10_iv))
    {
      c10_b11 = true;
    } else {
      c10_b11 = false;
    }
  }

  if (c10_b11) {
    c10_r_y = NULL;
    sf_mex_assign(&c10_r_y, sf_mex_create("y", c10_b_cv6, 10, 0U, 1U, 0U, 2, 1,
      47), false);
    c10_s_y = NULL;
    sf_mex_assign(&c10_s_y, sf_mex_create("y", c10_b_cv6, 10, 0U, 1U, 0U, 2, 1,
      47), false);
    sf_mex_call(&c10_st, &c10_u_emlrtMCI, "error", 0U, 2U, 14, c10_r_y, 14,
                sf_mex_call(&c10_st, NULL, "getString", 1U, 1U, 14, sf_mex_call(
      &c10_st, NULL, "message", 1U, 1U, 14, c10_s_y)));
  }

  if (c10_ub_size[0] == c10_b_nVar) {
    c10_b12 = true;
  } else {
    c10_b12 = false;
  }

  if (!c10_b12) {
    c10_t_y = NULL;
    sf_mex_assign(&c10_t_y, sf_mex_create("y", c10_b_cv4, 10, 0U, 1U, 0U, 2, 1,
      44), false);
    c10_u_y = NULL;
    sf_mex_assign(&c10_u_y, sf_mex_create("y", c10_b_cv4, 10, 0U, 1U, 0U, 2, 1,
      44), false);
    c10_v_y = NULL;
    sf_mex_assign(&c10_v_y, sf_mex_create("y", c10_cv7, 10, 0U, 1U, 0U, 2, 1, 2),
                  false);
    c10_w_y = NULL;
    sf_mex_assign(&c10_w_y, sf_mex_create("y", &c10_b_nVar, 6, 0U, 0U, 0U, 0),
                  false);
    sf_mex_call(&c10_st, &c10_u_emlrtMCI, "error", 0U, 2U, 14, c10_t_y, 14,
                sf_mex_call(&c10_st, NULL, "getString", 1U, 1U, 14, sf_mex_call(
      &c10_st, NULL, "message", 1U, 3U, 14, c10_u_y, 14, c10_v_y, 14, c10_w_y)));
  }

  c10_b_ub_size[0] = c10_ub_size[0];
  c10_r_loop_ub = c10_ub_size[0] - 1;
  for (c10_i15 = 0; c10_i15 <= c10_r_loop_ub; c10_i15++) {
    c10_b_ub_data[c10_i15] = (c10_ub_data[c10_i15] <= rtMinusInf);
  }

  c10_b_st.site = &c10_xc_emlrtRSI;
  if (c10_any(chartInstance, &c10_b_st, c10_b_ub_data, c10_b_ub_size)) {
    c10_b13 = true;
  } else {
    c10_x.set_size(&c10_mf_emlrtRTEI, &c10_st, c10_ub_size[0]);
    c10_s_loop_ub = c10_ub_size[0] - 1;
    for (c10_i16 = 0; c10_i16 <= c10_s_loop_ub; c10_i16++) {
      c10_x[c10_i16] = c10_ub_data[c10_i16];
    }

    c10_e_b.set_size(&c10_if_emlrtRTEI, &c10_st, c10_x.size(0));
    c10_t_loop_ub = c10_x.size(0) - 1;
    for (c10_i17 = 0; c10_i17 <= c10_t_loop_ub; c10_i17++) {
      c10_e_b[c10_i17] = muDoubleScalarIsNaN(c10_x[c10_i17]);
    }

    c10_b_st.site = &c10_xc_emlrtRSI;
    c10_iv1[0] = (*(int32_T (*)[1])c10_e_b.size())[0];
    if (c10_any(chartInstance, &c10_b_st, (boolean_T *)c10_e_b.data(), c10_iv1))
    {
      c10_b13 = true;
    } else {
      c10_b13 = false;
    }
  }

  if (c10_b13) {
    c10_x_y = NULL;
    sf_mex_assign(&c10_x_y, sf_mex_create("y", c10_cv8, 10, 0U, 1U, 0U, 2, 1, 47),
                  false);
    c10_y_y = NULL;
    sf_mex_assign(&c10_y_y, sf_mex_create("y", c10_cv8, 10, 0U, 1U, 0U, 2, 1, 47),
                  false);
    sf_mex_call(&c10_st, &c10_u_emlrtMCI, "error", 0U, 2U, 14, c10_x_y, 14,
                sf_mex_call(&c10_st, NULL, "getString", 1U, 1U, 14, sf_mex_call(
      &c10_st, NULL, "message", 1U, 1U, 14, c10_y_y)));
  }

  c10_b_exitflag = rtInf;
  c10_b_st.site = &c10_xc_emlrtRSI;
  c10_g_b = c10_b_nVar;
  c10_h_b = c10_g_b;
  if (c10_h_b < 1) {
    c10_overflow = false;
  } else {
    c10_overflow = (c10_h_b > 2147483646);
  }

  if (c10_overflow) {
    c10_c_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
  }

  c10_k = 1;
  c10_exitg1 = false;
  while ((!c10_exitg1) && (c10_k - 1 <= c10_b_nVar - 1)) {
    c10_b_k = c10_k;
    if ((c10_b_k < 1) || (c10_b_k > c10_lb_size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_b_k, 1, c10_lb_size[0], &c10_oo_emlrtBCI,
        &c10_st);
    }

    if ((c10_b_k < 1) || (c10_b_k > c10_ub_size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_b_k, 1, c10_ub_size[0], &c10_oo_emlrtBCI,
        &c10_st);
    }

    if (c10_lb_data[c10_b_k - 1] > c10_ub_data[c10_b_k - 1]) {
      c10_b_exitflag = -2.0;
      c10_exitg1 = true;
    } else {
      c10_k++;
    }
  }

  return c10_b_exitflag;
}

static boolean_T c10_any(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, boolean_T c10_x_data[], int32_T c10_x_size[1])
{
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_d_st;
  emlrtStack c10_e_st;
  emlrtStack c10_f_st;
  emlrtStack c10_g_st;
  emlrtStack c10_st;
  real_T c10_b_a;
  real_T c10_vlen;
  int32_T c10_b;
  int32_T c10_b_c;
  int32_T c10_c_a;
  int32_T c10_d_a;
  int32_T c10_e_b;
  int32_T c10_f_b;
  int32_T c10_i2;
  int32_T c10_ix;
  int32_T c10_vspread;
  boolean_T c10_exitg1;
  boolean_T c10_g_b;
  boolean_T c10_overflow;
  boolean_T c10_y;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_st.site = &c10_yc_emlrtRSI;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_d_st.prev = &c10_c_st;
  c10_d_st.tls = c10_c_st.tls;
  c10_e_st.prev = &c10_d_st;
  c10_e_st.tls = c10_d_st.tls;
  c10_f_st.prev = &c10_e_st;
  c10_f_st.tls = c10_e_st.tls;
  c10_g_st.prev = &c10_f_st;
  c10_g_st.tls = c10_f_st.tls;
  c10_b_st.site = &c10_sc_emlrtRSI;
  c10_c_st.site = &c10_tc_emlrtRSI;
  c10_d_st.site = &c10_uc_emlrtRSI;
  c10_e_st.site = &c10_vc_emlrtRSI;
  c10_y = false;
  c10_vlen = static_cast<real_T>(c10_x_size[0]);
  c10_b_a = c10_vlen;
  c10_b_c = static_cast<int32_T>(c10_b_a);
  c10_c_a = c10_b_c - 1;
  c10_vspread = c10_c_a;
  c10_b = c10_vspread;
  c10_i2 = c10_b;
  c10_d_a = c10_i2 + 1;
  c10_i2 = c10_d_a;
  c10_f_st.site = &c10_u_emlrtRSI;
  c10_e_b = c10_i2;
  c10_f_b = c10_e_b;
  if (c10_f_b < 1) {
    c10_overflow = false;
  } else {
    c10_overflow = (c10_f_b > 2147483646);
  }

  if (c10_overflow) {
    c10_g_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_g_st);
  }

  c10_ix = 0;
  c10_exitg1 = false;
  while ((!c10_exitg1) && (c10_ix + 1 <= c10_i2)) {
    if (!c10_x_data[c10_ix]) {
      c10_g_b = true;
    } else {
      c10_g_b = false;
    }

    if (!c10_g_b) {
      c10_y = true;
      c10_exitg1 = true;
    } else {
      c10_ix++;
    }
  }

  return c10_y;
}

static void c10_factoryConstruct(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, int32_T c10_mEqMax, int32_T c10_nVar, int32_T
  c10_nVarMax, int32_T c10_mConstrMax, c10_s_flSfA4tA26WyP6kjP59eL *c10_b_obj)
{
  coder::array<real_T, 1U> c10_b;
  coder::array<int32_T, 1U> c10_e_b;
  int32_T c10_iv[1];
  int32_T c10_ab_loop_ub;
  int32_T c10_b_loop_ub;
  int32_T c10_bb_loop_ub;
  int32_T c10_c_loop_ub;
  int32_T c10_cb_loop_ub;
  int32_T c10_d_loop_ub;
  int32_T c10_db_loop_ub;
  int32_T c10_e_loop_ub;
  int32_T c10_f_loop_ub;
  int32_T c10_g_loop_ub;
  int32_T c10_h_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i19;
  int32_T c10_i2;
  int32_T c10_i20;
  int32_T c10_i21;
  int32_T c10_i22;
  int32_T c10_i23;
  int32_T c10_i24;
  int32_T c10_i25;
  int32_T c10_i26;
  int32_T c10_i27;
  int32_T c10_i28;
  int32_T c10_i29;
  int32_T c10_i3;
  int32_T c10_i30;
  int32_T c10_i31;
  int32_T c10_i32;
  int32_T c10_i33;
  int32_T c10_i34;
  int32_T c10_i35;
  int32_T c10_i36;
  int32_T c10_i37;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_i_loop_ub;
  int32_T c10_j_loop_ub;
  int32_T c10_k_loop_ub;
  int32_T c10_loop_ub;
  int32_T c10_m_loop_ub;
  int32_T c10_o_loop_ub;
  int32_T c10_p_loop_ub;
  int32_T c10_q_loop_ub;
  int32_T c10_r_loop_ub;
  int32_T c10_s_loop_ub;
  int32_T c10_t_loop_ub;
  int32_T c10_u_loop_ub;
  int32_T c10_v_loop_ub;
  int32_T c10_w_loop_ub;
  int32_T c10_x_loop_ub;
  int32_T c10_y_loop_ub;
  c10_b_obj->mConstr = 0;
  c10_b_obj->mConstrOrig = 0;
  c10_b_obj->mConstrMax = c10_mConstrMax;
  c10_b_obj->nVar = c10_nVar;
  c10_b_obj->nVarOrig = c10_nVar;
  c10_b_obj->nVarMax = c10_nVarMax;
  c10_b_obj->ldA = c10_nVarMax;
  c10_b.set_size(&c10_of_emlrtRTEI, c10_sp, 0);
  c10_loop_ub = c10_b.size(0) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_b[c10_i] = 1.7976931348623157E+308 * c10_b[c10_i];
  }

  c10_iv[0] = c10_b.size(0);
  c10_b_obj->Aineq.size[0] = c10_iv[0];
  c10_b.set_size(&c10_of_emlrtRTEI, c10_sp, c10_mEqMax * c10_nVarMax);
  c10_b_loop_ub = c10_mEqMax * c10_nVarMax - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_b[c10_i1] = 1.0;
  }

  c10_c_loop_ub = c10_b.size(0) - 1;
  for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
    c10_b[c10_i2] = 1.7976931348623157E+308 * c10_b[c10_i2];
  }

  c10_iv[0] = c10_b.size(0);
  c10_b_obj->Aeq.set_size(&c10_of_emlrtRTEI, c10_sp, c10_iv[0]);
  c10_b.set_size(&c10_of_emlrtRTEI, c10_sp, c10_mEqMax);
  c10_d_loop_ub = c10_mEqMax - 1;
  for (c10_i3 = 0; c10_i3 <= c10_d_loop_ub; c10_i3++) {
    c10_b[c10_i3] = 1.0;
  }

  c10_e_loop_ub = c10_b.size(0) - 1;
  for (c10_i4 = 0; c10_i4 <= c10_e_loop_ub; c10_i4++) {
    c10_b[c10_i4] = 1.7976931348623157E+308 * c10_b[c10_i4];
  }

  c10_iv[0] = c10_b.size(0);
  c10_b_obj->beq.size[0] = c10_iv[0];
  c10_b.set_size(&c10_of_emlrtRTEI, c10_sp, c10_nVarMax);
  c10_f_loop_ub = c10_nVarMax - 1;
  for (c10_i5 = 0; c10_i5 <= c10_f_loop_ub; c10_i5++) {
    c10_b[c10_i5] = 1.0;
  }

  c10_g_loop_ub = c10_b.size(0) - 1;
  for (c10_i6 = 0; c10_i6 <= c10_g_loop_ub; c10_i6++) {
    c10_b[c10_i6] = 1.7976931348623157E+308 * c10_b[c10_i6];
  }

  c10_iv[0] = c10_b.size(0);
  c10_b_obj->lb.set_size(&c10_of_emlrtRTEI, c10_sp, c10_iv[0]);
  c10_b.set_size(&c10_of_emlrtRTEI, c10_sp, c10_nVarMax);
  c10_h_loop_ub = c10_nVarMax - 1;
  for (c10_i7 = 0; c10_i7 <= c10_h_loop_ub; c10_i7++) {
    c10_b[c10_i7] = 1.0;
  }

  c10_i_loop_ub = c10_b.size(0) - 1;
  for (c10_i8 = 0; c10_i8 <= c10_i_loop_ub; c10_i8++) {
    c10_b[c10_i8] = 1.7976931348623157E+308 * c10_b[c10_i8];
  }

  c10_iv[0] = c10_b.size(0);
  c10_b_obj->ub.set_size(&c10_of_emlrtRTEI, c10_sp, c10_iv[0]);
  c10_e_b.set_size(&c10_of_emlrtRTEI, c10_sp, c10_nVarMax);
  c10_j_loop_ub = c10_nVarMax - 1;
  for (c10_i9 = 0; c10_i9 <= c10_j_loop_ub; c10_i9++) {
    c10_e_b[c10_i9] = 1;
  }

  c10_k_loop_ub = c10_e_b.size(0) - 1;
  for (c10_i10 = 0; c10_i10 <= c10_k_loop_ub; c10_i10++) {
    c10_e_b[c10_i10] = MAX_int32_T * c10_e_b[c10_i10];
  }

  c10_iv[0] = c10_e_b.size(0);
  c10_b_obj->indexLB.set_size(&c10_of_emlrtRTEI, c10_sp, c10_iv[0]);
  c10_e_b.set_size(&c10_of_emlrtRTEI, c10_sp, c10_nVarMax);
  c10_m_loop_ub = c10_nVarMax - 1;
  for (c10_i11 = 0; c10_i11 <= c10_m_loop_ub; c10_i11++) {
    c10_e_b[c10_i11] = 1;
  }

  c10_o_loop_ub = c10_e_b.size(0) - 1;
  for (c10_i12 = 0; c10_i12 <= c10_o_loop_ub; c10_i12++) {
    c10_e_b[c10_i12] = MAX_int32_T * c10_e_b[c10_i12];
  }

  c10_iv[0] = c10_e_b.size(0);
  c10_b_obj->indexUB.set_size(&c10_of_emlrtRTEI, c10_sp, c10_iv[0]);
  c10_e_b.set_size(&c10_of_emlrtRTEI, c10_sp, c10_nVarMax);
  c10_p_loop_ub = c10_nVarMax - 1;
  for (c10_i13 = 0; c10_i13 <= c10_p_loop_ub; c10_i13++) {
    c10_e_b[c10_i13] = 1;
  }

  c10_q_loop_ub = c10_e_b.size(0) - 1;
  for (c10_i14 = 0; c10_i14 <= c10_q_loop_ub; c10_i14++) {
    c10_e_b[c10_i14] = MAX_int32_T * c10_e_b[c10_i14];
  }

  c10_iv[0] = c10_e_b.size(0);
  c10_b_obj->indexFixed.set_size(&c10_of_emlrtRTEI, c10_sp, c10_iv[0]);
  c10_b_obj->mEqRemoved = 0;
  c10_e_b.set_size(&c10_of_emlrtRTEI, c10_sp, c10_mEqMax);
  c10_r_loop_ub = c10_mEqMax - 1;
  for (c10_i15 = 0; c10_i15 <= c10_r_loop_ub; c10_i15++) {
    c10_e_b[c10_i15] = 1;
  }

  c10_s_loop_ub = c10_e_b.size(0) - 1;
  for (c10_i16 = 0; c10_i16 <= c10_s_loop_ub; c10_i16++) {
    c10_e_b[c10_i16] = MAX_int32_T * c10_e_b[c10_i16];
  }

  c10_iv[0] = c10_e_b.size(0);
  c10_b_obj->indexEqRemoved.size[0] = c10_iv[0];
  c10_b.set_size(&c10_of_emlrtRTEI, c10_sp, c10_nVarMax * c10_mConstrMax);
  c10_t_loop_ub = c10_nVarMax * c10_mConstrMax - 1;
  for (c10_i17 = 0; c10_i17 <= c10_t_loop_ub; c10_i17++) {
    c10_b[c10_i17] = 1.0;
  }

  c10_u_loop_ub = c10_b.size(0) - 1;
  for (c10_i18 = 0; c10_i18 <= c10_u_loop_ub; c10_i18++) {
    c10_b[c10_i18] = 1.7976931348623157E+308 * c10_b[c10_i18];
  }

  c10_iv[0] = c10_b.size(0);
  c10_b_obj->ATwset.set_size(&c10_of_emlrtRTEI, c10_sp, c10_iv[0]);
  c10_b.set_size(&c10_of_emlrtRTEI, c10_sp, c10_mConstrMax);
  c10_v_loop_ub = c10_mConstrMax - 1;
  for (c10_i19 = 0; c10_i19 <= c10_v_loop_ub; c10_i19++) {
    c10_b[c10_i19] = 1.0;
  }

  c10_w_loop_ub = c10_b.size(0) - 1;
  for (c10_i20 = 0; c10_i20 <= c10_w_loop_ub; c10_i20++) {
    c10_b[c10_i20] = 1.7976931348623157E+308 * c10_b[c10_i20];
  }

  c10_iv[0] = c10_b.size(0);
  c10_b_obj->bwset.size[0] = c10_iv[0];
  c10_b_obj->nActiveConstr = 0;
  c10_b.set_size(&c10_of_emlrtRTEI, c10_sp, c10_mConstrMax);
  c10_x_loop_ub = c10_mConstrMax - 1;
  for (c10_i21 = 0; c10_i21 <= c10_x_loop_ub; c10_i21++) {
    c10_b[c10_i21] = 1.0;
  }

  c10_y_loop_ub = c10_b.size(0) - 1;
  for (c10_i22 = 0; c10_i22 <= c10_y_loop_ub; c10_i22++) {
    c10_b[c10_i22] = 1.7976931348623157E+308 * c10_b[c10_i22];
  }

  c10_iv[0] = c10_b.size(0);
  c10_b_obj->maxConstrWorkspace.size[0] = c10_iv[0];
  for (c10_i23 = 0; c10_i23 < 5; c10_i23++) {
    c10_b_obj->sizes[c10_i23] = 0;
  }

  for (c10_i24 = 0; c10_i24 < 5; c10_i24++) {
    c10_b_obj->sizesNormal[c10_i24] = 0;
  }

  for (c10_i25 = 0; c10_i25 < 5; c10_i25++) {
    c10_b_obj->sizesPhaseOne[c10_i25] = 0;
  }

  for (c10_i26 = 0; c10_i26 < 5; c10_i26++) {
    c10_b_obj->sizesRegularized[c10_i26] = 0;
  }

  for (c10_i27 = 0; c10_i27 < 5; c10_i27++) {
    c10_b_obj->sizesRegPhaseOne[c10_i27] = 0;
  }

  for (c10_i28 = 0; c10_i28 < 6; c10_i28++) {
    c10_b_obj->isActiveIdx[c10_i28] = 0;
  }

  for (c10_i29 = 0; c10_i29 < 6; c10_i29++) {
    c10_b_obj->isActiveIdxNormal[c10_i29] = 0;
  }

  for (c10_i30 = 0; c10_i30 < 6; c10_i30++) {
    c10_b_obj->isActiveIdxPhaseOne[c10_i30] = 0;
  }

  for (c10_i31 = 0; c10_i31 < 6; c10_i31++) {
    c10_b_obj->isActiveIdxRegularized[c10_i31] = 0;
  }

  for (c10_i32 = 0; c10_i32 < 6; c10_i32++) {
    c10_b_obj->isActiveIdxRegPhaseOne[c10_i32] = 0;
  }

  c10_b_obj->isActiveConstr.size[0] = c10_mConstrMax;
  c10_e_b.set_size(&c10_of_emlrtRTEI, c10_sp, c10_mConstrMax);
  c10_ab_loop_ub = c10_mConstrMax - 1;
  for (c10_i33 = 0; c10_i33 <= c10_ab_loop_ub; c10_i33++) {
    c10_e_b[c10_i33] = 1;
  }

  c10_bb_loop_ub = c10_e_b.size(0) - 1;
  for (c10_i34 = 0; c10_i34 <= c10_bb_loop_ub; c10_i34++) {
    c10_e_b[c10_i34] = MAX_int32_T * c10_e_b[c10_i34];
  }

  c10_iv[0] = c10_e_b.size(0);
  c10_b_obj->Wid.size[0] = c10_iv[0];
  c10_e_b.set_size(&c10_of_emlrtRTEI, c10_sp, c10_mConstrMax);
  c10_cb_loop_ub = c10_mConstrMax - 1;
  for (c10_i35 = 0; c10_i35 <= c10_cb_loop_ub; c10_i35++) {
    c10_e_b[c10_i35] = 1;
  }

  c10_db_loop_ub = c10_e_b.size(0) - 1;
  for (c10_i36 = 0; c10_i36 <= c10_db_loop_ub; c10_i36++) {
    c10_e_b[c10_i36] = MAX_int32_T * c10_e_b[c10_i36];
  }

  c10_iv[0] = c10_e_b.size(0);
  c10_b_obj->Wlocalidx.size[0] = c10_iv[0];
  for (c10_i37 = 0; c10_i37 < 5; c10_i37++) {
    c10_b_obj->nWConstr[c10_i37] = 0;
  }

  c10_b_obj->probType = 3;
  c10_b_obj->SLACK0 = 1.0E-5;
}

static void c10_compressBounds(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, int32_T c10_nVar, coder::array<int32_T, 1U> &c10_indexLB,
  coder::array<int32_T, 1U> &c10_indexUB, coder::array<int32_T, 1U>
  &c10_indexFixed, real_T c10_lb_data[], int32_T c10_lb_size[1], real_T
  c10_ub_data[], int32_T c10_ub_size[1], coder::array<int32_T, 1U>
  &c10_b_indexLB, int32_T *c10_mLB, coder::array<int32_T, 1U> &c10_b_indexUB,
  int32_T *c10_mUB, coder::array<int32_T, 1U> &c10_b_indexFixed, int32_T
  *c10_mFixed)
{
  real_T c10_b_lb_data[142];
  real_T c10_b_ub_data[142];
  int32_T c10_b_lb_size[1];
  int32_T c10_b_ub_size[1];
  int32_T c10_b_loop_ub;
  int32_T c10_b_mFixed;
  int32_T c10_b_mLB;
  int32_T c10_b_mUB;
  int32_T c10_c_loop_ub;
  int32_T c10_d_loop_ub;
  int32_T c10_e_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_loop_ub;
  c10_b_indexLB.set_size(&c10_pf_emlrtRTEI, c10_sp, c10_indexLB.size(0));
  c10_loop_ub = c10_indexLB.size(0) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_b_indexLB[c10_i] = c10_indexLB[c10_i];
  }

  c10_b_indexUB.set_size(&c10_pf_emlrtRTEI, c10_sp, c10_indexUB.size(0));
  c10_b_loop_ub = c10_indexUB.size(0) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_b_indexUB[c10_i1] = c10_indexUB[c10_i1];
  }

  c10_b_indexFixed.set_size(&c10_pf_emlrtRTEI, c10_sp, c10_indexFixed.size(0));
  c10_c_loop_ub = c10_indexFixed.size(0) - 1;
  for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
    c10_b_indexFixed[c10_i2] = c10_indexFixed[c10_i2];
  }

  c10_b_lb_size[0] = c10_lb_size[0];
  c10_d_loop_ub = c10_lb_size[0] - 1;
  for (c10_i3 = 0; c10_i3 <= c10_d_loop_ub; c10_i3++) {
    c10_b_lb_data[c10_i3] = c10_lb_data[c10_i3];
  }

  c10_b_ub_size[0] = c10_ub_size[0];
  c10_e_loop_ub = c10_ub_size[0] - 1;
  for (c10_i4 = 0; c10_i4 <= c10_e_loop_ub; c10_i4++) {
    c10_b_ub_data[c10_i4] = c10_ub_data[c10_i4];
  }

  c10_b_compressBounds(chartInstance, c10_sp, c10_nVar, c10_b_indexLB,
                       c10_b_indexUB, c10_b_indexFixed, c10_b_lb_data,
                       c10_b_lb_size, c10_b_ub_data, c10_b_ub_size, &c10_b_mLB,
                       &c10_b_mUB, &c10_b_mFixed);
  *c10_mLB = c10_b_mLB;
  *c10_mUB = c10_b_mUB;
  *c10_mFixed = c10_b_mFixed;
}

static void c10_loadProblem(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL *c10_b_obj, int32_T c10_mEq,
  int32_T c10_mLinEq, coder::array<real_T, 2U> &c10_Aeq, real_T c10_beq_data[],
  int32_T c10_beq_size[1], int32_T c10_mLB, real_T c10_lb_data[], int32_T
  c10_lb_size[1], int32_T c10_mUB, real_T c10_ub_data[], int32_T c10_ub_size[1],
  int32_T c10_mFixed, int32_T c10_mConstrMax, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_c_obj)
{
  coder::array<real_T, 2U> c10_b_Aeq;
  real_T c10_b_beq_data[1204];
  real_T c10_b_lb_data[142];
  real_T c10_b_ub_data[142];
  int32_T c10_b_beq_size[1];
  int32_T c10_b_lb_size[1];
  int32_T c10_b_ub_size[1];
  int32_T c10_b_loop_ub;
  int32_T c10_c_loop_ub;
  int32_T c10_d_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_loop_ub;
  *c10_c_obj = *c10_b_obj;
  c10_b_Aeq.set_size(&c10_qf_emlrtRTEI, c10_sp, c10_Aeq.size(0), c10_Aeq.size(1));
  c10_loop_ub = c10_Aeq.size(0) * c10_Aeq.size(1) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_b_Aeq[c10_i] = c10_Aeq[c10_i];
  }

  c10_b_beq_size[0] = c10_beq_size[0];
  c10_b_loop_ub = c10_beq_size[0] - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_b_beq_data[c10_i1] = c10_beq_data[c10_i1];
  }

  c10_b_lb_size[0] = c10_lb_size[0];
  c10_c_loop_ub = c10_lb_size[0] - 1;
  for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
    c10_b_lb_data[c10_i2] = c10_lb_data[c10_i2];
  }

  c10_b_ub_size[0] = c10_ub_size[0];
  c10_d_loop_ub = c10_ub_size[0] - 1;
  for (c10_i3 = 0; c10_i3 <= c10_d_loop_ub; c10_i3++) {
    c10_b_ub_data[c10_i3] = c10_ub_data[c10_i3];
  }

  c10_b_loadProblem(chartInstance, c10_sp, c10_c_obj, c10_mEq, c10_mLinEq,
                    c10_b_Aeq, c10_b_beq_data, c10_b_beq_size, c10_mLB,
                    c10_b_lb_data, c10_b_lb_size, c10_mUB, c10_b_ub_data,
                    c10_b_ub_size, c10_mFixed, c10_mConstrMax);
}

static void c10_initActiveSet(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL *c10_b_obj,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_c_obj)
{
  *c10_c_obj = *c10_b_obj;
  c10_b_initActiveSet(chartInstance, c10_sp, c10_c_obj);
}

static real_T c10_computePhaseOneRelativeTolerances(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_i_workingset)
{
  emlrtStack c10_b_st;
  emlrtStack c10_st;
  real_T c10_b_a;
  real_T c10_b_x;
  real_T c10_b_y;
  real_T c10_c_x;
  real_T c10_c_y;
  real_T c10_colSum;
  real_T c10_d_x;
  real_T c10_d_y;
  real_T c10_e_x;
  real_T c10_e_y;
  real_T c10_f_x;
  real_T c10_f_y;
  real_T c10_g_x;
  real_T c10_h_b;
  real_T c10_j_x;
  real_T c10_tol;
  real_T c10_varargin_1;
  real_T c10_varargin_2;
  real_T c10_x;
  real_T c10_y;
  int32_T c10_b;
  int32_T c10_b_idx_col;
  int32_T c10_b_idx_row;
  int32_T c10_colPos;
  int32_T c10_e_b;
  int32_T c10_f_b;
  int32_T c10_g_b;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_idxPosAeq;
  int32_T c10_idx_col;
  int32_T c10_idx_row;
  int32_T c10_nVarOrig;
  boolean_T c10_b_overflow;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_nVarOrig = c10_i_workingset->nVarOrig;
  c10_tol = 1.0;
  c10_i = c10_i_workingset->sizes[1];
  c10_st.site = &c10_gd_emlrtRSI;
  c10_b = c10_i;
  c10_e_b = c10_b;
  if (c10_e_b < 1) {
    c10_overflow = false;
  } else {
    c10_overflow = (c10_e_b > 2147483646);
  }

  if (c10_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  c10_i1 = static_cast<uint16_T>(c10_i) - 1;
  for (c10_idx_col = 0; c10_idx_col <= c10_i1; c10_idx_col++) {
    c10_b_idx_col = c10_idx_col;
    c10_colSum = 0.0;
    c10_colPos = c10_i_workingset->ldA * c10_b_idx_col;
    c10_st.site = &c10_gd_emlrtRSI;
    c10_f_b = c10_nVarOrig;
    c10_g_b = c10_f_b;
    if (c10_g_b < 1) {
      c10_b_overflow = false;
    } else {
      c10_b_overflow = (c10_g_b > 2147483646);
    }

    if (c10_b_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_idx_row = 0; c10_idx_row < c10_nVarOrig; c10_idx_row++) {
      c10_b_idx_row = c10_idx_row;
      c10_idxPosAeq = (c10_b_idx_row + c10_colPos) + 1;
      c10_i2 = c10_i_workingset->Aeq.size(0);
      if ((c10_idxPosAeq < 1) || (c10_idxPosAeq > c10_i2)) {
        emlrtDynamicBoundsCheckR2012b(c10_idxPosAeq, 1, c10_i2, &c10_po_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_c_x = c10_i_workingset->Aeq[c10_idxPosAeq - 1];
      c10_e_x = c10_c_x;
      c10_f_x = c10_e_x;
      c10_d_y = muDoubleScalarAbs(c10_f_x);
      c10_colSum += c10_d_y;
    }

    c10_varargin_1 = c10_tol;
    c10_varargin_2 = c10_colSum;
    c10_x = c10_varargin_1;
    c10_y = c10_varargin_2;
    c10_b_x = c10_x;
    c10_b_y = c10_y;
    c10_d_x = c10_b_x;
    c10_c_y = c10_b_y;
    c10_b_a = c10_d_x;
    c10_h_b = c10_c_y;
    c10_g_x = c10_b_a;
    c10_e_y = c10_h_b;
    c10_j_x = c10_g_x;
    c10_f_y = c10_e_y;
    c10_tol = muDoubleScalarMax(c10_j_x, c10_f_y);
  }

  c10_st.site = &c10_gd_emlrtRSI;
  return c10_tol;
}

static real_T c10_updateRelativeTolerancesForPhaseTwo(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, real_T c10_tol, coder::array<real_T,
  2U> &c10_c_H, coder::array<real_T, 1U> &c10_f)
{
  coder::array<real_T, 2U> c10_d_H;
  coder::array<real_T, 1U> c10_b_f;
  real_T c10_b_tol;
  int32_T c10_b_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_loop_ub;
  c10_b_tol = c10_tol;
  c10_d_H.set_size(&c10_rf_emlrtRTEI, c10_sp, c10_c_H.size(0), c10_c_H.size(1));
  c10_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_d_H[c10_i] = c10_c_H[c10_i];
  }

  c10_b_f.set_size(&c10_rf_emlrtRTEI, c10_sp, c10_f.size(0));
  c10_b_loop_ub = c10_f.size(0) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_b_f[c10_i1] = c10_f[c10_i1];
  }

  c10_b_updateRelativeTolerancesForPhaseTwo(chartInstance, c10_sp, &c10_b_tol,
    c10_d_H, c10_b_f);
  return c10_b_tol;
}

static void c10_validateattributes(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_b_a)
{
  static char_T c10_b_cv4[48] = { 'C', 'o', 'd', 'e', 'r', ':', 't', 'o', 'o',
    'l', 'b', 'o', 'x', ':', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'e', 'a', 't',
    't', 'r', 'i', 'b', 'u', 't', 'e', 's', 'e', 'x', 'p', 'e', 'c', 't', 'e',
    'd', 'N', 'o', 'n', 'e', 'm', 'p', 't', 'y' };

  static char_T c10_b_cv1[46] = { 'C', 'o', 'd', 'e', 'r', ':', 't', 'o', 'o',
    'l', 'b', 'o', 'x', ':', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'e', 'a', 't',
    't', 'r', 'i', 'b', 'u', 't', 'e', 's', 'e', 'x', 'p', 'e', 'c', 't', 'e',
    'd', 'S', 'q', 'u', 'a', 'r', 'e' };

  static char_T c10_b_cv3[23] = { 'M', 'A', 'T', 'L', 'A', 'B', ':', 'e', 'x',
    'p', 'e', 'c', 't', 'e', 'd', 'N', 'o', 'n', 'e', 'm', 'p', 't', 'y' };

  static char_T c10_b_cv[21] = { 'M', 'A', 'T', 'L', 'A', 'B', ':', 'e', 'x',
    'p', 'e', 'c', 't', 'e', 'd', 'S', 'q', 'u', 'a', 'r', 'e' };

  static char_T c10_b_cv2[5] = { 'i', 'n', 'p', 'u', 't' };

  static char_T c10_b_cv5[5] = { 'i', 'n', 'p', 'u', 't' };

  emlrtStack c10_st;
  const mxArray *c10_b_y = NULL;
  const mxArray *c10_c_y = NULL;
  const mxArray *c10_d_y = NULL;
  const mxArray *c10_e_y = NULL;
  const mxArray *c10_f_y = NULL;
  const mxArray *c10_y = NULL;
  boolean_T c10_b;
  boolean_T c10_b1;
  boolean_T c10_b2;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_st.site = &c10_id_emlrtRSI;
  if (static_cast<real_T>(c10_b_a.size(0)) == static_cast<real_T>(c10_b_a.size(1)))
  {
    c10_b = true;
  } else {
    c10_b = false;
  }

  if (!c10_b) {
    c10_y = NULL;
    sf_mex_assign(&c10_y, sf_mex_create("y", c10_b_cv, 10, 0U, 1U, 0U, 2, 1, 21),
                  false);
    c10_b_y = NULL;
    sf_mex_assign(&c10_b_y, sf_mex_create("y", c10_b_cv1, 10, 0U, 1U, 0U, 2, 1,
      46), false);
    c10_c_y = NULL;
    sf_mex_assign(&c10_c_y, sf_mex_create("y", c10_b_cv2, 10, 0U, 1U, 0U, 2, 1,
      5), false);
    sf_mex_call(&c10_st, &c10_v_emlrtMCI, "error", 0U, 2U, 14, c10_y, 14,
                sf_mex_call(&c10_st, NULL, "getString", 1U, 1U, 14, sf_mex_call(
      &c10_st, NULL, "message", 1U, 2U, 14, c10_b_y, 14, c10_c_y)));
  }

  c10_st.site = &c10_id_emlrtRSI;
  c10_b1 = (c10_b_a.size(0) == 0);
  c10_b2 = (c10_b_a.size(1) == 0);
  if (!((!c10_b1) && (!c10_b2))) {
    c10_d_y = NULL;
    sf_mex_assign(&c10_d_y, sf_mex_create("y", c10_b_cv3, 10, 0U, 1U, 0U, 2, 1,
      23), false);
    c10_e_y = NULL;
    sf_mex_assign(&c10_e_y, sf_mex_create("y", c10_b_cv4, 10, 0U, 1U, 0U, 2, 1,
      48), false);
    c10_f_y = NULL;
    sf_mex_assign(&c10_f_y, sf_mex_create("y", c10_b_cv5, 10, 0U, 1U, 0U, 2, 1,
      5), false);
    sf_mex_call(&c10_st, &c10_w_emlrtMCI, "error", 0U, 2U, 14, c10_d_y, 14,
                sf_mex_call(&c10_st, NULL, "getString", 1U, 1U, 14, sf_mex_call(
      &c10_st, NULL, "message", 1U, 2U, 14, c10_e_y, 14, c10_f_y)));
  }
}

static void c10_driver(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_c_H, coder::array<real_T, 1U>
  &c10_f, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_memspace, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_i_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager,
  c10_s_lryvQQZbN23ozlLWy4I3pD *c10_cholmanager, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_objective, c10_scZhlMkNxPxOgM0FLkVrfPH *c10_b_options,
  c10_sL9bDKomAYkxZSVrG9w6En c10_runTimeOptions, c10_s_pF7WiHvRtoO0ktfmCER3HD
  *c10_b_solution, c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_b_memspace,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_j_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E
  *c10_c_qrmanager, c10_s_lryvQQZbN23ozlLWy4I3pD *c10_b_cholmanager,
  c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_objective)
{
  coder::array<real_T, 2U> c10_d_H;
  coder::array<real_T, 1U> c10_b_f;
  c10_scZhlMkNxPxOgM0FLkVrfPH c10_c_options;
  int32_T c10_b_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_loop_ub;
  *c10_b_solution = *c10_solution;
  *c10_b_memspace = *c10_memspace;
  *c10_j_workingset = *c10_i_workingset;
  *c10_c_qrmanager = *c10_b_qrmanager;
  *c10_b_cholmanager = *c10_cholmanager;
  *c10_b_objective = *c10_objective;
  c10_d_H.set_size(&c10_sf_emlrtRTEI, c10_sp, c10_c_H.size(0), c10_c_H.size(1));
  c10_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_d_H[c10_i] = c10_c_H[c10_i];
  }

  c10_b_f.set_size(&c10_sf_emlrtRTEI, c10_sp, c10_f.size(0));
  c10_b_loop_ub = c10_f.size(0) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_b_f[c10_i1] = c10_f[c10_i1];
  }

  c10_c_options = *c10_b_options;
  c10_b_driver(chartInstance, c10_sp, c10_d_H, c10_b_f, c10_b_solution,
               c10_b_memspace, c10_j_workingset, c10_c_qrmanager,
               c10_b_cholmanager, c10_b_objective, &c10_c_options,
               c10_runTimeOptions);
}

static void c10_PresolveWorkingSet(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_memspace, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_i_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager,
  c10_scZhlMkNxPxOgM0FLkVrfPH *c10_b_options, c10_s_pF7WiHvRtoO0ktfmCER3HD
  *c10_b_solution, c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_b_memspace,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_j_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E
  *c10_c_qrmanager, c10_scZhlMkNxPxOgM0FLkVrfPH *c10_c_options)
{
  *c10_b_solution = *c10_solution;
  *c10_b_memspace = *c10_memspace;
  *c10_j_workingset = *c10_i_workingset;
  *c10_c_qrmanager = *c10_b_qrmanager;
  *c10_c_options = *c10_b_options;
  c10_b_PresolveWorkingSet(chartInstance, c10_sp, c10_b_solution, c10_b_memspace,
    c10_j_workingset, c10_c_qrmanager);
}

static void c10_RemoveDependentEq_(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_memspace,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_i_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E
  *c10_b_qrmanager, int32_T *c10_nDepInd, c10_s_pIaUYPkQBTqVmAKxFPiGQF
  *c10_b_memspace, c10_s_flSfA4tA26WyP6kjP59eL *c10_j_workingset,
  c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_c_qrmanager)
{
  int32_T c10_b_nDepInd;
  *c10_b_memspace = *c10_memspace;
  *c10_j_workingset = *c10_i_workingset;
  *c10_c_qrmanager = *c10_b_qrmanager;
  c10_b_nDepInd = c10_b_RemoveDependentEq_(chartInstance, c10_sp, c10_b_memspace,
    c10_j_workingset, c10_c_qrmanager);
  *c10_nDepInd = c10_b_nDepInd;
}

static void c10_factorQRE(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_obj, int32_T c10_mrows,
  int32_T c10_ncols, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_c_obj)
{
  *c10_c_obj = *c10_b_obj;
  c10_b_factorQRE(chartInstance, c10_sp, c10_c_obj, c10_mrows, c10_ncols);
}

static void c10_computeQ_(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_obj, int32_T c10_nrows,
  c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_c_obj)
{
  *c10_c_obj = *c10_b_obj;
  c10_b_computeQ_(chartInstance, c10_sp, c10_c_obj, c10_nrows);
}

static void c10_moveConstraint_(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL *c10_b_obj, int32_T
  c10_idx_global_start, int32_T c10_idx_global_dest, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_c_obj)
{
  *c10_c_obj = *c10_b_obj;
  c10_b_moveConstraint_(chartInstance, c10_sp, c10_c_obj, c10_idx_global_start,
                        c10_idx_global_dest);
}

static void c10_countsort(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<int32_T, 1U> &c10_x, int32_T c10_xLen, coder::
  array<int32_T, 1U> &c10_workspace, int32_T c10_xMin, int32_T c10_xMax, coder::
  array<int32_T, 1U> &c10_b_x, coder::array<int32_T, 1U> &c10_b_workspace)
{
  int32_T c10_b_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_loop_ub;
  c10_b_x.set_size(&c10_tf_emlrtRTEI, c10_sp, c10_x.size(0));
  c10_loop_ub = c10_x.size(0) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_b_x[c10_i] = c10_x[c10_i];
  }

  c10_b_workspace.set_size(&c10_tf_emlrtRTEI, c10_sp, c10_workspace.size(0));
  c10_b_loop_ub = c10_workspace.size(0) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_b_workspace[c10_i1] = c10_workspace[c10_i1];
  }

  c10_b_countsort(chartInstance, c10_sp, c10_b_x, c10_xLen, c10_b_workspace,
                  c10_xMin, c10_xMax);
}

static void c10_feasibleX0ForWorkingSet(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, coder::array<real_T, 2U>
  &c10_workspace, coder::array<real_T, 1U> &c10_xCurrent,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_i_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E
  *c10_b_qrmanager, coder::array<real_T, 1U> &c10_b_xCurrent, boolean_T
  *c10_nonDegenerateWset, coder::array<real_T, 2U> &c10_b_workspace,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_j_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E
  *c10_c_qrmanager)
{
  int32_T c10_b_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_loop_ub;
  boolean_T c10_b_nonDegenerateWset;
  c10_b_xCurrent.set_size(&c10_uf_emlrtRTEI, c10_sp, c10_xCurrent.size(0));
  c10_loop_ub = c10_xCurrent.size(0) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_b_xCurrent[c10_i] = c10_xCurrent[c10_i];
  }

  c10_b_workspace.set_size(&c10_uf_emlrtRTEI, c10_sp, c10_workspace.size(0),
    c10_workspace.size(1));
  c10_b_loop_ub = c10_workspace.size(0) * c10_workspace.size(1) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_b_workspace[c10_i1] = c10_workspace[c10_i1];
  }

  *c10_j_workingset = *c10_i_workingset;
  *c10_c_qrmanager = *c10_b_qrmanager;
  c10_b_nonDegenerateWset = c10_b_feasibleX0ForWorkingSet(chartInstance, c10_sp,
    c10_b_workspace, c10_b_xCurrent, c10_j_workingset, c10_c_qrmanager);
  *c10_nonDegenerateWset = c10_b_nonDegenerateWset;
}

static void c10_xgeqrf(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_A, int32_T c10_m, int32_T
  c10_f_n, coder::array<real_T, 2U> &c10_cb_A, coder::array<real_T, 1U> &c10_tau)
{
  int32_T c10_i;
  int32_T c10_loop_ub;
  c10_cb_A.set_size(&c10_vf_emlrtRTEI, c10_sp, c10_A.size(0), c10_A.size(1));
  c10_loop_ub = c10_A.size(0) * c10_A.size(1) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_cb_A[c10_i] = c10_A[c10_i];
  }

  c10_b_xgeqrf(chartInstance, c10_sp, c10_cb_A, c10_m, c10_f_n, c10_tau);
}

static void c10_factorQR(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_obj, coder::array<
  real_T, 1U> &c10_A, int32_T c10_mrows, int32_T c10_ncols, int32_T c10_b_ldA,
  c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_c_obj)
{
  coder::array<real_T, 1U> c10_cb_A;
  int32_T c10_i;
  int32_T c10_loop_ub;
  *c10_c_obj = *c10_b_obj;
  c10_cb_A.set_size(&c10_wf_emlrtRTEI, c10_sp, c10_A.size(0));
  c10_loop_ub = c10_A.size(0) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_cb_A[c10_i] = c10_A[c10_i];
  }

  c10_b_factorQR(chartInstance, c10_sp, c10_c_obj, c10_cb_A, c10_mrows,
                 c10_ncols, c10_b_ldA);
}

static void c10_maxConstraintViolation(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL *c10_b_obj, coder::array<
  real_T, 2U> &c10_x, real_T *c10_e_v, c10_s_flSfA4tA26WyP6kjP59eL *c10_c_obj)
{
  coder::array<real_T, 2U> c10_b_x;
  real_T c10_f_v;
  int32_T c10_i;
  int32_T c10_loop_ub;
  *c10_c_obj = *c10_b_obj;
  c10_b_x.set_size(&c10_xf_emlrtRTEI, c10_sp, c10_x.size(0), c10_x.size(1));
  c10_loop_ub = c10_x.size(0) * c10_x.size(1) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_b_x[c10_i] = c10_x[c10_i];
  }

  c10_f_v = c10_d_maxConstraintViolation(chartInstance, c10_sp, c10_c_obj,
    c10_b_x);
  *c10_e_v = c10_f_v;
}

static void c10_xgemv(SFc10_ACCMPCInstanceStruct *chartInstance, const
                      emlrtStack *c10_sp, int32_T c10_m, int32_T c10_f_n, coder::
                      array<real_T, 1U> &c10_A, int32_T c10_lda, coder::array<
                      real_T, 2U> &c10_x, real_T c10_y_data[], int32_T
                      c10_y_size[1], real_T c10_b_y_data[], int32_T
                      c10_b_y_size[1])
{
  coder::array<real_T, 2U> c10_b_x;
  coder::array<real_T, 1U> c10_cb_A;
  int32_T c10_b_loop_ub;
  int32_T c10_c_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_loop_ub;
  c10_b_y_size[0] = c10_y_size[0];
  c10_loop_ub = c10_y_size[0] - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_b_y_data[c10_i] = c10_y_data[c10_i];
  }

  c10_cb_A.set_size(&c10_yf_emlrtRTEI, c10_sp, c10_A.size(0));
  c10_b_loop_ub = c10_A.size(0) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_cb_A[c10_i1] = c10_A[c10_i1];
  }

  c10_b_x.set_size(&c10_yf_emlrtRTEI, c10_sp, c10_x.size(0), c10_x.size(1));
  c10_c_loop_ub = c10_x.size(0) * c10_x.size(1) - 1;
  for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
    c10_b_x[c10_i2] = c10_x[c10_i2];
  }

  c10_f_xgemv(chartInstance, c10_m, c10_f_n, c10_cb_A, c10_lda, c10_b_x,
              c10_b_y_data);
}

static void c10_b_maxConstraintViolation(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_b_obj, coder::array<real_T, 2U> &c10_x, int32_T c10_ix0, real_T *c10_e_v,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_c_obj)
{
  coder::array<real_T, 2U> c10_b_x;
  real_T c10_f_v;
  int32_T c10_i;
  int32_T c10_loop_ub;
  *c10_c_obj = *c10_b_obj;
  c10_b_x.set_size(&c10_xf_emlrtRTEI, c10_sp, c10_x.size(0), c10_x.size(1));
  c10_loop_ub = c10_x.size(0) * c10_x.size(1) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_b_x[c10_i] = c10_x[c10_i];
  }

  c10_f_v = c10_e_maxConstraintViolation(chartInstance, c10_sp, c10_c_obj,
    c10_b_x, c10_ix0);
  *c10_e_v = c10_f_v;
}

static void c10_b_xgemv(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, int32_T c10_m, int32_T c10_f_n, coder::array<real_T, 1U>
  &c10_A, int32_T c10_lda, coder::array<real_T, 2U> &c10_x, int32_T c10_ix0,
  real_T c10_y_data[], int32_T c10_y_size[1], real_T c10_b_y_data[], int32_T
  c10_b_y_size[1])
{
  coder::array<real_T, 2U> c10_b_x;
  coder::array<real_T, 1U> c10_cb_A;
  int32_T c10_b_loop_ub;
  int32_T c10_c_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_loop_ub;
  c10_b_y_size[0] = c10_y_size[0];
  c10_loop_ub = c10_y_size[0] - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_b_y_data[c10_i] = c10_y_data[c10_i];
  }

  c10_cb_A.set_size(&c10_yf_emlrtRTEI, c10_sp, c10_A.size(0));
  c10_b_loop_ub = c10_A.size(0) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_cb_A[c10_i1] = c10_A[c10_i1];
  }

  c10_b_x.set_size(&c10_yf_emlrtRTEI, c10_sp, c10_x.size(0), c10_x.size(1));
  c10_c_loop_ub = c10_x.size(0) * c10_x.size(1) - 1;
  for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
    c10_b_x[c10_i2] = c10_x[c10_i2];
  }

  c10_g_xgemv(chartInstance, c10_m, c10_f_n, c10_cb_A, c10_lda, c10_b_x, c10_ix0,
              c10_b_y_data);
}

static void c10_c_maxConstraintViolation(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_b_obj, coder::array<real_T, 1U> &c10_x, real_T *c10_e_v,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_c_obj)
{
  coder::array<real_T, 1U> c10_b_x;
  real_T c10_f_v;
  int32_T c10_i;
  int32_T c10_loop_ub;
  *c10_c_obj = *c10_b_obj;
  c10_b_x.set_size(&c10_xf_emlrtRTEI, c10_sp, c10_x.size(0));
  c10_loop_ub = c10_x.size(0) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_b_x[c10_i] = c10_x[c10_i];
  }

  c10_f_v = c10_f_maxConstraintViolation(chartInstance, c10_sp, c10_c_obj,
    c10_b_x);
  *c10_e_v = c10_f_v;
}

static void c10_c_xgemv(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, int32_T c10_m, int32_T c10_f_n, coder::array<real_T, 1U>
  &c10_A, int32_T c10_lda, coder::array<real_T, 1U> &c10_x, real_T c10_y_data[],
  int32_T c10_y_size[1], real_T c10_b_y_data[], int32_T c10_b_y_size[1])
{
  coder::array<real_T, 1U> c10_b_x;
  coder::array<real_T, 1U> c10_cb_A;
  int32_T c10_b_loop_ub;
  int32_T c10_c_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_loop_ub;
  c10_b_y_size[0] = c10_y_size[0];
  c10_loop_ub = c10_y_size[0] - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_b_y_data[c10_i] = c10_y_data[c10_i];
  }

  c10_cb_A.set_size(&c10_yf_emlrtRTEI, c10_sp, c10_A.size(0));
  c10_b_loop_ub = c10_A.size(0) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_cb_A[c10_i1] = c10_A[c10_i1];
  }

  c10_b_x.set_size(&c10_yf_emlrtRTEI, c10_sp, c10_x.size(0));
  c10_c_loop_ub = c10_x.size(0) - 1;
  for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
    c10_b_x[c10_i2] = c10_x[c10_i2];
  }

  c10_h_xgemv(chartInstance, c10_m, c10_f_n, c10_cb_A, c10_lda, c10_b_x,
              c10_b_y_data);
}

static void c10_removeAllIneqConstr(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL *c10_b_obj,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_c_obj)
{
  *c10_c_obj = *c10_b_obj;
  c10_b_removeAllIneqConstr(chartInstance, c10_sp, c10_c_obj);
}

static void c10_phaseone(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_c_H, coder::array<real_T, 1U>
  &c10_f, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_memspace, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_i_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager,
  c10_s_lryvQQZbN23ozlLWy4I3pD *c10_cholmanager, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_objective, c10_scZhlMkNxPxOgM0FLkVrfPH *c10_b_options,
  c10_sL9bDKomAYkxZSVrG9w6En c10_runTimeOptions, c10_s_pF7WiHvRtoO0ktfmCER3HD
  *c10_b_solution, c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_b_memspace,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_j_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E
  *c10_c_qrmanager, c10_s_lryvQQZbN23ozlLWy4I3pD *c10_b_cholmanager,
  c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_objective, c10_scZhlMkNxPxOgM0FLkVrfPH
  *c10_c_options, c10_sL9bDKomAYkxZSVrG9w6En *c10_b_runTimeOptions)
{
  coder::array<real_T, 2U> c10_d_H;
  coder::array<real_T, 1U> c10_b_f;
  int32_T c10_b_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_loop_ub;
  *c10_b_solution = *c10_solution;
  *c10_b_memspace = *c10_memspace;
  *c10_j_workingset = *c10_i_workingset;
  *c10_c_qrmanager = *c10_b_qrmanager;
  *c10_b_cholmanager = *c10_cholmanager;
  *c10_b_objective = *c10_objective;
  *c10_c_options = *c10_b_options;
  *c10_b_runTimeOptions = c10_runTimeOptions;
  c10_d_H.set_size(&c10_ag_emlrtRTEI, c10_sp, c10_c_H.size(0), c10_c_H.size(1));
  c10_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_d_H[c10_i] = c10_c_H[c10_i];
  }

  c10_b_f.set_size(&c10_ag_emlrtRTEI, c10_sp, c10_f.size(0));
  c10_b_loop_ub = c10_f.size(0) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_b_f[c10_i1] = c10_f[c10_i1];
  }

  c10_b_phaseone(chartInstance, c10_sp, c10_d_H, c10_b_f, c10_b_solution,
                 c10_b_memspace, c10_j_workingset, c10_c_qrmanager,
                 c10_b_cholmanager, c10_b_objective, c10_c_options,
                 c10_b_runTimeOptions);
}

static void c10_setProblemType(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL *c10_b_obj, int32_T
  c10_PROBLEM_TYPE, c10_s_flSfA4tA26WyP6kjP59eL *c10_c_obj)
{
  *c10_c_obj = *c10_b_obj;
  c10_b_setProblemType(chartInstance, c10_sp, c10_c_obj, c10_PROBLEM_TYPE);
}

static void c10_modifyOverheadPhaseOne_(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_b_obj, c10_s_flSfA4tA26WyP6kjP59eL *c10_c_obj)
{
  *c10_c_obj = *c10_b_obj;
  c10_b_modifyOverheadPhaseOne_(chartInstance, c10_sp, c10_c_obj);
}

static void c10_modifyOverheadRegularized_(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_b_obj, c10_s_flSfA4tA26WyP6kjP59eL *c10_c_obj)
{
  *c10_c_obj = *c10_b_obj;
  c10_b_modifyOverheadRegularized_(chartInstance, c10_sp, c10_c_obj);
}

static void c10_computeFval(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_obj, coder::array<
  real_T, 2U> &c10_workspace, coder::array<real_T, 2U> &c10_c_H, coder::array<
  real_T, 1U> &c10_f, coder::array<real_T, 1U> &c10_x, real_T *c10_val, coder::
  array<real_T, 2U> &c10_b_workspace, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_c_obj)
{
  coder::array<real_T, 2U> c10_d_H;
  coder::array<real_T, 1U> c10_b_f;
  coder::array<real_T, 1U> c10_b_x;
  real_T c10_b_val;
  int32_T c10_b_loop_ub;
  int32_T c10_c_loop_ub;
  int32_T c10_d_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_loop_ub;
  c10_b_workspace.set_size(&c10_bg_emlrtRTEI, c10_sp, c10_workspace.size(0),
    c10_workspace.size(1));
  c10_loop_ub = c10_workspace.size(0) * c10_workspace.size(1) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_b_workspace[c10_i] = c10_workspace[c10_i];
  }

  *c10_c_obj = *c10_b_obj;
  c10_d_H.set_size(&c10_bg_emlrtRTEI, c10_sp, c10_c_H.size(0), c10_c_H.size(1));
  c10_b_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_d_H[c10_i1] = c10_c_H[c10_i1];
  }

  c10_b_f.set_size(&c10_bg_emlrtRTEI, c10_sp, c10_f.size(0));
  c10_c_loop_ub = c10_f.size(0) - 1;
  for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
    c10_b_f[c10_i2] = c10_f[c10_i2];
  }

  c10_b_x.set_size(&c10_bg_emlrtRTEI, c10_sp, c10_x.size(0));
  c10_d_loop_ub = c10_x.size(0) - 1;
  for (c10_i3 = 0; c10_i3 <= c10_d_loop_ub; c10_i3++) {
    c10_b_x[c10_i3] = c10_x[c10_i3];
  }

  c10_b_val = c10_b_computeFval(chartInstance, c10_sp, c10_c_obj,
    c10_b_workspace, c10_d_H, c10_b_f, c10_b_x);
  *c10_val = c10_b_val;
}

static void c10_linearForm_(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_obj, coder::array<
  real_T, 2U> &c10_workspace, coder::array<real_T, 2U> &c10_c_H, coder::array<
  real_T, 1U> &c10_f, coder::array<real_T, 1U> &c10_x, coder::array<real_T, 2U>
  &c10_b_workspace)
{
  coder::array<real_T, 2U> c10_d_H;
  coder::array<real_T, 1U> c10_b_f;
  coder::array<real_T, 1U> c10_b_x;
  c10_s_saWPFfMboRdWeRqIEJ4x8C c10_c_obj;
  int32_T c10_b_loop_ub;
  int32_T c10_c_loop_ub;
  int32_T c10_d_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_loop_ub;
  c10_b_workspace.set_size(&c10_cg_emlrtRTEI, c10_sp, c10_workspace.size(0),
    c10_workspace.size(1));
  c10_loop_ub = c10_workspace.size(0) * c10_workspace.size(1) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_b_workspace[c10_i] = c10_workspace[c10_i];
  }

  c10_c_obj = *c10_b_obj;
  c10_d_H.set_size(&c10_cg_emlrtRTEI, c10_sp, c10_c_H.size(0), c10_c_H.size(1));
  c10_b_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_d_H[c10_i1] = c10_c_H[c10_i1];
  }

  c10_b_f.set_size(&c10_cg_emlrtRTEI, c10_sp, c10_f.size(0));
  c10_c_loop_ub = c10_f.size(0) - 1;
  for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
    c10_b_f[c10_i2] = c10_f[c10_i2];
  }

  c10_b_x.set_size(&c10_cg_emlrtRTEI, c10_sp, c10_x.size(0));
  c10_d_loop_ub = c10_x.size(0) - 1;
  for (c10_i3 = 0; c10_i3 <= c10_d_loop_ub; c10_i3++) {
    c10_b_x[c10_i3] = c10_x[c10_i3];
  }

  c10_c_linearForm_(chartInstance, c10_sp, &c10_c_obj, c10_b_workspace, c10_d_H,
                    c10_b_f, c10_b_x);
}

static void c10_iterate(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_c_H, coder::array<real_T, 1U>
  &c10_f, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_memspace, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_i_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager,
  c10_s_lryvQQZbN23ozlLWy4I3pD *c10_cholmanager, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_objective, c10_scZhlMkNxPxOgM0FLkVrfPH *c10_b_options,
  c10_sL9bDKomAYkxZSVrG9w6En c10_runTimeOptions, c10_s_pF7WiHvRtoO0ktfmCER3HD
  *c10_b_solution, c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_b_memspace,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_j_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E
  *c10_c_qrmanager, c10_s_lryvQQZbN23ozlLWy4I3pD *c10_b_cholmanager,
  c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_objective)
{
  coder::array<real_T, 2U> c10_d_H;
  coder::array<real_T, 1U> c10_b_f;
  c10_scZhlMkNxPxOgM0FLkVrfPH c10_c_options;
  int32_T c10_b_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_loop_ub;
  *c10_b_solution = *c10_solution;
  *c10_b_memspace = *c10_memspace;
  *c10_j_workingset = *c10_i_workingset;
  *c10_c_qrmanager = *c10_b_qrmanager;
  *c10_b_cholmanager = *c10_cholmanager;
  *c10_b_objective = *c10_objective;
  c10_d_H.set_size(&c10_dg_emlrtRTEI, c10_sp, c10_c_H.size(0), c10_c_H.size(1));
  c10_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_d_H[c10_i] = c10_c_H[c10_i];
  }

  c10_b_f.set_size(&c10_dg_emlrtRTEI, c10_sp, c10_f.size(0));
  c10_b_loop_ub = c10_f.size(0) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_b_f[c10_i1] = c10_f[c10_i1];
  }

  c10_c_options = *c10_b_options;
  c10_b_iterate(chartInstance, c10_sp, c10_d_H, c10_b_f, c10_b_solution,
                c10_b_memspace, c10_j_workingset, c10_c_qrmanager,
                c10_b_cholmanager, c10_b_objective, &c10_c_options,
                c10_runTimeOptions);
}

static void c10_computeGrad_StoreHx(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_obj, coder::
  array<real_T, 2U> &c10_c_H, coder::array<real_T, 1U> &c10_f, coder::array<
  real_T, 1U> &c10_x, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_c_obj)
{
  coder::array<real_T, 2U> c10_d_H;
  coder::array<real_T, 1U> c10_b_f;
  coder::array<real_T, 1U> c10_b_x;
  int32_T c10_b_loop_ub;
  int32_T c10_c_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_loop_ub;
  *c10_c_obj = *c10_b_obj;
  c10_d_H.set_size(&c10_eg_emlrtRTEI, c10_sp, c10_c_H.size(0), c10_c_H.size(1));
  c10_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_d_H[c10_i] = c10_c_H[c10_i];
  }

  c10_b_f.set_size(&c10_eg_emlrtRTEI, c10_sp, c10_f.size(0));
  c10_b_loop_ub = c10_f.size(0) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_b_f[c10_i1] = c10_f[c10_i1];
  }

  c10_b_x.set_size(&c10_eg_emlrtRTEI, c10_sp, c10_x.size(0));
  c10_c_loop_ub = c10_x.size(0) - 1;
  for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
    c10_b_x[c10_i2] = c10_x[c10_i2];
  }

  c10_b_computeGrad_StoreHx(chartInstance, c10_sp, c10_c_obj, c10_d_H, c10_b_f,
    c10_b_x);
}

static void c10_d_xgemv(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, int32_T c10_m, int32_T c10_f_n, coder::array<real_T, 2U>
  &c10_A, int32_T c10_lda, coder::array<real_T, 1U> &c10_x, coder::array<real_T,
  1U> &c10_y, coder::array<real_T, 1U> &c10_b_y)
{
  coder::array<real_T, 2U> c10_cb_A;
  coder::array<real_T, 1U> c10_b_x;
  int32_T c10_b_loop_ub;
  int32_T c10_c_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_loop_ub;
  c10_b_y.set_size(&c10_yf_emlrtRTEI, c10_sp, c10_y.size(0));
  c10_loop_ub = c10_y.size(0) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_b_y[c10_i] = c10_y[c10_i];
  }

  c10_cb_A.set_size(&c10_yf_emlrtRTEI, c10_sp, c10_A.size(0), c10_A.size(1));
  c10_b_loop_ub = c10_A.size(0) * c10_A.size(1) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_cb_A[c10_i1] = c10_A[c10_i1];
  }

  c10_b_x.set_size(&c10_yf_emlrtRTEI, c10_sp, c10_x.size(0));
  c10_c_loop_ub = c10_x.size(0) - 1;
  for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
    c10_b_x[c10_i2] = c10_x[c10_i2];
  }

  c10_i_xgemv(chartInstance, c10_m, c10_f_n, c10_cb_A, c10_lda, c10_b_x, c10_b_y);
}

static void c10_computeFval_ReuseHx(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_obj, coder::
  array<real_T, 2U> &c10_workspace, coder::array<real_T, 1U> &c10_f, coder::
  array<real_T, 1U> &c10_x, real_T *c10_val, coder::array<real_T, 2U>
  &c10_b_workspace, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_c_obj)
{
  coder::array<real_T, 1U> c10_b_f;
  coder::array<real_T, 1U> c10_b_x;
  real_T c10_b_val;
  int32_T c10_b_loop_ub;
  int32_T c10_c_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_loop_ub;
  c10_b_workspace.set_size(&c10_fg_emlrtRTEI, c10_sp, c10_workspace.size(0),
    c10_workspace.size(1));
  c10_loop_ub = c10_workspace.size(0) * c10_workspace.size(1) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_b_workspace[c10_i] = c10_workspace[c10_i];
  }

  *c10_c_obj = *c10_b_obj;
  c10_b_f.set_size(&c10_fg_emlrtRTEI, c10_sp, c10_f.size(0));
  c10_b_loop_ub = c10_f.size(0) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_b_f[c10_i1] = c10_f[c10_i1];
  }

  c10_b_x.set_size(&c10_fg_emlrtRTEI, c10_sp, c10_x.size(0));
  c10_c_loop_ub = c10_x.size(0) - 1;
  for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
    c10_b_x[c10_i2] = c10_x[c10_i2];
  }

  c10_b_val = c10_b_computeFval_ReuseHx(chartInstance, c10_sp, c10_c_obj,
    c10_b_workspace, c10_b_f, c10_b_x);
  *c10_val = c10_b_val;
}

static void c10_xcopy(SFc10_ACCMPCInstanceStruct *chartInstance, const
                      emlrtStack *c10_sp, int32_T c10_f_n, coder::array<real_T,
                      1U> &c10_y, coder::array<real_T, 1U> &c10_b_y)
{
  int32_T c10_i;
  int32_T c10_loop_ub;
  c10_b_y.set_size(&c10_gg_emlrtRTEI, c10_sp, c10_y.size(0));
  c10_loop_ub = c10_y.size(0) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_b_y[c10_i] = c10_y[c10_i];
  }

  c10_b_xcopy(chartInstance, c10_sp, c10_f_n, c10_b_y);
}

static void c10_squareQ_appendCol(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_obj, coder::
  array<real_T, 1U> &c10_vec, int32_T c10_iv0, c10_s_l1Gll5dfO9DpqQrvRqAf7E
  *c10_c_obj)
{
  coder::array<real_T, 1U> c10_b_vec;
  int32_T c10_i;
  int32_T c10_loop_ub;
  *c10_c_obj = *c10_b_obj;
  c10_b_vec.set_size(&c10_hg_emlrtRTEI, c10_sp, c10_vec.size(0));
  c10_loop_ub = c10_vec.size(0) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_b_vec[c10_i] = c10_vec[c10_i];
  }

  c10_b_squareQ_appendCol(chartInstance, c10_sp, c10_c_obj, c10_b_vec, c10_iv0);
}

static void c10_deleteColMoveEnd(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_obj, int32_T
  c10_idx, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_c_obj)
{
  *c10_c_obj = *c10_b_obj;
  c10_b_deleteColMoveEnd(chartInstance, c10_sp, c10_c_obj, c10_idx);
}

static void c10_compute_deltax(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_c_H,
  c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution, c10_s_pIaUYPkQBTqVmAKxFPiGQF
  *c10_memspace, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager,
  c10_s_lryvQQZbN23ozlLWy4I3pD *c10_cholmanager, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_objective, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_b_solution,
  c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_b_memspace, c10_s_l1Gll5dfO9DpqQrvRqAf7E
  *c10_c_qrmanager, c10_s_lryvQQZbN23ozlLWy4I3pD *c10_b_cholmanager,
  c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_objective)
{
  coder::array<real_T, 2U> c10_d_H;
  int32_T c10_i;
  int32_T c10_loop_ub;
  *c10_b_solution = *c10_solution;
  *c10_b_memspace = *c10_memspace;
  *c10_c_qrmanager = *c10_b_qrmanager;
  *c10_b_cholmanager = *c10_cholmanager;
  *c10_b_objective = *c10_objective;
  c10_d_H.set_size(&c10_ig_emlrtRTEI, c10_sp, c10_c_H.size(0), c10_c_H.size(1));
  c10_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_d_H[c10_i] = c10_c_H[c10_i];
  }

  c10_b_compute_deltax(chartInstance, c10_sp, c10_d_H, c10_b_solution,
                       c10_b_memspace, c10_c_qrmanager, c10_b_cholmanager,
                       c10_b_objective);
}

static void c10_factor(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_lryvQQZbN23ozlLWy4I3pD *c10_b_obj, coder::array<
  real_T, 2U> &c10_A, int32_T c10_ndims, int32_T c10_b_ldA,
  c10_s_lryvQQZbN23ozlLWy4I3pD *c10_c_obj)
{
  coder::array<real_T, 2U> c10_cb_A;
  int32_T c10_i;
  int32_T c10_loop_ub;
  *c10_c_obj = *c10_b_obj;
  c10_cb_A.set_size(&c10_jg_emlrtRTEI, c10_sp, c10_A.size(0), c10_A.size(1));
  c10_loop_ub = c10_A.size(0) * c10_A.size(1) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_cb_A[c10_i] = c10_A[c10_i];
  }

  c10_b_factor(chartInstance, c10_sp, c10_c_obj, c10_cb_A, c10_ndims, c10_b_ldA);
}

static void c10_partialColLDL3_(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_lryvQQZbN23ozlLWy4I3pD *c10_b_obj, int32_T
  c10_LD_offset, int32_T c10_NColsRemain, real_T c10_REG_PRIMAL,
  c10_s_lryvQQZbN23ozlLWy4I3pD *c10_c_obj)
{
  *c10_c_obj = *c10_b_obj;
  c10_b_partialColLDL3_(chartInstance, c10_sp, c10_c_obj, c10_LD_offset,
                        c10_NColsRemain, c10_REG_PRIMAL);
}

static void c10_fullColLDL2_(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_lryvQQZbN23ozlLWy4I3pD *c10_b_obj, int32_T
  c10_LD_offset, int32_T c10_NColsRemain, real_T c10_REG_PRIMAL,
  c10_s_lryvQQZbN23ozlLWy4I3pD *c10_c_obj)
{
  *c10_c_obj = *c10_b_obj;
  c10_c_fullColLDL2_(chartInstance, c10_sp, c10_c_obj, c10_LD_offset,
                     c10_NColsRemain, c10_REG_PRIMAL);
}

static void c10_xger(SFc10_ACCMPCInstanceStruct *chartInstance, const emlrtStack
                     *c10_sp, int32_T c10_m, int32_T c10_f_n, real_T c10_alpha1,
                     coder::array<real_T, 1U> &c10_x, coder::array<real_T, 1U>
                     &c10_y, coder::array<real_T, 1U> &c10_A, int32_T c10_ia0,
                     int32_T c10_lda, coder::array<real_T, 1U> &c10_cb_A)
{
  coder::array<real_T, 1U> c10_b_x;
  coder::array<real_T, 1U> c10_b_y;
  int32_T c10_b_loop_ub;
  int32_T c10_c_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_loop_ub;
  c10_cb_A.set_size(&c10_kg_emlrtRTEI, c10_sp, c10_A.size(0));
  c10_loop_ub = c10_A.size(0) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_cb_A[c10_i] = c10_A[c10_i];
  }

  c10_b_x.set_size(&c10_kg_emlrtRTEI, c10_sp, c10_x.size(0));
  c10_b_loop_ub = c10_x.size(0) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_b_x[c10_i1] = c10_x[c10_i1];
  }

  c10_b_y.set_size(&c10_kg_emlrtRTEI, c10_sp, c10_y.size(0));
  c10_c_loop_ub = c10_y.size(0) - 1;
  for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
    c10_b_y[c10_i2] = c10_y[c10_i2];
  }

  c10_b_xger(chartInstance, c10_m, c10_f_n, c10_alpha1, c10_b_x, c10_b_y,
             c10_cb_A, c10_ia0, c10_lda);
}

static void c10_b_fullColLDL2_(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_lryvQQZbN23ozlLWy4I3pD *c10_b_obj, int32_T
  c10_NColsRemain, real_T c10_REG_PRIMAL, c10_s_lryvQQZbN23ozlLWy4I3pD
  *c10_c_obj)
{
  *c10_c_obj = *c10_b_obj;
  c10_d_fullColLDL2_(chartInstance, c10_sp, c10_c_obj, c10_NColsRemain,
                     c10_REG_PRIMAL);
}

static void c10_e_xgemv(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, int32_T c10_m, int32_T c10_f_n, coder::array<real_T, 2U>
  &c10_A, int32_T c10_ia0, int32_T c10_lda, coder::array<real_T, 2U> &c10_x,
  coder::array<real_T, 1U> &c10_y, coder::array<real_T, 1U> &c10_b_y)
{
  coder::array<real_T, 2U> c10_b_x;
  coder::array<real_T, 2U> c10_cb_A;
  int32_T c10_b_loop_ub;
  int32_T c10_c_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_loop_ub;
  c10_b_y.set_size(&c10_yf_emlrtRTEI, c10_sp, c10_y.size(0));
  c10_loop_ub = c10_y.size(0) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_b_y[c10_i] = c10_y[c10_i];
  }

  c10_cb_A.set_size(&c10_yf_emlrtRTEI, c10_sp, c10_A.size(0), c10_A.size(1));
  c10_b_loop_ub = c10_A.size(0) * c10_A.size(1) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_cb_A[c10_i1] = c10_A[c10_i1];
  }

  c10_b_x.set_size(&c10_yf_emlrtRTEI, c10_sp, c10_x.size(0), c10_x.size(1));
  c10_c_loop_ub = c10_x.size(0) * c10_x.size(1) - 1;
  for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
    c10_b_x[c10_i2] = c10_x[c10_i2];
  }

  c10_j_xgemv(chartInstance, c10_m, c10_f_n, c10_cb_A, c10_ia0, c10_lda, c10_b_x,
              c10_b_y);
}

static void c10_compute_lambda(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_workspace,
  c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_objective, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager,
  c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_b_solution, coder::array<real_T, 2U>
  &c10_b_workspace, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_objective,
  c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_c_qrmanager)
{
  int32_T c10_i;
  int32_T c10_loop_ub;
  *c10_b_solution = *c10_solution;
  c10_b_workspace.set_size(&c10_mg_emlrtRTEI, c10_sp, c10_workspace.size(0),
    c10_workspace.size(1));
  c10_loop_ub = c10_workspace.size(0) * c10_workspace.size(1) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_b_workspace[c10_i] = c10_workspace[c10_i];
  }

  *c10_b_objective = *c10_objective;
  *c10_c_qrmanager = *c10_b_qrmanager;
  c10_b_compute_lambda(chartInstance, c10_sp, c10_b_workspace, c10_b_solution,
                       c10_b_objective, c10_c_qrmanager);
}

static void c10_feasibleratiotest(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution, coder::
  array<real_T, 2U> &c10_workspace, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_i_workingset, boolean_T c10_isPhaseOne, real_T *c10_alpha, boolean_T
  *c10_newBlocking, int32_T *c10_constrType, int32_T *c10_constrIdx, coder::
  array<real_T, 2U> &c10_b_workspace)
{
  real_T c10_b_alpha;
  int32_T c10_b_constrIdx;
  int32_T c10_b_constrType;
  int32_T c10_i;
  int32_T c10_loop_ub;
  boolean_T c10_b_newBlocking;
  c10_b_workspace.set_size(&c10_og_emlrtRTEI, c10_sp, c10_workspace.size(0),
    c10_workspace.size(1));
  c10_loop_ub = c10_workspace.size(0) * c10_workspace.size(1) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_b_workspace[c10_i] = c10_workspace[c10_i];
  }

  c10_b_feasibleratiotest(chartInstance, c10_sp, c10_solution, c10_i_workingset,
    c10_isPhaseOne, &c10_b_alpha, &c10_b_newBlocking, &c10_b_constrType,
    &c10_b_constrIdx);
  *c10_alpha = c10_b_alpha;
  *c10_newBlocking = c10_b_newBlocking;
  *c10_constrType = c10_b_constrType;
  *c10_constrIdx = c10_b_constrIdx;
}

static void c10_ratiotest(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution, coder::array<
  real_T, 2U> &c10_workspace, c10_s_flSfA4tA26WyP6kjP59eL *c10_i_workingset,
  real_T c10_toldelta, real_T *c10_alpha, boolean_T *c10_newBlocking, int32_T
  *c10_constrType, int32_T *c10_constrIdx, coder::array<real_T, 2U>
  &c10_b_workspace, real_T *c10_b_toldelta)
{
  c10_s_flSfA4tA26WyP6kjP59eL c10_j_workingset;
  c10_s_pF7WiHvRtoO0ktfmCER3HD c10_b_solution;
  real_T c10_b_alpha;
  real_T c10_c_toldelta;
  int32_T c10_b_constrIdx;
  int32_T c10_b_constrType;
  int32_T c10_i;
  int32_T c10_loop_ub;
  boolean_T c10_b_newBlocking;
  c10_b_workspace.set_size(&c10_pg_emlrtRTEI, c10_sp, c10_workspace.size(0),
    c10_workspace.size(1));
  c10_loop_ub = c10_workspace.size(0) * c10_workspace.size(1) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_b_workspace[c10_i] = c10_workspace[c10_i];
  }

  c10_c_toldelta = c10_toldelta;
  c10_b_solution = *c10_solution;
  c10_j_workingset = *c10_i_workingset;
  c10_b_ratiotest(chartInstance, c10_sp, &c10_b_solution, &c10_j_workingset,
                  &c10_c_toldelta, &c10_b_alpha, &c10_b_newBlocking,
                  &c10_b_constrType, &c10_b_constrIdx);
  *c10_alpha = c10_b_alpha;
  *c10_newBlocking = c10_b_newBlocking;
  *c10_constrType = c10_b_constrType;
  *c10_constrIdx = c10_b_constrIdx;
  *c10_b_toldelta = c10_c_toldelta;
}

static void c10_addBoundToActiveSetMatrix_(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_b_obj, int32_T c10_idx_local, c10_s_flSfA4tA26WyP6kjP59eL *c10_c_obj)
{
  *c10_c_obj = *c10_b_obj;
  c10_b_addBoundToActiveSetMatrix_(chartInstance, c10_sp, c10_c_obj,
    c10_idx_local);
}

static void c10_checkStoppingAndUpdateFval(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, int32_T c10_activeSetChangeID, coder::
  array<real_T, 1U> &c10_f, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_memspace, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_objective, c10_s_flSfA4tA26WyP6kjP59eL *c10_i_workingset,
  c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager, c10_scZhlMkNxPxOgM0FLkVrfPH
  *c10_b_options, c10_sL9bDKomAYkxZSVrG9w6En c10_runTimeOptions, boolean_T
  c10_updateFval, int32_T *c10_b_activeSetChangeID, c10_s_pF7WiHvRtoO0ktfmCER3HD
  *c10_b_solution, c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_b_memspace,
  c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_objective, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_j_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_c_qrmanager)
{
  coder::array<real_T, 1U> c10_b_f;
  c10_scZhlMkNxPxOgM0FLkVrfPH c10_c_options;
  int32_T c10_c_activeSetChangeID;
  int32_T c10_i;
  int32_T c10_loop_ub;
  c10_c_activeSetChangeID = c10_activeSetChangeID;
  *c10_b_solution = *c10_solution;
  *c10_b_memspace = *c10_memspace;
  *c10_b_objective = *c10_objective;
  *c10_j_workingset = *c10_i_workingset;
  *c10_c_qrmanager = *c10_b_qrmanager;
  c10_b_f.set_size(&c10_qg_emlrtRTEI, c10_sp, c10_f.size(0));
  c10_loop_ub = c10_f.size(0) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_b_f[c10_i] = c10_f[c10_i];
  }

  c10_c_options = *c10_b_options;
  c10_b_checkStoppingAndUpdateFval(chartInstance, c10_sp,
    &c10_c_activeSetChangeID, c10_b_f, c10_b_solution, c10_b_memspace,
    c10_b_objective, c10_j_workingset, c10_c_qrmanager, &c10_c_options,
    c10_runTimeOptions, c10_updateFval);
  *c10_b_activeSetChangeID = c10_c_activeSetChangeID;
}

static void c10_computeFirstOrderOpt(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_objective, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_i_workingset, coder::array<real_T, 2U> &c10_workspace,
  c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_b_solution, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_b_objective, coder::array<real_T, 2U> &c10_b_workspace)
{
  c10_s_flSfA4tA26WyP6kjP59eL c10_j_workingset;
  int32_T c10_i;
  int32_T c10_loop_ub;
  *c10_b_solution = *c10_solution;
  *c10_b_objective = *c10_objective;
  c10_b_workspace.set_size(&c10_rg_emlrtRTEI, c10_sp, c10_workspace.size(0),
    c10_workspace.size(1));
  c10_loop_ub = c10_workspace.size(0) * c10_workspace.size(1) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_b_workspace[c10_i] = c10_workspace[c10_i];
  }

  c10_j_workingset = *c10_i_workingset;
  c10_b_computeFirstOrderOpt(chartInstance, c10_sp, c10_b_solution,
    c10_b_objective, &c10_j_workingset, c10_b_workspace);
}

static void c10_computeGrad(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_obj, coder::array<
  real_T, 2U> &c10_c_H, coder::array<real_T, 1U> &c10_f, coder::array<real_T, 1U>
  &c10_x, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_c_obj)
{
  coder::array<real_T, 2U> c10_d_H;
  coder::array<real_T, 1U> c10_b_f;
  coder::array<real_T, 1U> c10_b_x;
  int32_T c10_b_loop_ub;
  int32_T c10_c_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_loop_ub;
  *c10_c_obj = *c10_b_obj;
  c10_d_H.set_size(&c10_sg_emlrtRTEI, c10_sp, c10_c_H.size(0), c10_c_H.size(1));
  c10_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_d_H[c10_i] = c10_c_H[c10_i];
  }

  c10_b_f.set_size(&c10_sg_emlrtRTEI, c10_sp, c10_f.size(0));
  c10_b_loop_ub = c10_f.size(0) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_b_f[c10_i1] = c10_f[c10_i1];
  }

  c10_b_x.set_size(&c10_sg_emlrtRTEI, c10_sp, c10_x.size(0));
  c10_c_loop_ub = c10_x.size(0) - 1;
  for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
    c10_b_x[c10_i2] = c10_x[c10_i2];
  }

  c10_b_computeGrad(chartInstance, c10_sp, c10_c_obj, c10_d_H, c10_b_f, c10_b_x);
}

static void c10_b_linearForm_(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_obj, coder::array<
  real_T, 1U> &c10_workspace, coder::array<real_T, 2U> &c10_c_H, coder::array<
  real_T, 1U> &c10_f, coder::array<real_T, 1U> &c10_x, coder::array<real_T, 1U>
  &c10_b_workspace)
{
  coder::array<real_T, 2U> c10_d_H;
  coder::array<real_T, 1U> c10_b_f;
  coder::array<real_T, 1U> c10_b_x;
  c10_s_saWPFfMboRdWeRqIEJ4x8C c10_c_obj;
  int32_T c10_b_loop_ub;
  int32_T c10_c_loop_ub;
  int32_T c10_d_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_loop_ub;
  c10_b_workspace.set_size(&c10_cg_emlrtRTEI, c10_sp, c10_workspace.size(0));
  c10_loop_ub = c10_workspace.size(0) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_b_workspace[c10_i] = c10_workspace[c10_i];
  }

  c10_c_obj = *c10_b_obj;
  c10_d_H.set_size(&c10_cg_emlrtRTEI, c10_sp, c10_c_H.size(0), c10_c_H.size(1));
  c10_b_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_d_H[c10_i1] = c10_c_H[c10_i1];
  }

  c10_b_f.set_size(&c10_cg_emlrtRTEI, c10_sp, c10_f.size(0));
  c10_c_loop_ub = c10_f.size(0) - 1;
  for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
    c10_b_f[c10_i2] = c10_f[c10_i2];
  }

  c10_b_x.set_size(&c10_cg_emlrtRTEI, c10_sp, c10_x.size(0));
  c10_d_loop_ub = c10_x.size(0) - 1;
  for (c10_i3 = 0; c10_i3 <= c10_d_loop_ub; c10_i3++) {
    c10_b_x[c10_i3] = c10_x[c10_i3];
  }

  c10_d_linearForm_(chartInstance, c10_sp, &c10_c_obj, c10_b_workspace, c10_d_H,
                    c10_b_f, c10_b_x);
}

static void c10_sortLambdaQP(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, real_T c10_lambda_data[], int32_T c10_lambda_size[1],
  c10_s_flSfA4tA26WyP6kjP59eL *c10_k_WorkingSet, coder::array<real_T, 2U>
  &c10_workspace, real_T c10_b_lambda_data[], int32_T c10_b_lambda_size[1],
  coder::array<real_T, 2U> &c10_b_workspace)
{
  c10_s_flSfA4tA26WyP6kjP59eL c10_m_WorkingSet;
  int32_T c10_b_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_loop_ub;
  c10_b_lambda_size[0] = c10_lambda_size[0];
  c10_loop_ub = c10_lambda_size[0] - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_b_lambda_data[c10_i] = c10_lambda_data[c10_i];
  }

  c10_b_workspace.set_size(&c10_tg_emlrtRTEI, c10_sp, c10_workspace.size(0),
    c10_workspace.size(1));
  c10_b_loop_ub = c10_workspace.size(0) * c10_workspace.size(1) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_b_workspace[c10_i1] = c10_workspace[c10_i1];
  }

  c10_m_WorkingSet = *c10_k_WorkingSet;
  c10_b_sortLambdaQP(chartInstance, c10_sp, c10_b_lambda_data, c10_b_lambda_size,
                     &c10_m_WorkingSet, c10_b_workspace);
}

static void c10_dealLambdaIntoStruct(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_rT6K4jgKQs07oLkxgXMCC *c10_lambda,
  c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_k_WorkingSet, c10_s_rT6K4jgKQs07oLkxgXMCC *c10_b_lambda)
{
  c10_s_flSfA4tA26WyP6kjP59eL c10_m_WorkingSet;
  c10_s_pF7WiHvRtoO0ktfmCER3HD c10_b_solution;
  *c10_b_lambda = *c10_lambda;
  c10_b_solution = *c10_solution;
  c10_m_WorkingSet = *c10_k_WorkingSet;
  c10_b_dealLambdaIntoStruct(chartInstance, c10_sp, c10_b_lambda,
    &c10_b_solution, &c10_m_WorkingSet);
}

static void c10_c_indexShapeCheck(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, int32_T c10_matrixSize[2], int32_T c10_indexSize[2])
{
  static char_T c10_b_cv[33] = { 'C', 'o', 'd', 'e', 'r', ':', 'F', 'E', ':',
    'P', 'o', 't', 'e', 'n', 't', 'i', 'a', 'l', 'M', 'a', 't', 'r', 'i', 'x',
    'M', 'a', 't', 'r', 'i', 'x', '_', 'M', 'V' };

  emlrtStack c10_st;
  const mxArray *c10_b_y = NULL;
  const mxArray *c10_y = NULL;
  boolean_T c10_b;
  boolean_T c10_b_c;
  boolean_T c10_b_nonSingletonDimFound;
  boolean_T c10_c_c;
  boolean_T c10_d_c;
  boolean_T c10_e_b;
  boolean_T c10_e_c;
  boolean_T c10_nonSingletonDimFound;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_nonSingletonDimFound = false;
  if (c10_matrixSize[0] != 1) {
    c10_nonSingletonDimFound = true;
  }

  if (c10_matrixSize[1] != 1) {
    if (c10_nonSingletonDimFound) {
      c10_b = false;
    } else {
      c10_nonSingletonDimFound = true;
      c10_b = c10_nonSingletonDimFound;
    }
  } else {
    c10_b = c10_nonSingletonDimFound;
  }

  if (c10_b) {
    c10_b_nonSingletonDimFound = false;
    if (c10_indexSize[1] != 1) {
      c10_b_nonSingletonDimFound = true;
    }

    c10_e_b = c10_b_nonSingletonDimFound;
    if (c10_e_b) {
      if (c10_matrixSize[0] != 1) {
        c10_d_c = true;
      } else {
        c10_d_c = false;
      }

      if (c10_d_c || (static_cast<int32_T>(c10_matrixSize[1] == 1) !=
                      static_cast<int32_T>(c10_indexSize[1] == 1))) {
        c10_d_c = true;
      } else {
        c10_d_c = false;
      }

      c10_e_c = c10_d_c;
      if (c10_e_c) {
        c10_b_c = true;
      } else {
        c10_b_c = false;
      }
    } else {
      c10_b_c = false;
    }
  } else {
    c10_b_c = false;
  }

  c10_st.site = &c10_sj_emlrtRSI;
  c10_c_c = c10_b_c;
  if (c10_c_c) {
    c10_y = NULL;
    sf_mex_assign(&c10_y, sf_mex_create("y", c10_b_cv, 10, 0U, 1U, 0U, 2, 1, 33),
                  false);
    c10_b_y = NULL;
    sf_mex_assign(&c10_b_y, sf_mex_create("y", c10_b_cv, 10, 0U, 1U, 0U, 2, 1,
      33), false);
    sf_mex_call(&c10_st, &c10_b_emlrtMCI, "error", 0U, 2U, 14, c10_y, 14,
                sf_mex_call(&c10_st, NULL, "getString", 1U, 1U, 14, sf_mex_call(
      &c10_st, NULL, "message", 1U, 1U, 14, c10_b_y)));
  }
}

static real_T c10_maximum(SFc10_ACCMPCInstanceStruct *chartInstance, real_T
  c10_x[3])
{
  real_T c10_b_ex;
  real_T c10_b_x;
  real_T c10_c_ex;
  real_T c10_c_x;
  real_T c10_d_x;
  real_T c10_e_x;
  int32_T c10_b_k;
  int32_T c10_first;
  int32_T c10_i;
  int32_T c10_idx;
  int32_T c10_k;
  boolean_T c10_b;
  boolean_T c10_b_p;
  boolean_T c10_e_b;
  boolean_T c10_exitg1;
  boolean_T c10_p;
  c10_b_x = c10_x[0];
  c10_c_x = c10_b_x;
  c10_b = muDoubleScalarIsNaN(c10_c_x);
  c10_p = !c10_b;
  if (c10_p) {
    c10_idx = 1;
  } else {
    c10_idx = 0;
    c10_k = 2;
    c10_exitg1 = false;
    while ((!c10_exitg1) && (c10_k < 4)) {
      c10_d_x = c10_x[c10_k - 1];
      c10_e_x = c10_d_x;
      c10_e_b = muDoubleScalarIsNaN(c10_e_x);
      c10_b_p = !c10_e_b;
      if (c10_b_p) {
        c10_idx = c10_k;
        c10_exitg1 = true;
      } else {
        c10_k++;
      }
    }
  }

  if (c10_idx == 0) {
    c10_b_ex = c10_x[0];
  } else {
    c10_first = c10_idx - 1;
    c10_c_ex = c10_x[c10_first];
    c10_i = c10_first;
    for (c10_b_k = c10_i + 2; c10_b_k < 4; c10_b_k++) {
      if (c10_c_ex < c10_x[c10_b_k - 1]) {
        c10_c_ex = c10_x[c10_b_k - 1];
      }
    }

    c10_b_ex = c10_c_ex;
  }

  return c10_b_ex;
}

static real_T c10_b_minimum(SFc10_ACCMPCInstanceStruct *chartInstance, real_T
  c10_x[3])
{
  real_T c10_b_ex;
  real_T c10_b_x;
  real_T c10_c_ex;
  real_T c10_c_x;
  real_T c10_d_x;
  real_T c10_e_x;
  int32_T c10_b_k;
  int32_T c10_first;
  int32_T c10_i;
  int32_T c10_idx;
  int32_T c10_k;
  boolean_T c10_b;
  boolean_T c10_b_p;
  boolean_T c10_e_b;
  boolean_T c10_exitg1;
  boolean_T c10_p;
  c10_b_x = c10_x[0];
  c10_c_x = c10_b_x;
  c10_b = muDoubleScalarIsNaN(c10_c_x);
  c10_p = !c10_b;
  if (c10_p) {
    c10_idx = 1;
  } else {
    c10_idx = 0;
    c10_k = 2;
    c10_exitg1 = false;
    while ((!c10_exitg1) && (c10_k < 4)) {
      c10_d_x = c10_x[c10_k - 1];
      c10_e_x = c10_d_x;
      c10_e_b = muDoubleScalarIsNaN(c10_e_x);
      c10_b_p = !c10_e_b;
      if (c10_b_p) {
        c10_idx = c10_k;
        c10_exitg1 = true;
      } else {
        c10_k++;
      }
    }
  }

  if (c10_idx == 0) {
    c10_b_ex = c10_x[0];
  } else {
    c10_first = c10_idx - 1;
    c10_c_ex = c10_x[c10_first];
    c10_i = c10_first;
    for (c10_b_k = c10_i + 2; c10_b_k < 4; c10_b_k++) {
      if (c10_c_ex > c10_x[c10_b_k - 1]) {
        c10_c_ex = c10_x[c10_b_k - 1];
      }
    }

    c10_b_ex = c10_c_ex;
  }

  return c10_b_ex;
}

static const mxArray *c10_emlrt_marshallOut(SFc10_ACCMPCInstanceStruct
  *chartInstance, const char_T c10_u[31])
{
  const mxArray *c10_y = NULL;
  c10_y = NULL;
  sf_mex_assign(&c10_y, sf_mex_create("y", c10_u, 10, 0U, 1U, 0U, 2, 1, 31),
                false);
  return c10_y;
}

static const mxArray *c10_b_emlrt_marshallOut(SFc10_ACCMPCInstanceStruct
  *chartInstance, const char_T c10_u[39])
{
  const mxArray *c10_y = NULL;
  c10_y = NULL;
  sf_mex_assign(&c10_y, sf_mex_create("y", c10_u, 10, 0U, 1U, 0U, 2, 1, 39),
                false);
  return c10_y;
}

const mxArray *sf_c10_ACCMPC_get_eml_resolved_functions_info()
{
  const mxArray *c10_nameCaptureInfo = NULL;
  const char_T *c10_data[5] = {
    "789cdd94cb4ac340148627a2a2881750dcb8f2011444547097a6894a6dad348268a48de9b44d9b99099989978df802e2ab884fe252f4555cd8db34cd608c188c"
    "e8d99c9cfc67e63b39901f487b79090030037af130d5cbd3fd7aae9f474038445d12faa4703b1803a3a1735cbfef678b6006af58afc02682839355826c6c62a6",
    "5fbb10789012e70256bb4acd76a06e23581a2e0a9d0a6943d2a0e8489d67a501ad56c947c06bd0604267b818eca312f1bda331fb1043dc87d8c77957dfe4f1fb"
    "e763785c573c683278582ccb99928d7cc7c6add01c9584738c47ced15328f37c8b05bca784bc56242fac9faa67cab67144a1470dca60cd34b2c4f211c48c1aaa",
    "5a9415a59c2f2a65c5a472d62ee7657d5fce18edb7ed972b72e6a02f189a8f2d66134c8db6408d0fb6b98ababcb87dce7ef1fbc41cf44f74f3247991d2e42d2c"
    "dfbda6c9e3f15bbca4ffe562046f4ed09b85b566a6b1e5105ad3d7d1a5daac6be7782798a318c3899b0344d469dd5f8938ff537e7afb4d1ebf7f2986c775dd33",
    "31ad110fe9240b31855afbd177cc8e4784e6a9249c27ce57abc43f7760c07b4ec8a3420d843eaeff8caf7eb2d594fd75534fd75fdd9bb7c734793cfebbbfbabb"
    "76614dcf9decbbc7aab7a1e5fc4bb75e57ffbebfbe034e1ab5f7", "" };

  c10_nameCaptureInfo = NULL;
  emlrtNameCaptureMxArrayR2016a(&c10_data[0], 3016U, &c10_nameCaptureInfo);
  return c10_nameCaptureInfo;
}

static void c10_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_nullptr, const char_T *c10_identifier, real_T c10_y[4])
{
  emlrtMsgIdentifier c10_thisId;
  c10_thisId.fIdentifier = const_cast<const char_T *>(c10_identifier);
  c10_thisId.fParent = NULL;
  c10_thisId.bParentIsCell = false;
  c10_b_emlrt_marshallIn(chartInstance, sf_mex_dup(c10_nullptr), &c10_thisId,
    c10_y);
  sf_mex_destroy(&c10_nullptr);
}

static void c10_b_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId, real_T c10_y[4])
{
  real_T c10_dv[4];
  int32_T c10_i;
  sf_mex_import(c10_parentId, sf_mex_dup(c10_u), c10_dv, 1, 0, 0U, 1, 0U, 2, 4,
                1);
  for (c10_i = 0; c10_i < 4; c10_i++) {
    c10_y[c10_i] = c10_dv[c10_i];
  }

  sf_mex_destroy(&c10_u);
}

static real_T c10_c_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_nullptr, const char_T *c10_identifier)
{
  emlrtMsgIdentifier c10_thisId;
  real_T c10_y;
  c10_thisId.fIdentifier = const_cast<const char_T *>(c10_identifier);
  c10_thisId.fParent = NULL;
  c10_thisId.bParentIsCell = false;
  c10_y = c10_d_emlrt_marshallIn(chartInstance, sf_mex_dup(c10_nullptr),
    &c10_thisId);
  sf_mex_destroy(&c10_nullptr);
  return c10_y;
}

static real_T c10_d_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId)
{
  real_T c10_d;
  real_T c10_y;
  sf_mex_import(c10_parentId, sf_mex_dup(c10_u), &c10_d, 1, 0, 0U, 0, 0U, 0);
  c10_y = c10_d;
  sf_mex_destroy(&c10_u);
  return c10_y;
}

static void c10_e_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, const mxArray *c10_nullptr, const char_T
  *c10_identifier, coder::array<real_T, 2U> &c10_y)
{
  emlrtMsgIdentifier c10_thisId;
  c10_thisId.fIdentifier = const_cast<const char_T *>(c10_identifier);
  c10_thisId.fParent = NULL;
  c10_thisId.bParentIsCell = false;
  c10_f_emlrt_marshallIn(chartInstance, c10_sp, sf_mex_dup(c10_nullptr),
    &c10_thisId, c10_y);
  sf_mex_destroy(&c10_nullptr);
}

static void c10_f_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, const mxArray *c10_u, const emlrtMsgIdentifier
  *c10_parentId, coder::array<real_T, 2U> &c10_y)
{
  coder::array<real_T, 2U> c10_b_r;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_loop_ub;
  uint32_T c10_uv[2];
  boolean_T c10_b_bv[2];
  for (c10_i = 0; c10_i < 2; c10_i++) {
    c10_uv[c10_i] = MAX_uint32_T;
  }

  c10_b_r.set_size(static_cast<emlrtRTEInfo *>(NULL), c10_sp,
                   sf_mex_get_dimension(c10_u, 0), sf_mex_get_dimension(c10_u, 1));
  for (c10_i1 = 0; c10_i1 < 2; c10_i1++) {
    c10_b_bv[c10_i1] = true;
  }

  sf_mex_import_vs(c10_parentId, sf_mex_dup(c10_u), &(c10_b_r.data())[0], 1, 0,
                   0U, 1, 0U, 2, &c10_b_bv[0], c10_uv, c10_b_r.size());
  c10_y.set_size(static_cast<emlrtRTEInfo *>(NULL), c10_sp, c10_b_r.size(0),
                 c10_b_r.size(1));
  c10_loop_ub = c10_b_r.size(0) * c10_b_r.size(1) - 1;
  for (c10_i2 = 0; c10_i2 <= c10_loop_ub; c10_i2++) {
    c10_y[c10_i2] = c10_b_r[c10_i2];
  }

  sf_mex_destroy(&c10_u);
}

static void c10_g_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, const mxArray *c10_nullptr, const char_T
  *c10_identifier, boolean_T *c10_svPtr, coder::array<real_T, 2U> &c10_y)
{
  emlrtMsgIdentifier c10_thisId;
  c10_thisId.fIdentifier = const_cast<const char_T *>(c10_identifier);
  c10_thisId.fParent = NULL;
  c10_thisId.bParentIsCell = false;
  c10_h_emlrt_marshallIn(chartInstance, c10_sp, sf_mex_dup(c10_nullptr),
    &c10_thisId, c10_svPtr, c10_y);
  sf_mex_destroy(&c10_nullptr);
}

static void c10_h_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, const mxArray *c10_u, const emlrtMsgIdentifier
  *c10_parentId, boolean_T *c10_svPtr, coder::array<real_T, 2U> &c10_y)
{
  coder::array<real_T, 2U> c10_b_r;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_loop_ub;
  uint32_T c10_uv[2];
  boolean_T c10_b_bv[2];
  for (c10_i = 0; c10_i < 2; c10_i++) {
    c10_uv[c10_i] = 602U + 4294966693U * static_cast<uint32_T>(c10_i);
  }

  if (mxIsEmpty(c10_u)) {
    *c10_svPtr = false;
  } else {
    *c10_svPtr = true;
    c10_b_r.set_size(static_cast<emlrtRTEInfo *>(NULL), c10_sp,
                     sf_mex_get_dimension(c10_u, 0), sf_mex_get_dimension(c10_u,
      1));
    for (c10_i1 = 0; c10_i1 < 2; c10_i1++) {
      c10_b_bv[c10_i1] = true;
    }

    sf_mex_import_vs(c10_parentId, sf_mex_dup(c10_u), &(c10_b_r.data())[0], 1, 0,
                     0U, 1, 0U, 2, &c10_b_bv[0], c10_uv, c10_b_r.size());
    c10_y.set_size(static_cast<emlrtRTEInfo *>(NULL), c10_sp, c10_b_r.size(0),
                   c10_b_r.size(1));
    c10_loop_ub = c10_b_r.size(0) * c10_b_r.size(1) - 1;
    for (c10_i2 = 0; c10_i2 <= c10_loop_ub; c10_i2++) {
      c10_y[c10_i2] = c10_b_r[c10_i2];
    }
  }

  sf_mex_destroy(&c10_u);
}

static void c10_i_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, const mxArray *c10_nullptr, const char_T
  *c10_identifier, boolean_T *c10_svPtr, coder::array<real_T, 2U> &c10_y)
{
  emlrtMsgIdentifier c10_thisId;
  c10_thisId.fIdentifier = const_cast<const char_T *>(c10_identifier);
  c10_thisId.fParent = NULL;
  c10_thisId.bParentIsCell = false;
  c10_j_emlrt_marshallIn(chartInstance, c10_sp, sf_mex_dup(c10_nullptr),
    &c10_thisId, c10_svPtr, c10_y);
  sf_mex_destroy(&c10_nullptr);
}

static void c10_j_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, const mxArray *c10_u, const emlrtMsgIdentifier
  *c10_parentId, boolean_T *c10_svPtr, coder::array<real_T, 2U> &c10_y)
{
  coder::array<real_T, 2U> c10_b_r;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_loop_ub;
  uint32_T c10_uv[2];
  boolean_T c10_b_bv[2];
  for (c10_i = 0; c10_i < 2; c10_i++) {
    c10_uv[c10_i] = MAX_uint32_T;
  }

  if (mxIsEmpty(c10_u)) {
    *c10_svPtr = false;
  } else {
    *c10_svPtr = true;
    c10_b_r.set_size(static_cast<emlrtRTEInfo *>(NULL), c10_sp,
                     sf_mex_get_dimension(c10_u, 0), sf_mex_get_dimension(c10_u,
      1));
    for (c10_i1 = 0; c10_i1 < 2; c10_i1++) {
      c10_b_bv[c10_i1] = true;
    }

    sf_mex_import_vs(c10_parentId, sf_mex_dup(c10_u), &(c10_b_r.data())[0], 1, 0,
                     0U, 1, 0U, 2, &c10_b_bv[0], c10_uv, c10_b_r.size());
    c10_y.set_size(static_cast<emlrtRTEInfo *>(NULL), c10_sp, c10_b_r.size(0),
                   c10_b_r.size(1));
    c10_loop_ub = c10_b_r.size(0) * c10_b_r.size(1) - 1;
    for (c10_i2 = 0; c10_i2 <= c10_loop_ub; c10_i2++) {
      c10_y[c10_i2] = c10_b_r[c10_i2];
    }
  }

  sf_mex_destroy(&c10_u);
}

static real_T c10_k_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_nullptr, const char_T *c10_identifier, boolean_T *c10_svPtr)
{
  emlrtMsgIdentifier c10_thisId;
  real_T c10_y;
  c10_thisId.fIdentifier = const_cast<const char_T *>(c10_identifier);
  c10_thisId.fParent = NULL;
  c10_thisId.bParentIsCell = false;
  c10_y = c10_m_emlrt_marshallIn(chartInstance, sf_mex_dup(c10_nullptr),
    &c10_thisId, c10_svPtr);
  sf_mex_destroy(&c10_nullptr);
  return c10_y;
}

static real_T c10_m_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId, boolean_T
  *c10_svPtr)
{
  real_T c10_d;
  real_T c10_y;
  if (mxIsEmpty(c10_u)) {
    *c10_svPtr = false;
  } else {
    *c10_svPtr = true;
    sf_mex_import(c10_parentId, sf_mex_dup(c10_u), &c10_d, 1, 0, 0U, 0, 0U, 0);
    c10_y = c10_d;
  }

  sf_mex_destroy(&c10_u);
  return c10_y;
}

static void c10_o_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, const mxArray *c10_nullptr, const char_T
  *c10_identifier, boolean_T *c10_svPtr, coder::array<real_T, 1U> &c10_y)
{
  emlrtMsgIdentifier c10_thisId;
  c10_thisId.fIdentifier = const_cast<const char_T *>(c10_identifier);
  c10_thisId.fParent = NULL;
  c10_thisId.bParentIsCell = false;
  c10_p_emlrt_marshallIn(chartInstance, c10_sp, sf_mex_dup(c10_nullptr),
    &c10_thisId, c10_svPtr, c10_y);
  sf_mex_destroy(&c10_nullptr);
}

static void c10_p_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, const mxArray *c10_u, const emlrtMsgIdentifier
  *c10_parentId, boolean_T *c10_svPtr, coder::array<real_T, 1U> &c10_y)
{
  coder::array<real_T, 1U> c10_b_r;
  int32_T c10_i;
  int32_T c10_loop_ub;
  uint32_T c10_uv[1];
  boolean_T c10_b_bv[1];
  c10_uv[0] = MAX_uint32_T;
  if (mxIsEmpty(c10_u)) {
    *c10_svPtr = false;
  } else {
    *c10_svPtr = true;
    c10_b_r.set_size(static_cast<emlrtRTEInfo *>(NULL), c10_sp,
                     sf_mex_get_dimension(c10_u, 0));
    c10_b_bv[0] = true;
    sf_mex_import_vs(c10_parentId, sf_mex_dup(c10_u), &(c10_b_r.data())[0], 1, 0,
                     0U, 1, 0U, 1, &c10_b_bv[0], c10_uv, c10_b_r.size());
    c10_y.set_size(static_cast<emlrtRTEInfo *>(NULL), c10_sp, c10_b_r.size(0));
    c10_loop_ub = c10_b_r.size(0) - 1;
    for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
      c10_y[c10_i] = c10_b_r[c10_i];
    }
  }

  sf_mex_destroy(&c10_u);
}

static void c10_q_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_nullptr, const char_T *c10_identifier, boolean_T *c10_svPtr,
  real_T c10_y_data[], int32_T c10_y_size[1])
{
  emlrtMsgIdentifier c10_thisId;
  c10_thisId.fIdentifier = const_cast<const char_T *>(c10_identifier);
  c10_thisId.fParent = NULL;
  c10_thisId.bParentIsCell = false;
  c10_r_emlrt_marshallIn(chartInstance, sf_mex_dup(c10_nullptr), &c10_thisId,
    c10_svPtr, c10_y_data, c10_y_size);
  sf_mex_destroy(&c10_nullptr);
}

static void c10_r_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId, boolean_T
  *c10_svPtr, real_T c10_y_data[], int32_T c10_y_size[1])
{
  real_T c10_tmp_data[602];
  int32_T c10_tmp_size[1];
  int32_T c10_i;
  int32_T c10_loop_ub;
  uint32_T c10_uv[1];
  boolean_T c10_b_bv[1];
  c10_uv[0] = 602U;
  if (mxIsEmpty(c10_u)) {
    *c10_svPtr = false;
    c10_y_size[0] = 0;
  } else {
    *c10_svPtr = true;
    c10_tmp_size[0] = sf_mex_get_dimension(c10_u, 0);
    c10_b_bv[0] = true;
    sf_mex_import_vs(c10_parentId, sf_mex_dup(c10_u), &c10_tmp_data, 1, 0, 0U, 1,
                     0U, 1, &c10_b_bv[0], c10_uv, c10_tmp_size);
    c10_y_size[0] = c10_tmp_size[0];
    c10_loop_ub = c10_tmp_size[0] - 1;
    for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
      c10_y_data[c10_i] = c10_tmp_data[c10_i];
    }
  }

  sf_mex_destroy(&c10_u);
}

static void c10_s_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_nullptr, const char_T *c10_identifier, boolean_T *c10_svPtr,
  c10_scZhlMkNxPxOgM0FLkVrfPH *c10_y)
{
  emlrtMsgIdentifier c10_thisId;
  c10_thisId.fIdentifier = const_cast<const char_T *>(c10_identifier);
  c10_thisId.fParent = NULL;
  c10_thisId.bParentIsCell = false;
  c10_t_emlrt_marshallIn(chartInstance, sf_mex_dup(c10_nullptr), &c10_thisId,
    c10_svPtr, c10_y);
  sf_mex_destroy(&c10_nullptr);
}

static void c10_t_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId, boolean_T
  *c10_svPtr, c10_scZhlMkNxPxOgM0FLkVrfPH *c10_y)
{
  static const char_T *c10_fieldNames[32] = { "InitDamping",
    "FiniteDifferenceType", "SpecifyObjectiveGradient", "ScaleProblem",
    "SpecifyConstraintGradient", "NonFiniteSupport", "IterDisplaySQP",
    "FiniteDifferenceStepSize", "MaxFunctionEvaluations", "TypicalX",
    "IterDisplayQP", "PricingTolerance", "Algorithm", "ObjectiveLimit",
    "ConstraintTolerance", "OptimalityTolerance", "StepTolerance",
    "MaxIterations", "FunctionTolerance", "SolverName", "CheckGradients",
    "Diagnostics", "DiffMaxChange", "DiffMinChange", "Display", "FunValCheck",
    "PlotFcn", "OutputFcn", "UseParallel", "JacobianMultiplyFcn", "LinearSolver",
    "SubproblemAlgorithm" };

  emlrtMsgIdentifier c10_thisId;
  c10_thisId.fParent = c10_parentId;
  c10_thisId.bParentIsCell = false;
  if (mxIsEmpty(c10_u)) {
    *c10_svPtr = false;
  } else {
    *c10_svPtr = true;
    sf_mex_check_struct(c10_parentId, c10_u, 32, &c10_fieldNames[0], 0U, NULL);
    c10_thisId.fIdentifier = "InitDamping";
    c10_y->InitDamping = c10_d_emlrt_marshallIn(chartInstance, sf_mex_dup
      (sf_mex_getfield(c10_u, "InitDamping", "InitDamping", 0)), &c10_thisId);
    c10_thisId.fIdentifier = "FiniteDifferenceType";
    c10_u_emlrt_marshallIn(chartInstance, sf_mex_dup(sf_mex_getfield(c10_u,
      "FiniteDifferenceType", "FiniteDifferenceType", 0)), &c10_thisId,
      c10_y->FiniteDifferenceType);
    c10_thisId.fIdentifier = "SpecifyObjectiveGradient";
    c10_y->SpecifyObjectiveGradient = c10_v_emlrt_marshallIn(chartInstance,
      sf_mex_dup(sf_mex_getfield(c10_u, "SpecifyObjectiveGradient",
      "SpecifyObjectiveGradient", 0)), &c10_thisId);
    c10_thisId.fIdentifier = "ScaleProblem";
    c10_y->ScaleProblem = c10_v_emlrt_marshallIn(chartInstance, sf_mex_dup
      (sf_mex_getfield(c10_u, "ScaleProblem", "ScaleProblem", 0)), &c10_thisId);
    c10_thisId.fIdentifier = "SpecifyConstraintGradient";
    c10_y->SpecifyConstraintGradient = c10_v_emlrt_marshallIn(chartInstance,
      sf_mex_dup(sf_mex_getfield(c10_u, "SpecifyConstraintGradient",
      "SpecifyConstraintGradient", 0)), &c10_thisId);
    c10_thisId.fIdentifier = "NonFiniteSupport";
    c10_y->NonFiniteSupport = c10_v_emlrt_marshallIn(chartInstance, sf_mex_dup
      (sf_mex_getfield(c10_u, "NonFiniteSupport", "NonFiniteSupport", 0)),
      &c10_thisId);
    c10_thisId.fIdentifier = "IterDisplaySQP";
    c10_y->IterDisplaySQP = c10_v_emlrt_marshallIn(chartInstance, sf_mex_dup
      (sf_mex_getfield(c10_u, "IterDisplaySQP", "IterDisplaySQP", 0)),
      &c10_thisId);
    c10_thisId.fIdentifier = "FiniteDifferenceStepSize";
    c10_y->FiniteDifferenceStepSize = c10_d_emlrt_marshallIn(chartInstance,
      sf_mex_dup(sf_mex_getfield(c10_u, "FiniteDifferenceStepSize",
      "FiniteDifferenceStepSize", 0)), &c10_thisId);
    c10_thisId.fIdentifier = "MaxFunctionEvaluations";
    c10_y->MaxFunctionEvaluations = c10_d_emlrt_marshallIn(chartInstance,
      sf_mex_dup(sf_mex_getfield(c10_u, "MaxFunctionEvaluations",
      "MaxFunctionEvaluations", 0)), &c10_thisId);
    c10_thisId.fIdentifier = "TypicalX";
    c10_w_emlrt_marshallIn(chartInstance, sf_mex_dup(sf_mex_getfield(c10_u,
      "TypicalX", "TypicalX", 0)), &c10_thisId);
    c10_thisId.fIdentifier = "IterDisplayQP";
    c10_y->IterDisplayQP = c10_v_emlrt_marshallIn(chartInstance, sf_mex_dup
      (sf_mex_getfield(c10_u, "IterDisplayQP", "IterDisplayQP", 0)), &c10_thisId);
    c10_thisId.fIdentifier = "PricingTolerance";
    c10_y->PricingTolerance = c10_d_emlrt_marshallIn(chartInstance, sf_mex_dup
      (sf_mex_getfield(c10_u, "PricingTolerance", "PricingTolerance", 0)),
      &c10_thisId);
    c10_thisId.fIdentifier = "Algorithm";
    c10_x_emlrt_marshallIn(chartInstance, sf_mex_dup(sf_mex_getfield(c10_u,
      "Algorithm", "Algorithm", 0)), &c10_thisId, c10_y->Algorithm);
    c10_thisId.fIdentifier = "ObjectiveLimit";
    c10_y->ObjectiveLimit = c10_d_emlrt_marshallIn(chartInstance, sf_mex_dup
      (sf_mex_getfield(c10_u, "ObjectiveLimit", "ObjectiveLimit", 0)),
      &c10_thisId);
    c10_thisId.fIdentifier = "ConstraintTolerance";
    c10_y->ConstraintTolerance = c10_d_emlrt_marshallIn(chartInstance,
      sf_mex_dup(sf_mex_getfield(c10_u, "ConstraintTolerance",
      "ConstraintTolerance", 0)), &c10_thisId);
    c10_thisId.fIdentifier = "OptimalityTolerance";
    c10_y->OptimalityTolerance = c10_d_emlrt_marshallIn(chartInstance,
      sf_mex_dup(sf_mex_getfield(c10_u, "OptimalityTolerance",
      "OptimalityTolerance", 0)), &c10_thisId);
    c10_thisId.fIdentifier = "StepTolerance";
    c10_y->StepTolerance = c10_d_emlrt_marshallIn(chartInstance, sf_mex_dup
      (sf_mex_getfield(c10_u, "StepTolerance", "StepTolerance", 0)), &c10_thisId);
    c10_thisId.fIdentifier = "MaxIterations";
    c10_y->MaxIterations = c10_d_emlrt_marshallIn(chartInstance, sf_mex_dup
      (sf_mex_getfield(c10_u, "MaxIterations", "MaxIterations", 0)), &c10_thisId);
    c10_thisId.fIdentifier = "FunctionTolerance";
    c10_y->FunctionTolerance = c10_d_emlrt_marshallIn(chartInstance, sf_mex_dup
      (sf_mex_getfield(c10_u, "FunctionTolerance", "FunctionTolerance", 0)),
      &c10_thisId);
    c10_thisId.fIdentifier = "SolverName";
    c10_y_emlrt_marshallIn(chartInstance, sf_mex_dup(sf_mex_getfield(c10_u,
      "SolverName", "SolverName", 0)), &c10_thisId, c10_y->SolverName);
    c10_thisId.fIdentifier = "CheckGradients";
    c10_y->CheckGradients = c10_v_emlrt_marshallIn(chartInstance, sf_mex_dup
      (sf_mex_getfield(c10_u, "CheckGradients", "CheckGradients", 0)),
      &c10_thisId);
    c10_thisId.fIdentifier = "Diagnostics";
    c10_ab_emlrt_marshallIn(chartInstance, sf_mex_dup(sf_mex_getfield(c10_u,
      "Diagnostics", "Diagnostics", 0)), &c10_thisId, c10_y->Diagnostics);
    c10_thisId.fIdentifier = "DiffMaxChange";
    c10_y->DiffMaxChange = c10_d_emlrt_marshallIn(chartInstance, sf_mex_dup
      (sf_mex_getfield(c10_u, "DiffMaxChange", "DiffMaxChange", 0)), &c10_thisId);
    c10_thisId.fIdentifier = "DiffMinChange";
    c10_y->DiffMinChange = c10_d_emlrt_marshallIn(chartInstance, sf_mex_dup
      (sf_mex_getfield(c10_u, "DiffMinChange", "DiffMinChange", 0)), &c10_thisId);
    c10_thisId.fIdentifier = "Display";
    c10_ab_emlrt_marshallIn(chartInstance, sf_mex_dup(sf_mex_getfield(c10_u,
      "Display", "Display", 0)), &c10_thisId, c10_y->Display);
    c10_thisId.fIdentifier = "FunValCheck";
    c10_ab_emlrt_marshallIn(chartInstance, sf_mex_dup(sf_mex_getfield(c10_u,
      "FunValCheck", "FunValCheck", 0)), &c10_thisId, c10_y->FunValCheck);
    c10_thisId.fIdentifier = "PlotFcn";
    c10_w_emlrt_marshallIn(chartInstance, sf_mex_dup(sf_mex_getfield(c10_u,
      "PlotFcn", "PlotFcn", 0)), &c10_thisId);
    c10_thisId.fIdentifier = "OutputFcn";
    c10_w_emlrt_marshallIn(chartInstance, sf_mex_dup(sf_mex_getfield(c10_u,
      "OutputFcn", "OutputFcn", 0)), &c10_thisId);
    c10_thisId.fIdentifier = "UseParallel";
    c10_y->UseParallel = c10_v_emlrt_marshallIn(chartInstance, sf_mex_dup
      (sf_mex_getfield(c10_u, "UseParallel", "UseParallel", 0)), &c10_thisId);
    c10_thisId.fIdentifier = "JacobianMultiplyFcn";
    c10_w_emlrt_marshallIn(chartInstance, sf_mex_dup(sf_mex_getfield(c10_u,
      "JacobianMultiplyFcn", "JacobianMultiplyFcn", 0)), &c10_thisId);
    c10_thisId.fIdentifier = "LinearSolver";
    c10_bb_emlrt_marshallIn(chartInstance, sf_mex_dup(sf_mex_getfield(c10_u,
      "LinearSolver", "LinearSolver", 0)), &c10_thisId, c10_y->LinearSolver);
    c10_thisId.fIdentifier = "SubproblemAlgorithm";
    c10_cb_emlrt_marshallIn(chartInstance, sf_mex_dup(sf_mex_getfield(c10_u,
      "SubproblemAlgorithm", "SubproblemAlgorithm", 0)), &c10_thisId,
      c10_y->SubproblemAlgorithm);
  }

  sf_mex_destroy(&c10_u);
}

static void c10_u_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId, char_T c10_y[7])
{
  int32_T c10_i;
  char_T c10_b_cv[7];
  sf_mex_import(c10_parentId, sf_mex_dup(c10_u), c10_b_cv, 1, 10, 0U, 1, 0U, 2,
                1, 7);
  for (c10_i = 0; c10_i < 7; c10_i++) {
    c10_y[c10_i] = c10_b_cv[c10_i];
  }

  sf_mex_destroy(&c10_u);
}

static boolean_T c10_v_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct
  *chartInstance, const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId)
{
  boolean_T c10_b;
  boolean_T c10_y;
  sf_mex_import(c10_parentId, sf_mex_dup(c10_u), &c10_b, 1, 11, 0U, 0, 0U, 0);
  c10_y = c10_b;
  sf_mex_destroy(&c10_u);
  return c10_y;
}

static void c10_w_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId)
{
  sf_mex_import(c10_parentId, sf_mex_dup(c10_u), NULL, 1, 0, 0U, 1, 0U, 2, 0, 0);
  sf_mex_destroy(&c10_u);
}

static void c10_x_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId, char_T c10_y[10])
{
  int32_T c10_i;
  char_T c10_b_cv[10];
  sf_mex_import(c10_parentId, sf_mex_dup(c10_u), c10_b_cv, 1, 10, 0U, 1, 0U, 2,
                1, 10);
  for (c10_i = 0; c10_i < 10; c10_i++) {
    c10_y[c10_i] = c10_b_cv[c10_i];
  }

  sf_mex_destroy(&c10_u);
}

static void c10_y_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId, char_T c10_y[8])
{
  int32_T c10_i;
  char_T c10_b_cv[8];
  sf_mex_import(c10_parentId, sf_mex_dup(c10_u), c10_b_cv, 1, 10, 0U, 1, 0U, 2,
                1, 8);
  for (c10_i = 0; c10_i < 8; c10_i++) {
    c10_y[c10_i] = c10_b_cv[c10_i];
  }

  sf_mex_destroy(&c10_u);
}

static void c10_ab_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId, char_T c10_y[3])
{
  int32_T c10_i;
  char_T c10_b_cv[3];
  sf_mex_import(c10_parentId, sf_mex_dup(c10_u), c10_b_cv, 1, 10, 0U, 1, 0U, 2,
                1, 3);
  for (c10_i = 0; c10_i < 3; c10_i++) {
    c10_y[c10_i] = c10_b_cv[c10_i];
  }

  sf_mex_destroy(&c10_u);
}

static void c10_bb_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId, char_T c10_y[4])
{
  int32_T c10_i;
  char_T c10_b_cv[4];
  sf_mex_import(c10_parentId, sf_mex_dup(c10_u), c10_b_cv, 1, 10, 0U, 1, 0U, 2,
                1, 4);
  for (c10_i = 0; c10_i < 4; c10_i++) {
    c10_y[c10_i] = c10_b_cv[c10_i];
  }

  sf_mex_destroy(&c10_u);
}

static void c10_cb_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId, char_T c10_y[2])
{
  int32_T c10_i;
  char_T c10_b_cv[2];
  sf_mex_import(c10_parentId, sf_mex_dup(c10_u), c10_b_cv, 1, 10, 0U, 1, 0U, 2,
                1, 2);
  for (c10_i = 0; c10_i < 2; c10_i++) {
    c10_y[c10_i] = c10_b_cv[c10_i];
  }

  sf_mex_destroy(&c10_u);
}

static void c10_db_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_nullptr, const char_T *c10_identifier, boolean_T *c10_svPtr,
  real_T c10_y_data[], int32_T c10_y_size[1])
{
  emlrtMsgIdentifier c10_thisId;
  c10_thisId.fIdentifier = const_cast<const char_T *>(c10_identifier);
  c10_thisId.fParent = NULL;
  c10_thisId.bParentIsCell = false;
  c10_eb_emlrt_marshallIn(chartInstance, sf_mex_dup(c10_nullptr), &c10_thisId,
    c10_svPtr, c10_y_data, c10_y_size);
  sf_mex_destroy(&c10_nullptr);
}

static void c10_eb_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId, boolean_T
  *c10_svPtr, real_T c10_y_data[], int32_T c10_y_size[1])
{
  real_T c10_tmp_data[142];
  int32_T c10_tmp_size[1];
  int32_T c10_i;
  int32_T c10_loop_ub;
  uint32_T c10_uv[1];
  boolean_T c10_b_bv[1];
  c10_uv[0] = 142U;
  if (mxIsEmpty(c10_u)) {
    *c10_svPtr = false;
    c10_y_size[0] = 0;
  } else {
    *c10_svPtr = true;
    c10_tmp_size[0] = sf_mex_get_dimension(c10_u, 0);
    c10_b_bv[0] = true;
    sf_mex_import_vs(c10_parentId, sf_mex_dup(c10_u), &c10_tmp_data, 1, 0, 0U, 1,
                     0U, 1, &c10_b_bv[0], c10_uv, c10_tmp_size);
    c10_y_size[0] = c10_tmp_size[0];
    c10_loop_ub = c10_tmp_size[0] - 1;
    for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
      c10_y_data[c10_i] = c10_tmp_data[c10_i];
    }
  }

  sf_mex_destroy(&c10_u);
}

static uint8_T c10_fb_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_nullptr, const char_T *c10_identifier)
{
  emlrtMsgIdentifier c10_thisId;
  uint8_T c10_y;
  c10_thisId.fIdentifier = const_cast<const char_T *>(c10_identifier);
  c10_thisId.fParent = NULL;
  c10_thisId.bParentIsCell = false;
  c10_y = c10_gb_emlrt_marshallIn(chartInstance, sf_mex_dup(c10_nullptr),
    &c10_thisId);
  sf_mex_destroy(&c10_nullptr);
  return c10_y;
}

static uint8_T c10_gb_emlrt_marshallIn(SFc10_ACCMPCInstanceStruct *chartInstance,
  const mxArray *c10_u, const emlrtMsgIdentifier *c10_parentId)
{
  uint8_T c10_b_u;
  uint8_T c10_y;
  sf_mex_import(c10_parentId, sf_mex_dup(c10_u), &c10_b_u, 1, 3, 0U, 0, 0U, 0);
  c10_y = c10_b_u;
  sf_mex_destroy(&c10_u);
  return c10_y;
}

static void c10_slStringInitializeDynamicBuffers(SFc10_ACCMPCInstanceStruct
  *chartInstance)
{
}

static void c10_chart_data_browse_helper(SFc10_ACCMPCInstanceStruct
  *chartInstance, int32_T c10_ssIdNumber, const mxArray **c10_mxData, uint8_T
  *c10_isValueTooBig)
{
  const mxArray *c10_m = NULL;
  real_T c10_d;
  real_T c10_d1;
  real_T c10_d2;
  real_T c10_d3;
  real_T c10_d4;
  real_T c10_d5;
  real_T c10_d6;
  real_T c10_d7;
  uint64_T c10_u;
  uint64_T c10_u1;
  int32_T c10_i;
  int32_T c10_i1;
  *c10_mxData = NULL;
  *c10_mxData = NULL;
  *c10_isValueTooBig = 0U;
  switch (c10_ssIdNumber) {
   case 31U:
    c10_d = *chartInstance->c10_N_hor;
    sf_mex_assign(c10_mxData, sf_mex_create("mxData", &c10_d, 0, 0U, 0U, 0U, 0),
                  false);
    break;

   case 32U:
    sf_mex_assign(c10_mxData, sf_mex_create("mxData", *chartInstance->c10_Tvec,
      0, 0U, 1U, 0U, 2, 1, 20), false);
    break;

   case 5U:
    c10_d1 = *chartInstance->c10_fval;
    sf_mex_assign(c10_mxData, sf_mex_create("mxData", &c10_d1, 0, 0U, 0U, 0U, 0),
                  false);
    break;

   case 33U:
    c10_d2 = *chartInstance->c10_exitflag;
    sf_mex_assign(c10_mxData, sf_mex_create("mxData", &c10_d2, 0, 0U, 0U, 0U, 0),
                  false);
    break;

   case 8U:
    c10_d3 = *chartInstance->c10_s_measured;
    sf_mex_assign(c10_mxData, sf_mex_create("mxData", &c10_d3, 0, 0U, 0U, 0U, 0),
                  false);
    break;

   case 9U:
    c10_d4 = *chartInstance->c10_s_opt;
    sf_mex_assign(c10_mxData, sf_mex_create("mxData", &c10_d4, 0, 0U, 0U, 0U, 0),
                  false);
    break;

   case 10U:
    c10_d5 = *chartInstance->c10_v_opt;
    sf_mex_assign(c10_mxData, sf_mex_create("mxData", &c10_d5, 0, 0U, 0U, 0U, 0),
                  false);
    break;

   case 11U:
    c10_d6 = *chartInstance->c10_v_measured;
    sf_mex_assign(c10_mxData, sf_mex_create("mxData", &c10_d6, 0, 0U, 0U, 0U, 0),
                  false);
    break;

   case 27U:
    sf_mex_assign(c10_mxData, sf_mex_create("mxData", *chartInstance->c10_s_est,
      0, 0U, 1U, 0U, 1, 20), false);
    break;

   case 28U:
    sf_mex_assign(c10_mxData, sf_mex_create("mxData", *chartInstance->c10_v_est,
      0, 0U, 1U, 0U, 1, 20), false);
    break;

   case 29U:
    sf_mex_assign(c10_mxData, sf_mex_create("mxData",
      *chartInstance->c10_s_tv_est, 0, 0U, 1U, 0U, 1, 20), false);
    break;

   case 17U:
    c10_d7 = *chartInstance->c10_a_opt;
    sf_mex_assign(c10_mxData, sf_mex_create("mxData", &c10_d7, 0, 0U, 0U, 0U, 0),
                  false);
    break;

   case 18U:
    sf_mex_assign(c10_mxData, sf_mex_create("mxData", *chartInstance->c10_Slack,
      0, 0U, 1U, 0U, 2, 4, 1), false);
    break;

   case 19U:
    c10_i = chartInstance->c10_s_opt_prev_sol->size(0) *
      chartInstance->c10_s_opt_prev_sol->size(1);
    if (c10_i <= 0) {
      c10_u = 0ULL;
    } else {
      c10_u = static_cast<uint64_T>(c10_i) << 3;
    }

    if (c10_u <= 150000ULL) {
      sf_mex_assign(c10_mxData, sf_mex_create("mxData",
        &(chartInstance->c10_s_opt_prev_sol->data())[0], 0, 0U, 1U, 0U, 2,
        chartInstance->c10_s_opt_prev_sol->size(0),
        chartInstance->c10_s_opt_prev_sol->size(1)), false);
    } else {
      *c10_isValueTooBig = 1U;
    }
    break;

   case 20U:
    c10_i1 = chartInstance->c10_v_opt_prev_sol->size(0) *
      chartInstance->c10_v_opt_prev_sol->size(1);
    if (c10_i1 <= 0) {
      c10_u1 = 0ULL;
    } else {
      c10_u1 = static_cast<uint64_T>(c10_i1) << 3;
    }

    if (c10_u1 <= 150000ULL) {
      sf_mex_assign(c10_mxData, sf_mex_create("mxData",
        &(chartInstance->c10_v_opt_prev_sol->data())[0], 0, 0U, 1U, 0U, 2,
        chartInstance->c10_v_opt_prev_sol->size(0),
        chartInstance->c10_v_opt_prev_sol->size(1)), false);
    } else {
      *c10_isValueTooBig = 1U;
    }
    break;

   case 24U:
    *c10_isValueTooBig = 1U;
    break;

   case 26U:
    c10_m = NULL;
    sf_mex_assign(&c10_m, sf_mex_createstruct("mxData", 0, NULL, 0), false);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.m, 0,
      0U, 0U, 0U, 0), "m", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.A_f, 0,
      0U, 0U, 0U, 0), "A_f", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.c_d, 0,
      0U, 0U, 0U, 0), "c_d", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.L, 0,
      0U, 0U, 0U, 0), "L", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.h_g, 0,
      0U, 0U, 0U, 0), "h_g", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.WD_s_F,
      0, 0U, 0U, 0U, 0), "WD_s_F", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.L_f, 0,
      0U, 0U, 0U, 0), "L_f", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.L_r, 0,
      0U, 0U, 0U, 0), "L_r", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.F0, 0,
      0U, 0U, 0U, 0), "F0", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.F1, 0,
      0U, 0U, 0U, 0), "F1", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.F2, 0,
      0U, 0U, 0U, 0), "F2", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.k00, 0,
      0U, 0U, 0U, 0), "k00", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.k10, 0,
      0U, 0U, 0U, 0), "k10", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.k01, 0,
      0U, 0U, 0U, 0), "k01", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.p00, 0,
      0U, 0U, 0U, 0), "p00", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.p10, 0,
      0U, 0U, 0U, 0), "p10", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.p01, 0,
      0U, 0U, 0U, 0), "p01", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.P_m_max,
      0, 0U, 0U, 0U, 0), "P_m_max", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.T_m_max,
      0, 0U, 0U, 0U, 0), "T_m_max", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData",
      &chartInstance->c10_V.omega_m_r, 0, 0U, 0U, 0U, 0), "omega_m_r", "mxData",
                    0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData",
      &chartInstance->c10_V.omega_m_max, 0, 0U, 0U, 0U, 0), "omega_m_max",
                    "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.c_r, 0,
      0U, 0U, 0U, 0), "c_r", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.R_w, 0,
      0U, 0U, 0U, 0), "R_w", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.beta_gb,
      0, 0U, 0U, 0U, 0), "beta_gb", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.beta_fd,
      0, 0U, 0U, 0U, 0), "beta_fd", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.phi, 0,
      0U, 0U, 0U, 0), "phi", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", chartInstance->c10_V.upSpd, 0,
      0U, 1U, 0U, 2, 1, 7), "upSpd", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", chartInstance->c10_V.downSpd,
      0, 0U, 1U, 0U, 2, 1, 7), "downSpd", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", chartInstance->c10_V.tau_gb,
      0, 0U, 1U, 0U, 2, 1, 8), "tau_gb", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.tau_fd,
      0, 0U, 0U, 0U, 0), "tau_fd", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData",
      &chartInstance->c10_V.eta_drive, 0, 0U, 0U, 0U, 0), "eta_drive", "mxData",
                    0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.U_N, 0,
      0U, 0U, 0U, 0), "U_N", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.Q_N, 0,
      0U, 0U, 0U, 0), "Q_N", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData",
      &chartInstance->c10_V.E_b_gross, 0, 0U, 0U, 0U, 0), "E_b_gross", "mxData",
                    0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.E_b_net,
      0, 0U, 0U, 0U, 0), "E_b_net", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.v_max,
      0, 0U, 0U, 0U, 0), "v_max", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.t_acc,
      0, 0U, 0U, 0U, 0), "t_acc", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.E_v, 0,
      0U, 0U, 0U, 0), "E_v", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.D_r, 0,
      0U, 0U, 0U, 0), "D_r", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.eta_i,
      0, 0U, 0U, 0U, 0), "eta_i", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.eta_gb,
      0, 0U, 0U, 0U, 0), "eta_gb", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.eta_fd,
      0, 0U, 0U, 0U, 0), "eta_fd", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.eta_TF,
      0, 0U, 0U, 0U, 0), "eta_TF", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.lambda,
      0, 0U, 0U, 0U, 0), "lambda", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.P_aux,
      0, 0U, 0U, 0U, 0), "P_aux", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.mu, 0,
      0U, 0U, 0U, 0), "mu", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.rho_a,
      0, 0U, 0U, 0U, 0), "rho_a", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.g, 0,
      0U, 0U, 0U, 0), "g", "mxData", 0);
    sf_mex_addfield(c10_m, sf_mex_create("mxData", &chartInstance->c10_V.zeta_a,
      0, 0U, 0U, 0U, 0), "zeta_a", "mxData", 0);
    sf_mex_assign(c10_mxData, c10_m, false);
    break;
  }
}

static void c10_b_nullAssignment(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_x, boolean_T
  c10_idx_data[])
{
  static char_T c10_b_cv[30] = { 'C', 'o', 'd', 'e', 'r', ':', 'b', 'u', 'i',
    'l', 't', 'i', 'n', 's', ':', 'A', 's', 's', 'e', 'r', 't', 'i', 'o', 'n',
    'F', 'a', 'i', 'l', 'e', 'd' };

  emlrtStack c10_st;
  const mxArray *c10_b_y = NULL;
  const mxArray *c10_y = NULL;
  int32_T c10_b_j;
  int32_T c10_b_k;
  int32_T c10_c_i;
  int32_T c10_d_k;
  int32_T c10_f_k;
  int32_T c10_f_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_j;
  int32_T c10_k;
  int32_T c10_loop_ub;
  int32_T c10_nrows;
  boolean_T c10_b;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_st.site = &c10_w_emlrtRSI;
  c10_f_n = 0;
  for (c10_k = 0; c10_k < 602; c10_k++) {
    c10_b_k = c10_k;
    c10_f_n += static_cast<int32_T>(c10_idx_data[c10_b_k]);
  }

  c10_nrows = 602 - c10_f_n;
  c10_i = 0;
  for (c10_d_k = 0; c10_d_k < 602; c10_d_k++) {
    c10_f_k = c10_d_k;
    if (!c10_idx_data[c10_f_k]) {
      for (c10_j = 0; c10_j < 142; c10_j++) {
        c10_b_j = c10_j;
        c10_x[c10_i + c10_x.size(0) * c10_b_j] = c10_x[c10_f_k + c10_x.size(0) *
          c10_b_j];
      }

      c10_i++;
    }
  }

  if (!(c10_nrows <= 602)) {
    c10_y = NULL;
    sf_mex_assign(&c10_y, sf_mex_create("y", c10_b_cv, 10, 0U, 1U, 0U, 2, 1, 30),
                  false);
    c10_b_y = NULL;
    sf_mex_assign(&c10_b_y, sf_mex_create("y", c10_b_cv, 10, 0U, 1U, 0U, 2, 1,
      30), false);
    sf_mex_call(&c10_st, &c10_e_emlrtMCI, "error", 0U, 2U, 14, c10_y, 14,
                sf_mex_call(&c10_st, NULL, "getString", 1U, 1U, 14, sf_mex_call(
      &c10_st, NULL, "message", 1U, 1U, 14, c10_b_y)));
  }

  c10_b = (c10_nrows < 1);
  if (c10_b) {
    c10_c_i = -1;
  } else {
    c10_c_i = c10_nrows - 1;
  }

  for (c10_i1 = 0; c10_i1 < 142; c10_i1++) {
    c10_loop_ub = c10_c_i;
    for (c10_i2 = 0; c10_i2 <= c10_loop_ub; c10_i2++) {
      c10_x[c10_i2 + (c10_c_i + 1) * c10_i1] = c10_x[c10_i2 + c10_x.size(0) *
        c10_i1];
    }
  }

  c10_x.set_size(&c10_ug_emlrtRTEI, &c10_st, c10_c_i + 1, 142);
}

static void c10_b_compressBounds(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, int32_T c10_nVar, coder::array<int32_T, 1U>
  &c10_indexLB, coder::array<int32_T, 1U> &c10_indexUB, coder::array<int32_T, 1U>
  &c10_indexFixed, real_T c10_lb_data[], int32_T c10_lb_size[1], real_T
  c10_ub_data[], int32_T c10_ub_size[1], int32_T *c10_mLB, int32_T *c10_mUB,
  int32_T *c10_mFixed)
{
  emlrtStack c10_b_st;
  emlrtStack c10_st;
  real_T c10_b_ub;
  real_T c10_b_x;
  real_T c10_c_lb;
  real_T c10_c_x;
  real_T c10_d_x;
  real_T c10_e_x;
  real_T c10_f_x;
  real_T c10_g_x;
  real_T c10_j_x;
  real_T c10_k_x;
  real_T c10_x;
  real_T c10_y;
  int32_T c10_b;
  int32_T c10_b_idx;
  int32_T c10_e_b;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_idx;
  boolean_T c10_b1;
  boolean_T c10_b2;
  boolean_T c10_b3;
  boolean_T c10_b_tf;
  boolean_T c10_f_b;
  boolean_T c10_g_b;
  boolean_T c10_guard1;
  boolean_T c10_h_b;
  boolean_T c10_j_b;
  boolean_T c10_k_b;
  boolean_T c10_overflow;
  boolean_T c10_tf;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  *c10_mLB = 0;
  *c10_mUB = 0;
  *c10_mFixed = 0;
  c10_st.site = &c10_dd_emlrtRSI;
  c10_b = c10_nVar;
  c10_e_b = c10_b;
  if (c10_e_b < 1) {
    c10_overflow = false;
  } else {
    c10_overflow = (c10_e_b > 2147483646);
  }

  if (c10_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  for (c10_idx = 0; c10_idx < c10_nVar; c10_idx++) {
    c10_b_idx = c10_idx + 1;
    if ((c10_b_idx < 1) || (c10_b_idx > c10_lb_size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_b_idx, 1, c10_lb_size[0],
        &c10_qo_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_c_lb = c10_lb_data[c10_b_idx - 1];
    c10_x = c10_c_lb;
    c10_b_x = c10_x;
    c10_f_b = muDoubleScalarIsInf(c10_b_x);
    c10_g_b = !c10_f_b;
    c10_c_x = c10_x;
    c10_h_b = muDoubleScalarIsNaN(c10_c_x);
    c10_b1 = !c10_h_b;
    c10_tf = (c10_g_b && c10_b1);
    c10_guard1 = false;
    if (c10_tf) {
      if ((c10_b_idx < 1) || (c10_b_idx > c10_lb_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_b_idx, 1, c10_lb_size[0],
          &c10_qo_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      if ((c10_b_idx < 1) || (c10_b_idx > c10_ub_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_b_idx, 1, c10_ub_size[0],
          &c10_qo_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_d_x = c10_lb_data[c10_b_idx - 1] - c10_ub_data[c10_b_idx - 1];
      c10_e_x = c10_d_x;
      c10_g_x = c10_e_x;
      c10_y = muDoubleScalarAbs(c10_g_x);
      if (c10_y < 1.0E-8) {
        (*c10_mFixed)++;
        c10_i1 = c10_indexFixed.size(0);
        if ((*c10_mFixed < 1) || (*c10_mFixed > c10_i1)) {
          emlrtDynamicBoundsCheckR2012b(*c10_mFixed, 1, c10_i1, &c10_qo_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_indexFixed[*c10_mFixed - 1] = c10_b_idx;
        if ((c10_b_idx < 1) || (c10_b_idx > c10_ub_size[0])) {
          emlrtDynamicBoundsCheckR2012b(c10_b_idx, 1, c10_ub_size[0],
            &c10_qo_emlrtBCI, (emlrtConstCTX)c10_sp);
        }

        if ((c10_b_idx < 1) || (c10_b_idx > c10_lb_size[0])) {
          emlrtDynamicBoundsCheckR2012b(c10_b_idx, 1, c10_lb_size[0],
            &c10_qo_emlrtBCI, (emlrtConstCTX)c10_sp);
        }
      } else {
        (*c10_mLB)++;
        c10_i = c10_indexLB.size(0);
        if ((*c10_mLB < 1) || (*c10_mLB > c10_i)) {
          emlrtDynamicBoundsCheckR2012b(*c10_mLB, 1, c10_i, &c10_qo_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_indexLB[*c10_mLB - 1] = c10_b_idx;
        if ((c10_b_idx < 1) || (c10_b_idx > c10_lb_size[0])) {
          emlrtDynamicBoundsCheckR2012b(c10_b_idx, 1, c10_lb_size[0],
            &c10_qo_emlrtBCI, (emlrtConstCTX)c10_sp);
        }

        c10_guard1 = true;
      }
    } else {
      c10_guard1 = true;
    }

    if (c10_guard1) {
      if ((c10_b_idx < 1) || (c10_b_idx > c10_ub_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_b_idx, 1, c10_ub_size[0],
          &c10_qo_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_b_ub = c10_ub_data[c10_b_idx - 1];
      c10_f_x = c10_b_ub;
      c10_j_x = c10_f_x;
      c10_j_b = muDoubleScalarIsInf(c10_j_x);
      c10_b2 = !c10_j_b;
      c10_k_x = c10_f_x;
      c10_k_b = muDoubleScalarIsNaN(c10_k_x);
      c10_b3 = !c10_k_b;
      c10_b_tf = (c10_b2 && c10_b3);
      if (c10_b_tf) {
        (*c10_mUB)++;
        c10_i2 = c10_indexUB.size(0);
        if ((*c10_mUB < 1) || (*c10_mUB > c10_i2)) {
          emlrtDynamicBoundsCheckR2012b(*c10_mUB, 1, c10_i2, &c10_qo_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_indexUB[*c10_mUB - 1] = c10_b_idx;
        if ((c10_b_idx < 1) || (c10_b_idx > c10_ub_size[0])) {
          emlrtDynamicBoundsCheckR2012b(c10_b_idx, 1, c10_ub_size[0],
            &c10_qo_emlrtBCI, (emlrtConstCTX)c10_sp);
        }
      }
    }
  }
}

static void c10_b_loadProblem(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL *c10_b_obj, int32_T c10_mEq,
  int32_T c10_mLinEq, coder::array<real_T, 2U> &c10_Aeq, real_T c10_beq_data[],
  int32_T c10_beq_size[1], int32_T c10_mLB, real_T c10_lb_data[], int32_T
  c10_lb_size[1], int32_T c10_mUB, real_T c10_ub_data[], int32_T c10_ub_size[1],
  int32_T c10_mFixed, int32_T c10_mConstrMax)
{
  ptrdiff_t c10_b_incx_t;
  ptrdiff_t c10_b_incy_t;
  ptrdiff_t c10_b_n_t;
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 1U> c10_b_x;
  coder::array<real_T, 1U> c10_e_y;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  int32_T c10_x[6];
  int32_T c10_b;
  int32_T c10_b_idx;
  int32_T c10_b_idx_col;
  int32_T c10_b_idx_row;
  int32_T c10_b_k;
  int32_T c10_b_loop_ub;
  int32_T c10_b_var;
  int32_T c10_b_y;
  int32_T c10_c_loop_ub;
  int32_T c10_c_y;
  int32_T c10_d_k;
  int32_T c10_d_loop_ub;
  int32_T c10_d_y;
  int32_T c10_e_b;
  int32_T c10_e_loop_ub;
  int32_T c10_f_b;
  int32_T c10_f_k;
  int32_T c10_f_loop_ub;
  int32_T c10_f_n;
  int32_T c10_g_b;
  int32_T c10_g_k;
  int32_T c10_g_loop_ub;
  int32_T c10_h_b;
  int32_T c10_h_k;
  int32_T c10_h_loop_ub;
  int32_T c10_h_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i19;
  int32_T c10_i2;
  int32_T c10_i20;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_i_k;
  int32_T c10_i_loop_ub;
  int32_T c10_i_n;
  int32_T c10_idx;
  int32_T c10_idxPosAineq;
  int32_T c10_idxPosCache;
  int32_T c10_idx_col;
  int32_T c10_idx_row;
  int32_T c10_j_b;
  int32_T c10_j_k;
  int32_T c10_j_loop_ub;
  int32_T c10_j_n;
  int32_T c10_k;
  int32_T c10_k_b;
  int32_T c10_k_n;
  int32_T c10_loop_ub;
  int32_T c10_m_k;
  int32_T c10_m_n;
  int32_T c10_o_b;
  int32_T c10_o_k;
  int32_T c10_p_b;
  int32_T c10_q_b;
  int32_T c10_var;
  int32_T c10_y;
  boolean_T c10_b_overflow;
  boolean_T c10_c_overflow;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_b_obj->mConstr = ((c10_mEq + c10_mLB) + c10_mUB) + c10_mFixed;
  c10_b_obj->mConstrOrig = ((c10_mEq + c10_mLB) + c10_mUB) + c10_mFixed;
  c10_b_obj->mConstrMax = c10_mConstrMax;
  c10_b_obj->sizes[0] = c10_mFixed;
  c10_b_obj->sizes[1] = c10_mEq;
  c10_b_obj->sizes[2] = 0;
  c10_b_obj->sizes[3] = c10_mLB;
  c10_b_obj->sizes[4] = c10_mUB;
  c10_b_obj->sizesNormal[0] = c10_mFixed;
  c10_b_obj->sizesNormal[1] = c10_mEq;
  c10_b_obj->sizesNormal[2] = 0;
  c10_b_obj->sizesNormal[3] = c10_mLB;
  c10_b_obj->sizesNormal[4] = c10_mUB;
  c10_b_obj->sizesPhaseOne[0] = c10_mFixed;
  c10_b_obj->sizesPhaseOne[1] = c10_mEq;
  c10_b_obj->sizesPhaseOne[2] = 0;
  c10_b_obj->sizesPhaseOne[3] = c10_mLB + 1;
  c10_b_obj->sizesPhaseOne[4] = c10_mUB;
  c10_b = c10_mEq;
  c10_y = c10_b << 1;
  c10_b_obj->sizesRegularized[0] = c10_mFixed;
  c10_b_obj->sizesRegularized[1] = c10_mEq;
  c10_b_obj->sizesRegularized[2] = 0;
  c10_b_obj->sizesRegularized[3] = c10_mLB + c10_y;
  c10_b_obj->sizesRegularized[4] = c10_mUB;
  c10_e_b = c10_mEq;
  c10_b_y = (c10_e_b << 1) + 1;
  c10_b_obj->sizesRegPhaseOne[0] = c10_mFixed;
  c10_b_obj->sizesRegPhaseOne[1] = c10_mEq;
  c10_b_obj->sizesRegPhaseOne[2] = 0;
  c10_b_obj->sizesRegPhaseOne[3] = c10_mLB + c10_b_y;
  c10_b_obj->sizesRegPhaseOne[4] = c10_mUB;
  c10_x[0] = 1;
  c10_x[1] = c10_mFixed;
  c10_x[2] = c10_mEq;
  c10_x[3] = 0;
  c10_x[4] = c10_mLB;
  c10_x[5] = c10_mUB;
  for (c10_k = 0; c10_k < 5; c10_k++) {
    c10_b_k = c10_k;
    c10_x[c10_b_k + 1] += c10_x[c10_b_k];
  }

  for (c10_i = 0; c10_i < 6; c10_i++) {
    c10_b_obj->isActiveIdx[c10_i] = c10_x[c10_i];
  }

  c10_x[0] = 1;
  c10_x[1] = c10_mFixed;
  c10_x[2] = c10_mEq;
  c10_x[3] = 0;
  c10_x[4] = c10_mLB;
  c10_x[5] = c10_mUB;
  for (c10_d_k = 0; c10_d_k < 5; c10_d_k++) {
    c10_f_k = c10_d_k;
    c10_x[c10_f_k + 1] += c10_x[c10_f_k];
  }

  for (c10_i1 = 0; c10_i1 < 6; c10_i1++) {
    c10_b_obj->isActiveIdxNormal[c10_i1] = c10_x[c10_i1];
  }

  c10_x[0] = 1;
  c10_x[1] = c10_mFixed;
  c10_x[2] = c10_mEq;
  c10_x[3] = 0;
  c10_x[4] = c10_mLB + 1;
  c10_x[5] = c10_mUB;
  for (c10_g_k = 0; c10_g_k < 5; c10_g_k++) {
    c10_h_k = c10_g_k;
    c10_x[c10_h_k + 1] += c10_x[c10_h_k];
  }

  for (c10_i2 = 0; c10_i2 < 6; c10_i2++) {
    c10_b_obj->isActiveIdxPhaseOne[c10_i2] = c10_x[c10_i2];
  }

  c10_f_b = c10_mEq;
  c10_c_y = c10_f_b << 1;
  c10_x[0] = 1;
  c10_x[1] = c10_mFixed;
  c10_x[2] = c10_mEq;
  c10_x[3] = 0;
  c10_x[4] = c10_mLB + c10_c_y;
  c10_x[5] = c10_mUB;
  for (c10_i_k = 0; c10_i_k < 5; c10_i_k++) {
    c10_j_k = c10_i_k;
    c10_x[c10_j_k + 1] += c10_x[c10_j_k];
  }

  for (c10_i3 = 0; c10_i3 < 6; c10_i3++) {
    c10_b_obj->isActiveIdxRegularized[c10_i3] = c10_x[c10_i3];
  }

  c10_g_b = c10_mEq;
  c10_d_y = (c10_g_b << 1) + 1;
  c10_x[0] = 1;
  c10_x[1] = c10_mFixed;
  c10_x[2] = c10_mEq;
  c10_x[3] = 0;
  c10_x[4] = c10_mLB + c10_d_y;
  c10_x[5] = c10_mUB;
  for (c10_m_k = 0; c10_m_k < 5; c10_m_k++) {
    c10_o_k = c10_m_k;
    c10_x[c10_o_k + 1] += c10_x[c10_o_k];
  }

  for (c10_i4 = 0; c10_i4 < 6; c10_i4++) {
    c10_b_obj->isActiveIdxRegPhaseOne[c10_i4] = c10_x[c10_i4];
  }

  if (c10_mEq > 0) {
    c10_st.site = &c10_ed_emlrtRSI;
    c10_h_b = c10_mLinEq;
    c10_j_b = c10_h_b;
    if (c10_j_b < 1) {
      c10_overflow = false;
    } else {
      c10_overflow = (c10_j_b > 2147483646);
    }

    if (c10_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    c10_i6 = static_cast<uint16_T>(c10_mLinEq) - 1;
    for (c10_idx_col = 0; c10_idx_col <= c10_i6; c10_idx_col++) {
      c10_b_idx_col = c10_idx_col;
      c10_i7 = c10_b_obj->nVar;
      c10_st.site = &c10_ed_emlrtRSI;
      c10_p_b = c10_i7;
      c10_q_b = c10_p_b;
      if (c10_q_b < 1) {
        c10_c_overflow = false;
      } else {
        c10_c_overflow = (c10_q_b > 2147483646);
      }

      if (c10_c_overflow) {
        c10_b_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
      }

      for (c10_idx_row = 0; c10_idx_row < c10_i7; c10_idx_row++) {
        c10_b_idx_row = c10_idx_row;
        c10_idxPosCache = (c10_b_idx_row + c10_b_obj->ldA * c10_b_idx_col) + 1;
        c10_idxPosAineq = (c10_b_idx_col + c10_mLinEq * c10_b_idx_row) + 1;
        c10_i15 = c10_Aeq.size(0) * c10_Aeq.size(1);
        if ((c10_idxPosAineq < 1) || (c10_idxPosAineq > c10_i15)) {
          emlrtDynamicBoundsCheckR2012b(c10_idxPosAineq, 1, c10_i15,
            &c10_ro_emlrtBCI, (emlrtConstCTX)c10_sp);
        }

        c10_i16 = c10_b_obj->Aeq.size(0);
        if ((c10_idxPosCache < 1) || (c10_idxPosCache > c10_i16)) {
          emlrtDynamicBoundsCheckR2012b(c10_idxPosCache, 1, c10_i16,
            &c10_ro_emlrtBCI, (emlrtConstCTX)c10_sp);
        }

        c10_b_obj->Aeq[c10_idxPosCache - 1] = c10_Aeq[c10_idxPosAineq - 1];
      }
    }

    if (c10_beq_size[0] != 0) {
      c10_st.site = &c10_ed_emlrtRSI;
      c10_h_n = c10_mLinEq;
      c10_b_x.set_size(&c10_qf_emlrtRTEI, &c10_st, c10_beq_size[0]);
      c10_b_loop_ub = c10_beq_size[0] - 1;
      for (c10_i10 = 0; c10_i10 <= c10_b_loop_ub; c10_i10++) {
        c10_b_x[c10_i10] = c10_beq_data[c10_i10];
      }

      c10_e_y.set_size(&c10_qf_emlrtRTEI, &c10_st, c10_b_obj->beq.size[0]);
      c10_d_loop_ub = c10_b_obj->beq.size[0] - 1;
      for (c10_i12 = 0; c10_i12 <= c10_d_loop_ub; c10_i12++) {
        c10_e_y[c10_i12] = c10_b_obj->beq.data[c10_i12];
      }

      if (!(c10_h_n < 1)) {
        c10_b_st.site = &c10_ad_emlrtRSI;
        c10_i_n = c10_h_n;
        c10_c_st.site = &c10_cd_emlrtRSI;
        c10_j_n = c10_i_n;
        c10_var = c10_j_n;
        c10_n_t = (ptrdiff_t)c10_var;
        c10_incx_t = (ptrdiff_t)1;
        c10_incy_t = (ptrdiff_t)1;
        dcopy(&c10_n_t, &(c10_b_x.data())[0], &c10_incx_t, &(c10_e_y.data())[0],
              &c10_incy_t);
      }

      c10_b_obj->beq.size[0] = c10_e_y.size(0);
      c10_f_loop_ub = c10_e_y.size(0) - 1;
      for (c10_i14 = 0; c10_i14 <= c10_f_loop_ub; c10_i14++) {
        c10_b_obj->beq.data[c10_i14] = c10_e_y[c10_i14];
      }
    }
  }

  c10_i5 = c10_b_obj->nVar;
  c10_st.site = &c10_ed_emlrtRSI;
  c10_k_b = c10_i5;
  c10_o_b = c10_k_b;
  if (c10_o_b < 1) {
    c10_b_overflow = false;
  } else {
    c10_b_overflow = (c10_o_b > 2147483646);
  }

  if (c10_b_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  for (c10_idx = 0; c10_idx < c10_i5; c10_idx++) {
    c10_b_idx = c10_idx + 1;
    if ((c10_b_idx < 1) || (c10_b_idx > c10_lb_size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_b_idx, 1, c10_lb_size[0],
        &c10_ro_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_i8 = c10_b_obj->lb.size(0);
    if ((c10_b_idx < 1) || (c10_b_idx > c10_i8)) {
      emlrtDynamicBoundsCheckR2012b(c10_b_idx, 1, c10_i8, &c10_ro_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->lb[c10_b_idx - 1] = -c10_lb_data[c10_b_idx - 1];
  }

  c10_st.site = &c10_ed_emlrtRSI;
  c10_f_n = c10_b_obj->nVar;
  c10_b_x.set_size(&c10_qf_emlrtRTEI, &c10_st, c10_ub_size[0]);
  c10_loop_ub = c10_ub_size[0] - 1;
  for (c10_i9 = 0; c10_i9 <= c10_loop_ub; c10_i9++) {
    c10_b_x[c10_i9] = c10_ub_data[c10_i9];
  }

  c10_e_y.set_size(&c10_qf_emlrtRTEI, &c10_st, c10_b_obj->ub.size(0));
  c10_c_loop_ub = c10_b_obj->ub.size(0) - 1;
  for (c10_i11 = 0; c10_i11 <= c10_c_loop_ub; c10_i11++) {
    c10_e_y[c10_i11] = c10_b_obj->ub[c10_i11];
  }

  c10_b_obj->ub.set_size(&c10_qf_emlrtRTEI, &c10_st, c10_e_y.size(0));
  c10_e_loop_ub = c10_e_y.size(0) - 1;
  for (c10_i13 = 0; c10_i13 <= c10_e_loop_ub; c10_i13++) {
    c10_b_obj->ub[c10_i13] = c10_e_y[c10_i13];
  }

  if (!(c10_f_n < 1)) {
    c10_b_st.site = &c10_ad_emlrtRSI;
    c10_k_n = c10_f_n;
    c10_e_y.set_size(&c10_bf_emlrtRTEI, &c10_b_st, c10_b_obj->ub.size(0));
    c10_g_loop_ub = c10_b_obj->ub.size(0) - 1;
    for (c10_i17 = 0; c10_i17 <= c10_g_loop_ub; c10_i17++) {
      c10_e_y[c10_i17] = c10_b_obj->ub[c10_i17];
    }

    c10_b_obj->ub.set_size(&c10_qf_emlrtRTEI, &c10_b_st, c10_e_y.size(0));
    c10_h_loop_ub = c10_e_y.size(0) - 1;
    for (c10_i18 = 0; c10_i18 <= c10_h_loop_ub; c10_i18++) {
      c10_b_obj->ub[c10_i18] = c10_e_y[c10_i18];
    }

    c10_c_st.site = &c10_cd_emlrtRSI;
    c10_m_n = c10_k_n;
    c10_e_y.set_size(&c10_cf_emlrtRTEI, &c10_c_st, c10_b_obj->ub.size(0));
    c10_i_loop_ub = c10_b_obj->ub.size(0) - 1;
    for (c10_i19 = 0; c10_i19 <= c10_i_loop_ub; c10_i19++) {
      c10_e_y[c10_i19] = c10_b_obj->ub[c10_i19];
    }

    c10_b_obj->ub.set_size(&c10_qf_emlrtRTEI, &c10_c_st, c10_e_y.size(0));
    c10_j_loop_ub = c10_e_y.size(0) - 1;
    for (c10_i20 = 0; c10_i20 <= c10_j_loop_ub; c10_i20++) {
      c10_b_obj->ub[c10_i20] = c10_e_y[c10_i20];
    }

    c10_b_var = c10_m_n;
    c10_b_n_t = (ptrdiff_t)c10_b_var;
    c10_b_incx_t = (ptrdiff_t)1;
    c10_b_incy_t = (ptrdiff_t)1;
    dcopy(&c10_b_n_t, &(c10_b_x.data())[0], &c10_b_incx_t, &(c10_b_obj->ub.data())
          [0], &c10_b_incy_t);
  }
}

static void c10_b_initActiveSet(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL *c10_b_obj)
{
  emlrtStack c10_b_st;
  emlrtStack c10_st;
  int32_T c10_b;
  int32_T c10_b_a;
  int32_T c10_b_idx_local;
  int32_T c10_c_a;
  int32_T c10_c_i;
  int32_T c10_c_idx_local;
  int32_T c10_colOffsetATw;
  int32_T c10_d_a;
  int32_T c10_e_a;
  int32_T c10_e_b;
  int32_T c10_e_i;
  int32_T c10_f_b;
  int32_T c10_f_i;
  int32_T c10_g_b;
  int32_T c10_h_b;
  int32_T c10_h_i;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i19;
  int32_T c10_i2;
  int32_T c10_i20;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_iATw0;
  int32_T c10_iAeq0;
  int32_T c10_idx;
  int32_T c10_idxFillStart;
  int32_T c10_idx_bound;
  int32_T c10_idx_global;
  int32_T c10_idx_local;
  int32_T c10_j_b;
  int32_T c10_k_b;
  int32_T c10_nWFixed;
  int32_T c10_nWeq;
  int32_T c10_o_b;
  int32_T c10_p_b;
  int32_T c10_q_b;
  boolean_T c10_b_overflow;
  boolean_T c10_c_overflow;
  boolean_T c10_d_overflow;
  boolean_T c10_e_overflow;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_b_obj->nVar = c10_b_obj->nVarOrig;
  c10_b_obj->mConstr = c10_b_obj->mConstrOrig;
  for (c10_i = 0; c10_i < 5; c10_i++) {
    c10_b_obj->sizes[c10_i] = c10_b_obj->sizesNormal[c10_i];
  }

  for (c10_i1 = 0; c10_i1 < 6; c10_i1++) {
    c10_b_obj->isActiveIdx[c10_i1] = c10_b_obj->isActiveIdxNormal[c10_i1];
  }

  c10_b_obj->probType = 3;
  c10_idxFillStart = c10_b_obj->isActiveIdx[2];
  c10_i2 = c10_b_obj->mConstrMax;
  c10_st.site = &c10_fd_emlrtRSI;
  c10_b_a = c10_idxFillStart;
  c10_b = c10_i2;
  c10_c_a = c10_b_a;
  c10_e_b = c10_b;
  if (c10_c_a > c10_e_b) {
    c10_overflow = false;
  } else {
    c10_overflow = (c10_e_b > 2147483646);
  }

  if (c10_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  for (c10_idx = c10_idxFillStart; c10_idx <= c10_i2; c10_idx++) {
    if ((c10_idx < 1) || (c10_idx > c10_b_obj->isActiveConstr.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_idx, 1, c10_b_obj->isActiveConstr.size[0],
        &c10_so_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->isActiveConstr.data[c10_idx - 1] = false;
  }

  c10_b_obj->nWConstr[0] = c10_b_obj->sizes[0];
  c10_b_obj->nWConstr[1] = c10_b_obj->sizes[1];
  c10_b_obj->nWConstr[2] = 0;
  c10_b_obj->nWConstr[3] = 0;
  c10_b_obj->nWConstr[4] = 0;
  c10_b_obj->nActiveConstr = c10_b_obj->nWConstr[0] + c10_b_obj->nWConstr[1];
  c10_nWFixed = c10_b_obj->sizes[0];
  c10_st.site = &c10_fd_emlrtRSI;
  c10_f_b = c10_nWFixed;
  c10_g_b = c10_f_b;
  if (c10_g_b < 1) {
    c10_b_overflow = false;
  } else {
    c10_b_overflow = (c10_g_b > 2147483646);
  }

  if (c10_b_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  for (c10_idx_local = 0; c10_idx_local < c10_nWFixed; c10_idx_local++) {
    c10_b_idx_local = c10_idx_local + 1;
    if ((c10_b_idx_local < 1) || (c10_b_idx_local > c10_b_obj->Wid.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_b_idx_local, 1, c10_b_obj->Wid.size[0],
        &c10_so_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->Wid.data[c10_b_idx_local - 1] = 1;
    if ((c10_b_idx_local < 1) || (c10_b_idx_local > c10_b_obj->Wlocalidx.size[0]))
    {
      emlrtDynamicBoundsCheckR2012b(c10_b_idx_local, 1,
        c10_b_obj->Wlocalidx.size[0], &c10_so_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->Wlocalidx.data[c10_b_idx_local - 1] = c10_b_idx_local;
    if ((c10_b_idx_local < 1) || (c10_b_idx_local >
         c10_b_obj->isActiveConstr.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_b_idx_local, 1,
        c10_b_obj->isActiveConstr.size[0], &c10_so_emlrtBCI, (emlrtConstCTX)
        c10_sp);
    }

    c10_b_obj->isActiveConstr.data[c10_b_idx_local - 1] = true;
    c10_i4 = c10_b_obj->indexFixed.size(0);
    if ((c10_b_idx_local < 1) || (c10_b_idx_local > c10_i4)) {
      emlrtDynamicBoundsCheckR2012b(c10_b_idx_local, 1, c10_i4, &c10_so_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_idx_bound = c10_b_obj->indexFixed[c10_b_idx_local - 1];
    c10_colOffsetATw = c10_b_obj->ldA * (c10_b_idx_local - 1);
    c10_i5 = c10_idx_bound - 1;
    c10_st.site = &c10_fd_emlrtRSI;
    c10_k_b = c10_i5;
    c10_o_b = c10_k_b;
    if (c10_o_b < 1) {
      c10_d_overflow = false;
    } else {
      c10_d_overflow = (c10_o_b > 2147483646);
    }

    if (c10_d_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    c10_i6 = static_cast<uint8_T>(c10_i5) - 1;
    for (c10_c_i = 0; c10_c_i <= c10_i6; c10_c_i++) {
      c10_f_i = c10_c_i;
      c10_i11 = c10_b_obj->ATwset.size(0);
      c10_i13 = (c10_f_i + c10_colOffsetATw) + 1;
      if ((c10_i13 < 1) || (c10_i13 > c10_i11)) {
        emlrtDynamicBoundsCheckR2012b(c10_i13, 1, c10_i11, &c10_so_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->ATwset[c10_i13 - 1] = 0.0;
    }

    c10_i8 = c10_b_obj->ATwset.size(0);
    c10_i10 = c10_idx_bound + c10_colOffsetATw;
    if ((c10_i10 < 1) || (c10_i10 > c10_i8)) {
      emlrtDynamicBoundsCheckR2012b(c10_i10, 1, c10_i8, &c10_so_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->ATwset[c10_i10 - 1] = 1.0;
    c10_i15 = c10_idx_bound + 1;
    c10_i17 = c10_b_obj->nVar;
    c10_st.site = &c10_fd_emlrtRSI;
    c10_d_a = c10_i15;
    c10_p_b = c10_i17;
    c10_e_a = c10_d_a;
    c10_q_b = c10_p_b;
    if (c10_e_a > c10_q_b) {
      c10_e_overflow = false;
    } else {
      c10_e_overflow = (c10_q_b > 2147483646);
    }

    if (c10_e_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_h_i = c10_i15; c10_h_i <= c10_i17; c10_h_i++) {
      c10_i19 = c10_b_obj->ATwset.size(0);
      c10_i20 = c10_h_i + c10_colOffsetATw;
      if ((c10_i20 < 1) || (c10_i20 > c10_i19)) {
        emlrtDynamicBoundsCheckR2012b(c10_i20, 1, c10_i19, &c10_so_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->ATwset[c10_i20 - 1] = 0.0;
    }

    c10_i18 = c10_b_obj->ub.size(0);
    if ((c10_idx_bound < 1) || (c10_idx_bound > c10_i18)) {
      emlrtDynamicBoundsCheckR2012b(c10_idx_bound, 1, c10_i18, &c10_so_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    if ((c10_b_idx_local < 1) || (c10_b_idx_local > c10_b_obj->bwset.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_b_idx_local, 1, c10_b_obj->bwset.size[0],
        &c10_so_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->bwset.data[c10_b_idx_local - 1] = c10_b_obj->ub[c10_idx_bound - 1];
  }

  c10_nWeq = c10_b_obj->sizes[1];
  c10_st.site = &c10_fd_emlrtRSI;
  c10_h_b = c10_nWeq;
  c10_j_b = c10_h_b;
  if (c10_j_b < 1) {
    c10_c_overflow = false;
  } else {
    c10_c_overflow = (c10_j_b > 2147483646);
  }

  if (c10_c_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  c10_i3 = static_cast<uint16_T>(c10_nWeq) - 1;
  for (c10_c_idx_local = 0; c10_c_idx_local <= c10_i3; c10_c_idx_local++) {
    c10_b_idx_local = c10_c_idx_local + 1;
    c10_idx_global = c10_nWFixed + c10_b_idx_local;
    if ((c10_idx_global < 1) || (c10_idx_global > c10_b_obj->Wid.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_idx_global, 1, c10_b_obj->Wid.size[0],
        &c10_so_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->Wid.data[c10_idx_global - 1] = 2;
    if ((c10_idx_global < 1) || (c10_idx_global > c10_b_obj->Wlocalidx.size[0]))
    {
      emlrtDynamicBoundsCheckR2012b(c10_idx_global, 1, c10_b_obj->
        Wlocalidx.size[0], &c10_so_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->Wlocalidx.data[c10_idx_global - 1] = c10_b_idx_local;
    if ((c10_idx_global < 1) || (c10_idx_global > c10_b_obj->
         isActiveConstr.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_idx_global, 1,
        c10_b_obj->isActiveConstr.size[0], &c10_so_emlrtBCI, (emlrtConstCTX)
        c10_sp);
    }

    c10_b_obj->isActiveConstr.data[c10_idx_global - 1] = true;
    c10_iAeq0 = c10_b_obj->ldA * (c10_b_idx_local - 1);
    c10_iATw0 = c10_b_obj->ldA * (c10_idx_global - 1);
    c10_i7 = c10_b_obj->nVar;
    for (c10_e_i = 0; c10_e_i < c10_i7; c10_e_i++) {
      c10_i9 = c10_b_obj->Aeq.size(0);
      c10_i12 = (c10_iAeq0 + c10_e_i) + 1;
      if ((c10_i12 < 1) || (c10_i12 > c10_i9)) {
        emlrtDynamicBoundsCheckR2012b(c10_i12, 1, c10_i9, &c10_so_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i14 = c10_b_obj->ATwset.size(0);
      c10_i16 = (c10_iATw0 + c10_e_i) + 1;
      if ((c10_i16 < 1) || (c10_i16 > c10_i14)) {
        emlrtDynamicBoundsCheckR2012b(c10_i16, 1, c10_i14, &c10_so_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->ATwset[c10_i16 - 1] = c10_b_obj->Aeq[c10_i12 - 1];
    }

    if ((c10_b_idx_local < 1) || (c10_b_idx_local > c10_b_obj->beq.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_b_idx_local, 1, c10_b_obj->beq.size[0],
        &c10_so_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    if ((c10_idx_global < 1) || (c10_idx_global > c10_b_obj->bwset.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_idx_global, 1, c10_b_obj->bwset.size[0],
        &c10_so_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->bwset.data[c10_idx_global - 1] = c10_b_obj->
      beq.data[c10_b_idx_local - 1];
  }
}

static void c10_b_updateRelativeTolerancesForPhaseTwo(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, real_T *c10_tol, coder::array<real_T,
  2U> &c10_c_H, coder::array<real_T, 1U> &c10_f)
{
  emlrtStack c10_b_st;
  emlrtStack c10_st;
  real_T c10_H_infnrm;
  real_T c10_ab_x;
  real_T c10_ab_y;
  real_T c10_b_a;
  real_T c10_b_varargin_1;
  real_T c10_b_varargin_2;
  real_T c10_b_x;
  real_T c10_b_y;
  real_T c10_bb_x;
  real_T c10_bb_y;
  real_T c10_c_a;
  real_T c10_c_varargin_1;
  real_T c10_c_varargin_2;
  real_T c10_c_x;
  real_T c10_c_y;
  real_T c10_cb_x;
  real_T c10_cb_y;
  real_T c10_colSum;
  real_T c10_d_a;
  real_T c10_d_varargin_1;
  real_T c10_d_varargin_2;
  real_T c10_d_x;
  real_T c10_d_y;
  real_T c10_db_x;
  real_T c10_db_y;
  real_T c10_e_a;
  real_T c10_e_varargin_1;
  real_T c10_e_varargin_2;
  real_T c10_e_x;
  real_T c10_e_y;
  real_T c10_eb_x;
  real_T c10_eb_y;
  real_T c10_f_a;
  real_T c10_f_infnrm;
  real_T c10_f_varargin_2;
  real_T c10_f_x;
  real_T c10_f_y;
  real_T c10_fb_x;
  real_T c10_fb_y;
  real_T c10_g_x;
  real_T c10_g_y;
  real_T c10_gb_x;
  real_T c10_gb_y;
  real_T c10_h_y;
  real_T c10_hb_x;
  real_T c10_hb_y;
  real_T c10_i_y;
  real_T c10_ib_x;
  real_T c10_ib_y;
  real_T c10_j_x;
  real_T c10_j_y;
  real_T c10_jb_x;
  real_T c10_k_x;
  real_T c10_k_y;
  real_T c10_kb_x;
  real_T c10_m_x;
  real_T c10_m_y;
  real_T c10_mb_x;
  real_T c10_o_x;
  real_T c10_o_y;
  real_T c10_ob_x;
  real_T c10_p_b;
  real_T c10_p_x;
  real_T c10_p_y;
  real_T c10_q_b;
  real_T c10_q_x;
  real_T c10_q_y;
  real_T c10_r_x;
  real_T c10_r_y;
  real_T c10_s_b;
  real_T c10_s_x;
  real_T c10_s_y;
  real_T c10_t_b;
  real_T c10_t_x;
  real_T c10_t_y;
  real_T c10_u_b;
  real_T c10_u_x;
  real_T c10_u_y;
  real_T c10_v_b;
  real_T c10_v_x;
  real_T c10_v_y;
  real_T c10_varargin_1;
  real_T c10_varargin_2;
  real_T c10_w_x;
  real_T c10_w_y;
  real_T c10_x;
  real_T c10_x_x;
  real_T c10_x_y;
  real_T c10_y;
  real_T c10_y_x;
  real_T c10_y_y;
  int32_T c10_b;
  int32_T c10_b_idx_col;
  int32_T c10_b_idx_row;
  int32_T c10_c_idx_col;
  int32_T c10_c_idx_row;
  int32_T c10_e_b;
  int32_T c10_f_b;
  int32_T c10_g_b;
  int32_T c10_h_b;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_idx_col;
  int32_T c10_idx_row;
  int32_T c10_j_b;
  int32_T c10_k_b;
  int32_T c10_o_b;
  boolean_T c10_b_overflow;
  boolean_T c10_c_overflow;
  boolean_T c10_d_overflow;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_st.site = &c10_hd_emlrtRSI;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_validateattributes(chartInstance, &c10_st, c10_c_H);
  c10_H_infnrm = 0.0;
  c10_f_infnrm = 0.0;
  if (c10_f.size(0) != 0) {
    c10_i1 = c10_c_H.size(1);
    c10_st.site = &c10_hd_emlrtRSI;
    c10_e_b = c10_i1;
    c10_g_b = c10_e_b;
    if (c10_g_b < 1) {
      c10_b_overflow = false;
    } else {
      c10_b_overflow = (c10_g_b > 2147483646);
    }

    if (c10_b_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_b_idx_col = 0; c10_b_idx_col < c10_i1; c10_b_idx_col++) {
      c10_c_idx_col = c10_b_idx_col + 1;
      c10_colSum = 0.0;
      c10_i3 = c10_c_H.size(0);
      c10_st.site = &c10_hd_emlrtRSI;
      c10_j_b = c10_i3;
      c10_o_b = c10_j_b;
      if (c10_o_b < 1) {
        c10_d_overflow = false;
      } else {
        c10_d_overflow = (c10_o_b > 2147483646);
      }

      if (c10_d_overflow) {
        c10_b_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
      }

      for (c10_b_idx_row = 0; c10_b_idx_row < c10_i3; c10_b_idx_row++) {
        c10_c_idx_row = c10_b_idx_row;
        c10_i5 = c10_c_H.size(0);
        c10_i7 = c10_c_idx_row + 1;
        if ((c10_i7 < 1) || (c10_i7 > c10_i5)) {
          emlrtDynamicBoundsCheckR2012b(c10_i7, 1, c10_i5, &c10_to_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_i9 = c10_c_H.size(1);
        if ((c10_c_idx_col < 1) || (c10_c_idx_col > c10_i9)) {
          emlrtDynamicBoundsCheckR2012b(c10_c_idx_col, 1, c10_i9,
            &c10_to_emlrtBCI, (emlrtConstCTX)c10_sp);
        }

        c10_r_x = c10_c_H[(c10_i7 + c10_c_H.size(0) * (c10_c_idx_col - 1)) - 1];
        c10_u_x = c10_r_x;
        c10_y_x = c10_u_x;
        c10_s_y = muDoubleScalarAbs(c10_y_x);
        c10_colSum += c10_s_y;
      }

      c10_c_varargin_1 = c10_H_infnrm;
      c10_c_varargin_2 = c10_colSum;
      c10_g_x = c10_c_varargin_1;
      c10_g_y = c10_c_varargin_2;
      c10_k_x = c10_g_x;
      c10_i_y = c10_g_y;
      c10_p_x = c10_k_x;
      c10_m_y = c10_i_y;
      c10_d_a = c10_p_x;
      c10_s_b = c10_m_y;
      c10_x_x = c10_d_a;
      c10_r_y = c10_s_b;
      c10_cb_x = c10_x_x;
      c10_v_y = c10_r_y;
      c10_H_infnrm = muDoubleScalarMax(c10_cb_x, c10_v_y);
      c10_e_varargin_1 = c10_f_infnrm;
      c10_i11 = c10_f.size(0);
      if ((c10_c_idx_col < 1) || (c10_c_idx_col > c10_i11)) {
        emlrtDynamicBoundsCheckR2012b(c10_c_idx_col, 1, c10_i11,
          &c10_to_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_fb_x = c10_f[c10_c_idx_col - 1];
      c10_gb_x = c10_fb_x;
      c10_hb_x = c10_gb_x;
      c10_f_varargin_2 = muDoubleScalarAbs(c10_hb_x);
      c10_ib_x = c10_e_varargin_1;
      c10_eb_y = c10_f_varargin_2;
      c10_jb_x = c10_ib_x;
      c10_fb_y = c10_eb_y;
      c10_kb_x = c10_jb_x;
      c10_gb_y = c10_fb_y;
      c10_f_a = c10_kb_x;
      c10_v_b = c10_gb_y;
      c10_mb_x = c10_f_a;
      c10_hb_y = c10_v_b;
      c10_ob_x = c10_mb_x;
      c10_ib_y = c10_hb_y;
      c10_f_infnrm = muDoubleScalarMax(c10_ob_x, c10_ib_y);
    }
  } else {
    c10_i = c10_c_H.size(1);
    c10_st.site = &c10_hd_emlrtRSI;
    c10_b = c10_i;
    c10_f_b = c10_b;
    if (c10_f_b < 1) {
      c10_overflow = false;
    } else {
      c10_overflow = (c10_f_b > 2147483646);
    }

    if (c10_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_idx_col = 0; c10_idx_col < c10_i; c10_idx_col++) {
      c10_c_idx_col = c10_idx_col;
      c10_colSum = 0.0;
      c10_i2 = c10_c_H.size(0);
      c10_st.site = &c10_hd_emlrtRSI;
      c10_h_b = c10_i2;
      c10_k_b = c10_h_b;
      if (c10_k_b < 1) {
        c10_c_overflow = false;
      } else {
        c10_c_overflow = (c10_k_b > 2147483646);
      }

      if (c10_c_overflow) {
        c10_b_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
      }

      for (c10_idx_row = 0; c10_idx_row < c10_i2; c10_idx_row++) {
        c10_c_idx_row = c10_idx_row;
        c10_i4 = c10_c_H.size(0);
        c10_i6 = c10_c_idx_row + 1;
        if ((c10_i6 < 1) || (c10_i6 > c10_i4)) {
          emlrtDynamicBoundsCheckR2012b(c10_i6, 1, c10_i4, &c10_to_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_i8 = c10_c_H.size(1);
        c10_i10 = c10_c_idx_col + 1;
        if ((c10_i10 < 1) || (c10_i10 > c10_i8)) {
          emlrtDynamicBoundsCheckR2012b(c10_i10, 1, c10_i8, &c10_to_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_t_x = c10_c_H[(c10_i6 + c10_c_H.size(0) * (c10_i10 - 1)) - 1];
        c10_w_x = c10_t_x;
        c10_ab_x = c10_w_x;
        c10_t_y = muDoubleScalarAbs(c10_ab_x);
        c10_colSum += c10_t_y;
      }

      c10_b_varargin_1 = c10_H_infnrm;
      c10_b_varargin_2 = c10_colSum;
      c10_f_x = c10_b_varargin_1;
      c10_f_y = c10_b_varargin_2;
      c10_j_x = c10_f_x;
      c10_h_y = c10_f_y;
      c10_o_x = c10_j_x;
      c10_k_y = c10_h_y;
      c10_c_a = c10_o_x;
      c10_q_b = c10_k_y;
      c10_v_x = c10_c_a;
      c10_q_y = c10_q_b;
      c10_bb_x = c10_v_x;
      c10_u_y = c10_q_y;
      c10_H_infnrm = muDoubleScalarMax(c10_bb_x, c10_u_y);
    }
  }

  c10_varargin_1 = *c10_tol;
  c10_varargin_2 = c10_f_infnrm;
  c10_x = c10_varargin_1;
  c10_y = c10_varargin_2;
  c10_b_x = c10_x;
  c10_b_y = c10_y;
  c10_c_x = c10_b_x;
  c10_c_y = c10_b_y;
  c10_b_a = c10_c_x;
  c10_p_b = c10_c_y;
  c10_d_x = c10_b_a;
  c10_d_y = c10_p_b;
  c10_e_x = c10_d_x;
  c10_e_y = c10_d_y;
  *c10_tol = muDoubleScalarMax(c10_e_x, c10_e_y);
  c10_d_varargin_1 = *c10_tol;
  c10_d_varargin_2 = c10_H_infnrm;
  c10_m_x = c10_d_varargin_1;
  c10_j_y = c10_d_varargin_2;
  c10_q_x = c10_m_x;
  c10_o_y = c10_j_y;
  c10_s_x = c10_q_x;
  c10_p_y = c10_o_y;
  c10_e_a = c10_s_x;
  c10_t_b = c10_p_y;
  c10_db_x = c10_e_a;
  c10_w_y = c10_t_b;
  c10_eb_x = c10_db_x;
  c10_x_y = c10_w_y;
  *c10_tol = muDoubleScalarMax(c10_eb_x, c10_x_y);
  c10_e_varargin_2 = *c10_tol;
  c10_y_y = c10_e_varargin_2;
  c10_ab_y = c10_y_y;
  c10_bb_y = c10_ab_y;
  c10_u_b = c10_bb_y;
  c10_cb_y = c10_u_b;
  c10_db_y = c10_cb_y;
  *c10_tol = muDoubleScalarMax(1.0, c10_db_y);
}

static void c10_b_driver(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_c_H, coder::array<real_T, 1U>
  &c10_f, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_memspace, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_i_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager,
  c10_s_lryvQQZbN23ozlLWy4I3pD *c10_cholmanager, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_objective, c10_scZhlMkNxPxOgM0FLkVrfPH *c10_b_options,
  c10_sL9bDKomAYkxZSVrG9w6En c10_runTimeOptions)
{
  static char_T c10_b_cv[128] = { '\x00', '\x01', '\x02', '\x03', '\x04', '\x05',
    '\x06', '\a', '\b', '\t', '\n', '\v', '\f', '\r', '\x0e', '\x0f', '\x10',
    '\x11', '\x12', '\x13', '\x14', '\x15', '\x16', '\x17', '\x18', '\x19',
    '\x1a', '\x1b', '\x1c', '\x1d', '\x1e', '\x1f', ' ', '!', '\"', '#', '$',
    '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/', '0', '1', '2', '3',
    '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?', '@', 'a', 'b',
    'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',
    'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '[', '\\', ']', '^', '_', '`',
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
    'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~',
    '\x7f' };

  static char_T c10_b_cv1[8] = { 'q', 'u', 'a', 'd', 'p', 'r', 'o', 'g' };

  ptrdiff_t c10_b_incx_t;
  ptrdiff_t c10_b_incy_t;
  ptrdiff_t c10_b_n_t;
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 2U> c10_b_r;
  coder::array<real_T, 2U> c10_d_H;
  coder::array<real_T, 2U> c10_e_H;
  coder::array<real_T, 2U> c10_s_H;
  coder::array<real_T, 2U> c10_t_H;
  coder::array<real_T, 2U> c10_u_H;
  coder::array<real_T, 1U> c10_b_f;
  coder::array<real_T, 1U> c10_b_solution;
  coder::array<real_T, 1U> c10_b_y;
  coder::array<real_T, 1U> c10_c_f;
  coder::array<real_T, 1U> c10_c_solution;
  coder::array<real_T, 1U> c10_d_f;
  coder::array<real_T, 1U> c10_d_solution;
  coder::array<real_T, 1U> c10_e_f;
  coder::array<real_T, 1U> c10_e_solution;
  coder::array<real_T, 1U> c10_f_f;
  coder::array<real_T, 1U> c10_f_solution;
  coder::array<real_T, 1U> c10_g_solution;
  coder::array<real_T, 1U> c10_x;
  c10_scZhlMkNxPxOgM0FLkVrfPH c10_c_options;
  c10_scZhlMkNxPxOgM0FLkVrfPH c10_d_options;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  real_T c10_d;
  real_T c10_d1;
  real_T c10_d2;
  real_T c10_d3;
  real_T c10_d4;
  real_T c10_maxConstr_new;
  int32_T c10_ab_loop_ub;
  int32_T c10_b;
  int32_T c10_b_idx;
  int32_T c10_b_kstr;
  int32_T c10_b_loop_ub;
  int32_T c10_b_var;
  int32_T c10_bb_loop_ub;
  int32_T c10_c_idx;
  int32_T c10_c_loop_ub;
  int32_T c10_cb_loop_ub;
  int32_T c10_d_idx;
  int32_T c10_d_loop_ub;
  int32_T c10_db_loop_ub;
  int32_T c10_e_b;
  int32_T c10_e_loop_ub;
  int32_T c10_eb_loop_ub;
  int32_T c10_exitg1;
  int32_T c10_f_b;
  int32_T c10_f_loop_ub;
  int32_T c10_f_n;
  int32_T c10_fb_loop_ub;
  int32_T c10_g_b;
  int32_T c10_g_loop_ub;
  int32_T c10_gb_loop_ub;
  int32_T c10_h_b;
  int32_T c10_h_loop_ub;
  int32_T c10_h_n;
  int32_T c10_hb_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i19;
  int32_T c10_i2;
  int32_T c10_i20;
  int32_T c10_i21;
  int32_T c10_i22;
  int32_T c10_i23;
  int32_T c10_i24;
  int32_T c10_i25;
  int32_T c10_i26;
  int32_T c10_i27;
  int32_T c10_i28;
  int32_T c10_i29;
  int32_T c10_i3;
  int32_T c10_i30;
  int32_T c10_i31;
  int32_T c10_i32;
  int32_T c10_i33;
  int32_T c10_i34;
  int32_T c10_i35;
  int32_T c10_i36;
  int32_T c10_i37;
  int32_T c10_i38;
  int32_T c10_i39;
  int32_T c10_i4;
  int32_T c10_i40;
  int32_T c10_i41;
  int32_T c10_i42;
  int32_T c10_i43;
  int32_T c10_i44;
  int32_T c10_i45;
  int32_T c10_i46;
  int32_T c10_i47;
  int32_T c10_i48;
  int32_T c10_i49;
  int32_T c10_i5;
  int32_T c10_i50;
  int32_T c10_i51;
  int32_T c10_i52;
  int32_T c10_i53;
  int32_T c10_i54;
  int32_T c10_i55;
  int32_T c10_i56;
  int32_T c10_i57;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_i_loop_ub;
  int32_T c10_i_n;
  int32_T c10_ib_loop_ub;
  int32_T c10_idx;
  int32_T c10_idxConstr;
  int32_T c10_idxFixed;
  int32_T c10_idxLB;
  int32_T c10_idxUB;
  int32_T c10_j_b;
  int32_T c10_j_loop_ub;
  int32_T c10_j_n;
  int32_T c10_jb_loop_ub;
  int32_T c10_k_loop_ub;
  int32_T c10_k_n;
  int32_T c10_kb_loop_ub;
  int32_T c10_kstr;
  int32_T c10_loop_ub;
  int32_T c10_m_loop_ub;
  int32_T c10_m_n;
  int32_T c10_mb_loop_ub;
  int32_T c10_nVar;
  int32_T c10_o_loop_ub;
  int32_T c10_ob_loop_ub;
  int32_T c10_p_loop_ub;
  int32_T c10_pb_loop_ub;
  int32_T c10_q_loop_ub;
  int32_T c10_qb_loop_ub;
  int32_T c10_r_loop_ub;
  int32_T c10_rb_loop_ub;
  int32_T c10_s_loop_ub;
  int32_T c10_sb_loop_ub;
  int32_T c10_t_loop_ub;
  int32_T c10_tb_loop_ub;
  int32_T c10_u_loop_ub;
  int32_T c10_ub_loop_ub;
  int32_T c10_v_loop_ub;
  int32_T c10_var;
  int32_T c10_w_loop_ub;
  int32_T c10_x_loop_ub;
  int32_T c10_y_loop_ub;
  char_T c10_b_a[8];
  char_T c10_b_x;
  char_T c10_c_x;
  char_T c10_c_y;
  char_T c10_d_x;
  char_T c10_e_x;
  char_T c10_y;
  boolean_T c10_b_overflow;
  boolean_T c10_bool;
  boolean_T c10_c_overflow;
  boolean_T c10_guard1;
  boolean_T c10_k_b;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_st.site = &c10_jd_emlrtRSI;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_validateattributes(chartInstance, &c10_st, c10_c_H);
  c10_solution->iterations = 0;
  c10_runTimeOptions.RemainFeasible = true;
  c10_nVar = c10_i_workingset->nVar;
  c10_st.site = &c10_jd_emlrtRSI;
  chartInstance->c10_d_workingset = *c10_i_workingset;
  c10_i = chartInstance->c10_d_workingset.sizes[0];
  c10_b_st.site = &c10_kd_emlrtRSI;
  c10_b = c10_i;
  c10_e_b = c10_b;
  if (c10_e_b < 1) {
    c10_overflow = false;
  } else {
    c10_overflow = (c10_e_b > 2147483646);
  }

  if (c10_overflow) {
    c10_c_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
  }

  for (c10_idx = 0; c10_idx < c10_i; c10_idx++) {
    c10_b_idx = c10_idx;
    c10_i2 = chartInstance->c10_d_workingset.indexFixed.size(0);
    c10_i3 = c10_b_idx + 1;
    if ((c10_i3 < 1) || (c10_i3 > c10_i2)) {
      emlrtDynamicBoundsCheckR2012b(c10_i3, 1, c10_i2, &c10_uo_emlrtBCI, &c10_st);
    }

    c10_idxFixed = chartInstance->c10_d_workingset.indexFixed[c10_i3 - 1];
    c10_i4 = chartInstance->c10_d_workingset.ub.size(0);
    if ((c10_idxFixed < 1) || (c10_idxFixed > c10_i4)) {
      emlrtDynamicBoundsCheckR2012b(c10_idxFixed, 1, c10_i4, &c10_uo_emlrtBCI,
        &c10_st);
    }

    c10_i5 = c10_solution->xstar.size(0);
    if ((c10_idxFixed < 1) || (c10_idxFixed > c10_i5)) {
      emlrtDynamicBoundsCheckR2012b(c10_idxFixed, 1, c10_i5, &c10_uo_emlrtBCI,
        &c10_st);
    }

    c10_solution->xstar[c10_idxFixed - 1] = chartInstance->
      c10_d_workingset.ub[c10_idxFixed - 1];
  }

  c10_i1 = chartInstance->c10_d_workingset.sizes[3];
  c10_b_st.site = &c10_kd_emlrtRSI;
  c10_f_b = c10_i1;
  c10_g_b = c10_f_b;
  if (c10_g_b < 1) {
    c10_b_overflow = false;
  } else {
    c10_b_overflow = (c10_g_b > 2147483646);
  }

  if (c10_b_overflow) {
    c10_c_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
  }

  for (c10_c_idx = 0; c10_c_idx < c10_i1; c10_c_idx++) {
    c10_b_idx = c10_c_idx;
    c10_idxConstr = chartInstance->c10_d_workingset.isActiveIdx[3] + c10_b_idx;
    if ((c10_idxConstr < 1) || (c10_idxConstr >
         chartInstance->c10_d_workingset.isActiveConstr.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_idxConstr, 1,
        chartInstance->c10_d_workingset.isActiveConstr.size[0], &c10_uo_emlrtBCI,
        &c10_st);
    }

    if (chartInstance->c10_d_workingset.isActiveConstr.data[c10_idxConstr - 1])
    {
      c10_i7 = chartInstance->c10_d_workingset.indexLB.size(0);
      c10_i8 = c10_b_idx + 1;
      if ((c10_i8 < 1) || (c10_i8 > c10_i7)) {
        emlrtDynamicBoundsCheckR2012b(c10_i8, 1, c10_i7, &c10_uo_emlrtBCI,
          &c10_st);
      }

      c10_idxLB = chartInstance->c10_d_workingset.indexLB[c10_i8 - 1];
      c10_i9 = chartInstance->c10_d_workingset.lb.size(0);
      if ((c10_idxLB < 1) || (c10_idxLB > c10_i9)) {
        emlrtDynamicBoundsCheckR2012b(c10_idxLB, 1, c10_i9, &c10_uo_emlrtBCI,
          &c10_st);
      }

      c10_i10 = c10_solution->xstar.size(0);
      if ((c10_idxLB < 1) || (c10_idxLB > c10_i10)) {
        emlrtDynamicBoundsCheckR2012b(c10_idxLB, 1, c10_i10, &c10_uo_emlrtBCI,
          &c10_st);
      }

      c10_solution->xstar[c10_idxLB - 1] = -chartInstance->
        c10_d_workingset.lb[c10_idxLB - 1];
    }
  }

  c10_i6 = chartInstance->c10_d_workingset.sizes[4];
  c10_b_st.site = &c10_kd_emlrtRSI;
  c10_h_b = c10_i6;
  c10_j_b = c10_h_b;
  if (c10_j_b < 1) {
    c10_c_overflow = false;
  } else {
    c10_c_overflow = (c10_j_b > 2147483646);
  }

  if (c10_c_overflow) {
    c10_c_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
  }

  for (c10_d_idx = 0; c10_d_idx < c10_i6; c10_d_idx++) {
    c10_b_idx = c10_d_idx;
    c10_idxConstr = chartInstance->c10_d_workingset.isActiveIdx[4] + c10_b_idx;
    if ((c10_idxConstr < 1) || (c10_idxConstr >
         chartInstance->c10_d_workingset.isActiveConstr.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_idxConstr, 1,
        chartInstance->c10_d_workingset.isActiveConstr.size[0], &c10_uo_emlrtBCI,
        &c10_st);
    }

    if (chartInstance->c10_d_workingset.isActiveConstr.data[c10_idxConstr - 1])
    {
      c10_i11 = chartInstance->c10_d_workingset.indexUB.size(0);
      c10_i13 = c10_b_idx + 1;
      if ((c10_i13 < 1) || (c10_i13 > c10_i11)) {
        emlrtDynamicBoundsCheckR2012b(c10_i13, 1, c10_i11, &c10_uo_emlrtBCI,
          &c10_st);
      }

      c10_idxUB = chartInstance->c10_d_workingset.indexUB[c10_i13 - 1];
      c10_i14 = chartInstance->c10_d_workingset.ub.size(0);
      if ((c10_idxUB < 1) || (c10_idxUB > c10_i14)) {
        emlrtDynamicBoundsCheckR2012b(c10_idxUB, 1, c10_i14, &c10_uo_emlrtBCI,
          &c10_st);
      }

      c10_i15 = c10_solution->xstar.size(0);
      if ((c10_idxUB < 1) || (c10_idxUB > c10_i15)) {
        emlrtDynamicBoundsCheckR2012b(c10_idxUB, 1, c10_i15, &c10_uo_emlrtBCI,
          &c10_st);
      }

      c10_solution->xstar[c10_idxUB - 1] = chartInstance->
        c10_d_workingset.ub[c10_idxUB - 1];
    }
  }

  c10_st.site = &c10_jd_emlrtRSI;
  c10_b_PresolveWorkingSet(chartInstance, &c10_st, c10_solution, c10_memspace,
    c10_i_workingset, c10_b_qrmanager);
  if (c10_solution->state < 0) {
  } else {
    c10_solution->iterations = 0;
    c10_b_solution.set_size(&c10_sf_emlrtRTEI, c10_sp, c10_solution->xstar.size
      (0));
    c10_loop_ub = c10_solution->xstar.size(0) - 1;
    for (c10_i12 = 0; c10_i12 <= c10_loop_ub; c10_i12++) {
      c10_b_solution[c10_i12] = c10_solution->xstar[c10_i12];
    }

    c10_st.site = &c10_jd_emlrtRSI;
    c10_d = c10_f_maxConstraintViolation(chartInstance, &c10_st,
      c10_i_workingset, c10_b_solution);
    c10_solution->maxConstr = c10_d;
    c10_guard1 = false;
    if (c10_solution->maxConstr > 1.0E-8 * c10_runTimeOptions.ConstrRelTolFactor)
    {
      c10_d_H.set_size(&c10_sf_emlrtRTEI, c10_sp, c10_c_H.size(0), c10_c_H.size
                       (1));
      c10_b_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
      for (c10_i16 = 0; c10_i16 <= c10_b_loop_ub; c10_i16++) {
        c10_d_H[c10_i16] = c10_c_H[c10_i16];
      }

      c10_b_f.set_size(&c10_sf_emlrtRTEI, c10_sp, c10_f.size(0));
      c10_d_loop_ub = c10_f.size(0) - 1;
      for (c10_i18 = 0; c10_i18 <= c10_d_loop_ub; c10_i18++) {
        c10_b_f[c10_i18] = c10_f[c10_i18];
      }

      c10_st.site = &c10_jd_emlrtRSI;
      c10_b_phaseone(chartInstance, &c10_st, c10_d_H, c10_b_f, c10_solution,
                     c10_memspace, c10_i_workingset, c10_b_qrmanager,
                     c10_cholmanager, c10_objective, c10_b_options,
                     &c10_runTimeOptions);
      if (c10_solution->state == 0) {
      } else {
        c10_c_solution.set_size(&c10_sf_emlrtRTEI, c10_sp,
          c10_solution->xstar.size(0));
        c10_f_loop_ub = c10_solution->xstar.size(0) - 1;
        for (c10_i20 = 0; c10_i20 <= c10_f_loop_ub; c10_i20++) {
          c10_c_solution[c10_i20] = c10_solution->xstar[c10_i20];
        }

        c10_st.site = &c10_jd_emlrtRSI;
        c10_d1 = c10_f_maxConstraintViolation(chartInstance, &c10_st,
          c10_i_workingset, c10_c_solution);
        c10_solution->maxConstr = c10_d1;
        if (c10_solution->maxConstr > 1.0E-8 *
            c10_runTimeOptions.ConstrRelTolFactor) {
          c10_x.set_size(&c10_sf_emlrtRTEI, c10_sp, c10_solution->lambda.size[0]);
          c10_g_loop_ub = c10_solution->lambda.size[0] - 1;
          for (c10_i22 = 0; c10_i22 <= c10_g_loop_ub; c10_i22++) {
            c10_x[c10_i22] = c10_solution->lambda.data[c10_i22];
          }

          c10_st.site = &c10_jd_emlrtRSI;
          c10_b_xcopy(chartInstance, &c10_st, c10_i_workingset->mConstrMax,
                      c10_x);
          c10_solution->lambda.size[0] = c10_x.size(0);
          c10_i_loop_ub = c10_x.size(0) - 1;
          for (c10_i24 = 0; c10_i24 <= c10_i_loop_ub; c10_i24++) {
            c10_solution->lambda.data[c10_i24] = c10_x[c10_i24];
          }

          c10_b_r.set_size(&c10_sf_emlrtRTEI, c10_sp,
                           c10_memspace->workspace_double.size(0),
                           c10_memspace->workspace_double.size(1));
          c10_m_loop_ub = c10_memspace->workspace_double.size(0) *
            c10_memspace->workspace_double.size(1) - 1;
          for (c10_i27 = 0; c10_i27 <= c10_m_loop_ub; c10_i27++) {
            c10_b_r[c10_i27] = c10_memspace->workspace_double[c10_i27];
          }

          c10_s_H.set_size(&c10_sf_emlrtRTEI, c10_sp, c10_c_H.size(0),
                           c10_c_H.size(1));
          c10_p_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
          for (c10_i29 = 0; c10_i29 <= c10_p_loop_ub; c10_i29++) {
            c10_s_H[c10_i29] = c10_c_H[c10_i29];
          }

          c10_d_f.set_size(&c10_sf_emlrtRTEI, c10_sp, c10_f.size(0));
          c10_s_loop_ub = c10_f.size(0) - 1;
          for (c10_i32 = 0; c10_i32 <= c10_s_loop_ub; c10_i32++) {
            c10_d_f[c10_i32] = c10_f[c10_i32];
          }

          c10_f_solution.set_size(&c10_sf_emlrtRTEI, c10_sp,
            c10_solution->xstar.size(0));
          c10_v_loop_ub = c10_solution->xstar.size(0) - 1;
          for (c10_i35 = 0; c10_i35 <= c10_v_loop_ub; c10_i35++) {
            c10_f_solution[c10_i35] = c10_solution->xstar[c10_i35];
          }

          c10_st.site = &c10_jd_emlrtRSI;
          c10_d3 = c10_b_computeFval(chartInstance, &c10_st, c10_objective,
            c10_b_r, c10_s_H, c10_d_f, c10_f_solution);
          c10_solution->fstar = c10_d3;
          c10_memspace->workspace_double.set_size(&c10_sf_emlrtRTEI, c10_sp,
            c10_b_r.size(0), c10_b_r.size(1));
          c10_ab_loop_ub = c10_b_r.size(0) * c10_b_r.size(1) - 1;
          for (c10_i39 = 0; c10_i39 <= c10_ab_loop_ub; c10_i39++) {
            c10_memspace->workspace_double[c10_i39] = c10_b_r[c10_i39];
          }

          c10_solution->state = -2;
        } else {
          if (c10_solution->maxConstr > 0.0) {
            c10_st.site = &c10_jd_emlrtRSI;
            c10_f_n = c10_nVar;
            c10_x.set_size(&c10_sf_emlrtRTEI, &c10_st, c10_solution->xstar.size
                           (0));
            c10_h_loop_ub = c10_solution->xstar.size(0) - 1;
            for (c10_i23 = 0; c10_i23 <= c10_h_loop_ub; c10_i23++) {
              c10_x[c10_i23] = c10_solution->xstar[c10_i23];
            }

            c10_b_y.set_size(&c10_sf_emlrtRTEI, &c10_st,
                             c10_solution->searchDir.size(0));
            c10_j_loop_ub = c10_solution->searchDir.size(0) - 1;
            for (c10_i25 = 0; c10_i25 <= c10_j_loop_ub; c10_i25++) {
              c10_b_y[c10_i25] = c10_solution->searchDir[c10_i25];
            }

            c10_solution->searchDir.set_size(&c10_sf_emlrtRTEI, &c10_st,
              c10_b_y.size(0));
            c10_o_loop_ub = c10_b_y.size(0) - 1;
            for (c10_i28 = 0; c10_i28 <= c10_o_loop_ub; c10_i28++) {
              c10_solution->searchDir[c10_i28] = c10_b_y[c10_i28];
            }

            if (!(c10_f_n < 1)) {
              c10_b_st.site = &c10_ad_emlrtRSI;
              c10_h_n = c10_f_n;
              c10_b_y.set_size(&c10_bf_emlrtRTEI, &c10_b_st,
                               c10_solution->searchDir.size(0));
              c10_r_loop_ub = c10_solution->searchDir.size(0) - 1;
              for (c10_i31 = 0; c10_i31 <= c10_r_loop_ub; c10_i31++) {
                c10_b_y[c10_i31] = c10_solution->searchDir[c10_i31];
              }

              c10_solution->searchDir.set_size(&c10_sf_emlrtRTEI, &c10_b_st,
                c10_b_y.size(0));
              c10_u_loop_ub = c10_b_y.size(0) - 1;
              for (c10_i34 = 0; c10_i34 <= c10_u_loop_ub; c10_i34++) {
                c10_solution->searchDir[c10_i34] = c10_b_y[c10_i34];
              }

              c10_c_st.site = &c10_cd_emlrtRSI;
              c10_i_n = c10_h_n;
              c10_b_y.set_size(&c10_cf_emlrtRTEI, &c10_c_st,
                               c10_solution->searchDir.size(0));
              c10_x_loop_ub = c10_solution->searchDir.size(0) - 1;
              for (c10_i37 = 0; c10_i37 <= c10_x_loop_ub; c10_i37++) {
                c10_b_y[c10_i37] = c10_solution->searchDir[c10_i37];
              }

              c10_solution->searchDir.set_size(&c10_sf_emlrtRTEI, &c10_c_st,
                c10_b_y.size(0));
              c10_cb_loop_ub = c10_b_y.size(0) - 1;
              for (c10_i41 = 0; c10_i41 <= c10_cb_loop_ub; c10_i41++) {
                c10_solution->searchDir[c10_i41] = c10_b_y[c10_i41];
              }

              c10_var = c10_i_n;
              c10_n_t = (ptrdiff_t)c10_var;
              c10_incx_t = (ptrdiff_t)1;
              c10_incy_t = (ptrdiff_t)1;
              dcopy(&c10_n_t, &(c10_x.data())[0], &c10_incx_t,
                    &(c10_solution->searchDir.data())[0], &c10_incy_t);
            }

            c10_st.site = &c10_jd_emlrtRSI;
            c10_b_PresolveWorkingSet(chartInstance, &c10_st, c10_solution,
              c10_memspace, c10_i_workingset, c10_b_qrmanager);
            c10_e_solution.set_size(&c10_sf_emlrtRTEI, c10_sp,
              c10_solution->xstar.size(0));
            c10_t_loop_ub = c10_solution->xstar.size(0) - 1;
            for (c10_i33 = 0; c10_i33 <= c10_t_loop_ub; c10_i33++) {
              c10_e_solution[c10_i33] = c10_solution->xstar[c10_i33];
            }

            c10_st.site = &c10_jd_emlrtRSI;
            c10_maxConstr_new = c10_f_maxConstraintViolation(chartInstance,
              &c10_st, c10_i_workingset, c10_e_solution);
            if (c10_maxConstr_new >= c10_solution->maxConstr) {
              c10_solution->maxConstr = c10_maxConstr_new;
              c10_st.site = &c10_jd_emlrtRSI;
              c10_j_n = c10_nVar;
              c10_x.set_size(&c10_sf_emlrtRTEI, &c10_st,
                             c10_solution->searchDir.size(0));
              c10_y_loop_ub = c10_solution->searchDir.size(0) - 1;
              for (c10_i38 = 0; c10_i38 <= c10_y_loop_ub; c10_i38++) {
                c10_x[c10_i38] = c10_solution->searchDir[c10_i38];
              }

              c10_b_y.set_size(&c10_sf_emlrtRTEI, &c10_st,
                               c10_solution->xstar.size(0));
              c10_db_loop_ub = c10_solution->xstar.size(0) - 1;
              for (c10_i42 = 0; c10_i42 <= c10_db_loop_ub; c10_i42++) {
                c10_b_y[c10_i42] = c10_solution->xstar[c10_i42];
              }

              c10_solution->xstar.set_size(&c10_sf_emlrtRTEI, &c10_st,
                c10_b_y.size(0));
              c10_fb_loop_ub = c10_b_y.size(0) - 1;
              for (c10_i44 = 0; c10_i44 <= c10_fb_loop_ub; c10_i44++) {
                c10_solution->xstar[c10_i44] = c10_b_y[c10_i44];
              }

              if (!(c10_j_n < 1)) {
                c10_b_st.site = &c10_ad_emlrtRSI;
                c10_k_n = c10_j_n;
                c10_b_y.set_size(&c10_bf_emlrtRTEI, &c10_b_st,
                                 c10_solution->xstar.size(0));
                c10_hb_loop_ub = c10_solution->xstar.size(0) - 1;
                for (c10_i46 = 0; c10_i46 <= c10_hb_loop_ub; c10_i46++) {
                  c10_b_y[c10_i46] = c10_solution->xstar[c10_i46];
                }

                c10_solution->xstar.set_size(&c10_sf_emlrtRTEI, &c10_b_st,
                  c10_b_y.size(0));
                c10_jb_loop_ub = c10_b_y.size(0) - 1;
                for (c10_i48 = 0; c10_i48 <= c10_jb_loop_ub; c10_i48++) {
                  c10_solution->xstar[c10_i48] = c10_b_y[c10_i48];
                }

                c10_c_st.site = &c10_cd_emlrtRSI;
                c10_m_n = c10_k_n;
                c10_b_y.set_size(&c10_cf_emlrtRTEI, &c10_c_st,
                                 c10_solution->xstar.size(0));
                c10_mb_loop_ub = c10_solution->xstar.size(0) - 1;
                for (c10_i50 = 0; c10_i50 <= c10_mb_loop_ub; c10_i50++) {
                  c10_b_y[c10_i50] = c10_solution->xstar[c10_i50];
                }

                c10_solution->xstar.set_size(&c10_sf_emlrtRTEI, &c10_c_st,
                  c10_b_y.size(0));
                c10_pb_loop_ub = c10_b_y.size(0) - 1;
                for (c10_i52 = 0; c10_i52 <= c10_pb_loop_ub; c10_i52++) {
                  c10_solution->xstar[c10_i52] = c10_b_y[c10_i52];
                }

                c10_b_var = c10_m_n;
                c10_b_n_t = (ptrdiff_t)c10_b_var;
                c10_b_incx_t = (ptrdiff_t)1;
                c10_b_incy_t = (ptrdiff_t)1;
                dcopy(&c10_b_n_t, &(c10_x.data())[0], &c10_b_incx_t,
                      &(c10_solution->xstar.data())[0], &c10_b_incy_t);
              }
            }
          }

          c10_guard1 = true;
        }
      }
    } else {
      c10_guard1 = true;
    }

    if (c10_guard1) {
      c10_e_H.set_size(&c10_sf_emlrtRTEI, c10_sp, c10_c_H.size(0), c10_c_H.size
                       (1));
      c10_c_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
      for (c10_i17 = 0; c10_i17 <= c10_c_loop_ub; c10_i17++) {
        c10_e_H[c10_i17] = c10_c_H[c10_i17];
      }

      c10_c_f.set_size(&c10_sf_emlrtRTEI, c10_sp, c10_f.size(0));
      c10_e_loop_ub = c10_f.size(0) - 1;
      for (c10_i19 = 0; c10_i19 <= c10_e_loop_ub; c10_i19++) {
        c10_c_f[c10_i19] = c10_f[c10_i19];
      }

      c10_st.site = &c10_jd_emlrtRSI;
      c10_c_options = *c10_b_options;
      c10_b_iterate(chartInstance, &c10_st, c10_e_H, c10_c_f, c10_solution,
                    c10_memspace, c10_i_workingset, c10_b_qrmanager,
                    c10_cholmanager, c10_objective, &c10_c_options,
                    c10_runTimeOptions);
      for (c10_i21 = 0; c10_i21 < 8; c10_i21++) {
        c10_b_a[c10_i21] = c10_b_options->SolverName[c10_i21];
      }

      c10_bool = false;
      c10_kstr = 1;
      do {
        c10_exitg1 = 0;
        if (c10_kstr - 1 < 8) {
          c10_b_kstr = c10_kstr - 1;
          c10_b_x = c10_b_a[c10_b_kstr];
          c10_c_x = c10_b_x;
          c10_y = c10_b_cv[static_cast<int32_T>(c10_c_x)];
          c10_d_x = c10_b_cv1[c10_b_kstr];
          c10_e_x = c10_d_x;
          c10_c_y = c10_b_cv[static_cast<int32_T>(c10_e_x)];
          if (c10_y != c10_c_y) {
            c10_exitg1 = 1;
          } else {
            c10_kstr++;
          }
        } else {
          c10_bool = true;
          c10_exitg1 = 1;
        }
      } while (c10_exitg1 == 0);

      if (c10_bool) {
        c10_k_b = true;
      } else {
        c10_k_b = false;
      }

      if ((!c10_k_b) || (c10_solution->state == -6)) {
      } else {
        c10_d_solution.set_size(&c10_sf_emlrtRTEI, c10_sp,
          c10_solution->xstar.size(0));
        c10_k_loop_ub = c10_solution->xstar.size(0) - 1;
        for (c10_i26 = 0; c10_i26 <= c10_k_loop_ub; c10_i26++) {
          c10_d_solution[c10_i26] = c10_solution->xstar[c10_i26];
        }

        c10_st.site = &c10_jd_emlrtRSI;
        c10_d2 = c10_f_maxConstraintViolation(chartInstance, &c10_st,
          c10_i_workingset, c10_d_solution);
        c10_solution->maxConstr = c10_d2;
        c10_b_r.set_size(&c10_sf_emlrtRTEI, c10_sp,
                         c10_memspace->workspace_double.size(0),
                         c10_memspace->workspace_double.size(1));
        c10_q_loop_ub = c10_memspace->workspace_double.size(0) *
          c10_memspace->workspace_double.size(1) - 1;
        for (c10_i30 = 0; c10_i30 <= c10_q_loop_ub; c10_i30++) {
          c10_b_r[c10_i30] = c10_memspace->workspace_double[c10_i30];
        }

        chartInstance->c10_e_workingset = *c10_i_workingset;
        c10_st.site = &c10_jd_emlrtRSI;
        c10_b_computeFirstOrderOpt(chartInstance, &c10_st, c10_solution,
          c10_objective, &chartInstance->c10_e_workingset, c10_b_r);
        c10_memspace->workspace_double.set_size(&c10_sf_emlrtRTEI, c10_sp,
          c10_b_r.size(0), c10_b_r.size(1));
        c10_w_loop_ub = c10_b_r.size(0) * c10_b_r.size(1) - 1;
        for (c10_i36 = 0; c10_i36 <= c10_w_loop_ub; c10_i36++) {
          c10_memspace->workspace_double[c10_i36] = c10_b_r[c10_i36];
        }

        c10_runTimeOptions.RemainFeasible = false;
        while ((c10_solution->iterations < c10_runTimeOptions.MaxIterations) &&
               ((c10_solution->state == -7) || ((c10_solution->state == 1) &&
                 ((c10_solution->maxConstr > 1.0E-8 *
                   c10_runTimeOptions.ConstrRelTolFactor) ||
                  (c10_solution->firstorderopt > 1.0E-8 *
                   c10_runTimeOptions.ProbRelTolFactor))))) {
          c10_x.set_size(&c10_sf_emlrtRTEI, c10_sp, c10_solution->xstar.size(0));
          c10_bb_loop_ub = c10_solution->xstar.size(0) - 1;
          for (c10_i40 = 0; c10_i40 <= c10_bb_loop_ub; c10_i40++) {
            c10_x[c10_i40] = c10_solution->xstar[c10_i40];
          }

          c10_b_r.set_size(&c10_sf_emlrtRTEI, c10_sp,
                           c10_memspace->workspace_double.size(0),
                           c10_memspace->workspace_double.size(1));
          c10_eb_loop_ub = c10_memspace->workspace_double.size(0) *
            c10_memspace->workspace_double.size(1) - 1;
          for (c10_i43 = 0; c10_i43 <= c10_eb_loop_ub; c10_i43++) {
            c10_b_r[c10_i43] = c10_memspace->workspace_double[c10_i43];
          }

          c10_st.site = &c10_jd_emlrtRSI;
          c10_b_feasibleX0ForWorkingSet(chartInstance, &c10_st, c10_b_r, c10_x,
            c10_i_workingset, c10_b_qrmanager);
          c10_solution->xstar.set_size(&c10_sf_emlrtRTEI, c10_sp, c10_x.size(0));
          c10_gb_loop_ub = c10_x.size(0) - 1;
          for (c10_i45 = 0; c10_i45 <= c10_gb_loop_ub; c10_i45++) {
            c10_solution->xstar[c10_i45] = c10_x[c10_i45];
          }

          c10_memspace->workspace_double.set_size(&c10_sf_emlrtRTEI, c10_sp,
            c10_b_r.size(0), c10_b_r.size(1));
          c10_ib_loop_ub = c10_b_r.size(0) * c10_b_r.size(1) - 1;
          for (c10_i47 = 0; c10_i47 <= c10_ib_loop_ub; c10_i47++) {
            c10_memspace->workspace_double[c10_i47] = c10_b_r[c10_i47];
          }

          c10_st.site = &c10_jd_emlrtRSI;
          c10_b_PresolveWorkingSet(chartInstance, &c10_st, c10_solution,
            c10_memspace, c10_i_workingset, c10_b_qrmanager);
          c10_t_H.set_size(&c10_sf_emlrtRTEI, c10_sp, c10_c_H.size(0),
                           c10_c_H.size(1));
          c10_kb_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
          for (c10_i49 = 0; c10_i49 <= c10_kb_loop_ub; c10_i49++) {
            c10_t_H[c10_i49] = c10_c_H[c10_i49];
          }

          c10_e_f.set_size(&c10_sf_emlrtRTEI, c10_sp, c10_f.size(0));
          c10_ob_loop_ub = c10_f.size(0) - 1;
          for (c10_i51 = 0; c10_i51 <= c10_ob_loop_ub; c10_i51++) {
            c10_e_f[c10_i51] = c10_f[c10_i51];
          }

          c10_st.site = &c10_jd_emlrtRSI;
          c10_b_phaseone(chartInstance, &c10_st, c10_t_H, c10_e_f, c10_solution,
                         c10_memspace, c10_i_workingset, c10_b_qrmanager,
                         c10_cholmanager, c10_objective, c10_b_options,
                         &c10_runTimeOptions);
          c10_u_H.set_size(&c10_sf_emlrtRTEI, c10_sp, c10_c_H.size(0),
                           c10_c_H.size(1));
          c10_qb_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
          for (c10_i53 = 0; c10_i53 <= c10_qb_loop_ub; c10_i53++) {
            c10_u_H[c10_i53] = c10_c_H[c10_i53];
          }

          c10_f_f.set_size(&c10_sf_emlrtRTEI, c10_sp, c10_f.size(0));
          c10_rb_loop_ub = c10_f.size(0) - 1;
          for (c10_i54 = 0; c10_i54 <= c10_rb_loop_ub; c10_i54++) {
            c10_f_f[c10_i54] = c10_f[c10_i54];
          }

          c10_st.site = &c10_jd_emlrtRSI;
          c10_d_options = *c10_b_options;
          c10_b_iterate(chartInstance, &c10_st, c10_u_H, c10_f_f, c10_solution,
                        c10_memspace, c10_i_workingset, c10_b_qrmanager,
                        c10_cholmanager, c10_objective, &c10_d_options,
                        c10_runTimeOptions);
          c10_g_solution.set_size(&c10_sf_emlrtRTEI, c10_sp,
            c10_solution->xstar.size(0));
          c10_sb_loop_ub = c10_solution->xstar.size(0) - 1;
          for (c10_i55 = 0; c10_i55 <= c10_sb_loop_ub; c10_i55++) {
            c10_g_solution[c10_i55] = c10_solution->xstar[c10_i55];
          }

          c10_st.site = &c10_jd_emlrtRSI;
          c10_d4 = c10_f_maxConstraintViolation(chartInstance, &c10_st,
            c10_i_workingset, c10_g_solution);
          c10_solution->maxConstr = c10_d4;
          c10_b_r.set_size(&c10_sf_emlrtRTEI, c10_sp,
                           c10_memspace->workspace_double.size(0),
                           c10_memspace->workspace_double.size(1));
          c10_tb_loop_ub = c10_memspace->workspace_double.size(0) *
            c10_memspace->workspace_double.size(1) - 1;
          for (c10_i56 = 0; c10_i56 <= c10_tb_loop_ub; c10_i56++) {
            c10_b_r[c10_i56] = c10_memspace->workspace_double[c10_i56];
          }

          chartInstance->c10_f_workingset = *c10_i_workingset;
          c10_st.site = &c10_jd_emlrtRSI;
          c10_b_computeFirstOrderOpt(chartInstance, &c10_st, c10_solution,
            c10_objective, &chartInstance->c10_f_workingset, c10_b_r);
          c10_memspace->workspace_double.set_size(&c10_sf_emlrtRTEI, c10_sp,
            c10_b_r.size(0), c10_b_r.size(1));
          c10_ub_loop_ub = c10_b_r.size(0) * c10_b_r.size(1) - 1;
          for (c10_i57 = 0; c10_i57 <= c10_ub_loop_ub; c10_i57++) {
            c10_memspace->workspace_double[c10_i57] = c10_b_r[c10_i57];
          }
        }
      }
    }
  }
}

static void c10_b_PresolveWorkingSet(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_memspace, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_i_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager)
{
  ptrdiff_t c10_b_incx_t;
  ptrdiff_t c10_b_incy_t;
  ptrdiff_t c10_b_n_t;
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 2U> c10_y;
  coder::array<real_T, 1U> c10_b_solution;
  coder::array<real_T, 1U> c10_x;
  coder::array<int32_T, 1U> c10_b_r;
  coder::array<int32_T, 1U> c10_r1;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_d_st;
  emlrtStack c10_st;
  real_T c10_b_tol;
  real_T c10_b_x;
  real_T c10_b_y;
  real_T c10_c_x;
  real_T c10_c_y;
  real_T c10_constrViolation;
  real_T c10_d_x;
  real_T c10_e_x;
  real_T c10_f_x;
  real_T c10_g_x;
  real_T c10_tol;
  int32_T c10_TYPE;
  int32_T c10_ab_loop_ub;
  int32_T c10_b;
  int32_T c10_b_TYPE;
  int32_T c10_b_a;
  int32_T c10_b_idx;
  int32_T c10_b_idxConstr;
  int32_T c10_b_idxDiag;
  int32_T c10_b_idxPosATwset;
  int32_T c10_b_idxPosQR;
  int32_T c10_b_idx_col;
  int32_T c10_b_idx_global;
  int32_T c10_b_idx_local;
  int32_T c10_b_ix0;
  int32_T c10_b_iy0;
  int32_T c10_b_loop_ub;
  int32_T c10_b_mWorkingEq;
  int32_T c10_b_mWorkingFixed;
  int32_T c10_b_mWorkingIneq;
  int32_T c10_b_mWorkingLB;
  int32_T c10_b_mWorkingUB;
  int32_T c10_b_nActiveConstr;
  int32_T c10_b_nDepIneq;
  int32_T c10_b_nFixedConstr;
  int32_T c10_b_nVar;
  int32_T c10_b_startIdx;
  int32_T c10_b_totalWorkingIneq;
  int32_T c10_b_var;
  int32_T c10_bb_loop_ub;
  int32_T c10_c_a;
  int32_T c10_c_idx;
  int32_T c10_c_idx_col;
  int32_T c10_c_ix0;
  int32_T c10_c_iy0;
  int32_T c10_c_loop_ub;
  int32_T c10_c_nVar;
  int32_T c10_cb_loop_ub;
  int32_T c10_d_a;
  int32_T c10_d_idx;
  int32_T c10_d_idx_col;
  int32_T c10_d_ix0;
  int32_T c10_d_iy0;
  int32_T c10_d_loop_ub;
  int32_T c10_db_loop_ub;
  int32_T c10_e_a;
  int32_T c10_e_b;
  int32_T c10_e_idx;
  int32_T c10_e_ix0;
  int32_T c10_e_iy0;
  int32_T c10_e_loop_ub;
  int32_T c10_eb_loop_ub;
  int32_T c10_f_b;
  int32_T c10_f_idx;
  int32_T c10_f_ix0;
  int32_T c10_f_iy0;
  int32_T c10_f_loop_ub;
  int32_T c10_f_n;
  int32_T c10_fb_loop_ub;
  int32_T c10_g_b;
  int32_T c10_g_idx;
  int32_T c10_g_loop_ub;
  int32_T c10_gb_loop_ub;
  int32_T c10_h_b;
  int32_T c10_h_idx;
  int32_T c10_h_loop_ub;
  int32_T c10_h_n;
  int32_T c10_hb_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i19;
  int32_T c10_i2;
  int32_T c10_i20;
  int32_T c10_i21;
  int32_T c10_i22;
  int32_T c10_i23;
  int32_T c10_i24;
  int32_T c10_i25;
  int32_T c10_i26;
  int32_T c10_i27;
  int32_T c10_i28;
  int32_T c10_i29;
  int32_T c10_i3;
  int32_T c10_i30;
  int32_T c10_i31;
  int32_T c10_i32;
  int32_T c10_i33;
  int32_T c10_i34;
  int32_T c10_i35;
  int32_T c10_i36;
  int32_T c10_i37;
  int32_T c10_i38;
  int32_T c10_i39;
  int32_T c10_i4;
  int32_T c10_i40;
  int32_T c10_i41;
  int32_T c10_i42;
  int32_T c10_i43;
  int32_T c10_i44;
  int32_T c10_i45;
  int32_T c10_i46;
  int32_T c10_i47;
  int32_T c10_i48;
  int32_T c10_i49;
  int32_T c10_i5;
  int32_T c10_i50;
  int32_T c10_i51;
  int32_T c10_i52;
  int32_T c10_i53;
  int32_T c10_i54;
  int32_T c10_i55;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_i_loop_ub;
  int32_T c10_i_n;
  int32_T c10_idx;
  int32_T c10_idxConstr;
  int32_T c10_idxDiag;
  int32_T c10_idxPosATwset;
  int32_T c10_idxPosQR;
  int32_T c10_idx_col;
  int32_T c10_idx_global;
  int32_T c10_idx_local;
  int32_T c10_ix0;
  int32_T c10_iy0;
  int32_T c10_j_b;
  int32_T c10_j_loop_ub;
  int32_T c10_j_n;
  int32_T c10_k_b;
  int32_T c10_k_loop_ub;
  int32_T c10_k_n;
  int32_T c10_loop_ub;
  int32_T c10_mEq;
  int32_T c10_mFixed;
  int32_T c10_mWorkingEq;
  int32_T c10_mWorkingFixed;
  int32_T c10_mWorkingIneq;
  int32_T c10_mWorkingLB;
  int32_T c10_mWorkingUB;
  int32_T c10_m_loop_ub;
  int32_T c10_m_n;
  int32_T c10_nActiveConstr;
  int32_T c10_nDepIneq;
  int32_T c10_nFixedConstr;
  int32_T c10_nVar;
  int32_T c10_o_b;
  int32_T c10_o_loop_ub;
  int32_T c10_p_b;
  int32_T c10_p_loop_ub;
  int32_T c10_q_b;
  int32_T c10_q_loop_ub;
  int32_T c10_r_loop_ub;
  int32_T c10_s_b;
  int32_T c10_s_loop_ub;
  int32_T c10_startIdx;
  int32_T c10_t_b;
  int32_T c10_t_loop_ub;
  int32_T c10_totalWorkingIneq;
  int32_T c10_u_loop_ub;
  int32_T c10_v_loop_ub;
  int32_T c10_var;
  int32_T c10_w_loop_ub;
  int32_T c10_x_loop_ub;
  int32_T c10_y_loop_ub;
  boolean_T c10_b_okWorkingSet;
  boolean_T c10_b_overflow;
  boolean_T c10_c_okWorkingSet;
  boolean_T c10_c_overflow;
  boolean_T c10_d_overflow;
  boolean_T c10_e_overflow;
  boolean_T c10_exitg1;
  boolean_T c10_f_overflow;
  boolean_T c10_guard1;
  boolean_T c10_okWorkingSet;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_d_st.prev = &c10_c_st;
  c10_d_st.tls = c10_c_st.tls;
  c10_solution->state = 82;
  c10_st.site = &c10_md_emlrtRSI;
  c10_i = c10_b_RemoveDependentEq_(chartInstance, &c10_st, c10_memspace,
    c10_i_workingset, c10_b_qrmanager);
  if ((c10_i != -1) && (c10_i_workingset->nActiveConstr <= c10_b_qrmanager->ldq))
  {
    c10_okWorkingSet = true;
  } else {
    c10_okWorkingSet = false;
  }

  if (c10_okWorkingSet) {
    c10_st.site = &c10_md_emlrtRSI;
    c10_nActiveConstr = c10_i_workingset->nActiveConstr;
    c10_mWorkingFixed = c10_i_workingset->nWConstr[0];
    c10_mWorkingEq = c10_i_workingset->nWConstr[1];
    c10_mWorkingIneq = c10_i_workingset->nWConstr[2];
    c10_mWorkingLB = c10_i_workingset->nWConstr[3];
    c10_mWorkingUB = c10_i_workingset->nWConstr[4];
    c10_totalWorkingIneq = (c10_mWorkingIneq + c10_mWorkingLB) + c10_mWorkingUB;
    c10_nFixedConstr = c10_mWorkingEq + c10_mWorkingFixed;
    c10_nVar = c10_i_workingset->nVar;
    if (!(c10_totalWorkingIneq <= 0)) {
      c10_tol = 100.0 * static_cast<real_T>(c10_nVar) * 2.2204460492503131E-16;
      c10_b_st.site = &c10_ig_emlrtRSI;
      c10_b = c10_nFixedConstr;
      c10_e_b = c10_b;
      if (c10_e_b < 1) {
        c10_overflow = false;
      } else {
        c10_overflow = (c10_e_b > 2147483646);
      }

      if (c10_overflow) {
        c10_c_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
      }

      for (c10_idx = 0; c10_idx < c10_nFixedConstr; c10_idx++) {
        c10_b_idx = c10_idx;
        c10_i4 = c10_b_qrmanager->jpvt.size(0);
        c10_i6 = c10_b_idx + 1;
        if ((c10_i6 < 1) || (c10_i6 > c10_i4)) {
          emlrtDynamicBoundsCheckR2012b(c10_i6, 1, c10_i4, &c10_vo_emlrtBCI,
            &c10_st);
        }

        c10_b_qrmanager->jpvt[c10_i6 - 1] = 1;
      }

      c10_i3 = c10_nFixedConstr + 1;
      c10_b_st.site = &c10_ig_emlrtRSI;
      c10_b_a = c10_i3;
      c10_f_b = c10_nActiveConstr;
      c10_c_a = c10_b_a;
      c10_g_b = c10_f_b;
      if (c10_c_a > c10_g_b) {
        c10_b_overflow = false;
      } else {
        c10_b_overflow = (c10_g_b > 2147483646);
      }

      if (c10_b_overflow) {
        c10_c_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
      }

      for (c10_c_idx = c10_i3; c10_c_idx <= c10_nActiveConstr; c10_c_idx++) {
        c10_i9 = c10_b_qrmanager->jpvt.size(0);
        if ((c10_c_idx < 1) || (c10_c_idx > c10_i9)) {
          emlrtDynamicBoundsCheckR2012b(c10_c_idx, 1, c10_i9, &c10_vo_emlrtBCI,
            &c10_st);
        }

        c10_b_qrmanager->jpvt[c10_c_idx - 1] = 0;
      }

      c10_i8 = c10_i_workingset->nActiveConstr;
      c10_b_st.site = &c10_ig_emlrtRSI;
      c10_h_b = c10_i8;
      c10_j_b = c10_h_b;
      if (c10_j_b < 1) {
        c10_c_overflow = false;
      } else {
        c10_c_overflow = (c10_j_b > 2147483646);
      }

      if (c10_c_overflow) {
        c10_c_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
      }

      for (c10_idx_col = 0; c10_idx_col < c10_i8; c10_idx_col++) {
        c10_b_idx_col = c10_idx_col;
        c10_idxPosQR = c10_b_qrmanager->ldq * c10_b_idx_col;
        c10_idxPosATwset = c10_i_workingset->ldA * c10_b_idx_col;
        c10_b_st.site = &c10_ig_emlrtRSI;
        c10_f_n = c10_nVar;
        c10_x.set_size(&c10_vg_emlrtRTEI, &c10_b_st,
                       c10_i_workingset->ATwset.size(0));
        c10_h_loop_ub = c10_i_workingset->ATwset.size(0) - 1;
        for (c10_i14 = 0; c10_i14 <= c10_h_loop_ub; c10_i14++) {
          c10_x[c10_i14] = c10_i_workingset->ATwset[c10_i14];
        }

        c10_ix0 = c10_idxPosATwset + 1;
        c10_y.set_size(&c10_vg_emlrtRTEI, &c10_b_st, c10_b_qrmanager->QR.size(0),
                       c10_b_qrmanager->QR.size(1));
        c10_k_loop_ub = c10_b_qrmanager->QR.size(0) * c10_b_qrmanager->QR.size(1)
          - 1;
        for (c10_i22 = 0; c10_i22 <= c10_k_loop_ub; c10_i22++) {
          c10_y[c10_i22] = c10_b_qrmanager->QR[c10_i22];
        }

        c10_iy0 = c10_idxPosQR + 1;
        c10_b_qrmanager->QR.set_size(&c10_vg_emlrtRTEI, &c10_b_st, c10_y.size(0),
          c10_y.size(1));
        c10_p_loop_ub = c10_y.size(0) * c10_y.size(1) - 1;
        for (c10_i25 = 0; c10_i25 <= c10_p_loop_ub; c10_i25++) {
          c10_b_qrmanager->QR[c10_i25] = c10_y[c10_i25];
        }

        if (!(c10_f_n < 1)) {
          c10_c_st.site = &c10_ad_emlrtRSI;
          c10_h_n = c10_f_n;
          c10_b_ix0 = c10_ix0;
          c10_y.set_size(&c10_bf_emlrtRTEI, &c10_c_st, c10_b_qrmanager->QR.size
                         (0), c10_b_qrmanager->QR.size(1));
          c10_s_loop_ub = c10_b_qrmanager->QR.size(0) * c10_b_qrmanager->QR.size
            (1) - 1;
          for (c10_i32 = 0; c10_i32 <= c10_s_loop_ub; c10_i32++) {
            c10_y[c10_i32] = c10_b_qrmanager->QR[c10_i32];
          }

          c10_b_iy0 = c10_iy0;
          c10_b_qrmanager->QR.set_size(&c10_vg_emlrtRTEI, &c10_c_st, c10_y.size
            (0), c10_y.size(1));
          c10_t_loop_ub = c10_y.size(0) * c10_y.size(1) - 1;
          for (c10_i34 = 0; c10_i34 <= c10_t_loop_ub; c10_i34++) {
            c10_b_qrmanager->QR[c10_i34] = c10_y[c10_i34];
          }

          c10_d_st.site = &c10_cd_emlrtRSI;
          c10_i_n = c10_h_n;
          c10_c_ix0 = c10_b_ix0 - 1;
          c10_y.set_size(&c10_cf_emlrtRTEI, &c10_d_st, c10_b_qrmanager->QR.size
                         (0), c10_b_qrmanager->QR.size(1));
          c10_u_loop_ub = c10_b_qrmanager->QR.size(0) * c10_b_qrmanager->QR.size
            (1) - 1;
          for (c10_i35 = 0; c10_i35 <= c10_u_loop_ub; c10_i35++) {
            c10_y[c10_i35] = c10_b_qrmanager->QR[c10_i35];
          }

          c10_c_iy0 = c10_b_iy0 - 1;
          c10_b_qrmanager->QR.set_size(&c10_vg_emlrtRTEI, &c10_d_st, c10_y.size
            (0), c10_y.size(1));
          c10_w_loop_ub = c10_y.size(0) * c10_y.size(1) - 1;
          for (c10_i39 = 0; c10_i39 <= c10_w_loop_ub; c10_i39++) {
            c10_b_qrmanager->QR[c10_i39] = c10_y[c10_i39];
          }

          c10_var = c10_i_n;
          c10_n_t = (ptrdiff_t)c10_var;
          c10_incx_t = (ptrdiff_t)1;
          c10_incy_t = (ptrdiff_t)1;
          dcopy(&c10_n_t, &c10_x[c10_c_ix0], &c10_incx_t, &c10_b_qrmanager->
                QR[c10_c_iy0], &c10_incy_t);
        }
      }

      c10_b_st.site = &c10_ig_emlrtRSI;
      c10_b_factorQRE(chartInstance, &c10_b_st, c10_b_qrmanager, c10_nVar,
                      c10_nActiveConstr);
      c10_nDepIneq = 0;
      for (c10_b_idx = c10_nActiveConstr; c10_b_idx > c10_nVar; c10_b_idx--) {
        c10_nDepIneq++;
        c10_i13 = c10_b_qrmanager->jpvt.size(0);
        if ((c10_b_idx < 1) || (c10_b_idx > c10_i13)) {
          emlrtDynamicBoundsCheckR2012b(c10_b_idx, 1, c10_i13, &c10_vo_emlrtBCI,
            &c10_st);
        }

        c10_i19 = c10_memspace->workspace_int.size(0);
        if ((c10_nDepIneq < 1) || (c10_nDepIneq > c10_i19)) {
          emlrtDynamicBoundsCheckR2012b(c10_nDepIneq, 1, c10_i19,
            &c10_vo_emlrtBCI, &c10_st);
        }

        c10_memspace->workspace_int[c10_nDepIneq - 1] = c10_b_qrmanager->
          jpvt[c10_b_idx - 1];
      }

      if (c10_b_idx <= c10_nVar) {
        c10_idxDiag = c10_b_idx + c10_b_qrmanager->ldq * (c10_b_idx - 1);
        c10_exitg1 = false;
        while ((!c10_exitg1) && (c10_b_idx > c10_nFixedConstr)) {
          c10_i21 = c10_b_qrmanager->QR.size(0) * c10_b_qrmanager->QR.size(1);
          if ((c10_idxDiag < 1) || (c10_idxDiag > c10_i21)) {
            emlrtDynamicBoundsCheckR2012b(c10_idxDiag, 1, c10_i21,
              &c10_vo_emlrtBCI, &c10_st);
          }

          c10_b_x = c10_b_qrmanager->QR[c10_idxDiag - 1];
          c10_c_x = c10_b_x;
          c10_d_x = c10_c_x;
          c10_b_y = muDoubleScalarAbs(c10_d_x);
          if (c10_b_y < c10_tol) {
            c10_nDepIneq++;
            c10_i26 = c10_b_qrmanager->jpvt.size(0);
            if ((c10_b_idx < 1) || (c10_b_idx > c10_i26)) {
              emlrtDynamicBoundsCheckR2012b(c10_b_idx, 1, c10_i26,
                &c10_vo_emlrtBCI, &c10_st);
            }

            c10_i30 = c10_memspace->workspace_int.size(0);
            if ((c10_nDepIneq < 1) || (c10_nDepIneq > c10_i30)) {
              emlrtDynamicBoundsCheckR2012b(c10_nDepIneq, 1, c10_i30,
                &c10_vo_emlrtBCI, &c10_st);
            }

            c10_memspace->workspace_int[c10_nDepIneq - 1] =
              c10_b_qrmanager->jpvt[c10_b_idx - 1];
            c10_b_idx--;
            c10_idxDiag = (c10_idxDiag - c10_b_qrmanager->ldq) - 1;
          } else {
            c10_exitg1 = true;
          }
        }
      }

      c10_startIdx = c10_nFixedConstr;
      c10_b_r.set_size(&c10_vg_emlrtRTEI, &c10_st,
                       c10_memspace->workspace_int.size(0));
      c10_j_loop_ub = c10_memspace->workspace_int.size(0) - 1;
      for (c10_i20 = 0; c10_i20 <= c10_j_loop_ub; c10_i20++) {
        c10_b_r[c10_i20] = c10_memspace->workspace_int[c10_i20];
      }

      c10_r1.set_size(&c10_vg_emlrtRTEI, &c10_st,
                      c10_memspace->workspace_sort.size(0));
      c10_o_loop_ub = c10_memspace->workspace_sort.size(0) - 1;
      for (c10_i24 = 0; c10_i24 <= c10_o_loop_ub; c10_i24++) {
        c10_r1[c10_i24] = c10_memspace->workspace_sort[c10_i24];
      }

      c10_b_st.site = &c10_ig_emlrtRSI;
      c10_b_countsort(chartInstance, &c10_b_st, c10_b_r, c10_nDepIneq, c10_r1,
                      c10_startIdx + 1, c10_nActiveConstr);
      c10_memspace->workspace_int.set_size(&c10_vg_emlrtRTEI, &c10_st,
        c10_b_r.size(0));
      c10_q_loop_ub = c10_b_r.size(0) - 1;
      for (c10_i29 = 0; c10_i29 <= c10_q_loop_ub; c10_i29++) {
        c10_memspace->workspace_int[c10_i29] = c10_b_r[c10_i29];
      }

      c10_memspace->workspace_sort.set_size(&c10_vg_emlrtRTEI, &c10_st,
        c10_r1.size(0));
      c10_r_loop_ub = c10_r1.size(0) - 1;
      for (c10_i31 = 0; c10_i31 <= c10_r_loop_ub; c10_i31++) {
        c10_memspace->workspace_sort[c10_i31] = c10_r1[c10_i31];
      }

      for (c10_g_idx = c10_nDepIneq; c10_g_idx >= 1; c10_g_idx--) {
        c10_b_st.site = &c10_ig_emlrtRSI;
        c10_i33 = c10_memspace->workspace_int.size(0);
        if ((c10_g_idx < 1) || (c10_g_idx > c10_i33)) {
          emlrtDynamicBoundsCheckR2012b(c10_g_idx, 1, c10_i33, &c10_vo_emlrtBCI,
            &c10_b_st);
        }

        c10_idx_global = c10_memspace->workspace_int[c10_g_idx - 1];
        if ((c10_idx_global < 1) || (c10_idx_global > c10_i_workingset->
             Wid.size[0])) {
          emlrtDynamicBoundsCheckR2012b(c10_idx_global, 1,
            c10_i_workingset->Wid.size[0], &c10_wo_emlrtBCI, &c10_b_st);
        }

        c10_TYPE = c10_i_workingset->Wid.data[c10_idx_global - 1];
        if ((c10_idx_global < 1) || (c10_idx_global >
             c10_i_workingset->Wlocalidx.size[0])) {
          emlrtDynamicBoundsCheckR2012b(c10_idx_global, 1,
            c10_i_workingset->Wlocalidx.size[0], &c10_wo_emlrtBCI, &c10_b_st);
        }

        c10_idx_local = c10_i_workingset->Wlocalidx.data[c10_idx_global - 1] - 1;
        if ((c10_TYPE < 1) || (c10_TYPE > 6)) {
          emlrtDynamicBoundsCheckR2012b(c10_TYPE, 1, 6, &c10_xo_emlrtBCI,
            &c10_b_st);
        }

        c10_idxConstr = c10_i_workingset->isActiveIdx[c10_TYPE - 1] +
          c10_idx_local;
        if ((c10_idxConstr < 1) || (c10_idxConstr >
             c10_i_workingset->isActiveConstr.size[0])) {
          emlrtDynamicBoundsCheckR2012b(c10_idxConstr, 1,
            c10_i_workingset->isActiveConstr.size[0], &c10_wo_emlrtBCI,
            &c10_b_st);
        }

        c10_i_workingset->isActiveConstr.data[c10_idxConstr - 1] = false;
        c10_i43 = c10_i_workingset->nActiveConstr;
        c10_c_st.site = &c10_gg_emlrtRSI;
        c10_b_moveConstraint_(chartInstance, &c10_c_st, c10_i_workingset,
                              c10_i43, c10_idx_global);
        c10_i_workingset->nActiveConstr--;
        if ((c10_TYPE < 1) || (c10_TYPE > 5)) {
          emlrtDynamicBoundsCheckR2012b(c10_TYPE, 1, 5, &c10_yo_emlrtBCI,
            &c10_b_st);
        }

        c10_i_workingset->nWConstr[c10_TYPE - 1]--;
      }
    }

    c10_x.set_size(&c10_wg_emlrtRTEI, c10_sp, c10_solution->xstar.size(0));
    c10_loop_ub = c10_solution->xstar.size(0) - 1;
    for (c10_i1 = 0; c10_i1 <= c10_loop_ub; c10_i1++) {
      c10_x[c10_i1] = c10_solution->xstar[c10_i1];
    }

    c10_y.set_size(&c10_wg_emlrtRTEI, c10_sp,
                   c10_memspace->workspace_double.size(0),
                   c10_memspace->workspace_double.size(1));
    c10_b_loop_ub = c10_memspace->workspace_double.size(0) *
      c10_memspace->workspace_double.size(1) - 1;
    for (c10_i2 = 0; c10_i2 <= c10_b_loop_ub; c10_i2++) {
      c10_y[c10_i2] = c10_memspace->workspace_double[c10_i2];
    }

    c10_st.site = &c10_md_emlrtRSI;
    c10_b_okWorkingSet = c10_b_feasibleX0ForWorkingSet(chartInstance, &c10_st,
      c10_y, c10_x, c10_i_workingset, c10_b_qrmanager);
    c10_solution->xstar.set_size(&c10_wg_emlrtRTEI, c10_sp, c10_x.size(0));
    c10_c_loop_ub = c10_x.size(0) - 1;
    for (c10_i5 = 0; c10_i5 <= c10_c_loop_ub; c10_i5++) {
      c10_solution->xstar[c10_i5] = c10_x[c10_i5];
    }

    c10_memspace->workspace_double.set_size(&c10_wg_emlrtRTEI, c10_sp,
      c10_y.size(0), c10_y.size(1));
    c10_d_loop_ub = c10_y.size(0) * c10_y.size(1) - 1;
    for (c10_i7 = 0; c10_i7 <= c10_d_loop_ub; c10_i7++) {
      c10_memspace->workspace_double[c10_i7] = c10_y[c10_i7];
    }

    c10_guard1 = false;
    if (!c10_b_okWorkingSet) {
      c10_st.site = &c10_md_emlrtRSI;
      c10_b_nActiveConstr = c10_i_workingset->nActiveConstr;
      c10_b_mWorkingFixed = c10_i_workingset->nWConstr[0];
      c10_b_mWorkingEq = c10_i_workingset->nWConstr[1];
      c10_b_mWorkingIneq = c10_i_workingset->nWConstr[2];
      c10_b_mWorkingLB = c10_i_workingset->nWConstr[3];
      c10_b_mWorkingUB = c10_i_workingset->nWConstr[4];
      c10_b_totalWorkingIneq = (c10_b_mWorkingIneq + c10_b_mWorkingLB) +
        c10_b_mWorkingUB;
      c10_b_nFixedConstr = c10_b_mWorkingEq + c10_b_mWorkingFixed;
      c10_c_nVar = c10_i_workingset->nVar;
      if (!(c10_b_totalWorkingIneq <= 0)) {
        c10_b_tol = 1000.0 * static_cast<real_T>(c10_c_nVar) *
          2.2204460492503131E-16;
        c10_b_st.site = &c10_ig_emlrtRSI;
        c10_k_b = c10_b_nFixedConstr;
        c10_o_b = c10_k_b;
        if (c10_o_b < 1) {
          c10_d_overflow = false;
        } else {
          c10_d_overflow = (c10_o_b > 2147483646);
        }

        if (c10_d_overflow) {
          c10_c_st.site = &c10_v_emlrtRSI;
          c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
        }

        for (c10_d_idx = 0; c10_d_idx < c10_b_nFixedConstr; c10_d_idx++) {
          c10_e_idx = c10_d_idx;
          c10_i16 = c10_b_qrmanager->jpvt.size(0);
          c10_i18 = c10_e_idx + 1;
          if ((c10_i18 < 1) || (c10_i18 > c10_i16)) {
            emlrtDynamicBoundsCheckR2012b(c10_i18, 1, c10_i16, &c10_vo_emlrtBCI,
              &c10_st);
          }

          c10_b_qrmanager->jpvt[c10_i18 - 1] = 1;
        }

        c10_i15 = c10_b_nFixedConstr + 1;
        c10_b_st.site = &c10_ig_emlrtRSI;
        c10_d_a = c10_i15;
        c10_p_b = c10_b_nActiveConstr;
        c10_e_a = c10_d_a;
        c10_q_b = c10_p_b;
        if (c10_e_a > c10_q_b) {
          c10_e_overflow = false;
        } else {
          c10_e_overflow = (c10_q_b > 2147483646);
        }

        if (c10_e_overflow) {
          c10_c_st.site = &c10_v_emlrtRSI;
          c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
        }

        for (c10_f_idx = c10_i15; c10_f_idx <= c10_b_nActiveConstr; c10_f_idx++)
        {
          c10_i28 = c10_b_qrmanager->jpvt.size(0);
          if ((c10_f_idx < 1) || (c10_f_idx > c10_i28)) {
            emlrtDynamicBoundsCheckR2012b(c10_f_idx, 1, c10_i28,
              &c10_vo_emlrtBCI, &c10_st);
          }

          c10_b_qrmanager->jpvt[c10_f_idx - 1] = 0;
        }

        c10_i27 = c10_i_workingset->nActiveConstr;
        c10_b_st.site = &c10_ig_emlrtRSI;
        c10_s_b = c10_i27;
        c10_t_b = c10_s_b;
        if (c10_t_b < 1) {
          c10_f_overflow = false;
        } else {
          c10_f_overflow = (c10_t_b > 2147483646);
        }

        if (c10_f_overflow) {
          c10_c_st.site = &c10_v_emlrtRSI;
          c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
        }

        for (c10_c_idx_col = 0; c10_c_idx_col < c10_i27; c10_c_idx_col++) {
          c10_d_idx_col = c10_c_idx_col;
          c10_b_idxPosQR = c10_b_qrmanager->ldq * c10_d_idx_col;
          c10_b_idxPosATwset = c10_i_workingset->ldA * c10_d_idx_col;
          c10_b_st.site = &c10_ig_emlrtRSI;
          c10_j_n = c10_c_nVar;
          c10_x.set_size(&c10_vg_emlrtRTEI, &c10_b_st,
                         c10_i_workingset->ATwset.size(0));
          c10_v_loop_ub = c10_i_workingset->ATwset.size(0) - 1;
          for (c10_i37 = 0; c10_i37 <= c10_v_loop_ub; c10_i37++) {
            c10_x[c10_i37] = c10_i_workingset->ATwset[c10_i37];
          }

          c10_d_ix0 = c10_b_idxPosATwset + 1;
          c10_y.set_size(&c10_vg_emlrtRTEI, &c10_b_st, c10_b_qrmanager->QR.size
                         (0), c10_b_qrmanager->QR.size(1));
          c10_y_loop_ub = c10_b_qrmanager->QR.size(0) * c10_b_qrmanager->QR.size
            (1) - 1;
          for (c10_i42 = 0; c10_i42 <= c10_y_loop_ub; c10_i42++) {
            c10_y[c10_i42] = c10_b_qrmanager->QR[c10_i42];
          }

          c10_d_iy0 = c10_b_idxPosQR + 1;
          c10_b_qrmanager->QR.set_size(&c10_vg_emlrtRTEI, &c10_b_st, c10_y.size
            (0), c10_y.size(1));
          c10_bb_loop_ub = c10_y.size(0) * c10_y.size(1) - 1;
          for (c10_i45 = 0; c10_i45 <= c10_bb_loop_ub; c10_i45++) {
            c10_b_qrmanager->QR[c10_i45] = c10_y[c10_i45];
          }

          if (!(c10_j_n < 1)) {
            c10_c_st.site = &c10_ad_emlrtRSI;
            c10_k_n = c10_j_n;
            c10_e_ix0 = c10_d_ix0;
            c10_y.set_size(&c10_bf_emlrtRTEI, &c10_c_st,
                           c10_b_qrmanager->QR.size(0), c10_b_qrmanager->QR.size
                           (1));
            c10_eb_loop_ub = c10_b_qrmanager->QR.size(0) *
              c10_b_qrmanager->QR.size(1) - 1;
            for (c10_i50 = 0; c10_i50 <= c10_eb_loop_ub; c10_i50++) {
              c10_y[c10_i50] = c10_b_qrmanager->QR[c10_i50];
            }

            c10_e_iy0 = c10_d_iy0;
            c10_b_qrmanager->QR.set_size(&c10_vg_emlrtRTEI, &c10_c_st,
              c10_y.size(0), c10_y.size(1));
            c10_fb_loop_ub = c10_y.size(0) * c10_y.size(1) - 1;
            for (c10_i52 = 0; c10_i52 <= c10_fb_loop_ub; c10_i52++) {
              c10_b_qrmanager->QR[c10_i52] = c10_y[c10_i52];
            }

            c10_d_st.site = &c10_cd_emlrtRSI;
            c10_m_n = c10_k_n;
            c10_f_ix0 = c10_e_ix0 - 1;
            c10_y.set_size(&c10_cf_emlrtRTEI, &c10_d_st,
                           c10_b_qrmanager->QR.size(0), c10_b_qrmanager->QR.size
                           (1));
            c10_gb_loop_ub = c10_b_qrmanager->QR.size(0) *
              c10_b_qrmanager->QR.size(1) - 1;
            for (c10_i53 = 0; c10_i53 <= c10_gb_loop_ub; c10_i53++) {
              c10_y[c10_i53] = c10_b_qrmanager->QR[c10_i53];
            }

            c10_f_iy0 = c10_e_iy0 - 1;
            c10_b_qrmanager->QR.set_size(&c10_vg_emlrtRTEI, &c10_d_st,
              c10_y.size(0), c10_y.size(1));
            c10_hb_loop_ub = c10_y.size(0) * c10_y.size(1) - 1;
            for (c10_i54 = 0; c10_i54 <= c10_hb_loop_ub; c10_i54++) {
              c10_b_qrmanager->QR[c10_i54] = c10_y[c10_i54];
            }

            c10_b_var = c10_m_n;
            c10_b_n_t = (ptrdiff_t)c10_b_var;
            c10_b_incx_t = (ptrdiff_t)1;
            c10_b_incy_t = (ptrdiff_t)1;
            dcopy(&c10_b_n_t, &c10_x[c10_f_ix0], &c10_b_incx_t,
                  &c10_b_qrmanager->QR[c10_f_iy0], &c10_b_incy_t);
          }
        }

        c10_b_st.site = &c10_ig_emlrtRSI;
        c10_b_factorQRE(chartInstance, &c10_b_st, c10_b_qrmanager, c10_c_nVar,
                        c10_b_nActiveConstr);
        c10_b_nDepIneq = 0;
        for (c10_e_idx = c10_b_nActiveConstr; c10_e_idx > c10_c_nVar; c10_e_idx
             --) {
          c10_b_nDepIneq++;
          c10_i36 = c10_b_qrmanager->jpvt.size(0);
          if ((c10_e_idx < 1) || (c10_e_idx > c10_i36)) {
            emlrtDynamicBoundsCheckR2012b(c10_e_idx, 1, c10_i36,
              &c10_vo_emlrtBCI, &c10_st);
          }

          c10_i38 = c10_memspace->workspace_int.size(0);
          if ((c10_b_nDepIneq < 1) || (c10_b_nDepIneq > c10_i38)) {
            emlrtDynamicBoundsCheckR2012b(c10_b_nDepIneq, 1, c10_i38,
              &c10_vo_emlrtBCI, &c10_st);
          }

          c10_memspace->workspace_int[c10_b_nDepIneq - 1] =
            c10_b_qrmanager->jpvt[c10_e_idx - 1];
        }

        if (c10_e_idx <= c10_c_nVar) {
          c10_b_idxDiag = c10_e_idx + c10_b_qrmanager->ldq * (c10_e_idx - 1);
          c10_exitg1 = false;
          while ((!c10_exitg1) && (c10_e_idx > c10_b_nFixedConstr)) {
            c10_i41 = c10_b_qrmanager->QR.size(0) * c10_b_qrmanager->QR.size(1);
            if ((c10_b_idxDiag < 1) || (c10_b_idxDiag > c10_i41)) {
              emlrtDynamicBoundsCheckR2012b(c10_b_idxDiag, 1, c10_i41,
                &c10_vo_emlrtBCI, &c10_st);
            }

            c10_e_x = c10_b_qrmanager->QR[c10_b_idxDiag - 1];
            c10_f_x = c10_e_x;
            c10_g_x = c10_f_x;
            c10_c_y = muDoubleScalarAbs(c10_g_x);
            if (c10_c_y < c10_b_tol) {
              c10_b_nDepIneq++;
              c10_i46 = c10_b_qrmanager->jpvt.size(0);
              if ((c10_e_idx < 1) || (c10_e_idx > c10_i46)) {
                emlrtDynamicBoundsCheckR2012b(c10_e_idx, 1, c10_i46,
                  &c10_vo_emlrtBCI, &c10_st);
              }

              c10_i48 = c10_memspace->workspace_int.size(0);
              if ((c10_b_nDepIneq < 1) || (c10_b_nDepIneq > c10_i48)) {
                emlrtDynamicBoundsCheckR2012b(c10_b_nDepIneq, 1, c10_i48,
                  &c10_vo_emlrtBCI, &c10_st);
              }

              c10_memspace->workspace_int[c10_b_nDepIneq - 1] =
                c10_b_qrmanager->jpvt[c10_e_idx - 1];
              c10_e_idx--;
              c10_b_idxDiag = (c10_b_idxDiag - c10_b_qrmanager->ldq) - 1;
            } else {
              c10_exitg1 = true;
            }
          }
        }

        c10_b_startIdx = c10_b_nFixedConstr;
        c10_b_r.set_size(&c10_vg_emlrtRTEI, &c10_st,
                         c10_memspace->workspace_int.size(0));
        c10_x_loop_ub = c10_memspace->workspace_int.size(0) - 1;
        for (c10_i40 = 0; c10_i40 <= c10_x_loop_ub; c10_i40++) {
          c10_b_r[c10_i40] = c10_memspace->workspace_int[c10_i40];
        }

        c10_r1.set_size(&c10_vg_emlrtRTEI, &c10_st,
                        c10_memspace->workspace_sort.size(0));
        c10_ab_loop_ub = c10_memspace->workspace_sort.size(0) - 1;
        for (c10_i44 = 0; c10_i44 <= c10_ab_loop_ub; c10_i44++) {
          c10_r1[c10_i44] = c10_memspace->workspace_sort[c10_i44];
        }

        c10_b_st.site = &c10_ig_emlrtRSI;
        c10_b_countsort(chartInstance, &c10_b_st, c10_b_r, c10_b_nDepIneq,
                        c10_r1, c10_b_startIdx + 1, c10_b_nActiveConstr);
        c10_memspace->workspace_int.set_size(&c10_vg_emlrtRTEI, &c10_st,
          c10_b_r.size(0));
        c10_cb_loop_ub = c10_b_r.size(0) - 1;
        for (c10_i47 = 0; c10_i47 <= c10_cb_loop_ub; c10_i47++) {
          c10_memspace->workspace_int[c10_i47] = c10_b_r[c10_i47];
        }

        c10_memspace->workspace_sort.set_size(&c10_vg_emlrtRTEI, &c10_st,
          c10_r1.size(0));
        c10_db_loop_ub = c10_r1.size(0) - 1;
        for (c10_i49 = 0; c10_i49 <= c10_db_loop_ub; c10_i49++) {
          c10_memspace->workspace_sort[c10_i49] = c10_r1[c10_i49];
        }

        for (c10_h_idx = c10_b_nDepIneq; c10_h_idx >= 1; c10_h_idx--) {
          c10_b_st.site = &c10_ig_emlrtRSI;
          c10_i51 = c10_memspace->workspace_int.size(0);
          if ((c10_h_idx < 1) || (c10_h_idx > c10_i51)) {
            emlrtDynamicBoundsCheckR2012b(c10_h_idx, 1, c10_i51,
              &c10_vo_emlrtBCI, &c10_b_st);
          }

          c10_b_idx_global = c10_memspace->workspace_int[c10_h_idx - 1];
          if ((c10_b_idx_global < 1) || (c10_b_idx_global >
               c10_i_workingset->Wid.size[0])) {
            emlrtDynamicBoundsCheckR2012b(c10_b_idx_global, 1,
              c10_i_workingset->Wid.size[0], &c10_wo_emlrtBCI, &c10_b_st);
          }

          c10_b_TYPE = c10_i_workingset->Wid.data[c10_b_idx_global - 1];
          if ((c10_b_idx_global < 1) || (c10_b_idx_global >
               c10_i_workingset->Wlocalidx.size[0])) {
            emlrtDynamicBoundsCheckR2012b(c10_b_idx_global, 1,
              c10_i_workingset->Wlocalidx.size[0], &c10_wo_emlrtBCI, &c10_b_st);
          }

          c10_b_idx_local = c10_i_workingset->Wlocalidx.data[c10_b_idx_global -
            1] - 1;
          if ((c10_b_TYPE < 1) || (c10_b_TYPE > 6)) {
            emlrtDynamicBoundsCheckR2012b(c10_b_TYPE, 1, 6, &c10_xo_emlrtBCI,
              &c10_b_st);
          }

          c10_b_idxConstr = c10_i_workingset->isActiveIdx[c10_b_TYPE - 1] +
            c10_b_idx_local;
          if ((c10_b_idxConstr < 1) || (c10_b_idxConstr >
               c10_i_workingset->isActiveConstr.size[0])) {
            emlrtDynamicBoundsCheckR2012b(c10_b_idxConstr, 1,
              c10_i_workingset->isActiveConstr.size[0], &c10_wo_emlrtBCI,
              &c10_b_st);
          }

          c10_i_workingset->isActiveConstr.data[c10_b_idxConstr - 1] = false;
          c10_i55 = c10_i_workingset->nActiveConstr;
          c10_c_st.site = &c10_gg_emlrtRSI;
          c10_b_moveConstraint_(chartInstance, &c10_c_st, c10_i_workingset,
                                c10_i55, c10_b_idx_global);
          c10_i_workingset->nActiveConstr--;
          if ((c10_b_TYPE < 1) || (c10_b_TYPE > 5)) {
            emlrtDynamicBoundsCheckR2012b(c10_b_TYPE, 1, 5, &c10_yo_emlrtBCI,
              &c10_b_st);
          }

          c10_i_workingset->nWConstr[c10_b_TYPE - 1]--;
        }
      }

      c10_x.set_size(&c10_wg_emlrtRTEI, c10_sp, c10_solution->xstar.size(0));
      c10_f_loop_ub = c10_solution->xstar.size(0) - 1;
      for (c10_i11 = 0; c10_i11 <= c10_f_loop_ub; c10_i11++) {
        c10_x[c10_i11] = c10_solution->xstar[c10_i11];
      }

      c10_y.set_size(&c10_wg_emlrtRTEI, c10_sp,
                     c10_memspace->workspace_double.size(0),
                     c10_memspace->workspace_double.size(1));
      c10_g_loop_ub = c10_memspace->workspace_double.size(0) *
        c10_memspace->workspace_double.size(1) - 1;
      for (c10_i12 = 0; c10_i12 <= c10_g_loop_ub; c10_i12++) {
        c10_y[c10_i12] = c10_memspace->workspace_double[c10_i12];
      }

      c10_st.site = &c10_md_emlrtRSI;
      c10_c_okWorkingSet = c10_b_feasibleX0ForWorkingSet(chartInstance, &c10_st,
        c10_y, c10_x, c10_i_workingset, c10_b_qrmanager);
      c10_solution->xstar.set_size(&c10_wg_emlrtRTEI, c10_sp, c10_x.size(0));
      c10_i_loop_ub = c10_x.size(0) - 1;
      for (c10_i17 = 0; c10_i17 <= c10_i_loop_ub; c10_i17++) {
        c10_solution->xstar[c10_i17] = c10_x[c10_i17];
      }

      c10_memspace->workspace_double.set_size(&c10_wg_emlrtRTEI, c10_sp,
        c10_y.size(0), c10_y.size(1));
      c10_m_loop_ub = c10_y.size(0) * c10_y.size(1) - 1;
      for (c10_i23 = 0; c10_i23 <= c10_m_loop_ub; c10_i23++) {
        c10_memspace->workspace_double[c10_i23] = c10_y[c10_i23];
      }

      if (!c10_c_okWorkingSet) {
        c10_solution->state = -7;
      } else {
        c10_guard1 = true;
      }
    } else {
      c10_guard1 = true;
    }

    if (c10_guard1) {
      c10_mFixed = c10_i_workingset->nWConstr[0];
      c10_mEq = c10_i_workingset->nWConstr[1];
      c10_b_nVar = c10_i_workingset->nVar;
      if (c10_mFixed + c10_mEq == c10_b_nVar) {
        c10_b_solution.set_size(&c10_wg_emlrtRTEI, c10_sp,
          c10_solution->xstar.size(0));
        c10_e_loop_ub = c10_solution->xstar.size(0) - 1;
        for (c10_i10 = 0; c10_i10 <= c10_e_loop_ub; c10_i10++) {
          c10_b_solution[c10_i10] = c10_solution->xstar[c10_i10];
        }

        c10_st.site = &c10_md_emlrtRSI;
        c10_constrViolation = c10_f_maxConstraintViolation(chartInstance,
          &c10_st, c10_i_workingset, c10_b_solution);
        if (c10_constrViolation > 1.0E-8) {
          c10_solution->state = -2;
        }
      }
    }
  } else {
    c10_solution->state = -3;
    c10_st.site = &c10_md_emlrtRSI;
    c10_b_removeAllIneqConstr(chartInstance, &c10_st, c10_i_workingset);
  }
}

static int32_T c10_b_RemoveDependentEq_(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_pIaUYPkQBTqVmAKxFPiGQF
  *c10_memspace, c10_s_flSfA4tA26WyP6kjP59eL *c10_i_workingset,
  c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager)
{
  ptrdiff_t c10_b_incx_t;
  ptrdiff_t c10_b_incy_t;
  ptrdiff_t c10_b_n_t;
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 2U> c10_m_x;
  coder::array<real_T, 1U> c10_k_x;
  coder::array<int32_T, 1U> c10_depIdx;
  coder::array<int32_T, 1U> c10_workspace;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  real_T c10_beqf_data[1489];
  real_T c10_f_x;
  real_T c10_g_x;
  real_T c10_j_x;
  real_T c10_k_y;
  real_T c10_m_y;
  real_T c10_o_x;
  real_T c10_p_x;
  real_T c10_q_x;
  real_T c10_qtb;
  real_T c10_tol;
  int32_T c10_TYPE;
  int32_T c10_ab_b;
  int32_T c10_b;
  int32_T c10_b_TYPE;
  int32_T c10_b_a;
  int32_T c10_b_idx;
  int32_T c10_b_idxConstr;
  int32_T c10_b_idxW;
  int32_T c10_b_idx_col;
  int32_T c10_b_idx_global;
  int32_T c10_b_idx_local;
  int32_T c10_b_idx_row;
  int32_T c10_b_ix0;
  int32_T c10_b_iy0;
  int32_T c10_b_loop_ub;
  int32_T c10_b_mRows;
  int32_T c10_b_nCols;
  int32_T c10_b_nDepInd;
  int32_T c10_b_nVar;
  int32_T c10_b_var;
  int32_T c10_b_varargin_2;
  int32_T c10_b_x;
  int32_T c10_b_y;
  int32_T c10_c_a;
  int32_T c10_c_idx;
  int32_T c10_c_idx_col;
  int32_T c10_c_ix0;
  int32_T c10_c_iy0;
  int32_T c10_c_loop_ub;
  int32_T c10_c_x;
  int32_T c10_c_y;
  int32_T c10_cb_b;
  int32_T c10_d_a;
  int32_T c10_d_idx;
  int32_T c10_d_ix0;
  int32_T c10_d_loop_ub;
  int32_T c10_d_x;
  int32_T c10_d_y;
  int32_T c10_e_a;
  int32_T c10_e_b;
  int32_T c10_e_idx;
  int32_T c10_e_ix0;
  int32_T c10_e_loop_ub;
  int32_T c10_e_x;
  int32_T c10_e_y;
  int32_T c10_eb_b;
  int32_T c10_f_a;
  int32_T c10_f_b;
  int32_T c10_f_idx;
  int32_T c10_f_ix0;
  int32_T c10_f_loop_ub;
  int32_T c10_f_n;
  int32_T c10_f_y;
  int32_T c10_fb_b;
  int32_T c10_g_a;
  int32_T c10_g_b;
  int32_T c10_g_idx;
  int32_T c10_g_loop_ub;
  int32_T c10_g_y;
  int32_T c10_gb_b;
  int32_T c10_h_a;
  int32_T c10_h_b;
  int32_T c10_h_idx;
  int32_T c10_h_loop_ub;
  int32_T c10_h_n;
  int32_T c10_h_y;
  int32_T c10_hb_b;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i19;
  int32_T c10_i2;
  int32_T c10_i20;
  int32_T c10_i21;
  int32_T c10_i22;
  int32_T c10_i23;
  int32_T c10_i24;
  int32_T c10_i25;
  int32_T c10_i26;
  int32_T c10_i27;
  int32_T c10_i28;
  int32_T c10_i29;
  int32_T c10_i3;
  int32_T c10_i30;
  int32_T c10_i31;
  int32_T c10_i32;
  int32_T c10_i33;
  int32_T c10_i34;
  int32_T c10_i35;
  int32_T c10_i36;
  int32_T c10_i37;
  int32_T c10_i38;
  int32_T c10_i39;
  int32_T c10_i4;
  int32_T c10_i40;
  int32_T c10_i41;
  int32_T c10_i42;
  int32_T c10_i43;
  int32_T c10_i44;
  int32_T c10_i45;
  int32_T c10_i46;
  int32_T c10_i47;
  int32_T c10_i48;
  int32_T c10_i49;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_iQ0;
  int32_T c10_i_idx;
  int32_T c10_i_loop_ub;
  int32_T c10_i_n;
  int32_T c10_i_y;
  int32_T c10_idx;
  int32_T c10_idxConstr;
  int32_T c10_idxDiag;
  int32_T c10_idxEnd;
  int32_T c10_idxFill;
  int32_T c10_idxPosATwset;
  int32_T c10_idxPosQR;
  int32_T c10_idxStart;
  int32_T c10_idxW;
  int32_T c10_idx_col;
  int32_T c10_idx_global;
  int32_T c10_idx_local;
  int32_T c10_idx_row;
  int32_T c10_ix0;
  int32_T c10_iy0;
  int32_T c10_j_b;
  int32_T c10_j_idx;
  int32_T c10_j_loop_ub;
  int32_T c10_j_n;
  int32_T c10_j_y;
  int32_T c10_jb_b;
  int32_T c10_k_b;
  int32_T c10_k_idx;
  int32_T c10_k_loop_ub;
  int32_T c10_k_n;
  int32_T c10_kb_b;
  int32_T c10_loop_ub;
  int32_T c10_mConstr;
  int32_T c10_mFixed;
  int32_T c10_mTotalWorkingEq;
  int32_T c10_mWorkingEq;
  int32_T c10_mWorkingFixed;
  int32_T c10_m_idx;
  int32_T c10_m_loop_ub;
  int32_T c10_m_n;
  int32_T c10_mb_b;
  int32_T c10_nDep;
  int32_T c10_nDepInd;
  int32_T c10_nVar;
  int32_T c10_o_b;
  int32_T c10_o_idx;
  int32_T c10_o_loop_ub;
  int32_T c10_ob_b;
  int32_T c10_offsetATw;
  int32_T c10_offsetQR;
  int32_T c10_p_b;
  int32_T c10_p_loop_ub;
  int32_T c10_pb_b;
  int32_T c10_q_b;
  int32_T c10_q_loop_ub;
  int32_T c10_qb_b;
  int32_T c10_rb_b;
  int32_T c10_s_b;
  int32_T c10_t_b;
  int32_T c10_totalEq;
  int32_T c10_totalRank;
  int32_T c10_u_b;
  int32_T c10_v_b;
  int32_T c10_var;
  int32_T c10_varargin_1;
  int32_T c10_varargin_2;
  int32_T c10_w_b;
  int32_T c10_x;
  int32_T c10_xLen;
  int32_T c10_xMax;
  int32_T c10_x_b;
  int32_T c10_y;
  int32_T c10_y_b;
  boolean_T c10_b_overflow;
  boolean_T c10_c_overflow;
  boolean_T c10_d_overflow;
  boolean_T c10_e_overflow;
  boolean_T c10_exitg1;
  boolean_T c10_f_overflow;
  boolean_T c10_g_overflow;
  boolean_T c10_h_overflow;
  boolean_T c10_i_overflow;
  boolean_T c10_j_overflow;
  boolean_T c10_k_overflow;
  boolean_T c10_m_overflow;
  boolean_T c10_o_overflow;
  boolean_T c10_overflow;
  boolean_T c10_p_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_nVar = c10_i_workingset->nVar;
  c10_mWorkingFixed = c10_i_workingset->nWConstr[0];
  c10_mWorkingEq = c10_i_workingset->nWConstr[1];
  c10_mTotalWorkingEq = c10_mWorkingEq + c10_mWorkingFixed;
  c10_nDepInd = 0;
  if (!(c10_mTotalWorkingEq <= 0)) {
    c10_st.site = &c10_od_emlrtRSI;
    c10_b = c10_mTotalWorkingEq;
    c10_e_b = c10_b;
    if (c10_e_b < 1) {
      c10_overflow = false;
    } else {
      c10_overflow = (c10_e_b > 2147483646);
    }

    if (c10_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_idx_row = 0; c10_idx_row < c10_mTotalWorkingEq; c10_idx_row++) {
      c10_b_idx_row = c10_idx_row;
      c10_st.site = &c10_od_emlrtRSI;
      c10_f_b = c10_nVar;
      c10_g_b = c10_f_b;
      if (c10_g_b < 1) {
        c10_b_overflow = false;
      } else {
        c10_b_overflow = (c10_g_b > 2147483646);
      }

      if (c10_b_overflow) {
        c10_b_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
      }

      for (c10_idx_col = 0; c10_idx_col < c10_nVar; c10_idx_col++) {
        c10_b_idx_col = c10_idx_col;
        c10_idxPosQR = (c10_b_idx_row + c10_b_qrmanager->ldq * c10_b_idx_col) +
          1;
        c10_idxPosATwset = (c10_b_idx_col + c10_i_workingset->ldA *
                            c10_b_idx_row) + 1;
        c10_i1 = c10_i_workingset->ATwset.size(0);
        if ((c10_idxPosATwset < 1) || (c10_idxPosATwset > c10_i1)) {
          emlrtDynamicBoundsCheckR2012b(c10_idxPosATwset, 1, c10_i1,
            &c10_ap_emlrtBCI, (emlrtConstCTX)c10_sp);
        }

        c10_i2 = c10_b_qrmanager->QR.size(0) * c10_b_qrmanager->QR.size(1);
        if ((c10_idxPosQR < 1) || (c10_idxPosQR > c10_i2)) {
          emlrtDynamicBoundsCheckR2012b(c10_idxPosQR, 1, c10_i2,
            &c10_ap_emlrtBCI, (emlrtConstCTX)c10_sp);
        }

        c10_b_qrmanager->QR[c10_idxPosQR - 1] = c10_i_workingset->
          ATwset[c10_idxPosATwset - 1];
      }
    }

    c10_st.site = &c10_od_emlrtRSI;
    c10_loop_ub = c10_i_workingset->bwset.size[0] - 1;
    for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
      c10_beqf_data[c10_i] = c10_i_workingset->bwset.data[c10_i];
    }

    c10_mConstr = c10_mTotalWorkingEq;
    c10_b_nVar = c10_nVar;
    c10_b_nDepInd = c10_mConstr - c10_b_nVar;
    c10_varargin_2 = c10_b_nDepInd;
    c10_y = c10_varargin_2;
    c10_b_y = c10_y;
    c10_c_y = c10_b_y;
    c10_h_b = c10_c_y;
    c10_d_y = c10_h_b;
    c10_e_y = c10_d_y;
    c10_b_nDepInd = muIntScalarMax_sint32(0, c10_e_y);
    c10_b_st.site = &c10_pd_emlrtRSI;
    c10_j_b = c10_b_nVar;
    c10_k_b = c10_j_b;
    if (c10_k_b < 1) {
      c10_c_overflow = false;
    } else {
      c10_c_overflow = (c10_k_b > 2147483646);
    }

    if (c10_c_overflow) {
      c10_c_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
    }

    for (c10_idx = 0; c10_idx < c10_b_nVar; c10_idx++) {
      c10_b_idx = c10_idx;
      c10_i3 = c10_b_qrmanager->jpvt.size(0);
      c10_i4 = c10_b_idx + 1;
      if ((c10_i4 < 1) || (c10_i4 > c10_i3)) {
        emlrtDynamicBoundsCheckR2012b(c10_i4, 1, c10_i3, &c10_bp_emlrtBCI,
          &c10_st);
      }

      c10_b_qrmanager->jpvt[c10_i4 - 1] = 0;
    }

    c10_b_st.site = &c10_pd_emlrtRSI;
    c10_b_factorQRE(chartInstance, &c10_b_st, c10_b_qrmanager, c10_mConstr,
                    c10_b_nVar);
    c10_tol = 100.0 * static_cast<real_T>(c10_b_nVar) * 2.2204460492503131E-16;
    c10_varargin_1 = c10_b_nVar;
    c10_b_varargin_2 = c10_mConstr;
    c10_x = c10_varargin_1;
    c10_f_y = c10_b_varargin_2;
    c10_b_x = c10_x;
    c10_g_y = c10_f_y;
    c10_c_x = c10_b_x;
    c10_h_y = c10_g_y;
    c10_b_a = c10_c_x;
    c10_o_b = c10_h_y;
    c10_d_x = c10_b_a;
    c10_i_y = c10_o_b;
    c10_e_x = c10_d_x;
    c10_j_y = c10_i_y;
    c10_totalRank = muIntScalarMin_sint32(c10_e_x, c10_j_y);
    c10_idxDiag = c10_totalRank + c10_b_qrmanager->ldq * (c10_totalRank - 1);
    c10_exitg1 = false;
    while ((!c10_exitg1) && (c10_idxDiag > 0)) {
      c10_i5 = c10_b_qrmanager->QR.size(0) * c10_b_qrmanager->QR.size(1);
      if ((c10_idxDiag < 1) || (c10_idxDiag > c10_i5)) {
        emlrtDynamicBoundsCheckR2012b(c10_idxDiag, 1, c10_i5, &c10_bp_emlrtBCI,
          &c10_st);
      }

      c10_f_x = c10_b_qrmanager->QR[c10_idxDiag - 1];
      c10_g_x = c10_f_x;
      c10_j_x = c10_g_x;
      c10_k_y = muDoubleScalarAbs(c10_j_x);
      if (c10_k_y < c10_tol) {
        c10_idxDiag = (c10_idxDiag - c10_b_qrmanager->ldq) - 1;
        c10_b_nDepInd++;
      } else {
        c10_exitg1 = true;
      }
    }

    if (c10_b_nDepInd > 0) {
      c10_b_st.site = &c10_pd_emlrtRSI;
      c10_i6 = c10_b_qrmanager->mrows;
      c10_c_st.site = &c10_sf_emlrtRSI;
      c10_b_computeQ_(chartInstance, &c10_c_st, c10_b_qrmanager, c10_i6);
      c10_b_st.site = &c10_pd_emlrtRSI;
      c10_s_b = c10_b_nDepInd;
      c10_t_b = c10_s_b;
      if (c10_t_b < 1) {
        c10_e_overflow = false;
      } else {
        c10_e_overflow = (c10_t_b > 2147483646);
      }

      if (c10_e_overflow) {
        c10_c_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
      }

      c10_c_idx = 1;
      c10_exitg1 = false;
      while ((!c10_exitg1) && (c10_c_idx - 1 <= c10_b_nDepInd - 1)) {
        c10_b_idx = c10_c_idx;
        c10_iQ0 = c10_b_qrmanager->ldq * (c10_mConstr - c10_b_idx);
        c10_h_n = c10_mConstr;
        c10_m_x.set_size(&c10_yg_emlrtRTEI, &c10_st, c10_b_qrmanager->Q.size(0),
                         c10_b_qrmanager->Q.size(1));
        c10_d_loop_ub = c10_b_qrmanager->Q.size(0) * c10_b_qrmanager->Q.size(1)
          - 1;
        for (c10_i9 = 0; c10_i9 <= c10_d_loop_ub; c10_i9++) {
          c10_m_x[c10_i9] = c10_b_qrmanager->Q[c10_i9];
        }

        c10_b_ix0 = c10_iQ0 + 1;
        c10_i_n = c10_h_n;
        c10_c_ix0 = c10_b_ix0;
        c10_j_n = c10_i_n;
        c10_d_ix0 = c10_c_ix0 - 1;
        c10_var = c10_j_n;
        c10_n_t = (ptrdiff_t)c10_var;
        c10_incx_t = (ptrdiff_t)1;
        c10_incy_t = (ptrdiff_t)1;
        c10_qtb = ddot(&c10_n_t, &c10_m_x[c10_d_ix0], &c10_incx_t,
                       &c10_beqf_data[0], &c10_incy_t);
        c10_o_x = c10_qtb;
        c10_p_x = c10_o_x;
        c10_q_x = c10_p_x;
        c10_m_y = muDoubleScalarAbs(c10_q_x);
        if (c10_m_y >= c10_tol) {
          c10_b_nDepInd = -1;
          c10_exitg1 = true;
        } else {
          c10_c_idx++;
        }
      }
    }

    c10_nDepInd = c10_b_nDepInd;
    if (c10_b_nDepInd > 0) {
      c10_st.site = &c10_od_emlrtRSI;
      c10_p_b = c10_mTotalWorkingEq;
      c10_q_b = c10_p_b;
      if (c10_q_b < 1) {
        c10_d_overflow = false;
      } else {
        c10_d_overflow = (c10_q_b > 2147483646);
      }

      if (c10_d_overflow) {
        c10_b_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
      }

      for (c10_c_idx_col = 0; c10_c_idx_col < c10_mTotalWorkingEq; c10_c_idx_col
           ++) {
        c10_b_idx_col = c10_c_idx_col;
        c10_offsetQR = c10_b_qrmanager->ldq * c10_b_idx_col;
        c10_offsetATw = c10_i_workingset->ldA * c10_b_idx_col;
        c10_st.site = &c10_od_emlrtRSI;
        c10_f_n = c10_nVar;
        c10_k_x.set_size(&c10_xg_emlrtRTEI, &c10_st,
                         c10_i_workingset->ATwset.size(0));
        c10_c_loop_ub = c10_i_workingset->ATwset.size(0) - 1;
        for (c10_i8 = 0; c10_i8 <= c10_c_loop_ub; c10_i8++) {
          c10_k_x[c10_i8] = c10_i_workingset->ATwset[c10_i8];
        }

        c10_ix0 = c10_offsetATw + 1;
        c10_m_x.set_size(&c10_xg_emlrtRTEI, &c10_st, c10_b_qrmanager->QR.size(0),
                         c10_b_qrmanager->QR.size(1));
        c10_e_loop_ub = c10_b_qrmanager->QR.size(0) * c10_b_qrmanager->QR.size(1)
          - 1;
        for (c10_i10 = 0; c10_i10 <= c10_e_loop_ub; c10_i10++) {
          c10_m_x[c10_i10] = c10_b_qrmanager->QR[c10_i10];
        }

        c10_iy0 = c10_offsetQR + 1;
        c10_b_qrmanager->QR.set_size(&c10_xg_emlrtRTEI, &c10_st, c10_m_x.size(0),
          c10_m_x.size(1));
        c10_f_loop_ub = c10_m_x.size(0) * c10_m_x.size(1) - 1;
        for (c10_i11 = 0; c10_i11 <= c10_f_loop_ub; c10_i11++) {
          c10_b_qrmanager->QR[c10_i11] = c10_m_x[c10_i11];
        }

        if (!(c10_f_n < 1)) {
          c10_b_st.site = &c10_ad_emlrtRSI;
          c10_k_n = c10_f_n;
          c10_e_ix0 = c10_ix0;
          c10_m_x.set_size(&c10_bf_emlrtRTEI, &c10_b_st,
                           c10_b_qrmanager->QR.size(0), c10_b_qrmanager->QR.size
                           (1));
          c10_g_loop_ub = c10_b_qrmanager->QR.size(0) * c10_b_qrmanager->QR.size
            (1) - 1;
          for (c10_i15 = 0; c10_i15 <= c10_g_loop_ub; c10_i15++) {
            c10_m_x[c10_i15] = c10_b_qrmanager->QR[c10_i15];
          }

          c10_b_iy0 = c10_iy0;
          c10_b_qrmanager->QR.set_size(&c10_xg_emlrtRTEI, &c10_b_st,
            c10_m_x.size(0), c10_m_x.size(1));
          c10_h_loop_ub = c10_m_x.size(0) * c10_m_x.size(1) - 1;
          for (c10_i16 = 0; c10_i16 <= c10_h_loop_ub; c10_i16++) {
            c10_b_qrmanager->QR[c10_i16] = c10_m_x[c10_i16];
          }

          c10_c_st.site = &c10_cd_emlrtRSI;
          c10_m_n = c10_k_n;
          c10_f_ix0 = c10_e_ix0 - 1;
          c10_m_x.set_size(&c10_cf_emlrtRTEI, &c10_c_st,
                           c10_b_qrmanager->QR.size(0), c10_b_qrmanager->QR.size
                           (1));
          c10_i_loop_ub = c10_b_qrmanager->QR.size(0) * c10_b_qrmanager->QR.size
            (1) - 1;
          for (c10_i18 = 0; c10_i18 <= c10_i_loop_ub; c10_i18++) {
            c10_m_x[c10_i18] = c10_b_qrmanager->QR[c10_i18];
          }

          c10_c_iy0 = c10_b_iy0 - 1;
          c10_b_qrmanager->QR.set_size(&c10_xg_emlrtRTEI, &c10_c_st,
            c10_m_x.size(0), c10_m_x.size(1));
          c10_j_loop_ub = c10_m_x.size(0) * c10_m_x.size(1) - 1;
          for (c10_i19 = 0; c10_i19 <= c10_j_loop_ub; c10_i19++) {
            c10_b_qrmanager->QR[c10_i19] = c10_m_x[c10_i19];
          }

          c10_b_var = c10_m_n;
          c10_b_n_t = (ptrdiff_t)c10_b_var;
          c10_b_incx_t = (ptrdiff_t)1;
          c10_b_incy_t = (ptrdiff_t)1;
          dcopy(&c10_b_n_t, &c10_k_x[c10_f_ix0], &c10_b_incx_t,
                &c10_b_qrmanager->QR[c10_c_iy0], &c10_b_incy_t);
        }
      }

      c10_st.site = &c10_od_emlrtRSI;
      c10_depIdx.set_size(&c10_xg_emlrtRTEI, &c10_st,
                          c10_memspace->workspace_int.size(0));
      c10_b_loop_ub = c10_memspace->workspace_int.size(0) - 1;
      for (c10_i7 = 0; c10_i7 <= c10_b_loop_ub; c10_i7++) {
        c10_depIdx[c10_i7] = c10_memspace->workspace_int[c10_i7];
      }

      c10_mFixed = c10_mWorkingFixed;
      c10_nDep = c10_b_nDepInd;
      c10_b_mRows = c10_nVar;
      c10_b_nCols = c10_mTotalWorkingEq;
      c10_b_st.site = &c10_dg_emlrtRSI;
      c10_u_b = c10_mFixed;
      c10_v_b = c10_u_b;
      if (c10_v_b < 1) {
        c10_f_overflow = false;
      } else {
        c10_f_overflow = (c10_v_b > 2147483646);
      }

      if (c10_f_overflow) {
        c10_c_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
      }

      for (c10_d_idx = 0; c10_d_idx < c10_mFixed; c10_d_idx++) {
        c10_e_idx = c10_d_idx;
        c10_i13 = c10_b_qrmanager->jpvt.size(0);
        c10_i14 = c10_e_idx + 1;
        if ((c10_i14 < 1) || (c10_i14 > c10_i13)) {
          emlrtDynamicBoundsCheckR2012b(c10_i14, 1, c10_i13, &c10_cp_emlrtBCI,
            &c10_st);
        }

        c10_b_qrmanager->jpvt[c10_i14 - 1] = 1;
      }

      c10_i12 = c10_mFixed + 1;
      c10_b_st.site = &c10_dg_emlrtRSI;
      c10_c_a = c10_i12;
      c10_w_b = c10_b_nCols;
      c10_d_a = c10_c_a;
      c10_x_b = c10_w_b;
      if (c10_d_a > c10_x_b) {
        c10_g_overflow = false;
      } else {
        c10_g_overflow = (c10_x_b > 2147483646);
      }

      if (c10_g_overflow) {
        c10_c_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
      }

      for (c10_f_idx = c10_i12; c10_f_idx <= c10_b_nCols; c10_f_idx++) {
        c10_i17 = c10_b_qrmanager->jpvt.size(0);
        if ((c10_f_idx < 1) || (c10_f_idx > c10_i17)) {
          emlrtDynamicBoundsCheckR2012b(c10_f_idx, 1, c10_i17, &c10_cp_emlrtBCI,
            &c10_st);
        }

        c10_b_qrmanager->jpvt[c10_f_idx - 1] = 0;
      }

      c10_b_st.site = &c10_dg_emlrtRSI;
      c10_b_factorQRE(chartInstance, &c10_b_st, c10_b_qrmanager, c10_b_mRows,
                      c10_b_nCols);
      c10_b_st.site = &c10_dg_emlrtRSI;
      c10_y_b = c10_nDep;
      c10_ab_b = c10_y_b;
      if (c10_ab_b < 1) {
        c10_h_overflow = false;
      } else {
        c10_h_overflow = (c10_ab_b > 2147483646);
      }

      if (c10_h_overflow) {
        c10_c_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
      }

      for (c10_g_idx = 0; c10_g_idx < c10_nDep; c10_g_idx++) {
        c10_e_idx = c10_g_idx + 1;
        c10_i20 = c10_b_qrmanager->jpvt.size(0);
        c10_i22 = (c10_b_nCols - c10_nDep) + c10_e_idx;
        if ((c10_i22 < 1) || (c10_i22 > c10_i20)) {
          emlrtDynamicBoundsCheckR2012b(c10_i22, 1, c10_i20, &c10_cp_emlrtBCI,
            &c10_st);
        }

        c10_i23 = c10_depIdx.size(0);
        if ((c10_e_idx < 1) || (c10_e_idx > c10_i23)) {
          emlrtDynamicBoundsCheckR2012b(c10_e_idx, 1, c10_i23, &c10_cp_emlrtBCI,
            &c10_st);
        }

        c10_depIdx[c10_e_idx - 1] = c10_b_qrmanager->jpvt[c10_i22 - 1];
      }

      c10_memspace->workspace_int.set_size(&c10_xg_emlrtRTEI, c10_sp,
        c10_depIdx.size(0));
      c10_k_loop_ub = c10_depIdx.size(0) - 1;
      for (c10_i21 = 0; c10_i21 <= c10_k_loop_ub; c10_i21++) {
        c10_memspace->workspace_int[c10_i21] = c10_depIdx[c10_i21];
      }

      c10_st.site = &c10_od_emlrtRSI;
      c10_depIdx.set_size(&c10_xg_emlrtRTEI, &c10_st,
                          c10_memspace->workspace_int.size(0));
      c10_m_loop_ub = c10_memspace->workspace_int.size(0) - 1;
      for (c10_i24 = 0; c10_i24 <= c10_m_loop_ub; c10_i24++) {
        c10_depIdx[c10_i24] = c10_memspace->workspace_int[c10_i24];
      }

      c10_xLen = c10_b_nDepInd;
      c10_workspace.set_size(&c10_xg_emlrtRTEI, &c10_st,
        c10_memspace->workspace_sort.size(0));
      c10_o_loop_ub = c10_memspace->workspace_sort.size(0) - 1;
      for (c10_i25 = 0; c10_i25 <= c10_o_loop_ub; c10_i25++) {
        c10_workspace[c10_i25] = c10_memspace->workspace_sort[c10_i25];
      }

      c10_xMax = c10_mTotalWorkingEq;
      if ((c10_xLen <= 1) || (c10_xMax <= 1)) {
      } else {
        c10_b_st.site = &c10_eg_emlrtRSI;
        c10_cb_b = c10_xMax;
        c10_eb_b = c10_cb_b;
        if (c10_eb_b < 1) {
          c10_i_overflow = false;
        } else {
          c10_i_overflow = (c10_eb_b > 2147483646);
        }

        if (c10_i_overflow) {
          c10_c_st.site = &c10_v_emlrtRSI;
          c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
        }

        for (c10_h_idx = 0; c10_h_idx < c10_xMax; c10_h_idx++) {
          c10_j_idx = c10_h_idx;
          c10_i28 = c10_workspace.size(0);
          c10_i29 = c10_j_idx + 1;
          if ((c10_i29 < 1) || (c10_i29 > c10_i28)) {
            emlrtDynamicBoundsCheckR2012b(c10_i29, 1, c10_i28, &c10_dp_emlrtBCI,
              &c10_st);
          }

          c10_workspace[c10_i29 - 1] = 0;
        }

        c10_b_st.site = &c10_eg_emlrtRSI;
        c10_fb_b = c10_xLen;
        c10_gb_b = c10_fb_b;
        if (c10_gb_b < 1) {
          c10_j_overflow = false;
        } else {
          c10_j_overflow = (c10_gb_b > 2147483646);
        }

        if (c10_j_overflow) {
          c10_c_st.site = &c10_v_emlrtRSI;
          c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
        }

        for (c10_k_idx = 0; c10_k_idx < c10_xLen; c10_k_idx++) {
          c10_j_idx = c10_k_idx + 1;
          c10_i31 = c10_workspace.size(0);
          c10_i32 = c10_depIdx.size(0);
          if ((c10_j_idx < 1) || (c10_j_idx > c10_i32)) {
            emlrtDynamicBoundsCheckR2012b(c10_j_idx, 1, c10_i32,
              &c10_dp_emlrtBCI, &c10_st);
          }

          c10_i33 = c10_depIdx[c10_j_idx - 1];
          if ((c10_i33 < 1) || (c10_i33 > c10_i31)) {
            emlrtDynamicBoundsCheckR2012b(c10_i33, 1, c10_i31, &c10_dp_emlrtBCI,
              &c10_st);
          }

          c10_i34 = c10_workspace.size(0);
          c10_i35 = c10_depIdx.size(0);
          if ((c10_j_idx < 1) || (c10_j_idx > c10_i35)) {
            emlrtDynamicBoundsCheckR2012b(c10_j_idx, 1, c10_i35,
              &c10_dp_emlrtBCI, &c10_st);
          }

          c10_i38 = c10_depIdx[c10_j_idx - 1];
          if ((c10_i38 < 1) || (c10_i38 > c10_i34)) {
            emlrtDynamicBoundsCheckR2012b(c10_i38, 1, c10_i34, &c10_dp_emlrtBCI,
              &c10_st);
          }

          c10_workspace[c10_i38 - 1] = c10_workspace[c10_i33 - 1] + 1;
        }

        c10_b_st.site = &c10_eg_emlrtRSI;
        c10_hb_b = c10_xMax;
        c10_jb_b = c10_hb_b;
        if (c10_jb_b < 2) {
          c10_k_overflow = false;
        } else {
          c10_k_overflow = (c10_jb_b > 2147483646);
        }

        if (c10_k_overflow) {
          c10_c_st.site = &c10_v_emlrtRSI;
          c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
        }

        for (c10_m_idx = 2; c10_m_idx <= c10_xMax; c10_m_idx++) {
          c10_i36 = c10_workspace.size(0);
          if ((c10_m_idx < 1) || (c10_m_idx > c10_i36)) {
            emlrtDynamicBoundsCheckR2012b(c10_m_idx, 1, c10_i36,
              &c10_dp_emlrtBCI, &c10_st);
          }

          c10_i40 = c10_workspace.size(0);
          c10_i41 = c10_m_idx - 1;
          if ((c10_i41 < 1) || (c10_i41 > c10_i40)) {
            emlrtDynamicBoundsCheckR2012b(c10_i41, 1, c10_i40, &c10_dp_emlrtBCI,
              &c10_st);
          }

          c10_i42 = c10_workspace.size(0);
          if ((c10_m_idx < 1) || (c10_m_idx > c10_i42)) {
            emlrtDynamicBoundsCheckR2012b(c10_m_idx, 1, c10_i42,
              &c10_dp_emlrtBCI, &c10_st);
          }

          c10_workspace[c10_m_idx - 1] = c10_workspace[c10_m_idx - 1] +
            c10_workspace[c10_i41 - 1];
        }

        c10_idxStart = 1;
        c10_idxEnd = c10_workspace[0];
        c10_i37 = c10_xMax - 2;
        c10_b_st.site = &c10_eg_emlrtRSI;
        c10_kb_b = c10_i37 + 1;
        c10_mb_b = c10_kb_b;
        if (c10_mb_b < 1) {
          c10_m_overflow = false;
        } else {
          c10_m_overflow = (c10_mb_b > 2147483646);
        }

        if (c10_m_overflow) {
          c10_c_st.site = &c10_v_emlrtRSI;
          c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
        }

        for (c10_idxW = 0; c10_idxW <= c10_i37; c10_idxW++) {
          c10_b_idxW = c10_idxW + 1;
          c10_b_st.site = &c10_eg_emlrtRSI;
          c10_f_a = c10_idxStart;
          c10_pb_b = c10_idxEnd;
          c10_h_a = c10_f_a;
          c10_rb_b = c10_pb_b;
          if (c10_h_a > c10_rb_b) {
            c10_p_overflow = false;
          } else {
            c10_p_overflow = (c10_rb_b > 2147483646);
          }

          if (c10_p_overflow) {
            c10_c_st.site = &c10_v_emlrtRSI;
            c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
          }

          for (c10_idxFill = c10_idxStart; c10_idxFill <= c10_idxEnd;
               c10_idxFill++) {
            c10_i47 = c10_depIdx.size(0);
            if ((c10_idxFill < 1) || (c10_idxFill > c10_i47)) {
              emlrtDynamicBoundsCheckR2012b(c10_idxFill, 1, c10_i47,
                &c10_dp_emlrtBCI, &c10_st);
            }

            c10_depIdx[c10_idxFill - 1] = c10_b_idxW;
          }

          c10_i46 = c10_workspace.size(0);
          if ((c10_b_idxW < 1) || (c10_b_idxW > c10_i46)) {
            emlrtDynamicBoundsCheckR2012b(c10_b_idxW, 1, c10_i46,
              &c10_dp_emlrtBCI, &c10_st);
          }

          c10_idxStart = c10_workspace[c10_b_idxW - 1] + 1;
          c10_i48 = c10_workspace.size(0);
          c10_i49 = c10_b_idxW + 1;
          if ((c10_i49 < 1) || (c10_i49 > c10_i48)) {
            emlrtDynamicBoundsCheckR2012b(c10_i49, 1, c10_i48, &c10_dp_emlrtBCI,
              &c10_st);
          }

          c10_idxEnd = c10_workspace[c10_i49 - 1];
        }

        c10_b_st.site = &c10_eg_emlrtRSI;
        c10_e_a = c10_idxStart;
        c10_ob_b = c10_idxEnd;
        c10_g_a = c10_e_a;
        c10_qb_b = c10_ob_b;
        if (c10_g_a > c10_qb_b) {
          c10_o_overflow = false;
        } else {
          c10_o_overflow = (c10_qb_b > 2147483646);
        }

        if (c10_o_overflow) {
          c10_c_st.site = &c10_v_emlrtRSI;
          c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
        }

        for (c10_o_idx = c10_idxStart; c10_o_idx <= c10_idxEnd; c10_o_idx++) {
          c10_i45 = c10_depIdx.size(0);
          if ((c10_o_idx < 1) || (c10_o_idx > c10_i45)) {
            emlrtDynamicBoundsCheckR2012b(c10_o_idx, 1, c10_i45,
              &c10_dp_emlrtBCI, &c10_st);
          }

          c10_depIdx[c10_o_idx - 1] = c10_xMax;
        }
      }

      c10_memspace->workspace_int.set_size(&c10_xg_emlrtRTEI, c10_sp,
        c10_depIdx.size(0));
      c10_p_loop_ub = c10_depIdx.size(0) - 1;
      for (c10_i26 = 0; c10_i26 <= c10_p_loop_ub; c10_i26++) {
        c10_memspace->workspace_int[c10_i26] = c10_depIdx[c10_i26];
      }

      c10_memspace->workspace_sort.set_size(&c10_xg_emlrtRTEI, c10_sp,
        c10_workspace.size(0));
      c10_q_loop_ub = c10_workspace.size(0) - 1;
      for (c10_i27 = 0; c10_i27 <= c10_q_loop_ub; c10_i27++) {
        c10_memspace->workspace_sort[c10_i27] = c10_workspace[c10_i27];
      }

      for (c10_i_idx = c10_b_nDepInd; c10_i_idx >= 1; c10_i_idx--) {
        c10_st.site = &c10_od_emlrtRSI;
        c10_i30 = c10_memspace->workspace_int.size(0);
        if ((c10_i_idx < 1) || (c10_i_idx > c10_i30)) {
          emlrtDynamicBoundsCheckR2012b(c10_i_idx, 1, c10_i30, &c10_ap_emlrtBCI,
            &c10_st);
        }

        c10_idx_global = c10_memspace->workspace_int[c10_i_idx - 1];
        c10_totalEq = c10_i_workingset->nWConstr[0] + c10_i_workingset->
          nWConstr[1];
        if ((c10_totalEq == 0) || (c10_idx_global > c10_totalEq)) {
        } else if ((c10_i_workingset->nActiveConstr == c10_totalEq) ||
                   (c10_idx_global == c10_totalEq)) {
          c10_i_workingset->mEqRemoved++;
          if ((c10_idx_global < 1) || (c10_idx_global >
               c10_i_workingset->Wlocalidx.size[0])) {
            emlrtDynamicBoundsCheckR2012b(c10_idx_global, 1,
              c10_i_workingset->Wlocalidx.size[0], &c10_ep_emlrtBCI, &c10_st);
          }

          c10_idx_local = c10_i_workingset->Wlocalidx.data[c10_idx_global - 1];
          if ((c10_i_workingset->mEqRemoved < 1) ||
              (c10_i_workingset->mEqRemoved >
               c10_i_workingset->indexEqRemoved.size[0])) {
            emlrtDynamicBoundsCheckR2012b(c10_i_workingset->mEqRemoved, 1,
              c10_i_workingset->indexEqRemoved.size[0], &c10_ep_emlrtBCI,
              &c10_st);
          }

          c10_i_workingset->indexEqRemoved.data[c10_i_workingset->mEqRemoved - 1]
            = c10_idx_local;
          c10_b_st.site = &c10_fg_emlrtRSI;
          c10_b_idx_global = c10_idx_global;
          if ((c10_b_idx_global < 1) || (c10_b_idx_global >
               c10_i_workingset->Wid.size[0])) {
            emlrtDynamicBoundsCheckR2012b(c10_b_idx_global, 1,
              c10_i_workingset->Wid.size[0], &c10_wo_emlrtBCI, &c10_b_st);
          }

          c10_b_TYPE = c10_i_workingset->Wid.data[c10_b_idx_global - 1];
          if ((c10_b_idx_global < 1) || (c10_b_idx_global >
               c10_i_workingset->Wlocalidx.size[0])) {
            emlrtDynamicBoundsCheckR2012b(c10_b_idx_global, 1,
              c10_i_workingset->Wlocalidx.size[0], &c10_wo_emlrtBCI, &c10_b_st);
          }

          c10_b_idx_local = c10_i_workingset->Wlocalidx.data[c10_b_idx_global -
            1] - 1;
          if ((c10_b_TYPE < 1) || (c10_b_TYPE > 6)) {
            emlrtDynamicBoundsCheckR2012b(c10_b_TYPE, 1, 6, &c10_xo_emlrtBCI,
              &c10_b_st);
          }

          c10_b_idxConstr = c10_i_workingset->isActiveIdx[c10_b_TYPE - 1] +
            c10_b_idx_local;
          if ((c10_b_idxConstr < 1) || (c10_b_idxConstr >
               c10_i_workingset->isActiveConstr.size[0])) {
            emlrtDynamicBoundsCheckR2012b(c10_b_idxConstr, 1,
              c10_i_workingset->isActiveConstr.size[0], &c10_wo_emlrtBCI,
              &c10_b_st);
          }

          c10_i_workingset->isActiveConstr.data[c10_b_idxConstr - 1] = false;
          c10_i44 = c10_i_workingset->nActiveConstr;
          c10_c_st.site = &c10_gg_emlrtRSI;
          c10_b_moveConstraint_(chartInstance, &c10_c_st, c10_i_workingset,
                                c10_i44, c10_b_idx_global);
          c10_i_workingset->nActiveConstr--;
          if ((c10_b_TYPE < 1) || (c10_b_TYPE > 5)) {
            emlrtDynamicBoundsCheckR2012b(c10_b_TYPE, 1, 5, &c10_yo_emlrtBCI,
              &c10_b_st);
          }

          c10_i_workingset->nWConstr[c10_b_TYPE - 1]--;
        } else {
          c10_i_workingset->mEqRemoved++;
          if ((c10_idx_global < 1) || (c10_idx_global >
               c10_i_workingset->Wid.size[0])) {
            emlrtDynamicBoundsCheckR2012b(c10_idx_global, 1,
              c10_i_workingset->Wid.size[0], &c10_ep_emlrtBCI, &c10_st);
          }

          c10_TYPE = c10_i_workingset->Wid.data[c10_idx_global - 1];
          if ((c10_idx_global < 1) || (c10_idx_global >
               c10_i_workingset->Wlocalidx.size[0])) {
            emlrtDynamicBoundsCheckR2012b(c10_idx_global, 1,
              c10_i_workingset->Wlocalidx.size[0], &c10_ep_emlrtBCI, &c10_st);
          }

          c10_idx_local = c10_i_workingset->Wlocalidx.data[c10_idx_global - 1];
          if ((c10_i_workingset->mEqRemoved < 1) ||
              (c10_i_workingset->mEqRemoved >
               c10_i_workingset->indexEqRemoved.size[0])) {
            emlrtDynamicBoundsCheckR2012b(c10_i_workingset->mEqRemoved, 1,
              c10_i_workingset->indexEqRemoved.size[0], &c10_ep_emlrtBCI,
              &c10_st);
          }

          c10_i_workingset->indexEqRemoved.data[c10_i_workingset->mEqRemoved - 1]
            = c10_idx_local;
          if ((c10_TYPE < 1) || (c10_TYPE > 6)) {
            emlrtDynamicBoundsCheckR2012b(c10_TYPE, 1, 6, &c10_fp_emlrtBCI,
              &c10_st);
          }

          c10_idxConstr = c10_i_workingset->isActiveIdx[c10_TYPE - 1] +
            c10_idx_local;
          c10_i39 = c10_idxConstr - 1;
          if ((c10_i39 < 1) || (c10_i39 > c10_i_workingset->isActiveConstr.size
                                [0])) {
            emlrtDynamicBoundsCheckR2012b(c10_i39, 1,
              c10_i_workingset->isActiveConstr.size[0], &c10_ep_emlrtBCI,
              &c10_st);
          }

          c10_i_workingset->isActiveConstr.data[c10_i39 - 1] = false;
          c10_b_st.site = &c10_fg_emlrtRSI;
          c10_b_moveConstraint_(chartInstance, &c10_b_st, c10_i_workingset,
                                c10_totalEq, c10_idx_global);
          c10_i43 = c10_i_workingset->nActiveConstr;
          c10_b_st.site = &c10_fg_emlrtRSI;
          c10_b_moveConstraint_(chartInstance, &c10_b_st, c10_i_workingset,
                                c10_i43, c10_totalEq);
          c10_i_workingset->nActiveConstr--;
          if ((c10_TYPE < 1) || (c10_TYPE > 5)) {
            emlrtDynamicBoundsCheckR2012b(c10_TYPE, 1, 5, &c10_gp_emlrtBCI,
              &c10_st);
          }

          c10_i_workingset->nWConstr[c10_TYPE - 1]--;
        }
      }
    }
  }

  return c10_nDepInd;
}

static void c10_b_factorQRE(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_obj, int32_T c10_mrows,
  int32_T c10_ncols)
{
  static char_T c10_b_cv[14] = { 'L', 'A', 'P', 'A', 'C', 'K', 'E', '_', 'd',
    'g', 'e', 'q', 'p', '3' };

  ptrdiff_t c10_info_t;
  ptrdiff_t c10_lda_t;
  ptrdiff_t c10_m_t;
  ptrdiff_t c10_n_t;
  coder::array<ptrdiff_t, 1U> c10_jpvt_t;
  coder::array<real_T, 2U> c10_A;
  coder::array<real_T, 1U> c10_tau;
  coder::array<int32_T, 1U> c10_jpvt;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_d_st;
  emlrtStack c10_st;
  const mxArray *c10_f_y = NULL;
  const mxArray *c10_g_y = NULL;
  const mxArray *c10_h_y = NULL;
  const mxArray *c10_i_y = NULL;
  const mxArray *c10_j_y = NULL;
  const mxArray *c10_k_y = NULL;
  int32_T c10_b_tau[1];
  int32_T c10_b;
  int32_T c10_b_a;
  int32_T c10_b_info;
  int32_T c10_b_j;
  int32_T c10_b_k;
  int32_T c10_b_loop_ub;
  int32_T c10_b_x;
  int32_T c10_b_y;
  int32_T c10_c_a;
  int32_T c10_c_i;
  int32_T c10_c_info;
  int32_T c10_c_loop_ub;
  int32_T c10_c_m;
  int32_T c10_c_x;
  int32_T c10_c_y;
  int32_T c10_d_a;
  int32_T c10_d_k;
  int32_T c10_d_loop_ub;
  int32_T c10_d_ma;
  int32_T c10_d_na;
  int32_T c10_d_x;
  int32_T c10_d_y;
  int32_T c10_e_b;
  int32_T c10_e_i;
  int32_T c10_e_loop_ub;
  int32_T c10_e_x;
  int32_T c10_e_y;
  int32_T c10_f_b;
  int32_T c10_f_k;
  int32_T c10_f_loop_ub;
  int32_T c10_f_n;
  int32_T c10_g_b;
  int32_T c10_g_k;
  int32_T c10_g_loop_ub;
  int32_T c10_h_b;
  int32_T c10_h_k;
  int32_T c10_h_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_info;
  int32_T c10_j;
  int32_T c10_j_b;
  int32_T c10_k;
  int32_T c10_k_b;
  int32_T c10_loop_ub;
  int32_T c10_m;
  int32_T c10_minmana;
  int32_T c10_minmn;
  int32_T c10_minval;
  int32_T c10_o_b;
  int32_T c10_p_b;
  int32_T c10_q_b;
  int32_T c10_s_b;
  int32_T c10_t_b;
  int32_T c10_u_b;
  int32_T c10_v_b;
  int32_T c10_val;
  int32_T c10_varargin_1;
  int32_T c10_varargin_2;
  int32_T c10_w_b;
  int32_T c10_x;
  int32_T c10_y;
  boolean_T c10_b_overflow;
  boolean_T c10_b_p;
  boolean_T c10_c_overflow;
  boolean_T c10_c_p;
  boolean_T c10_d_overflow;
  boolean_T c10_e_overflow;
  boolean_T c10_f_overflow;
  boolean_T c10_g_overflow;
  boolean_T c10_overflow;
  boolean_T c10_p;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_d_st.prev = &c10_c_st;
  c10_d_st.tls = c10_c_st.tls;
  if (c10_mrows * c10_ncols == 0) {
    c10_b_obj->mrows = c10_mrows;
    c10_b_obj->ncols = c10_ncols;
    c10_b_obj->minRowCol = 0;
  } else {
    c10_b_obj->usedPivoting = true;
    c10_b_obj->mrows = c10_mrows;
    c10_b_obj->ncols = c10_ncols;
    c10_varargin_1 = c10_mrows;
    c10_varargin_2 = c10_ncols;
    c10_x = c10_varargin_1;
    c10_y = c10_varargin_2;
    c10_b_x = c10_x;
    c10_b_y = c10_y;
    c10_c_x = c10_b_x;
    c10_c_y = c10_b_y;
    c10_b_a = c10_c_x;
    c10_b = c10_c_y;
    c10_d_x = c10_b_a;
    c10_d_y = c10_b;
    c10_e_x = c10_d_x;
    c10_e_y = c10_d_y;
    c10_minval = muIntScalarMin_sint32(c10_e_x, c10_e_y);
    c10_b_obj->minRowCol = c10_minval;
    c10_st.site = &c10_qd_emlrtRSI;
    c10_A.set_size(&c10_ah_emlrtRTEI, &c10_st, c10_b_obj->QR.size(0),
                   c10_b_obj->QR.size(1));
    c10_loop_ub = c10_b_obj->QR.size(0) * c10_b_obj->QR.size(1) - 1;
    for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
      c10_A[c10_i] = c10_b_obj->QR[c10_i];
    }

    c10_m = c10_mrows;
    c10_f_n = c10_ncols;
    c10_jpvt.set_size(&c10_ah_emlrtRTEI, &c10_st, c10_b_obj->jpvt.size(0));
    c10_b_loop_ub = c10_b_obj->jpvt.size(0) - 1;
    for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
      c10_jpvt[c10_i1] = c10_b_obj->jpvt[c10_i1];
    }

    c10_b_st.site = &c10_rd_emlrtRSI;
    c10_c_m = c10_m;
    c10_h_n = c10_f_n;
    c10_d_ma = c10_A.size(0);
    c10_d_na = c10_A.size(1);
    c10_minmana = muIntScalarMin_sint32(c10_d_ma, c10_d_na);
    c10_tau.set_size(&c10_bh_emlrtRTEI, &c10_b_st, c10_minmana);
    if ((c10_c_m < 1) || (c10_h_n < 1)) {
      c10_b_tau[0] = c10_tau.size(0);
      c10_tau.set_size(&c10_dh_emlrtRTEI, &c10_b_st, c10_b_tau[0]);
      c10_d_loop_ub = c10_b_tau[0] - 1;
      for (c10_i3 = 0; c10_i3 <= c10_d_loop_ub; c10_i3++) {
        c10_tau[c10_i3] = 0.0;
      }

      c10_c_st.site = &c10_ae_emlrtRSI;
      c10_e_b = c10_h_n;
      c10_f_b = c10_e_b;
      if (c10_f_b < 1) {
        c10_overflow = false;
      } else {
        c10_overflow = (c10_f_b > 2147483646);
      }

      if (c10_overflow) {
        c10_d_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_d_st);
      }

      for (c10_k = 0; c10_k < c10_h_n; c10_k++) {
        c10_b_k = c10_k;
        c10_jpvt[c10_b_k] = c10_b_k + 1;
      }
    } else {
      c10_jpvt_t.set_size(&c10_ch_emlrtRTEI, &c10_b_st, c10_jpvt.size(0));
      c10_c_loop_ub = c10_jpvt.size(0) - 1;
      for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
        c10_jpvt_t[c10_i2] = (ptrdiff_t)c10_jpvt[c10_i2];
      }

      c10_lda_t = (ptrdiff_t)c10_d_ma;
      c10_m_t = (ptrdiff_t)c10_c_m;
      c10_n_t = (ptrdiff_t)c10_h_n;
      c10_info_t = LAPACKE_dgeqp3(102, c10_m_t, c10_n_t, &(c10_A.data())[0],
        c10_lda_t, &(c10_jpvt_t.data())[0], &(c10_tau.data())[0]);
      c10_info = (int32_T)c10_info_t;
      c10_c_st.site = &c10_sd_emlrtRSI;
      c10_b_info = c10_info;
      c10_c_info = c10_b_info;
      c10_p = (c10_c_info != 0);
      if (c10_p) {
        c10_b_p = true;
        c10_val = c10_b_info;
        c10_c_p = false;
        if (c10_val == -4) {
          c10_c_p = true;
        }

        if (!c10_c_p) {
          if (c10_b_info == -1010) {
            c10_g_y = NULL;
            sf_mex_assign(&c10_g_y, sf_mex_create("y", c10_cv5, 10, 0U, 1U, 0U,
              2, 1, 12), false);
            c10_i_y = NULL;
            sf_mex_assign(&c10_i_y, sf_mex_create("y", c10_cv5, 10, 0U, 1U, 0U,
              2, 1, 12), false);
            sf_mex_call(&c10_c_st, &c10_x_emlrtMCI, "error", 0U, 2U, 14, c10_g_y,
                        14, sf_mex_call(&c10_c_st, NULL, "getString", 1U, 1U, 14,
              sf_mex_call(&c10_c_st, NULL, "message", 1U, 1U, 14, c10_i_y)));
          } else {
            c10_f_y = NULL;
            sf_mex_assign(&c10_f_y, sf_mex_create("y", c10_cv6, 10, 0U, 1U, 0U,
              2, 1, 33), false);
            c10_h_y = NULL;
            sf_mex_assign(&c10_h_y, sf_mex_create("y", c10_cv6, 10, 0U, 1U, 0U,
              2, 1, 33), false);
            c10_j_y = NULL;
            sf_mex_assign(&c10_j_y, sf_mex_create("y", c10_b_cv, 10, 0U, 1U, 0U,
              2, 1, 14), false);
            c10_k_y = NULL;
            sf_mex_assign(&c10_k_y, sf_mex_create("y", &c10_b_info, 6, 0U, 0U,
              0U, 0), false);
            sf_mex_call(&c10_c_st, &c10_y_emlrtMCI, "error", 0U, 2U, 14, c10_f_y,
                        14, sf_mex_call(&c10_c_st, NULL, "getString", 1U, 1U, 14,
              sf_mex_call(&c10_c_st, NULL, "message", 1U, 3U, 14, c10_h_y, 14,
                          c10_j_y, 14, c10_k_y)));
          }
        }
      } else {
        c10_b_p = false;
      }

      if (c10_b_p) {
        c10_c_st.site = &c10_ud_emlrtRSI;
        c10_h_b = c10_h_n;
        c10_k_b = c10_h_b;
        if (c10_k_b < 1) {
          c10_c_overflow = false;
        } else {
          c10_c_overflow = (c10_k_b > 2147483646);
        }

        if (c10_c_overflow) {
          c10_d_st.site = &c10_v_emlrtRSI;
          c10_check_forloop_overflow_error(chartInstance, &c10_d_st);
        }

        for (c10_j = 0; c10_j < c10_h_n; c10_j++) {
          c10_b_j = c10_j;
          c10_c_st.site = &c10_vd_emlrtRSI;
          c10_p_b = c10_c_m;
          c10_s_b = c10_p_b;
          if (c10_s_b < 1) {
            c10_e_overflow = false;
          } else {
            c10_e_overflow = (c10_s_b > 2147483646);
          }

          if (c10_e_overflow) {
            c10_d_st.site = &c10_v_emlrtRSI;
            c10_check_forloop_overflow_error(chartInstance, &c10_d_st);
          }

          for (c10_c_i = 0; c10_c_i < c10_c_m; c10_c_i++) {
            c10_e_i = c10_c_i;
            c10_A[c10_b_j * c10_d_ma + c10_e_i] = rtNaN;
          }
        }

        c10_minmn = muIntScalarMin_sint32(c10_c_m, c10_h_n);
        c10_c_st.site = &c10_wd_emlrtRSI;
        c10_o_b = c10_minmn;
        c10_q_b = c10_o_b;
        if (c10_q_b < 1) {
          c10_d_overflow = false;
        } else {
          c10_d_overflow = (c10_q_b > 2147483646);
        }

        if (c10_d_overflow) {
          c10_d_st.site = &c10_v_emlrtRSI;
          c10_check_forloop_overflow_error(chartInstance, &c10_d_st);
        }

        for (c10_f_k = 0; c10_f_k < c10_minmn; c10_f_k++) {
          c10_b_k = c10_f_k;
          c10_tau[c10_b_k] = rtNaN;
        }

        c10_i7 = c10_minmn + 1;
        c10_c_st.site = &c10_xd_emlrtRSI;
        c10_c_a = c10_i7;
        c10_t_b = c10_minmana;
        c10_d_a = c10_c_a;
        c10_u_b = c10_t_b;
        if (c10_d_a > c10_u_b) {
          c10_f_overflow = false;
        } else {
          c10_f_overflow = (c10_u_b > 2147483646);
        }

        if (c10_f_overflow) {
          c10_d_st.site = &c10_v_emlrtRSI;
          c10_check_forloop_overflow_error(chartInstance, &c10_d_st);
        }

        for (c10_g_k = c10_i7; c10_g_k <= c10_minmana; c10_g_k++) {
          c10_tau[c10_g_k - 1] = 0.0;
        }

        c10_c_st.site = &c10_yd_emlrtRSI;
        c10_v_b = c10_h_n;
        c10_w_b = c10_v_b;
        if (c10_w_b < 1) {
          c10_g_overflow = false;
        } else {
          c10_g_overflow = (c10_w_b > 2147483646);
        }

        if (c10_g_overflow) {
          c10_d_st.site = &c10_v_emlrtRSI;
          c10_check_forloop_overflow_error(chartInstance, &c10_d_st);
        }

        for (c10_h_k = 0; c10_h_k < c10_h_n; c10_h_k++) {
          c10_b_k = c10_h_k;
          c10_jpvt[c10_b_k] = c10_b_k + 1;
        }
      } else {
        c10_c_st.site = &c10_td_emlrtRSI;
        c10_g_b = c10_h_n;
        c10_j_b = c10_g_b;
        if (c10_j_b < 1) {
          c10_b_overflow = false;
        } else {
          c10_b_overflow = (c10_j_b > 2147483646);
        }

        if (c10_b_overflow) {
          c10_d_st.site = &c10_v_emlrtRSI;
          c10_check_forloop_overflow_error(chartInstance, &c10_d_st);
        }

        for (c10_d_k = 0; c10_d_k < c10_h_n; c10_d_k++) {
          c10_b_k = c10_d_k;
          c10_jpvt[c10_b_k] = (int32_T)c10_jpvt_t[c10_b_k];
        }
      }
    }

    c10_b_obj->QR.set_size(&c10_ah_emlrtRTEI, c10_sp, c10_A.size(0), c10_A.size
      (1));
    c10_e_loop_ub = c10_A.size(0) * c10_A.size(1) - 1;
    for (c10_i4 = 0; c10_i4 <= c10_e_loop_ub; c10_i4++) {
      c10_b_obj->QR[c10_i4] = c10_A[c10_i4];
    }

    c10_b_obj->tau.set_size(&c10_ah_emlrtRTEI, c10_sp, c10_tau.size(0));
    c10_f_loop_ub = c10_tau.size(0) - 1;
    for (c10_i5 = 0; c10_i5 <= c10_f_loop_ub; c10_i5++) {
      c10_b_obj->tau[c10_i5] = c10_tau[c10_i5];
    }

    c10_b_obj->jpvt.set_size(&c10_ah_emlrtRTEI, c10_sp, c10_jpvt.size(0));
    c10_g_loop_ub = c10_jpvt.size(0) - 1;
    for (c10_i6 = 0; c10_i6 <= c10_g_loop_ub; c10_i6++) {
      c10_b_obj->jpvt[c10_i6] = c10_jpvt[c10_i6];
    }
  }
}

static void c10_b_computeQ_(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_obj, int32_T c10_nrows)
{
  static char_T c10_b_cv[14] = { 'L', 'A', 'P', 'A', 'C', 'K', 'E', '_', 'd',
    'o', 'r', 'g', 'q', 'r' };

  ptrdiff_t c10_b_n_t;
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_info_t;
  ptrdiff_t c10_k_t;
  ptrdiff_t c10_lda_t;
  ptrdiff_t c10_m_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 2U> c10_x;
  coder::array<real_T, 2U> c10_y;
  coder::array<real_T, 1U> c10_tau;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  const mxArray *c10_b_y = NULL;
  const mxArray *c10_c_y = NULL;
  const mxArray *c10_d_y = NULL;
  const mxArray *c10_e_y = NULL;
  const mxArray *c10_f_y = NULL;
  const mxArray *c10_g_y = NULL;
  int32_T c10_c_obj[2];
  int32_T c10_b;
  int32_T c10_b_idx;
  int32_T c10_b_info;
  int32_T c10_b_ix0;
  int32_T c10_b_iy0;
  int32_T c10_b_k;
  int32_T c10_b_loop_ub;
  int32_T c10_c_info;
  int32_T c10_c_ix0;
  int32_T c10_c_iy0;
  int32_T c10_c_lda;
  int32_T c10_c_loop_ub;
  int32_T c10_c_m;
  int32_T c10_d_loop_ub;
  int32_T c10_e_b;
  int32_T c10_e_loop_ub;
  int32_T c10_f_loop_ub;
  int32_T c10_f_n;
  int32_T c10_g_loop_ub;
  int32_T c10_h_loop_ub;
  int32_T c10_h_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_iQR0;
  int32_T c10_i_loop_ub;
  int32_T c10_i_n;
  int32_T c10_idx;
  int32_T c10_info;
  int32_T c10_ix0;
  int32_T c10_iy0;
  int32_T c10_j_loop_ub;
  int32_T c10_j_n;
  int32_T c10_k;
  int32_T c10_k_loop_ub;
  int32_T c10_k_n;
  int32_T c10_lda;
  int32_T c10_loop_ub;
  int32_T c10_m;
  int32_T c10_m_loop_ub;
  int32_T c10_o_loop_ub;
  int32_T c10_val;
  int32_T c10_var;
  boolean_T c10_b_p;
  boolean_T c10_c_p;
  boolean_T c10_overflow;
  boolean_T c10_p;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_i = c10_b_obj->minRowCol;
  c10_st.site = &c10_tf_emlrtRSI;
  c10_b = c10_i;
  c10_e_b = c10_b;
  if (c10_e_b < 1) {
    c10_overflow = false;
  } else {
    c10_overflow = (c10_e_b > 2147483646);
  }

  if (c10_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  for (c10_idx = 0; c10_idx < c10_i; c10_idx++) {
    c10_b_idx = c10_idx;
    c10_iQR0 = (c10_b_obj->ldq * c10_b_idx + c10_b_idx) + 2;
    c10_st.site = &c10_tf_emlrtRSI;
    c10_h_n = (c10_b_obj->mrows - c10_b_idx) - 1;
    c10_x.set_size(&c10_eh_emlrtRTEI, &c10_st, c10_b_obj->QR.size(0),
                   c10_b_obj->QR.size(1));
    c10_b_loop_ub = c10_b_obj->QR.size(0) * c10_b_obj->QR.size(1) - 1;
    for (c10_i2 = 0; c10_i2 <= c10_b_loop_ub; c10_i2++) {
      c10_x[c10_i2] = c10_b_obj->QR[c10_i2];
    }

    c10_ix0 = c10_iQR0;
    c10_y.set_size(&c10_eh_emlrtRTEI, &c10_st, c10_b_obj->Q.size(0),
                   c10_b_obj->Q.size(1));
    c10_d_loop_ub = c10_b_obj->Q.size(0) * c10_b_obj->Q.size(1) - 1;
    for (c10_i4 = 0; c10_i4 <= c10_d_loop_ub; c10_i4++) {
      c10_y[c10_i4] = c10_b_obj->Q[c10_i4];
    }

    c10_iy0 = c10_iQR0;
    c10_b_obj->Q.set_size(&c10_eh_emlrtRTEI, &c10_st, c10_y.size(0), c10_y.size
                          (1));
    c10_f_loop_ub = c10_y.size(0) * c10_y.size(1) - 1;
    for (c10_i6 = 0; c10_i6 <= c10_f_loop_ub; c10_i6++) {
      c10_b_obj->Q[c10_i6] = c10_y[c10_i6];
    }

    if (!(c10_h_n < 1)) {
      c10_b_st.site = &c10_ad_emlrtRSI;
      c10_j_n = c10_h_n;
      c10_b_ix0 = c10_ix0;
      c10_y.set_size(&c10_bf_emlrtRTEI, &c10_b_st, c10_b_obj->Q.size(0),
                     c10_b_obj->Q.size(1));
      c10_h_loop_ub = c10_b_obj->Q.size(0) * c10_b_obj->Q.size(1) - 1;
      for (c10_i8 = 0; c10_i8 <= c10_h_loop_ub; c10_i8++) {
        c10_y[c10_i8] = c10_b_obj->Q[c10_i8];
      }

      c10_b_iy0 = c10_iy0;
      c10_b_obj->Q.set_size(&c10_eh_emlrtRTEI, &c10_b_st, c10_y.size(0),
                            c10_y.size(1));
      c10_j_loop_ub = c10_y.size(0) * c10_y.size(1) - 1;
      for (c10_i10 = 0; c10_i10 <= c10_j_loop_ub; c10_i10++) {
        c10_b_obj->Q[c10_i10] = c10_y[c10_i10];
      }

      c10_c_st.site = &c10_cd_emlrtRSI;
      c10_k_n = c10_j_n;
      c10_c_ix0 = c10_b_ix0 - 1;
      c10_y.set_size(&c10_cf_emlrtRTEI, &c10_c_st, c10_b_obj->Q.size(0),
                     c10_b_obj->Q.size(1));
      c10_k_loop_ub = c10_b_obj->Q.size(0) * c10_b_obj->Q.size(1) - 1;
      for (c10_i11 = 0; c10_i11 <= c10_k_loop_ub; c10_i11++) {
        c10_y[c10_i11] = c10_b_obj->Q[c10_i11];
      }

      c10_c_iy0 = c10_b_iy0 - 1;
      c10_b_obj->Q.set_size(&c10_eh_emlrtRTEI, &c10_c_st, c10_y.size(0),
                            c10_y.size(1));
      c10_m_loop_ub = c10_y.size(0) * c10_y.size(1) - 1;
      for (c10_i12 = 0; c10_i12 <= c10_m_loop_ub; c10_i12++) {
        c10_b_obj->Q[c10_i12] = c10_y[c10_i12];
      }

      c10_var = c10_k_n;
      c10_b_n_t = (ptrdiff_t)c10_var;
      c10_incx_t = (ptrdiff_t)1;
      c10_incy_t = (ptrdiff_t)1;
      dcopy(&c10_b_n_t, &c10_x[c10_c_ix0], &c10_incx_t, &c10_b_obj->Q[c10_c_iy0],
            &c10_incy_t);
    }
  }

  c10_st.site = &c10_tf_emlrtRSI;
  c10_m = c10_b_obj->mrows;
  c10_f_n = c10_nrows;
  c10_k = c10_b_obj->minRowCol;
  c10_x.set_size(&c10_eh_emlrtRTEI, &c10_st, c10_b_obj->Q.size(0),
                 c10_b_obj->Q.size(1));
  c10_loop_ub = c10_b_obj->Q.size(0) * c10_b_obj->Q.size(1) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_loop_ub; c10_i1++) {
    c10_x[c10_i1] = c10_b_obj->Q[c10_i1];
  }

  c10_lda = c10_b_obj->ldq;
  c10_tau.set_size(&c10_eh_emlrtRTEI, &c10_st, c10_b_obj->tau.size(0));
  c10_c_loop_ub = c10_b_obj->tau.size(0) - 1;
  for (c10_i3 = 0; c10_i3 <= c10_c_loop_ub; c10_i3++) {
    c10_tau[c10_i3] = c10_b_obj->tau[c10_i3];
  }

  c10_b_obj->Q.set_size(&c10_eh_emlrtRTEI, &c10_st, c10_x.size(0), c10_x.size(1));
  c10_e_loop_ub = c10_x.size(0) * c10_x.size(1) - 1;
  for (c10_i5 = 0; c10_i5 <= c10_e_loop_ub; c10_i5++) {
    c10_b_obj->Q[c10_i5] = c10_x[c10_i5];
  }

  c10_b_st.site = &c10_vf_emlrtRSI;
  c10_c_m = c10_m;
  c10_i_n = c10_f_n;
  c10_b_k = c10_k;
  c10_x.set_size(&c10_fh_emlrtRTEI, &c10_b_st, c10_b_obj->Q.size(0),
                 c10_b_obj->Q.size(1));
  c10_g_loop_ub = c10_b_obj->Q.size(0) * c10_b_obj->Q.size(1) - 1;
  for (c10_i7 = 0; c10_i7 <= c10_g_loop_ub; c10_i7++) {
    c10_x[c10_i7] = c10_b_obj->Q[c10_i7];
  }

  c10_c_lda = c10_lda;
  c10_b_obj->Q.set_size(&c10_eh_emlrtRTEI, &c10_b_st, c10_x.size(0), c10_x.size
                        (1));
  c10_i_loop_ub = c10_x.size(0) * c10_x.size(1) - 1;
  for (c10_i9 = 0; c10_i9 <= c10_i_loop_ub; c10_i9++) {
    c10_b_obj->Q[c10_i9] = c10_x[c10_i9];
  }

  c10_m_t = (ptrdiff_t)c10_c_m;
  c10_n_t = (ptrdiff_t)c10_i_n;
  c10_k_t = (ptrdiff_t)c10_b_k;
  c10_lda_t = (ptrdiff_t)c10_c_lda;
  c10_info_t = LAPACKE_dorgqr(102, c10_m_t, c10_n_t, c10_k_t,
    &(c10_b_obj->Q.data())[0], c10_lda_t, &(c10_tau.data())[0]);
  c10_info = (int32_T)c10_info_t;
  c10_c_st.site = &c10_uf_emlrtRSI;
  c10_b_info = c10_info;
  c10_c_info = c10_b_info;
  c10_p = (c10_c_info != 0);
  if (c10_p) {
    c10_b_p = true;
    c10_val = c10_b_info;
    c10_c_p = false;
    if (c10_val == -7) {
      c10_c_p = true;
    } else if (c10_val == -5) {
      c10_c_p = true;
    }

    if (!c10_c_p) {
      if (c10_b_info == -1010) {
        c10_c_y = NULL;
        sf_mex_assign(&c10_c_y, sf_mex_create("y", c10_cv5, 10, 0U, 1U, 0U, 2, 1,
          12), false);
        c10_e_y = NULL;
        sf_mex_assign(&c10_e_y, sf_mex_create("y", c10_cv5, 10, 0U, 1U, 0U, 2, 1,
          12), false);
        sf_mex_call(&c10_c_st, &c10_x_emlrtMCI, "error", 0U, 2U, 14, c10_c_y, 14,
                    sf_mex_call(&c10_c_st, NULL, "getString", 1U, 1U, 14,
          sf_mex_call(&c10_c_st, NULL, "message", 1U, 1U, 14, c10_e_y)));
      } else {
        c10_b_y = NULL;
        sf_mex_assign(&c10_b_y, sf_mex_create("y", c10_cv6, 10, 0U, 1U, 0U, 2, 1,
          33), false);
        c10_d_y = NULL;
        sf_mex_assign(&c10_d_y, sf_mex_create("y", c10_cv6, 10, 0U, 1U, 0U, 2, 1,
          33), false);
        c10_f_y = NULL;
        sf_mex_assign(&c10_f_y, sf_mex_create("y", c10_b_cv, 10, 0U, 1U, 0U, 2,
          1, 14), false);
        c10_g_y = NULL;
        sf_mex_assign(&c10_g_y, sf_mex_create("y", &c10_b_info, 6, 0U, 0U, 0U, 0),
                      false);
        sf_mex_call(&c10_c_st, &c10_y_emlrtMCI, "error", 0U, 2U, 14, c10_b_y, 14,
                    sf_mex_call(&c10_c_st, NULL, "getString", 1U, 1U, 14,
          sf_mex_call(&c10_c_st, NULL, "message", 1U, 3U, 14, c10_d_y, 14,
                      c10_f_y, 14, c10_g_y)));
      }
    }
  } else {
    c10_b_p = false;
  }

  if (c10_b_p) {
    for (c10_i13 = 0; c10_i13 < 2; c10_i13++) {
      c10_c_obj[c10_i13] = c10_b_obj->Q.size(c10_i13);
    }

    c10_b_obj->Q.set_size(&c10_eh_emlrtRTEI, &c10_b_st, c10_c_obj[0], c10_c_obj
                          [1]);
    c10_o_loop_ub = c10_c_obj[0] * c10_c_obj[1] - 1;
    for (c10_i14 = 0; c10_i14 <= c10_o_loop_ub; c10_i14++) {
      c10_b_obj->Q[c10_i14] = rtNaN;
    }
  }
}

static void c10_b_moveConstraint_(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL *c10_b_obj, int32_T
  c10_idx_global_start, int32_T c10_idx_global_dest)
{
  emlrtStack c10_b_st;
  emlrtStack c10_st;
  int32_T c10_b;
  int32_T c10_b_idx;
  int32_T c10_e_b;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_idx;
  int32_T c10_idxCopyFrom;
  int32_T c10_idxCopyTo;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  if ((c10_idx_global_start < 1) || (c10_idx_global_start > c10_b_obj->Wid.size
       [0])) {
    emlrtDynamicBoundsCheckR2012b(c10_idx_global_start, 1, c10_b_obj->Wid.size[0],
      &c10_hp_emlrtBCI, (emlrtConstCTX)c10_sp);
  }

  if ((c10_idx_global_dest < 1) || (c10_idx_global_dest > c10_b_obj->Wid.size[0]))
  {
    emlrtDynamicBoundsCheckR2012b(c10_idx_global_dest, 1, c10_b_obj->Wid.size[0],
      &c10_hp_emlrtBCI, (emlrtConstCTX)c10_sp);
  }

  c10_b_obj->Wid.data[c10_idx_global_dest - 1] = c10_b_obj->
    Wid.data[c10_idx_global_start - 1];
  if ((c10_idx_global_start < 1) || (c10_idx_global_start >
       c10_b_obj->Wlocalidx.size[0])) {
    emlrtDynamicBoundsCheckR2012b(c10_idx_global_start, 1,
      c10_b_obj->Wlocalidx.size[0], &c10_hp_emlrtBCI, (emlrtConstCTX)c10_sp);
  }

  if ((c10_idx_global_dest < 1) || (c10_idx_global_dest >
       c10_b_obj->Wlocalidx.size[0])) {
    emlrtDynamicBoundsCheckR2012b(c10_idx_global_dest, 1,
      c10_b_obj->Wlocalidx.size[0], &c10_hp_emlrtBCI, (emlrtConstCTX)c10_sp);
  }

  c10_b_obj->Wlocalidx.data[c10_idx_global_dest - 1] = c10_b_obj->
    Wlocalidx.data[c10_idx_global_start - 1];
  c10_i = c10_b_obj->nVar;
  c10_st.site = &c10_hg_emlrtRSI;
  c10_b = c10_i;
  c10_e_b = c10_b;
  if (c10_e_b < 1) {
    c10_overflow = false;
  } else {
    c10_overflow = (c10_e_b > 2147483646);
  }

  if (c10_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  for (c10_idx = 0; c10_idx < c10_i; c10_idx++) {
    c10_b_idx = c10_idx + 1;
    c10_idxCopyTo = c10_b_idx + c10_b_obj->ldA * (c10_idx_global_dest - 1);
    c10_idxCopyFrom = c10_b_idx + c10_b_obj->ldA * (c10_idx_global_start - 1);
    c10_i1 = c10_b_obj->ATwset.size(0);
    if ((c10_idxCopyFrom < 1) || (c10_idxCopyFrom > c10_i1)) {
      emlrtDynamicBoundsCheckR2012b(c10_idxCopyFrom, 1, c10_i1, &c10_hp_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_i2 = c10_b_obj->ATwset.size(0);
    if ((c10_idxCopyTo < 1) || (c10_idxCopyTo > c10_i2)) {
      emlrtDynamicBoundsCheckR2012b(c10_idxCopyTo, 1, c10_i2, &c10_hp_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->ATwset[c10_idxCopyTo - 1] = c10_b_obj->ATwset[c10_idxCopyFrom - 1];
  }

  if ((c10_idx_global_start < 1) || (c10_idx_global_start >
       c10_b_obj->bwset.size[0])) {
    emlrtDynamicBoundsCheckR2012b(c10_idx_global_start, 1, c10_b_obj->
      bwset.size[0], &c10_hp_emlrtBCI, (emlrtConstCTX)c10_sp);
  }

  if ((c10_idx_global_dest < 1) || (c10_idx_global_dest > c10_b_obj->bwset.size
       [0])) {
    emlrtDynamicBoundsCheckR2012b(c10_idx_global_dest, 1, c10_b_obj->bwset.size
      [0], &c10_hp_emlrtBCI, (emlrtConstCTX)c10_sp);
  }

  c10_b_obj->bwset.data[c10_idx_global_dest - 1] = c10_b_obj->
    bwset.data[c10_idx_global_start - 1];
}

static void c10_b_countsort(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<int32_T, 1U> &c10_x, int32_T c10_xLen, coder::
  array<int32_T, 1U> &c10_workspace, int32_T c10_xMin, int32_T c10_xMax)
{
  emlrtStack c10_b_st;
  emlrtStack c10_st;
  int32_T c10_b;
  int32_T c10_b_a;
  int32_T c10_b_idx;
  int32_T c10_b_idxW;
  int32_T c10_c_a;
  int32_T c10_c_idx;
  int32_T c10_d_a;
  int32_T c10_d_idx;
  int32_T c10_e_a;
  int32_T c10_e_b;
  int32_T c10_e_idx;
  int32_T c10_f_b;
  int32_T c10_g_b;
  int32_T c10_h_b;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_idx;
  int32_T c10_idxEnd;
  int32_T c10_idxFill;
  int32_T c10_idxStart;
  int32_T c10_idxW;
  int32_T c10_j_b;
  int32_T c10_k_b;
  int32_T c10_maxOffset;
  int32_T c10_minOffset;
  int32_T c10_o_b;
  int32_T c10_p_b;
  int32_T c10_q_b;
  int32_T c10_s_b;
  int32_T c10_t_b;
  boolean_T c10_b_overflow;
  boolean_T c10_c_overflow;
  boolean_T c10_d_overflow;
  boolean_T c10_e_overflow;
  boolean_T c10_f_overflow;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  if ((c10_xLen <= 1) || (c10_xMax <= c10_xMin)) {
  } else {
    c10_i = c10_xMax - c10_xMin;
    c10_st.site = &c10_eg_emlrtRSI;
    c10_b = c10_i + 1;
    c10_e_b = c10_b;
    if (c10_e_b < 1) {
      c10_overflow = false;
    } else {
      c10_overflow = (c10_e_b > 2147483646);
    }

    if (c10_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_idx = 0; c10_idx <= c10_i; c10_idx++) {
      c10_b_idx = c10_idx;
      c10_i1 = c10_workspace.size(0);
      c10_i2 = c10_b_idx + 1;
      if ((c10_i2 < 1) || (c10_i2 > c10_i1)) {
        emlrtDynamicBoundsCheckR2012b(c10_i2, 1, c10_i1, &c10_dp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_workspace[c10_i2 - 1] = 0;
    }

    c10_minOffset = c10_xMin - 1;
    c10_maxOffset = c10_xMax - c10_minOffset;
    c10_st.site = &c10_eg_emlrtRSI;
    c10_f_b = c10_xLen;
    c10_g_b = c10_f_b;
    if (c10_g_b < 1) {
      c10_b_overflow = false;
    } else {
      c10_b_overflow = (c10_g_b > 2147483646);
    }

    if (c10_b_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_c_idx = 0; c10_c_idx < c10_xLen; c10_c_idx++) {
      c10_b_idx = c10_c_idx + 1;
      c10_i3 = c10_workspace.size(0);
      c10_i4 = c10_x.size(0);
      if ((c10_b_idx < 1) || (c10_b_idx > c10_i4)) {
        emlrtDynamicBoundsCheckR2012b(c10_b_idx, 1, c10_i4, &c10_dp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i5 = c10_x[c10_b_idx - 1] - c10_minOffset;
      if ((c10_i5 < 1) || (c10_i5 > c10_i3)) {
        emlrtDynamicBoundsCheckR2012b(c10_i5, 1, c10_i3, &c10_dp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i6 = c10_workspace.size(0);
      c10_i7 = c10_x.size(0);
      if ((c10_b_idx < 1) || (c10_b_idx > c10_i7)) {
        emlrtDynamicBoundsCheckR2012b(c10_b_idx, 1, c10_i7, &c10_dp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i10 = c10_x[c10_b_idx - 1] - c10_minOffset;
      if ((c10_i10 < 1) || (c10_i10 > c10_i6)) {
        emlrtDynamicBoundsCheckR2012b(c10_i10, 1, c10_i6, &c10_dp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_workspace[c10_i10 - 1] = c10_workspace[c10_i5 - 1] + 1;
    }

    c10_st.site = &c10_eg_emlrtRSI;
    c10_h_b = c10_maxOffset;
    c10_j_b = c10_h_b;
    if (c10_j_b < 2) {
      c10_c_overflow = false;
    } else {
      c10_c_overflow = (c10_j_b > 2147483646);
    }

    if (c10_c_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_d_idx = 2; c10_d_idx <= c10_maxOffset; c10_d_idx++) {
      c10_i8 = c10_workspace.size(0);
      if ((c10_d_idx < 1) || (c10_d_idx > c10_i8)) {
        emlrtDynamicBoundsCheckR2012b(c10_d_idx, 1, c10_i8, &c10_dp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i11 = c10_workspace.size(0);
      c10_i12 = c10_d_idx - 1;
      if ((c10_i12 < 1) || (c10_i12 > c10_i11)) {
        emlrtDynamicBoundsCheckR2012b(c10_i12, 1, c10_i11, &c10_dp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i13 = c10_workspace.size(0);
      if ((c10_d_idx < 1) || (c10_d_idx > c10_i13)) {
        emlrtDynamicBoundsCheckR2012b(c10_d_idx, 1, c10_i13, &c10_dp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_workspace[c10_d_idx - 1] = c10_workspace[c10_d_idx - 1] +
        c10_workspace[c10_i12 - 1];
    }

    c10_idxStart = 1;
    c10_idxEnd = c10_workspace[0];
    c10_i9 = c10_maxOffset - 2;
    c10_st.site = &c10_eg_emlrtRSI;
    c10_k_b = c10_i9 + 1;
    c10_o_b = c10_k_b;
    if (c10_o_b < 1) {
      c10_d_overflow = false;
    } else {
      c10_d_overflow = (c10_o_b > 2147483646);
    }

    if (c10_d_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_idxW = 0; c10_idxW <= c10_i9; c10_idxW++) {
      c10_b_idxW = c10_idxW + 1;
      c10_st.site = &c10_eg_emlrtRSI;
      c10_c_a = c10_idxStart;
      c10_q_b = c10_idxEnd;
      c10_e_a = c10_c_a;
      c10_t_b = c10_q_b;
      if (c10_e_a > c10_t_b) {
        c10_f_overflow = false;
      } else {
        c10_f_overflow = (c10_t_b > 2147483646);
      }

      if (c10_f_overflow) {
        c10_b_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
      }

      for (c10_idxFill = c10_idxStart; c10_idxFill <= c10_idxEnd; c10_idxFill++)
      {
        c10_i16 = c10_x.size(0);
        if ((c10_idxFill < 1) || (c10_idxFill > c10_i16)) {
          emlrtDynamicBoundsCheckR2012b(c10_idxFill, 1, c10_i16,
            &c10_dp_emlrtBCI, (emlrtConstCTX)c10_sp);
        }

        c10_x[c10_idxFill - 1] = c10_b_idxW + c10_minOffset;
      }

      c10_i15 = c10_workspace.size(0);
      if ((c10_b_idxW < 1) || (c10_b_idxW > c10_i15)) {
        emlrtDynamicBoundsCheckR2012b(c10_b_idxW, 1, c10_i15, &c10_dp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_idxStart = c10_workspace[c10_b_idxW - 1] + 1;
      c10_i17 = c10_workspace.size(0);
      c10_i18 = c10_b_idxW + 1;
      if ((c10_i18 < 1) || (c10_i18 > c10_i17)) {
        emlrtDynamicBoundsCheckR2012b(c10_i18, 1, c10_i17, &c10_dp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_idxEnd = c10_workspace[c10_i18 - 1];
    }

    c10_st.site = &c10_eg_emlrtRSI;
    c10_b_a = c10_idxStart;
    c10_p_b = c10_idxEnd;
    c10_d_a = c10_b_a;
    c10_s_b = c10_p_b;
    if (c10_d_a > c10_s_b) {
      c10_e_overflow = false;
    } else {
      c10_e_overflow = (c10_s_b > 2147483646);
    }

    if (c10_e_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_e_idx = c10_idxStart; c10_e_idx <= c10_idxEnd; c10_e_idx++) {
      c10_i14 = c10_x.size(0);
      if ((c10_e_idx < 1) || (c10_e_idx > c10_i14)) {
        emlrtDynamicBoundsCheckR2012b(c10_e_idx, 1, c10_i14, &c10_dp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_x[c10_e_idx - 1] = c10_xMax;
    }
  }
}

static boolean_T c10_b_feasibleX0ForWorkingSet(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, coder::array<real_T, 2U>
  &c10_workspace, coder::array<real_T, 1U> &c10_xCurrent,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_i_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E
  *c10_b_qrmanager)
{
  ptrdiff_t c10_b_incx_t;
  ptrdiff_t c10_b_incy_t;
  ptrdiff_t c10_b_k_t;
  ptrdiff_t c10_b_lda_t;
  ptrdiff_t c10_b_ldb_t;
  ptrdiff_t c10_b_ldc_t;
  ptrdiff_t c10_b_m_t;
  ptrdiff_t c10_b_n_t;
  ptrdiff_t c10_c_incx_t;
  ptrdiff_t c10_c_incy_t;
  ptrdiff_t c10_c_lda_t;
  ptrdiff_t c10_c_ldb_t;
  ptrdiff_t c10_c_m_t;
  ptrdiff_t c10_c_n_t;
  ptrdiff_t c10_d_incx_t;
  ptrdiff_t c10_d_incy_t;
  ptrdiff_t c10_d_lda_t;
  ptrdiff_t c10_d_ldb_t;
  ptrdiff_t c10_d_m_t;
  ptrdiff_t c10_d_n_t;
  ptrdiff_t c10_e_lda_t;
  ptrdiff_t c10_e_m_t;
  ptrdiff_t c10_e_n_t;
  ptrdiff_t c10_f_n_t;
  ptrdiff_t c10_g_n_t;
  ptrdiff_t c10_h_n_t;
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_k_t;
  ptrdiff_t c10_lda_t;
  ptrdiff_t c10_ldb_t;
  ptrdiff_t c10_ldc_t;
  ptrdiff_t c10_m_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 2U> c10_b_workspace;
  coder::array<real_T, 2U> c10_c_B;
  coder::array<real_T, 2U> c10_c_workspace;
  coder::array<real_T, 2U> c10_cb_A;
  coder::array<real_T, 1U> c10_A;
  coder::array<real_T, 1U> c10_j_workingset;
  coder::array<real_T, 1U> c10_x;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  real_T c10_alpha1;
  real_T c10_b_alpha1;
  real_T c10_b_beta1;
  real_T c10_beta1;
  real_T c10_c_a;
  real_T c10_c_alpha1;
  real_T c10_c_beta1;
  real_T c10_constrViolation_basicX;
  real_T c10_constrViolation_minnormX;
  real_T c10_d_alpha1;
  real_T c10_e_alpha1;
  real_T c10_e_v;
  real_T c10_f_v;
  real_T c10_g_x;
  real_T c10_j_x;
  real_T c10_k_x;
  real_T c10_m_x;
  real_T c10_o_x;
  real_T c10_p_x;
  int32_T c10_b;
  int32_T c10_b_a;
  int32_T c10_b_idx;
  int32_T c10_b_idx_col;
  int32_T c10_b_idx_row;
  int32_T c10_b_ix0;
  int32_T c10_b_k;
  int32_T c10_b_ldb;
  int32_T c10_b_ldc;
  int32_T c10_b_loop_ub;
  int32_T c10_b_var;
  int32_T c10_b_x;
  int32_T c10_b_y;
  int32_T c10_c_idx;
  int32_T c10_c_ix0;
  int32_T c10_c_lda;
  int32_T c10_c_ldb;
  int32_T c10_c_ldc;
  int32_T c10_c_loop_ub;
  int32_T c10_c_m;
  int32_T c10_c_var;
  int32_T c10_c_x;
  int32_T c10_c_y;
  int32_T c10_d_idx;
  int32_T c10_d_k;
  int32_T c10_d_lda;
  int32_T c10_d_ldb;
  int32_T c10_d_ldc;
  int32_T c10_d_loop_ub;
  int32_T c10_d_m;
  int32_T c10_d_var;
  int32_T c10_d_x;
  int32_T c10_d_y;
  int32_T c10_e_b;
  int32_T c10_e_idx;
  int32_T c10_e_lda;
  int32_T c10_e_ldb;
  int32_T c10_e_ldc;
  int32_T c10_e_loop_ub;
  int32_T c10_e_m;
  int32_T c10_e_var;
  int32_T c10_e_x;
  int32_T c10_e_y;
  int32_T c10_exitg1;
  int32_T c10_f_b;
  int32_T c10_f_k;
  int32_T c10_f_lda;
  int32_T c10_f_ldb;
  int32_T c10_f_ldc;
  int32_T c10_f_loop_ub;
  int32_T c10_f_m;
  int32_T c10_f_n;
  int32_T c10_f_var;
  int32_T c10_f_x;
  int32_T c10_g_b;
  int32_T c10_g_k;
  int32_T c10_g_lda;
  int32_T c10_g_ldb;
  int32_T c10_g_ldc;
  int32_T c10_g_loop_ub;
  int32_T c10_g_m;
  int32_T c10_g_var;
  int32_T c10_h_b;
  int32_T c10_h_k;
  int32_T c10_h_lda;
  int32_T c10_h_ldb;
  int32_T c10_h_loop_ub;
  int32_T c10_h_m;
  int32_T c10_h_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i19;
  int32_T c10_i2;
  int32_T c10_i20;
  int32_T c10_i21;
  int32_T c10_i22;
  int32_T c10_i23;
  int32_T c10_i24;
  int32_T c10_i25;
  int32_T c10_i26;
  int32_T c10_i27;
  int32_T c10_i28;
  int32_T c10_i29;
  int32_T c10_i3;
  int32_T c10_i30;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_i_lda;
  int32_T c10_i_ldb;
  int32_T c10_i_loop_ub;
  int32_T c10_i_m;
  int32_T c10_i_n;
  int32_T c10_i_var;
  int32_T c10_idx;
  int32_T c10_idxATw;
  int32_T c10_idxQR;
  int32_T c10_idx_col;
  int32_T c10_idx_row;
  int32_T c10_ix0;
  int32_T c10_ix0_2;
  int32_T c10_j_b;
  int32_T c10_j_lda;
  int32_T c10_j_ldb;
  int32_T c10_j_loop_ub;
  int32_T c10_j_m;
  int32_T c10_j_n;
  int32_T c10_j_var;
  int32_T c10_k;
  int32_T c10_k_b;
  int32_T c10_k_lda;
  int32_T c10_k_ldb;
  int32_T c10_k_loop_ub;
  int32_T c10_k_m;
  int32_T c10_k_n;
  int32_T c10_k_var;
  int32_T c10_lda;
  int32_T c10_ldb;
  int32_T c10_ldq;
  int32_T c10_ldw;
  int32_T c10_loop_ub;
  int32_T c10_m;
  int32_T c10_mWConstr;
  int32_T c10_m_lda;
  int32_T c10_m_ldb;
  int32_T c10_m_loop_ub;
  int32_T c10_m_m;
  int32_T c10_m_n;
  int32_T c10_m_var;
  int32_T c10_minval;
  int32_T c10_mrows;
  int32_T c10_nVar;
  int32_T c10_ncols;
  int32_T c10_o_b;
  int32_T c10_o_lda;
  int32_T c10_o_loop_ub;
  int32_T c10_o_m;
  int32_T c10_o_n;
  int32_T c10_o_var;
  int32_T c10_offsetQR;
  int32_T c10_p_b;
  int32_T c10_p_lda;
  int32_T c10_p_loop_ub;
  int32_T c10_p_m;
  int32_T c10_p_n;
  int32_T c10_p_var;
  int32_T c10_q_b;
  int32_T c10_q_lda;
  int32_T c10_q_loop_ub;
  int32_T c10_q_m;
  int32_T c10_q_n;
  int32_T c10_q_var;
  int32_T c10_r_lda;
  int32_T c10_r_loop_ub;
  int32_T c10_r_m;
  int32_T c10_r_var;
  int32_T c10_s_b;
  int32_T c10_s_loop_ub;
  int32_T c10_s_var;
  int32_T c10_t_var;
  int32_T c10_u_var;
  int32_T c10_v_n;
  int32_T c10_v_var;
  int32_T c10_var;
  int32_T c10_varargin_1;
  int32_T c10_varargin_2;
  int32_T c10_w_var;
  int32_T c10_x_n;
  int32_T c10_x_var;
  int32_T c10_y;
  int32_T c10_y_n;
  int32_T c10_y_var;
  char_T c10_DIAGA1;
  char_T c10_SIDE1;
  char_T c10_TRANSA;
  char_T c10_TRANSA1;
  char_T c10_TRANSB1;
  char_T c10_UPLO1;
  char_T c10_b_DIAGA1;
  char_T c10_b_SIDE1;
  char_T c10_b_TRANSA1;
  char_T c10_b_TRANSB1;
  char_T c10_b_UPLO1;
  char_T c10_c_TRANSA1;
  char_T c10_d_TRANSA1;
  boolean_T c10_b1;
  boolean_T c10_b2;
  boolean_T c10_b3;
  boolean_T c10_b_overflow;
  boolean_T c10_b_tf;
  boolean_T c10_c_overflow;
  boolean_T c10_d_overflow;
  boolean_T c10_e_overflow;
  boolean_T c10_nonDegenerateWset;
  boolean_T c10_overflow;
  boolean_T c10_t_b;
  boolean_T c10_tf;
  boolean_T c10_u_b;
  boolean_T c10_v_b;
  boolean_T c10_w_b;
  boolean_T c10_x_b;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_mWConstr = c10_i_workingset->nActiveConstr;
  c10_nVar = c10_i_workingset->nVar;
  c10_nonDegenerateWset = true;
  if (c10_mWConstr == 0) {
  } else {
    c10_st.site = &c10_jg_emlrtRSI;
    c10_b = c10_mWConstr;
    c10_e_b = c10_b;
    if (c10_e_b < 1) {
      c10_overflow = false;
    } else {
      c10_overflow = (c10_e_b > 2147483646);
    }

    if (c10_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_idx = 0; c10_idx < c10_mWConstr; c10_idx++) {
      c10_b_idx = c10_idx + 1;
      if ((c10_b_idx < 1) || (c10_b_idx > c10_i_workingset->bwset.size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_b_idx, 1, c10_i_workingset->
          bwset.size[0], &c10_ip_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_i = c10_workspace.size(0);
      if ((c10_b_idx < 1) || (c10_b_idx > c10_i)) {
        emlrtDynamicBoundsCheckR2012b(c10_b_idx, 1, c10_i, &c10_ip_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_workspace[c10_b_idx - 1] = c10_i_workingset->bwset.data[c10_b_idx - 1];
      c10_i2 = c10_workspace.size(1);
      c10_i3 = 2;
      if ((c10_i3 < 1) || (c10_i3 > c10_i2)) {
        emlrtDynamicBoundsCheckR2012b(c10_i3, 1, c10_i2, &c10_ip_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      if ((c10_b_idx < 1) || (c10_b_idx > c10_i_workingset->bwset.size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_b_idx, 1, c10_i_workingset->
          bwset.size[0], &c10_ip_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_i5 = c10_workspace.size(0);
      if ((c10_b_idx < 1) || (c10_b_idx > c10_i5)) {
        emlrtDynamicBoundsCheckR2012b(c10_b_idx, 1, c10_i5, &c10_ip_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_workspace[(c10_b_idx + c10_workspace.size(0)) - 1] =
        c10_i_workingset->bwset.data[c10_b_idx - 1];
    }

    c10_st.site = &c10_jg_emlrtRSI;
    c10_m = c10_nVar;
    c10_f_n = c10_mWConstr;
    c10_A.set_size(&c10_uf_emlrtRTEI, &c10_st, c10_i_workingset->ATwset.size(0));
    c10_loop_ub = c10_i_workingset->ATwset.size(0) - 1;
    for (c10_i1 = 0; c10_i1 <= c10_loop_ub; c10_i1++) {
      c10_A[c10_i1] = c10_i_workingset->ATwset[c10_i1];
    }

    c10_lda = c10_i_workingset->ldA;
    c10_x.set_size(&c10_uf_emlrtRTEI, &c10_st, c10_xCurrent.size(0));
    c10_b_loop_ub = c10_xCurrent.size(0) - 1;
    for (c10_i4 = 0; c10_i4 <= c10_b_loop_ub; c10_i4++) {
      c10_x[c10_i4] = c10_xCurrent[c10_i4];
    }

    if ((c10_m < 1) || (c10_f_n < 1)) {
    } else {
      c10_b_st.site = &c10_bf_emlrtRSI;
      c10_c_m = c10_m;
      c10_h_n = c10_f_n;
      c10_c_lda = c10_lda;
      c10_c_st.site = &c10_ff_emlrtRSI;
      c10_d_m = c10_c_m;
      c10_i_n = c10_h_n;
      c10_alpha1 = -1.0;
      c10_d_lda = c10_c_lda;
      c10_beta1 = 1.0;
      c10_TRANSA = 'T';
      c10_var = c10_d_m;
      c10_m_t = (ptrdiff_t)c10_var;
      c10_b_var = c10_i_n;
      c10_n_t = (ptrdiff_t)c10_b_var;
      c10_c_var = c10_d_lda;
      c10_lda_t = (ptrdiff_t)c10_c_var;
      c10_incx_t = (ptrdiff_t)1;
      c10_incy_t = (ptrdiff_t)1;
      dgemv(&c10_TRANSA, &c10_m_t, &c10_n_t, &c10_alpha1, &(c10_A.data())[0],
            &c10_lda_t, &(c10_x.data())[0], &c10_incx_t, &c10_beta1,
            &(c10_workspace.data())[0], &c10_incy_t);
    }

    if (c10_mWConstr >= c10_nVar) {
      c10_st.site = &c10_jg_emlrtRSI;
      c10_f_b = c10_nVar;
      c10_g_b = c10_f_b;
      if (c10_g_b < 1) {
        c10_b_overflow = false;
      } else {
        c10_b_overflow = (c10_g_b > 2147483646);
      }

      if (c10_b_overflow) {
        c10_b_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
      }

      for (c10_idx_col = 0; c10_idx_col < c10_nVar; c10_idx_col++) {
        c10_b_idx_col = c10_idx_col;
        c10_offsetQR = c10_b_qrmanager->ldq * c10_b_idx_col;
        c10_st.site = &c10_jg_emlrtRSI;
        c10_h_b = c10_mWConstr;
        c10_j_b = c10_h_b;
        if (c10_j_b < 1) {
          c10_c_overflow = false;
        } else {
          c10_c_overflow = (c10_j_b > 2147483646);
        }

        if (c10_c_overflow) {
          c10_b_st.site = &c10_v_emlrtRSI;
          c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
        }

        for (c10_idx_row = 0; c10_idx_row < c10_mWConstr; c10_idx_row++) {
          c10_b_idx_row = c10_idx_row;
          c10_idxQR = (c10_b_idx_row + c10_offsetQR) + 1;
          c10_idxATw = (c10_b_idx_col + c10_i_workingset->ldA * c10_b_idx_row) +
            1;
          c10_i11 = c10_i_workingset->ATwset.size(0);
          if ((c10_idxATw < 1) || (c10_idxATw > c10_i11)) {
            emlrtDynamicBoundsCheckR2012b(c10_idxATw, 1, c10_i11,
              &c10_ip_emlrtBCI, (emlrtConstCTX)c10_sp);
          }

          c10_i13 = c10_b_qrmanager->QR.size(0) * c10_b_qrmanager->QR.size(1);
          if ((c10_idxQR < 1) || (c10_idxQR > c10_i13)) {
            emlrtDynamicBoundsCheckR2012b(c10_idxQR, 1, c10_i13,
              &c10_ip_emlrtBCI, (emlrtConstCTX)c10_sp);
          }

          c10_b_qrmanager->QR[c10_idxQR - 1] = c10_i_workingset->
            ATwset[c10_idxATw - 1];
        }
      }

      c10_st.site = &c10_jg_emlrtRSI;
      c10_mrows = c10_mWConstr;
      c10_ncols = c10_nVar;
      if (c10_mrows * c10_ncols == 0) {
        c10_b_qrmanager->mrows = c10_mrows;
        c10_b_qrmanager->ncols = c10_ncols;
        c10_b_qrmanager->minRowCol = 0;
      } else {
        c10_b_qrmanager->usedPivoting = false;
        c10_b_qrmanager->mrows = c10_mrows;
        c10_b_qrmanager->ncols = c10_ncols;
        c10_i9 = c10_b_qrmanager->ncols;
        c10_b_st.site = &c10_kg_emlrtRSI;
        c10_k_b = c10_i9;
        c10_o_b = c10_k_b;
        if (c10_o_b < 1) {
          c10_d_overflow = false;
        } else {
          c10_d_overflow = (c10_o_b > 2147483646);
        }

        if (c10_d_overflow) {
          c10_c_st.site = &c10_v_emlrtRSI;
          c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
        }

        for (c10_c_idx = 0; c10_c_idx < c10_i9; c10_c_idx++) {
          c10_d_idx = c10_c_idx + 1;
          c10_i14 = c10_b_qrmanager->jpvt.size(0);
          if ((c10_d_idx < 1) || (c10_d_idx > c10_i14)) {
            emlrtDynamicBoundsCheckR2012b(c10_d_idx, 1, c10_i14,
              &c10_jp_emlrtBCI, &c10_st);
          }

          c10_b_qrmanager->jpvt[c10_d_idx - 1] = c10_d_idx;
        }

        c10_varargin_1 = c10_mrows;
        c10_varargin_2 = c10_ncols;
        c10_b_x = c10_varargin_1;
        c10_y = c10_varargin_2;
        c10_c_x = c10_b_x;
        c10_b_y = c10_y;
        c10_d_x = c10_c_x;
        c10_c_y = c10_b_y;
        c10_b_a = c10_d_x;
        c10_p_b = c10_c_y;
        c10_e_x = c10_b_a;
        c10_d_y = c10_p_b;
        c10_f_x = c10_e_x;
        c10_e_y = c10_d_y;
        c10_minval = muIntScalarMin_sint32(c10_f_x, c10_e_y);
        c10_b_qrmanager->minRowCol = c10_minval;
        c10_cb_A.set_size(&c10_wf_emlrtRTEI, &c10_st, c10_b_qrmanager->QR.size(0),
                          c10_b_qrmanager->QR.size(1));
        c10_j_loop_ub = c10_b_qrmanager->QR.size(0) * c10_b_qrmanager->QR.size(1)
          - 1;
        for (c10_i19 = 0; c10_i19 <= c10_j_loop_ub; c10_i19++) {
          c10_cb_A[c10_i19] = c10_b_qrmanager->QR[c10_i19];
        }

        c10_b_st.site = &c10_kg_emlrtRSI;
        c10_b_xgeqrf(chartInstance, &c10_b_st, c10_cb_A, c10_mrows, c10_ncols,
                     c10_x);
        c10_b_qrmanager->QR.set_size(&c10_wf_emlrtRTEI, &c10_st, c10_cb_A.size(0),
          c10_cb_A.size(1));
        c10_k_loop_ub = c10_cb_A.size(0) * c10_cb_A.size(1) - 1;
        for (c10_i21 = 0; c10_i21 <= c10_k_loop_ub; c10_i21++) {
          c10_b_qrmanager->QR[c10_i21] = c10_cb_A[c10_i21];
        }

        c10_b_qrmanager->tau.set_size(&c10_uf_emlrtRTEI, &c10_st, c10_x.size(0));
        c10_o_loop_ub = c10_x.size(0) - 1;
        for (c10_i23 = 0; c10_i23 <= c10_o_loop_ub; c10_i23++) {
          c10_b_qrmanager->tau[c10_i23] = c10_x[c10_i23];
        }
      }

      c10_st.site = &c10_jg_emlrtRSI;
      c10_i10 = c10_b_qrmanager->mrows;
      c10_b_st.site = &c10_sf_emlrtRSI;
      c10_b_computeQ_(chartInstance, &c10_b_st, c10_b_qrmanager, c10_i10);
      c10_ldq = c10_b_qrmanager->ldq;
      c10_ldw = c10_workspace.size(0);
      c10_st.site = &c10_jg_emlrtRSI;
      c10_i_m = c10_nVar;
      c10_b_k = c10_mWConstr;
      c10_cb_A.set_size(&c10_uf_emlrtRTEI, &c10_st, c10_b_qrmanager->Q.size(0),
                        c10_b_qrmanager->Q.size(1));
      c10_f_loop_ub = c10_b_qrmanager->Q.size(0) * c10_b_qrmanager->Q.size(1) -
        1;
      for (c10_i15 = 0; c10_i15 <= c10_f_loop_ub; c10_i15++) {
        c10_cb_A[c10_i15] = c10_b_qrmanager->Q[c10_i15];
      }

      c10_i_lda = c10_ldq;
      c10_c_B.set_size(&c10_uf_emlrtRTEI, &c10_st, c10_workspace.size(0),
                       c10_workspace.size(1));
      c10_h_loop_ub = c10_workspace.size(0) * c10_workspace.size(1) - 1;
      for (c10_i17 = 0; c10_i17 <= c10_h_loop_ub; c10_i17++) {
        c10_c_B[c10_i17] = c10_workspace[c10_i17];
      }

      c10_e_ldb = c10_ldw;
      c10_c_ldc = c10_ldw;
      if ((c10_i_m < 1) || (c10_b_k < 1)) {
      } else {
        c10_b_st.site = &c10_tg_emlrtRSI;
        c10_k_m = c10_i_m;
        c10_f_k = c10_b_k;
        c10_k_lda = c10_i_lda;
        c10_g_ldb = c10_e_ldb;
        c10_e_ldc = c10_c_ldc;
        c10_p_m = c10_k_m;
        c10_h_k = c10_f_k;
        c10_d_alpha1 = 1.0;
        c10_p_lda = c10_k_lda;
        c10_j_ldb = c10_g_ldb;
        c10_c_beta1 = 0.0;
        c10_g_ldc = c10_e_ldc;
        c10_b_TRANSB1 = 'N';
        c10_c_TRANSA1 = 'T';
        c10_i_var = c10_p_m;
        c10_d_m_t = (ptrdiff_t)c10_i_var;
        c10_d_n_t = (ptrdiff_t)2;
        c10_m_var = c10_h_k;
        c10_b_k_t = (ptrdiff_t)c10_m_var;
        c10_p_var = c10_p_lda;
        c10_d_lda_t = (ptrdiff_t)c10_p_var;
        c10_r_var = c10_j_ldb;
        c10_c_ldb_t = (ptrdiff_t)c10_r_var;
        c10_u_var = c10_g_ldc;
        c10_b_ldc_t = (ptrdiff_t)c10_u_var;
        dgemm(&c10_c_TRANSA1, &c10_b_TRANSB1, &c10_d_m_t, &c10_d_n_t, &c10_b_k_t,
              &c10_d_alpha1, &(c10_cb_A.data())[0], &c10_d_lda_t, &(c10_c_B.data
               ())[0], &c10_c_ldb_t, &c10_c_beta1, &(c10_workspace.data())[0],
              &c10_b_ldc_t);
      }

      c10_st.site = &c10_jg_emlrtRSI;
      c10_m_m = c10_nVar;
      c10_cb_A.set_size(&c10_uf_emlrtRTEI, &c10_st, c10_b_qrmanager->QR.size(0),
                        c10_b_qrmanager->QR.size(1));
      c10_i_loop_ub = c10_b_qrmanager->QR.size(0) * c10_b_qrmanager->QR.size(1)
        - 1;
      for (c10_i18 = 0; c10_i18 <= c10_i_loop_ub; c10_i18++) {
        c10_cb_A[c10_i18] = c10_b_qrmanager->QR[c10_i18];
      }

      c10_o_lda = c10_ldq;
      c10_i_ldb = c10_ldw;
      if (!(c10_m_m < 1)) {
        c10_b_st.site = &c10_xg_emlrtRSI;
        c10_q_m = c10_m_m;
        c10_q_lda = c10_o_lda;
        c10_k_ldb = c10_i_ldb;
        c10_r_m = c10_q_m;
        c10_e_alpha1 = 1.0;
        c10_r_lda = c10_q_lda;
        c10_m_ldb = c10_k_ldb;
        c10_b_DIAGA1 = 'N';
        c10_d_TRANSA1 = 'N';
        c10_b_UPLO1 = 'U';
        c10_b_SIDE1 = 'L';
        c10_s_var = c10_r_m;
        c10_e_m_t = (ptrdiff_t)c10_s_var;
        c10_f_n_t = (ptrdiff_t)2;
        c10_v_var = c10_r_lda;
        c10_e_lda_t = (ptrdiff_t)c10_v_var;
        c10_w_var = c10_m_ldb;
        c10_d_ldb_t = (ptrdiff_t)c10_w_var;
        dtrsm(&c10_b_SIDE1, &c10_b_UPLO1, &c10_d_TRANSA1, &c10_b_DIAGA1,
              &c10_e_m_t, &c10_f_n_t, &c10_e_alpha1, &(c10_cb_A.data())[0],
              &c10_e_lda_t, &(c10_workspace.data())[0], &c10_d_ldb_t);
      }
    } else {
      c10_j_workingset.set_size(&c10_uf_emlrtRTEI, c10_sp,
        c10_i_workingset->ATwset.size(0));
      c10_c_loop_ub = c10_i_workingset->ATwset.size(0) - 1;
      for (c10_i6 = 0; c10_i6 <= c10_c_loop_ub; c10_i6++) {
        c10_j_workingset[c10_i6] = c10_i_workingset->ATwset[c10_i6];
      }

      c10_st.site = &c10_jg_emlrtRSI;
      c10_b_factorQR(chartInstance, &c10_st, c10_b_qrmanager, c10_j_workingset,
                     c10_nVar, c10_mWConstr, c10_i_workingset->ldA);
      c10_st.site = &c10_jg_emlrtRSI;
      c10_i7 = c10_b_qrmanager->minRowCol;
      c10_b_st.site = &c10_ah_emlrtRSI;
      c10_b_computeQ_(chartInstance, &c10_b_st, c10_b_qrmanager, c10_i7);
      c10_ldq = c10_b_qrmanager->ldq;
      c10_ldw = c10_workspace.size(0);
      c10_st.site = &c10_jg_emlrtRSI;
      c10_e_m = c10_mWConstr;
      c10_cb_A.set_size(&c10_uf_emlrtRTEI, &c10_st, c10_b_qrmanager->QR.size(0),
                        c10_b_qrmanager->QR.size(1));
      c10_d_loop_ub = c10_b_qrmanager->QR.size(0) * c10_b_qrmanager->QR.size(1)
        - 1;
      for (c10_i8 = 0; c10_i8 <= c10_d_loop_ub; c10_i8++) {
        c10_cb_A[c10_i8] = c10_b_qrmanager->QR[c10_i8];
      }

      c10_e_lda = c10_ldq;
      c10_ldb = c10_ldw;
      if (!(c10_e_m < 1)) {
        c10_b_st.site = &c10_xg_emlrtRSI;
        c10_f_m = c10_e_m;
        c10_f_lda = c10_e_lda;
        c10_b_ldb = c10_ldb;
        c10_h_m = c10_f_m;
        c10_b_alpha1 = 1.0;
        c10_g_lda = c10_f_lda;
        c10_c_ldb = c10_b_ldb;
        c10_DIAGA1 = 'N';
        c10_TRANSA1 = 'T';
        c10_UPLO1 = 'U';
        c10_SIDE1 = 'L';
        c10_d_var = c10_h_m;
        c10_b_m_t = (ptrdiff_t)c10_d_var;
        c10_b_n_t = (ptrdiff_t)2;
        c10_e_var = c10_g_lda;
        c10_b_lda_t = (ptrdiff_t)c10_e_var;
        c10_f_var = c10_c_ldb;
        c10_ldb_t = (ptrdiff_t)c10_f_var;
        dtrsm(&c10_SIDE1, &c10_UPLO1, &c10_TRANSA1, &c10_DIAGA1, &c10_b_m_t,
              &c10_b_n_t, &c10_b_alpha1, &(c10_cb_A.data())[0], &c10_b_lda_t,
              &(c10_workspace.data())[0], &c10_ldb_t);
      }

      c10_st.site = &c10_jg_emlrtRSI;
      c10_g_m = c10_nVar;
      c10_k = c10_mWConstr;
      c10_cb_A.set_size(&c10_uf_emlrtRTEI, &c10_st, c10_b_qrmanager->Q.size(0),
                        c10_b_qrmanager->Q.size(1));
      c10_e_loop_ub = c10_b_qrmanager->Q.size(0) * c10_b_qrmanager->Q.size(1) -
        1;
      for (c10_i12 = 0; c10_i12 <= c10_e_loop_ub; c10_i12++) {
        c10_cb_A[c10_i12] = c10_b_qrmanager->Q[c10_i12];
      }

      c10_h_lda = c10_ldq;
      c10_c_B.set_size(&c10_uf_emlrtRTEI, &c10_st, c10_workspace.size(0),
                       c10_workspace.size(1));
      c10_g_loop_ub = c10_workspace.size(0) * c10_workspace.size(1) - 1;
      for (c10_i16 = 0; c10_i16 <= c10_g_loop_ub; c10_i16++) {
        c10_c_B[c10_i16] = c10_workspace[c10_i16];
      }

      c10_d_ldb = c10_ldw;
      c10_b_ldc = c10_ldw;
      if ((c10_g_m < 1) || (c10_k < 1)) {
      } else {
        c10_b_st.site = &c10_tg_emlrtRSI;
        c10_j_m = c10_g_m;
        c10_d_k = c10_k;
        c10_j_lda = c10_h_lda;
        c10_f_ldb = c10_d_ldb;
        c10_d_ldc = c10_b_ldc;
        c10_o_m = c10_j_m;
        c10_g_k = c10_d_k;
        c10_c_alpha1 = 1.0;
        c10_m_lda = c10_j_lda;
        c10_h_ldb = c10_f_ldb;
        c10_b_beta1 = 0.0;
        c10_f_ldc = c10_d_ldc;
        c10_TRANSB1 = 'N';
        c10_b_TRANSA1 = 'N';
        c10_g_var = c10_o_m;
        c10_c_m_t = (ptrdiff_t)c10_g_var;
        c10_c_n_t = (ptrdiff_t)2;
        c10_j_var = c10_g_k;
        c10_k_t = (ptrdiff_t)c10_j_var;
        c10_k_var = c10_m_lda;
        c10_c_lda_t = (ptrdiff_t)c10_k_var;
        c10_o_var = c10_h_ldb;
        c10_b_ldb_t = (ptrdiff_t)c10_o_var;
        c10_q_var = c10_f_ldc;
        c10_ldc_t = (ptrdiff_t)c10_q_var;
        dgemm(&c10_b_TRANSA1, &c10_TRANSB1, &c10_c_m_t, &c10_c_n_t, &c10_k_t,
              &c10_c_alpha1, &(c10_cb_A.data())[0], &c10_c_lda_t, &(c10_c_B.data
               ())[0], &c10_b_ldb_t, &c10_b_beta1, &(c10_workspace.data())[0],
              &c10_ldc_t);
      }
    }

    c10_st.site = &c10_jg_emlrtRSI;
    c10_q_b = c10_nVar;
    c10_s_b = c10_q_b;
    if (c10_s_b < 1) {
      c10_e_overflow = false;
    } else {
      c10_e_overflow = (c10_s_b > 2147483646);
    }

    if (c10_e_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    c10_e_idx = 1;
    do {
      c10_exitg1 = 0;
      if (c10_e_idx - 1 <= c10_nVar - 1) {
        c10_b_idx = c10_e_idx;
        c10_i20 = c10_workspace.size(0);
        if ((c10_b_idx < 1) || (c10_b_idx > c10_i20)) {
          emlrtDynamicBoundsCheckR2012b(c10_b_idx, 1, c10_i20, &c10_ip_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_e_v = c10_workspace[c10_b_idx - 1];
        c10_g_x = c10_e_v;
        c10_j_x = c10_g_x;
        c10_t_b = muDoubleScalarIsInf(c10_j_x);
        c10_u_b = !c10_t_b;
        c10_k_x = c10_g_x;
        c10_v_b = muDoubleScalarIsNaN(c10_k_x);
        c10_b1 = !c10_v_b;
        c10_tf = (c10_u_b && c10_b1);
        if (!c10_tf) {
          c10_nonDegenerateWset = false;
          c10_exitg1 = 1;
        } else {
          c10_i25 = c10_workspace.size(1);
          c10_i26 = 2;
          if ((c10_i26 < 1) || (c10_i26 > c10_i25)) {
            emlrtDynamicBoundsCheckR2012b(c10_i26, 1, c10_i25, &c10_ip_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_i28 = c10_workspace.size(0);
          if ((c10_b_idx < 1) || (c10_b_idx > c10_i28)) {
            emlrtDynamicBoundsCheckR2012b(c10_b_idx, 1, c10_i28,
              &c10_ip_emlrtBCI, (emlrtConstCTX)c10_sp);
          }

          c10_f_v = c10_workspace[(c10_b_idx + c10_workspace.size(0)) - 1];
          c10_m_x = c10_f_v;
          c10_o_x = c10_m_x;
          c10_w_b = muDoubleScalarIsInf(c10_o_x);
          c10_b2 = !c10_w_b;
          c10_p_x = c10_m_x;
          c10_x_b = muDoubleScalarIsNaN(c10_p_x);
          c10_b3 = !c10_x_b;
          c10_b_tf = (c10_b2 && c10_b3);
          if (!c10_b_tf) {
            c10_nonDegenerateWset = false;
            c10_exitg1 = 1;
          } else {
            c10_e_idx++;
          }
        }
      } else {
        c10_st.site = &c10_jg_emlrtRSI;
        c10_j_n = c10_nVar;
        c10_x.set_size(&c10_uf_emlrtRTEI, &c10_st, c10_xCurrent.size(0));
        c10_m_loop_ub = c10_xCurrent.size(0) - 1;
        for (c10_i22 = 0; c10_i22 <= c10_m_loop_ub; c10_i22++) {
          c10_x[c10_i22] = c10_xCurrent[c10_i22];
        }

        if (!(c10_j_n < 1)) {
          c10_b_st.site = &c10_ch_emlrtRSI;
          c10_k_n = c10_j_n;
          c10_m_n = c10_k_n;
          c10_c_a = 1.0;
          c10_t_var = c10_m_n;
          c10_e_n_t = (ptrdiff_t)c10_t_var;
          c10_b_incx_t = (ptrdiff_t)1;
          c10_b_incy_t = (ptrdiff_t)1;
          daxpy(&c10_e_n_t, &c10_c_a, &(c10_x.data())[0], &c10_b_incx_t,
                &(c10_workspace.data())[0], &c10_b_incy_t);
        }

        c10_ix0_2 = 1 + c10_workspace.size(0);
        c10_b_workspace.set_size(&c10_uf_emlrtRTEI, c10_sp, c10_workspace.size(0),
          c10_workspace.size(1));
        c10_p_loop_ub = c10_workspace.size(0) * c10_workspace.size(1) - 1;
        for (c10_i24 = 0; c10_i24 <= c10_p_loop_ub; c10_i24++) {
          c10_b_workspace[c10_i24] = c10_workspace[c10_i24];
        }

        c10_st.site = &c10_jg_emlrtRSI;
        c10_constrViolation_minnormX = c10_d_maxConstraintViolation
          (chartInstance, &c10_st, c10_i_workingset, c10_b_workspace);
        c10_c_workspace.set_size(&c10_uf_emlrtRTEI, c10_sp, c10_workspace.size(0),
          c10_workspace.size(1));
        c10_q_loop_ub = c10_workspace.size(0) * c10_workspace.size(1) - 1;
        for (c10_i27 = 0; c10_i27 <= c10_q_loop_ub; c10_i27++) {
          c10_c_workspace[c10_i27] = c10_workspace[c10_i27];
        }

        c10_st.site = &c10_jg_emlrtRSI;
        c10_constrViolation_basicX = c10_e_maxConstraintViolation(chartInstance,
          &c10_st, c10_i_workingset, c10_c_workspace, c10_ix0_2);
        if ((c10_constrViolation_minnormX <= 2.2204460492503131E-16) ||
            (c10_constrViolation_minnormX < c10_constrViolation_basicX)) {
          c10_st.site = &c10_jg_emlrtRSI;
          c10_p_n = c10_nVar;
          c10_cb_A.set_size(&c10_uf_emlrtRTEI, &c10_st, c10_workspace.size(0),
                            c10_workspace.size(1));
          c10_s_loop_ub = c10_workspace.size(0) * c10_workspace.size(1) - 1;
          for (c10_i30 = 0; c10_i30 <= c10_s_loop_ub; c10_i30++) {
            c10_cb_A[c10_i30] = c10_workspace[c10_i30];
          }

          if (!(c10_p_n < 1)) {
            c10_b_st.site = &c10_ad_emlrtRSI;
            c10_q_n = c10_p_n;
            c10_x_n = c10_q_n;
            c10_x_var = c10_x_n;
            c10_g_n_t = (ptrdiff_t)c10_x_var;
            c10_c_incx_t = (ptrdiff_t)1;
            c10_c_incy_t = (ptrdiff_t)1;
            dcopy(&c10_g_n_t, &(c10_cb_A.data())[0], &c10_c_incx_t,
                  &(c10_xCurrent.data())[0], &c10_c_incy_t);
          }
        } else {
          c10_st.site = &c10_jg_emlrtRSI;
          c10_o_n = c10_nVar;
          c10_cb_A.set_size(&c10_uf_emlrtRTEI, &c10_st, c10_workspace.size(0),
                            c10_workspace.size(1));
          c10_r_loop_ub = c10_workspace.size(0) * c10_workspace.size(1) - 1;
          for (c10_i29 = 0; c10_i29 <= c10_r_loop_ub; c10_i29++) {
            c10_cb_A[c10_i29] = c10_workspace[c10_i29];
          }

          c10_ix0 = c10_ix0_2;
          if (!(c10_o_n < 1)) {
            c10_b_st.site = &c10_ad_emlrtRSI;
            c10_v_n = c10_o_n;
            c10_b_ix0 = c10_ix0;
            c10_y_n = c10_v_n;
            c10_c_ix0 = c10_b_ix0 - 1;
            c10_y_var = c10_y_n;
            c10_h_n_t = (ptrdiff_t)c10_y_var;
            c10_d_incx_t = (ptrdiff_t)1;
            c10_d_incy_t = (ptrdiff_t)1;
            dcopy(&c10_h_n_t, &c10_cb_A[c10_c_ix0], &c10_d_incx_t,
                  &(c10_xCurrent.data())[0], &c10_d_incy_t);
          }
        }

        c10_exitg1 = 1;
      }
    } while (c10_exitg1 == 0);
  }

  return c10_nonDegenerateWset;
}

static void c10_b_xgeqrf(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_A, int32_T c10_m, int32_T
  c10_f_n, coder::array<real_T, 1U> &c10_tau)
{
  static char_T c10_b_cv[14] = { 'L', 'A', 'P', 'A', 'C', 'K', 'E', '_', 'd',
    'g', 'e', 'q', 'r', 'f' };

  ptrdiff_t c10_info_t;
  ptrdiff_t c10_lda;
  ptrdiff_t c10_m_t;
  ptrdiff_t c10_n_t;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  const mxArray *c10_b_y = NULL;
  const mxArray *c10_c_y = NULL;
  const mxArray *c10_d_y = NULL;
  const mxArray *c10_e_y = NULL;
  const mxArray *c10_f_y = NULL;
  const mxArray *c10_y = NULL;
  int32_T c10_b_tau[1];
  int32_T c10_b;
  int32_T c10_b_a;
  int32_T c10_b_info;
  int32_T c10_b_j;
  int32_T c10_c_a;
  int32_T c10_c_i;
  int32_T c10_c_info;
  int32_T c10_c_m;
  int32_T c10_d_ma;
  int32_T c10_d_na;
  int32_T c10_e_b;
  int32_T c10_e_i;
  int32_T c10_f_b;
  int32_T c10_f_i;
  int32_T c10_g_b;
  int32_T c10_h_b;
  int32_T c10_h_i;
  int32_T c10_h_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_info;
  int32_T c10_j;
  int32_T c10_j_b;
  int32_T c10_k_b;
  int32_T c10_loop_ub;
  int32_T c10_minmana;
  int32_T c10_minmn;
  int32_T c10_o_b;
  int32_T c10_val;
  boolean_T c10_b_overflow;
  boolean_T c10_b_p;
  boolean_T c10_c_overflow;
  boolean_T c10_c_p;
  boolean_T c10_d_overflow;
  boolean_T c10_overflow;
  boolean_T c10_p;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_st.site = &c10_mg_emlrtRSI;
  c10_c_m = c10_m;
  c10_h_n = c10_f_n;
  c10_d_ma = c10_A.size(0);
  c10_d_na = c10_A.size(1);
  c10_minmana = muIntScalarMin_sint32(c10_d_ma, c10_d_na);
  c10_tau.set_size(&c10_gh_emlrtRTEI, &c10_st, c10_minmana);
  if ((c10_c_m == 0) || (c10_h_n == 0)) {
    c10_b_tau[0] = c10_tau.size(0);
    c10_tau.set_size(&c10_hh_emlrtRTEI, &c10_st, c10_b_tau[0]);
    c10_loop_ub = c10_b_tau[0] - 1;
    for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
      c10_tau[c10_i] = 0.0;
    }
  } else {
    c10_m_t = (ptrdiff_t)c10_c_m;
    c10_n_t = (ptrdiff_t)c10_h_n;
    c10_lda = (ptrdiff_t)c10_d_ma;
    c10_info_t = LAPACKE_dgeqrf(102, c10_m_t, c10_n_t, &(c10_A.data())[0],
      c10_lda, &(c10_tau.data())[0]);
    c10_info = (int32_T)c10_info_t;
    c10_b_st.site = &c10_og_emlrtRSI;
    c10_b_info = c10_info;
    c10_c_info = c10_b_info;
    c10_p = (c10_c_info != 0);
    if (c10_p) {
      c10_b_p = true;
      c10_val = c10_b_info;
      c10_c_p = false;
      if (c10_val == -4) {
        c10_c_p = true;
      }

      if (!c10_c_p) {
        if (c10_b_info == -1010) {
          c10_b_y = NULL;
          sf_mex_assign(&c10_b_y, sf_mex_create("y", c10_cv5, 10, 0U, 1U, 0U, 2,
            1, 12), false);
          c10_d_y = NULL;
          sf_mex_assign(&c10_d_y, sf_mex_create("y", c10_cv5, 10, 0U, 1U, 0U, 2,
            1, 12), false);
          sf_mex_call(&c10_b_st, &c10_x_emlrtMCI, "error", 0U, 2U, 14, c10_b_y,
                      14, sf_mex_call(&c10_b_st, NULL, "getString", 1U, 1U, 14,
            sf_mex_call(&c10_b_st, NULL, "message", 1U, 1U, 14, c10_d_y)));
        } else {
          c10_y = NULL;
          sf_mex_assign(&c10_y, sf_mex_create("y", c10_cv6, 10, 0U, 1U, 0U, 2, 1,
            33), false);
          c10_c_y = NULL;
          sf_mex_assign(&c10_c_y, sf_mex_create("y", c10_cv6, 10, 0U, 1U, 0U, 2,
            1, 33), false);
          c10_e_y = NULL;
          sf_mex_assign(&c10_e_y, sf_mex_create("y", c10_b_cv, 10, 0U, 1U, 0U, 2,
            1, 14), false);
          c10_f_y = NULL;
          sf_mex_assign(&c10_f_y, sf_mex_create("y", &c10_b_info, 6, 0U, 0U, 0U,
            0), false);
          sf_mex_call(&c10_b_st, &c10_y_emlrtMCI, "error", 0U, 2U, 14, c10_y, 14,
                      sf_mex_call(&c10_b_st, NULL, "getString", 1U, 1U, 14,
            sf_mex_call(&c10_b_st, NULL, "message", 1U, 3U, 14, c10_c_y, 14,
                        c10_e_y, 14, c10_f_y)));
        }
      }
    } else {
      c10_b_p = false;
    }

    if (c10_b_p) {
      c10_b_st.site = &c10_pg_emlrtRSI;
      c10_b = c10_h_n;
      c10_e_b = c10_b;
      if (c10_e_b < 1) {
        c10_overflow = false;
      } else {
        c10_overflow = (c10_e_b > 2147483646);
      }

      if (c10_overflow) {
        c10_c_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
      }

      for (c10_j = 0; c10_j < c10_h_n; c10_j++) {
        c10_b_j = c10_j;
        c10_b_st.site = &c10_qg_emlrtRSI;
        c10_g_b = c10_c_m;
        c10_j_b = c10_g_b;
        if (c10_j_b < 1) {
          c10_c_overflow = false;
        } else {
          c10_c_overflow = (c10_j_b > 2147483646);
        }

        if (c10_c_overflow) {
          c10_c_st.site = &c10_v_emlrtRSI;
          c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
        }

        for (c10_e_i = 0; c10_e_i < c10_c_m; c10_e_i++) {
          c10_f_i = c10_e_i;
          c10_A[c10_b_j * c10_d_ma + c10_f_i] = rtNaN;
        }
      }

      c10_minmn = muIntScalarMin_sint32(c10_c_m, c10_h_n);
      c10_b_st.site = &c10_rg_emlrtRSI;
      c10_f_b = c10_minmn;
      c10_h_b = c10_f_b;
      if (c10_h_b < 1) {
        c10_b_overflow = false;
      } else {
        c10_b_overflow = (c10_h_b > 2147483646);
      }

      if (c10_b_overflow) {
        c10_c_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
      }

      for (c10_c_i = 0; c10_c_i < c10_minmn; c10_c_i++) {
        c10_f_i = c10_c_i;
        c10_tau[c10_f_i] = rtNaN;
      }

      c10_i1 = c10_minmn + 1;
      c10_b_st.site = &c10_sg_emlrtRSI;
      c10_b_a = c10_i1;
      c10_k_b = c10_minmana;
      c10_c_a = c10_b_a;
      c10_o_b = c10_k_b;
      if (c10_c_a > c10_o_b) {
        c10_d_overflow = false;
      } else {
        c10_d_overflow = (c10_o_b > 2147483646);
      }

      if (c10_d_overflow) {
        c10_c_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
      }

      for (c10_h_i = c10_i1; c10_h_i <= c10_minmana; c10_h_i++) {
        c10_tau[c10_h_i - 1] = 0.0;
      }
    }
  }
}

static void c10_b_factorQR(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_obj, coder::array<
  real_T, 1U> &c10_A, int32_T c10_mrows, int32_T c10_ncols, int32_T c10_b_ldA)
{
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 2U> c10_y;
  coder::array<real_T, 1U> c10_b_r;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  int32_T c10_b;
  int32_T c10_b_a;
  int32_T c10_b_iA0;
  int32_T c10_b_idx;
  int32_T c10_b_ix0;
  int32_T c10_b_iy0;
  int32_T c10_b_loop_ub;
  int32_T c10_b_x;
  int32_T c10_b_y;
  int32_T c10_c_idx;
  int32_T c10_c_ix0;
  int32_T c10_c_iy0;
  int32_T c10_c_loop_ub;
  int32_T c10_c_x;
  int32_T c10_c_y;
  int32_T c10_d_loop_ub;
  int32_T c10_d_x;
  int32_T c10_d_y;
  int32_T c10_e_b;
  int32_T c10_e_loop_ub;
  int32_T c10_e_x;
  int32_T c10_e_y;
  int32_T c10_f_b;
  int32_T c10_f_loop_ub;
  int32_T c10_f_n;
  int32_T c10_f_y;
  int32_T c10_g_b;
  int32_T c10_g_loop_ub;
  int32_T c10_h_b;
  int32_T c10_h_loop_ub;
  int32_T c10_h_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_iQR0;
  int32_T c10_i_loop_ub;
  int32_T c10_i_n;
  int32_T c10_idx;
  int32_T c10_ix0;
  int32_T c10_iy0;
  int32_T c10_loop_ub;
  int32_T c10_minval;
  int32_T c10_var;
  int32_T c10_varargin_1;
  int32_T c10_varargin_2;
  int32_T c10_x;
  boolean_T c10_b_overflow;
  boolean_T c10_guard1;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_guard1 = false;
  if (c10_mrows * c10_ncols > 0) {
    c10_st.site = &c10_kg_emlrtRSI;
    c10_b = c10_ncols;
    c10_e_b = c10_b;
    if (c10_e_b < 1) {
      c10_overflow = false;
    } else {
      c10_overflow = (c10_e_b > 2147483646);
    }

    if (c10_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_idx = 0; c10_idx < c10_ncols; c10_idx++) {
      c10_b_idx = c10_idx;
      c10_b_iA0 = c10_b_ldA * c10_b_idx;
      c10_iQR0 = c10_b_obj->ldq * c10_b_idx;
      c10_st.site = &c10_kg_emlrtRSI;
      c10_f_n = c10_mrows;
      c10_ix0 = c10_b_iA0 + 1;
      c10_y.set_size(&c10_wf_emlrtRTEI, &c10_st, c10_b_obj->QR.size(0),
                     c10_b_obj->QR.size(1));
      c10_loop_ub = c10_b_obj->QR.size(0) * c10_b_obj->QR.size(1) - 1;
      for (c10_i1 = 0; c10_i1 <= c10_loop_ub; c10_i1++) {
        c10_y[c10_i1] = c10_b_obj->QR[c10_i1];
      }

      c10_iy0 = c10_iQR0 + 1;
      c10_b_obj->QR.set_size(&c10_wf_emlrtRTEI, &c10_st, c10_y.size(0),
        c10_y.size(1));
      c10_b_loop_ub = c10_y.size(0) * c10_y.size(1) - 1;
      for (c10_i3 = 0; c10_i3 <= c10_b_loop_ub; c10_i3++) {
        c10_b_obj->QR[c10_i3] = c10_y[c10_i3];
      }

      if (!(c10_f_n < 1)) {
        c10_b_st.site = &c10_ad_emlrtRSI;
        c10_h_n = c10_f_n;
        c10_b_ix0 = c10_ix0;
        c10_y.set_size(&c10_bf_emlrtRTEI, &c10_b_st, c10_b_obj->QR.size(0),
                       c10_b_obj->QR.size(1));
        c10_c_loop_ub = c10_b_obj->QR.size(0) * c10_b_obj->QR.size(1) - 1;
        for (c10_i4 = 0; c10_i4 <= c10_c_loop_ub; c10_i4++) {
          c10_y[c10_i4] = c10_b_obj->QR[c10_i4];
        }

        c10_b_iy0 = c10_iy0;
        c10_b_obj->QR.set_size(&c10_wf_emlrtRTEI, &c10_b_st, c10_y.size(0),
          c10_y.size(1));
        c10_d_loop_ub = c10_y.size(0) * c10_y.size(1) - 1;
        for (c10_i5 = 0; c10_i5 <= c10_d_loop_ub; c10_i5++) {
          c10_b_obj->QR[c10_i5] = c10_y[c10_i5];
        }

        c10_c_st.site = &c10_cd_emlrtRSI;
        c10_i_n = c10_h_n;
        c10_c_ix0 = c10_b_ix0 - 1;
        c10_y.set_size(&c10_cf_emlrtRTEI, &c10_c_st, c10_b_obj->QR.size(0),
                       c10_b_obj->QR.size(1));
        c10_g_loop_ub = c10_b_obj->QR.size(0) * c10_b_obj->QR.size(1) - 1;
        for (c10_i8 = 0; c10_i8 <= c10_g_loop_ub; c10_i8++) {
          c10_y[c10_i8] = c10_b_obj->QR[c10_i8];
        }

        c10_c_iy0 = c10_b_iy0 - 1;
        c10_b_obj->QR.set_size(&c10_wf_emlrtRTEI, &c10_c_st, c10_y.size(0),
          c10_y.size(1));
        c10_i_loop_ub = c10_y.size(0) * c10_y.size(1) - 1;
        for (c10_i10 = 0; c10_i10 <= c10_i_loop_ub; c10_i10++) {
          c10_b_obj->QR[c10_i10] = c10_y[c10_i10];
        }

        c10_var = c10_i_n;
        c10_n_t = (ptrdiff_t)c10_var;
        c10_incx_t = (ptrdiff_t)1;
        c10_incy_t = (ptrdiff_t)1;
        dcopy(&c10_n_t, &c10_A[c10_c_ix0], &c10_incx_t, &c10_b_obj->QR[c10_c_iy0],
              &c10_incy_t);
      }
    }

    c10_guard1 = true;
  } else if (c10_mrows * c10_ncols == 0) {
    c10_b_obj->mrows = c10_mrows;
    c10_b_obj->ncols = c10_ncols;
    c10_b_obj->minRowCol = 0;
  } else {
    c10_guard1 = true;
  }

  if (c10_guard1) {
    c10_b_obj->usedPivoting = false;
    c10_b_obj->mrows = c10_mrows;
    c10_b_obj->ncols = c10_ncols;
    c10_i = c10_b_obj->ncols;
    c10_st.site = &c10_kg_emlrtRSI;
    c10_f_b = c10_i;
    c10_g_b = c10_f_b;
    if (c10_g_b < 1) {
      c10_b_overflow = false;
    } else {
      c10_b_overflow = (c10_g_b > 2147483646);
    }

    if (c10_b_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_c_idx = 0; c10_c_idx < c10_i; c10_c_idx++) {
      c10_b_idx = c10_c_idx + 1;
      c10_i2 = c10_b_obj->jpvt.size(0);
      if ((c10_b_idx < 1) || (c10_b_idx > c10_i2)) {
        emlrtDynamicBoundsCheckR2012b(c10_b_idx, 1, c10_i2, &c10_jp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->jpvt[c10_b_idx - 1] = c10_b_idx;
    }

    c10_varargin_1 = c10_mrows;
    c10_varargin_2 = c10_ncols;
    c10_x = c10_varargin_1;
    c10_b_y = c10_varargin_2;
    c10_b_x = c10_x;
    c10_c_y = c10_b_y;
    c10_c_x = c10_b_x;
    c10_d_y = c10_c_y;
    c10_b_a = c10_c_x;
    c10_h_b = c10_d_y;
    c10_d_x = c10_b_a;
    c10_e_y = c10_h_b;
    c10_e_x = c10_d_x;
    c10_f_y = c10_e_y;
    c10_minval = muIntScalarMin_sint32(c10_e_x, c10_f_y);
    c10_b_obj->minRowCol = c10_minval;
    c10_y.set_size(&c10_wf_emlrtRTEI, c10_sp, c10_b_obj->QR.size(0),
                   c10_b_obj->QR.size(1));
    c10_e_loop_ub = c10_b_obj->QR.size(0) * c10_b_obj->QR.size(1) - 1;
    for (c10_i6 = 0; c10_i6 <= c10_e_loop_ub; c10_i6++) {
      c10_y[c10_i6] = c10_b_obj->QR[c10_i6];
    }

    c10_st.site = &c10_kg_emlrtRSI;
    c10_b_xgeqrf(chartInstance, &c10_st, c10_y, c10_mrows, c10_ncols, c10_b_r);
    c10_b_obj->QR.set_size(&c10_wf_emlrtRTEI, c10_sp, c10_y.size(0), c10_y.size
      (1));
    c10_f_loop_ub = c10_y.size(0) * c10_y.size(1) - 1;
    for (c10_i7 = 0; c10_i7 <= c10_f_loop_ub; c10_i7++) {
      c10_b_obj->QR[c10_i7] = c10_y[c10_i7];
    }

    c10_b_obj->tau.set_size(&c10_wf_emlrtRTEI, c10_sp, c10_b_r.size(0));
    c10_h_loop_ub = c10_b_r.size(0) - 1;
    for (c10_i9 = 0; c10_i9 <= c10_h_loop_ub; c10_i9++) {
      c10_b_obj->tau[c10_i9] = c10_b_r[c10_i9];
    }
  }
}

static real_T c10_d_maxConstraintViolation(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_b_obj, coder::array<real_T, 2U> &c10_x)
{
  ptrdiff_t c10_b_incx_t;
  ptrdiff_t c10_b_incy_t;
  ptrdiff_t c10_b_n_t;
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 2U> c10_c_x;
  coder::array<real_T, 2U> c10_d_x;
  coder::array<real_T, 1U> c10_b_x;
  coder::array<real_T, 1U> c10_c_obj;
  coder::array<real_T, 1U> c10_d_obj;
  coder::array<real_T, 1U> c10_y;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  real_T c10_ab_x;
  real_T c10_ab_y;
  real_T c10_b_a;
  real_T c10_b_varargin_1;
  real_T c10_b_varargin_2;
  real_T c10_b_y;
  real_T c10_bb_x;
  real_T c10_bb_y;
  real_T c10_c_a;
  real_T c10_c_varargin_1;
  real_T c10_c_varargin_2;
  real_T c10_c_y;
  real_T c10_cb_x;
  real_T c10_cb_y;
  real_T c10_d_a;
  real_T c10_d_varargin_1;
  real_T c10_d_varargin_2;
  real_T c10_d_y;
  real_T c10_db_x;
  real_T c10_e_a;
  real_T c10_e_v;
  real_T c10_e_varargin_1;
  real_T c10_e_varargin_2;
  real_T c10_e_x;
  real_T c10_e_y;
  real_T c10_eb_x;
  real_T c10_f_a;
  real_T c10_f_v;
  real_T c10_f_x;
  real_T c10_f_y;
  real_T c10_fb_x;
  real_T c10_g_v;
  real_T c10_g_x;
  real_T c10_g_y;
  real_T c10_gb_x;
  real_T c10_h_y;
  real_T c10_hb_x;
  real_T c10_i_y;
  real_T c10_ib_x;
  real_T c10_j_x;
  real_T c10_j_y;
  real_T c10_jb_x;
  real_T c10_k_x;
  real_T c10_k_y;
  real_T c10_kb_x;
  real_T c10_m_x;
  real_T c10_m_y;
  real_T c10_mb_x;
  real_T c10_o_x;
  real_T c10_o_y;
  real_T c10_ob_x;
  real_T c10_p_x;
  real_T c10_p_y;
  real_T c10_pb_x;
  real_T c10_q_x;
  real_T c10_q_y;
  real_T c10_qb_x;
  real_T c10_r_x;
  real_T c10_r_y;
  real_T c10_rb_x;
  real_T c10_s_b;
  real_T c10_s_x;
  real_T c10_s_y;
  real_T c10_sb_x;
  real_T c10_t_b;
  real_T c10_t_x;
  real_T c10_t_y;
  real_T c10_u_b;
  real_T c10_u_x;
  real_T c10_u_y;
  real_T c10_v_b;
  real_T c10_v_x;
  real_T c10_v_y;
  real_T c10_varargin_1;
  real_T c10_varargin_2;
  real_T c10_w_b;
  real_T c10_w_x;
  real_T c10_w_y;
  real_T c10_x_x;
  real_T c10_x_y;
  real_T c10_y_x;
  real_T c10_y_y;
  int32_T c10_b;
  int32_T c10_b_idx;
  int32_T c10_b_loop_ub;
  int32_T c10_b_mEq;
  int32_T c10_b_var;
  int32_T c10_c_idx;
  int32_T c10_c_loop_ub;
  int32_T c10_d_idx;
  int32_T c10_d_loop_ub;
  int32_T c10_e_b;
  int32_T c10_e_idx;
  int32_T c10_e_loop_ub;
  int32_T c10_f_b;
  int32_T c10_f_idx;
  int32_T c10_f_loop_ub;
  int32_T c10_f_n;
  int32_T c10_g_b;
  int32_T c10_g_idx;
  int32_T c10_g_loop_ub;
  int32_T c10_h_b;
  int32_T c10_h_idx;
  int32_T c10_h_loop_ub;
  int32_T c10_h_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i19;
  int32_T c10_i2;
  int32_T c10_i20;
  int32_T c10_i21;
  int32_T c10_i22;
  int32_T c10_i23;
  int32_T c10_i24;
  int32_T c10_i25;
  int32_T c10_i26;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_i_loop_ub;
  int32_T c10_i_n;
  int32_T c10_idx;
  int32_T c10_idxFixed;
  int32_T c10_idxLB;
  int32_T c10_idxUB;
  int32_T c10_j_b;
  int32_T c10_j_loop_ub;
  int32_T c10_j_n;
  int32_T c10_k_b;
  int32_T c10_k_n;
  int32_T c10_loop_ub;
  int32_T c10_mEq;
  int32_T c10_mFixed;
  int32_T c10_mLB;
  int32_T c10_mUB;
  int32_T c10_m_n;
  int32_T c10_o_b;
  int32_T c10_offsetEq1;
  int32_T c10_offsetEq2;
  int32_T c10_p_b;
  int32_T c10_q_b;
  int32_T c10_var;
  boolean_T c10_b_overflow;
  boolean_T c10_c_overflow;
  boolean_T c10_d_overflow;
  boolean_T c10_e_overflow;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_mLB = c10_b_obj->sizes[3];
  c10_mUB = c10_b_obj->sizes[4];
  c10_mFixed = c10_b_obj->sizes[0];
  if (c10_b_obj->probType == 2) {
    c10_st.site = &c10_eh_emlrtRSI;
    c10_g_v = 0.0;
    c10_b_mEq = c10_b_obj->sizes[1];
    if (c10_b_obj->Aeq.size(0) != 0) {
      c10_b_st.site = &c10_fh_emlrtRSI;
      c10_h_n = c10_b_mEq;
      c10_b_x.set_size(&c10_jh_emlrtRTEI, &c10_b_st, c10_b_obj->beq.size[0]);
      c10_b_loop_ub = c10_b_obj->beq.size[0] - 1;
      for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
        c10_b_x[c10_i1] = c10_b_obj->beq.data[c10_i1];
      }

      c10_y.set_size(&c10_jh_emlrtRTEI, &c10_b_st,
                     c10_b_obj->maxConstrWorkspace.size[0]);
      c10_d_loop_ub = c10_b_obj->maxConstrWorkspace.size[0] - 1;
      for (c10_i3 = 0; c10_i3 <= c10_d_loop_ub; c10_i3++) {
        c10_y[c10_i3] = c10_b_obj->maxConstrWorkspace.data[c10_i3];
      }

      if (!(c10_h_n < 1)) {
        c10_c_st.site = &c10_ad_emlrtRSI;
        c10_j_n = c10_h_n;
        c10_m_n = c10_j_n;
        c10_b_var = c10_m_n;
        c10_b_n_t = (ptrdiff_t)c10_b_var;
        c10_b_incx_t = (ptrdiff_t)1;
        c10_b_incy_t = (ptrdiff_t)1;
        dcopy(&c10_b_n_t, &(c10_b_x.data())[0], &c10_b_incx_t, &(c10_y.data())[0],
              &c10_b_incy_t);
      }

      c10_b_obj->maxConstrWorkspace.size[0] = c10_y.size(0);
      c10_f_loop_ub = c10_y.size(0) - 1;
      for (c10_i5 = 0; c10_i5 <= c10_f_loop_ub; c10_i5++) {
        c10_b_obj->maxConstrWorkspace.data[c10_i5] = c10_y[c10_i5];
      }

      c10_d_obj.set_size(&c10_jh_emlrtRTEI, &c10_st, c10_b_obj->Aeq.size(0));
      c10_h_loop_ub = c10_b_obj->Aeq.size(0) - 1;
      for (c10_i11 = 0; c10_i11 <= c10_h_loop_ub; c10_i11++) {
        c10_d_obj[c10_i11] = c10_b_obj->Aeq[c10_i11];
      }

      c10_d_x.set_size(&c10_jh_emlrtRTEI, &c10_st, c10_x.size(0), c10_x.size(1));
      c10_j_loop_ub = c10_x.size(0) * c10_x.size(1) - 1;
      for (c10_i16 = 0; c10_i16 <= c10_j_loop_ub; c10_i16++) {
        c10_d_x[c10_i16] = c10_x[c10_i16];
      }

      c10_b_st.site = &c10_fh_emlrtRSI;
      c10_f_xgemv(chartInstance, c10_b_obj->nVarOrig, c10_b_mEq, c10_d_obj,
                  c10_b_obj->ldA, c10_d_x, c10_b_obj->maxConstrWorkspace.data);
      c10_offsetEq1 = c10_b_obj->nVarOrig;
      c10_offsetEq2 = c10_offsetEq1 + c10_b_mEq;
      c10_b_st.site = &c10_fh_emlrtRSI;
      c10_p_b = c10_b_mEq;
      c10_q_b = c10_p_b;
      if (c10_q_b < 1) {
        c10_e_overflow = false;
      } else {
        c10_e_overflow = (c10_q_b > 2147483646);
      }

      if (c10_e_overflow) {
        c10_c_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
      }

      c10_i21 = static_cast<uint16_T>(c10_b_mEq) - 1;
      for (c10_g_idx = 0; c10_g_idx <= c10_i21; c10_g_idx++) {
        c10_h_idx = c10_g_idx + 1;
        if ((c10_h_idx < 1) || (c10_h_idx > c10_b_obj->maxConstrWorkspace.size[0]))
        {
          emlrtDynamicBoundsCheckR2012b(c10_h_idx, 1,
            c10_b_obj->maxConstrWorkspace.size[0], &c10_op_emlrtBCI, &c10_st);
        }

        c10_i23 = c10_x.size(0) * c10_x.size(1);
        c10_i24 = c10_offsetEq1 + c10_h_idx;
        if ((c10_i24 < 1) || (c10_i24 > c10_i23)) {
          emlrtDynamicBoundsCheckR2012b(c10_i24, 1, c10_i23, &c10_op_emlrtBCI,
            &c10_st);
        }

        c10_i25 = c10_x.size(0) * c10_x.size(1);
        c10_i26 = c10_offsetEq2 + c10_h_idx;
        if ((c10_i26 < 1) || (c10_i26 > c10_i25)) {
          emlrtDynamicBoundsCheckR2012b(c10_i26, 1, c10_i25, &c10_op_emlrtBCI,
            &c10_st);
        }

        if ((c10_h_idx < 1) || (c10_h_idx > c10_b_obj->maxConstrWorkspace.size[0]))
        {
          emlrtDynamicBoundsCheckR2012b(c10_h_idx, 1,
            c10_b_obj->maxConstrWorkspace.size[0], &c10_op_emlrtBCI, &c10_st);
        }

        c10_b_obj->maxConstrWorkspace.data[c10_h_idx - 1] =
          (c10_b_obj->maxConstrWorkspace.data[c10_h_idx - 1] - c10_x[c10_i24 - 1])
          + c10_x[c10_i26 - 1];
        c10_e_varargin_1 = c10_g_v;
        if ((c10_h_idx < 1) || (c10_h_idx > c10_b_obj->maxConstrWorkspace.size[0]))
        {
          emlrtDynamicBoundsCheckR2012b(c10_h_idx, 1,
            c10_b_obj->maxConstrWorkspace.size[0], &c10_op_emlrtBCI, &c10_st);
        }

        c10_jb_x = c10_b_obj->maxConstrWorkspace.data[c10_h_idx - 1];
        c10_kb_x = c10_jb_x;
        c10_mb_x = c10_kb_x;
        c10_e_varargin_2 = muDoubleScalarAbs(c10_mb_x);
        c10_ob_x = c10_e_varargin_1;
        c10_x_y = c10_e_varargin_2;
        c10_pb_x = c10_ob_x;
        c10_y_y = c10_x_y;
        c10_qb_x = c10_pb_x;
        c10_ab_y = c10_y_y;
        c10_f_a = c10_qb_x;
        c10_w_b = c10_ab_y;
        c10_rb_x = c10_f_a;
        c10_bb_y = c10_w_b;
        c10_sb_x = c10_rb_x;
        c10_cb_y = c10_bb_y;
        c10_g_v = muDoubleScalarMax(c10_sb_x, c10_cb_y);
      }
    }

    c10_e_v = c10_g_v;
  } else {
    c10_st.site = &c10_eh_emlrtRSI;
    c10_f_v = 0.0;
    c10_mEq = c10_b_obj->sizes[1];
    if (c10_b_obj->Aeq.size(0) != 0) {
      c10_b_st.site = &c10_hh_emlrtRSI;
      c10_f_n = c10_mEq;
      c10_b_x.set_size(&c10_ih_emlrtRTEI, &c10_b_st, c10_b_obj->beq.size[0]);
      c10_loop_ub = c10_b_obj->beq.size[0] - 1;
      for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
        c10_b_x[c10_i] = c10_b_obj->beq.data[c10_i];
      }

      c10_y.set_size(&c10_ih_emlrtRTEI, &c10_b_st,
                     c10_b_obj->maxConstrWorkspace.size[0]);
      c10_c_loop_ub = c10_b_obj->maxConstrWorkspace.size[0] - 1;
      for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
        c10_y[c10_i2] = c10_b_obj->maxConstrWorkspace.data[c10_i2];
      }

      if (!(c10_f_n < 1)) {
        c10_c_st.site = &c10_ad_emlrtRSI;
        c10_i_n = c10_f_n;
        c10_k_n = c10_i_n;
        c10_var = c10_k_n;
        c10_n_t = (ptrdiff_t)c10_var;
        c10_incx_t = (ptrdiff_t)1;
        c10_incy_t = (ptrdiff_t)1;
        dcopy(&c10_n_t, &(c10_b_x.data())[0], &c10_incx_t, &(c10_y.data())[0],
              &c10_incy_t);
      }

      c10_b_obj->maxConstrWorkspace.size[0] = c10_y.size(0);
      c10_e_loop_ub = c10_y.size(0) - 1;
      for (c10_i4 = 0; c10_i4 <= c10_e_loop_ub; c10_i4++) {
        c10_b_obj->maxConstrWorkspace.data[c10_i4] = c10_y[c10_i4];
      }

      c10_c_obj.set_size(&c10_ih_emlrtRTEI, &c10_st, c10_b_obj->Aeq.size(0));
      c10_g_loop_ub = c10_b_obj->Aeq.size(0) - 1;
      for (c10_i10 = 0; c10_i10 <= c10_g_loop_ub; c10_i10++) {
        c10_c_obj[c10_i10] = c10_b_obj->Aeq[c10_i10];
      }

      c10_c_x.set_size(&c10_ih_emlrtRTEI, &c10_st, c10_x.size(0), c10_x.size(1));
      c10_i_loop_ub = c10_x.size(0) * c10_x.size(1) - 1;
      for (c10_i15 = 0; c10_i15 <= c10_i_loop_ub; c10_i15++) {
        c10_c_x[c10_i15] = c10_x[c10_i15];
      }

      c10_b_st.site = &c10_hh_emlrtRSI;
      c10_f_xgemv(chartInstance, c10_b_obj->nVar, c10_mEq, c10_c_obj,
                  c10_b_obj->ldA, c10_c_x, c10_b_obj->maxConstrWorkspace.data);
      c10_b_st.site = &c10_hh_emlrtRSI;
      c10_k_b = c10_mEq;
      c10_o_b = c10_k_b;
      if (c10_o_b < 1) {
        c10_d_overflow = false;
      } else {
        c10_d_overflow = (c10_o_b > 2147483646);
      }

      if (c10_d_overflow) {
        c10_c_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
      }

      c10_i20 = static_cast<uint16_T>(c10_mEq) - 1;
      for (c10_e_idx = 0; c10_e_idx <= c10_i20; c10_e_idx++) {
        c10_f_idx = c10_e_idx;
        c10_d_varargin_1 = c10_f_v;
        c10_i22 = c10_f_idx + 1;
        if ((c10_i22 < 1) || (c10_i22 > c10_b_obj->maxConstrWorkspace.size[0]))
        {
          emlrtDynamicBoundsCheckR2012b(c10_i22, 1,
            c10_b_obj->maxConstrWorkspace.size[0], &c10_mp_emlrtBCI, &c10_st);
        }

        c10_bb_x = c10_b_obj->maxConstrWorkspace.data[c10_i22 - 1];
        c10_cb_x = c10_bb_x;
        c10_db_x = c10_cb_x;
        c10_d_varargin_2 = muDoubleScalarAbs(c10_db_x);
        c10_eb_x = c10_d_varargin_1;
        c10_s_y = c10_d_varargin_2;
        c10_fb_x = c10_eb_x;
        c10_t_y = c10_s_y;
        c10_gb_x = c10_fb_x;
        c10_u_y = c10_t_y;
        c10_e_a = c10_gb_x;
        c10_v_b = c10_u_y;
        c10_hb_x = c10_e_a;
        c10_v_y = c10_v_b;
        c10_ib_x = c10_hb_x;
        c10_w_y = c10_v_y;
        c10_f_v = muDoubleScalarMax(c10_ib_x, c10_w_y);
      }
    }

    c10_e_v = c10_f_v;
  }

  if (c10_mLB > 0) {
    c10_st.site = &c10_eh_emlrtRSI;
    c10_b = c10_mLB;
    c10_e_b = c10_b;
    if (c10_e_b < 1) {
      c10_overflow = false;
    } else {
      c10_overflow = (c10_e_b > 2147483646);
    }

    if (c10_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_idx = 0; c10_idx < c10_mLB; c10_idx++) {
      c10_c_idx = c10_idx;
      c10_i6 = c10_b_obj->indexLB.size(0);
      c10_i7 = c10_c_idx + 1;
      if ((c10_i7 < 1) || (c10_i7 > c10_i6)) {
        emlrtDynamicBoundsCheckR2012b(c10_i7, 1, c10_i6, &c10_kp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_idxLB = c10_b_obj->indexLB[c10_i7 - 1];
      c10_varargin_1 = c10_e_v;
      c10_i14 = c10_x.size(0) * c10_x.size(1);
      if ((c10_idxLB < 1) || (c10_idxLB > c10_i14)) {
        emlrtDynamicBoundsCheckR2012b(c10_idxLB, 1, c10_i14, &c10_kp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i18 = c10_b_obj->lb.size(0);
      if ((c10_idxLB < 1) || (c10_idxLB > c10_i18)) {
        emlrtDynamicBoundsCheckR2012b(c10_idxLB, 1, c10_i18, &c10_kp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_varargin_2 = -c10_x[c10_idxLB - 1] - c10_b_obj->lb[c10_idxLB - 1];
      c10_g_x = c10_varargin_1;
      c10_c_y = c10_b_varargin_2;
      c10_o_x = c10_g_x;
      c10_e_y = c10_c_y;
      c10_r_x = c10_o_x;
      c10_h_y = c10_e_y;
      c10_c_a = c10_r_x;
      c10_t_b = c10_h_y;
      c10_v_x = c10_c_a;
      c10_m_y = c10_t_b;
      c10_x_x = c10_v_x;
      c10_p_y = c10_m_y;
      c10_e_v = muDoubleScalarMax(c10_x_x, c10_p_y);
    }
  }

  if (c10_mUB > 0) {
    c10_st.site = &c10_eh_emlrtRSI;
    c10_f_b = c10_mUB;
    c10_g_b = c10_f_b;
    if (c10_g_b < 1) {
      c10_b_overflow = false;
    } else {
      c10_b_overflow = (c10_g_b > 2147483646);
    }

    if (c10_b_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_b_idx = 0; c10_b_idx < c10_mUB; c10_b_idx++) {
      c10_c_idx = c10_b_idx;
      c10_i8 = c10_b_obj->indexUB.size(0);
      c10_i9 = c10_c_idx + 1;
      if ((c10_i9 < 1) || (c10_i9 > c10_i8)) {
        emlrtDynamicBoundsCheckR2012b(c10_i9, 1, c10_i8, &c10_kp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_idxUB = c10_b_obj->indexUB[c10_i9 - 1];
      c10_b_varargin_1 = c10_e_v;
      c10_i17 = c10_b_obj->ub.size(0);
      if ((c10_idxUB < 1) || (c10_idxUB > c10_i17)) {
        emlrtDynamicBoundsCheckR2012b(c10_idxUB, 1, c10_i17, &c10_kp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_varargin_2 = c10_x[c10_idxUB - 1] - c10_b_obj->ub[c10_idxUB - 1];
      c10_e_x = c10_b_varargin_1;
      c10_b_y = c10_varargin_2;
      c10_k_x = c10_e_x;
      c10_d_y = c10_b_y;
      c10_p_x = c10_k_x;
      c10_f_y = c10_d_y;
      c10_b_a = c10_p_x;
      c10_s_b = c10_f_y;
      c10_t_x = c10_b_a;
      c10_j_y = c10_s_b;
      c10_w_x = c10_t_x;
      c10_o_y = c10_j_y;
      c10_e_v = muDoubleScalarMax(c10_w_x, c10_o_y);
    }
  }

  if (c10_mFixed > 0) {
    c10_st.site = &c10_eh_emlrtRSI;
    c10_h_b = c10_mFixed;
    c10_j_b = c10_h_b;
    if (c10_j_b < 1) {
      c10_c_overflow = false;
    } else {
      c10_c_overflow = (c10_j_b > 2147483646);
    }

    if (c10_c_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_d_idx = 0; c10_d_idx < c10_mFixed; c10_d_idx++) {
      c10_c_idx = c10_d_idx;
      c10_i12 = c10_b_obj->indexFixed.size(0);
      c10_i13 = c10_c_idx + 1;
      if ((c10_i13 < 1) || (c10_i13 > c10_i12)) {
        emlrtDynamicBoundsCheckR2012b(c10_i13, 1, c10_i12, &c10_kp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_idxFixed = c10_b_obj->indexFixed[c10_i13 - 1];
      c10_c_varargin_1 = c10_e_v;
      c10_i19 = c10_b_obj->ub.size(0);
      if ((c10_idxFixed < 1) || (c10_idxFixed > c10_i19)) {
        emlrtDynamicBoundsCheckR2012b(c10_idxFixed, 1, c10_i19, &c10_kp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_f_x = c10_x[c10_idxFixed - 1] - c10_b_obj->ub[c10_idxFixed - 1];
      c10_j_x = c10_f_x;
      c10_m_x = c10_j_x;
      c10_c_varargin_2 = muDoubleScalarAbs(c10_m_x);
      c10_q_x = c10_c_varargin_1;
      c10_g_y = c10_c_varargin_2;
      c10_s_x = c10_q_x;
      c10_i_y = c10_g_y;
      c10_u_x = c10_s_x;
      c10_k_y = c10_i_y;
      c10_d_a = c10_u_x;
      c10_u_b = c10_k_y;
      c10_y_x = c10_d_a;
      c10_q_y = c10_u_b;
      c10_ab_x = c10_y_x;
      c10_r_y = c10_q_y;
      c10_e_v = muDoubleScalarMax(c10_ab_x, c10_r_y);
    }
  }

  return c10_e_v;
}

static void c10_f_xgemv(SFc10_ACCMPCInstanceStruct *chartInstance, int32_T c10_m,
  int32_T c10_f_n, coder::array<real_T, 1U> &c10_A, int32_T c10_lda, coder::
  array<real_T, 2U> &c10_x, real_T c10_y_data[])
{
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_lda_t;
  ptrdiff_t c10_m_t;
  ptrdiff_t c10_n_t;
  real_T c10_alpha1;
  real_T c10_beta1;
  int32_T c10_b_var;
  int32_T c10_c_lda;
  int32_T c10_c_m;
  int32_T c10_c_var;
  int32_T c10_d_lda;
  int32_T c10_d_m;
  int32_T c10_h_n;
  int32_T c10_i_n;
  int32_T c10_var;
  char_T c10_TRANSA;
  if ((c10_m < 1) || (c10_f_n < 1)) {
  } else {
    c10_c_m = c10_m;
    c10_h_n = c10_f_n;
    c10_c_lda = c10_lda;
    c10_d_m = c10_c_m;
    c10_i_n = c10_h_n;
    c10_alpha1 = 1.0;
    c10_d_lda = c10_c_lda;
    c10_beta1 = -1.0;
    c10_TRANSA = 'T';
    c10_var = c10_d_m;
    c10_m_t = (ptrdiff_t)c10_var;
    c10_b_var = c10_i_n;
    c10_n_t = (ptrdiff_t)c10_b_var;
    c10_c_var = c10_d_lda;
    c10_lda_t = (ptrdiff_t)c10_c_var;
    c10_incx_t = (ptrdiff_t)1;
    c10_incy_t = (ptrdiff_t)1;
    dgemv(&c10_TRANSA, &c10_m_t, &c10_n_t, &c10_alpha1, &(c10_A.data())[0],
          &c10_lda_t, &(c10_x.data())[0], &c10_incx_t, &c10_beta1, &c10_y_data[0],
          &c10_incy_t);
  }
}

static real_T c10_e_maxConstraintViolation(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_b_obj, coder::array<real_T, 2U> &c10_x, int32_T c10_ix0)
{
  ptrdiff_t c10_b_incx_t;
  ptrdiff_t c10_b_incy_t;
  ptrdiff_t c10_b_n_t;
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 2U> c10_c_x;
  coder::array<real_T, 2U> c10_d_x;
  coder::array<real_T, 1U> c10_b_x;
  coder::array<real_T, 1U> c10_c_obj;
  coder::array<real_T, 1U> c10_d_obj;
  coder::array<real_T, 1U> c10_y;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  real_T c10_ab_x;
  real_T c10_ab_y;
  real_T c10_b_a;
  real_T c10_b_varargin_1;
  real_T c10_b_varargin_2;
  real_T c10_b_y;
  real_T c10_bb_x;
  real_T c10_bb_y;
  real_T c10_c_a;
  real_T c10_c_varargin_1;
  real_T c10_c_varargin_2;
  real_T c10_c_y;
  real_T c10_cb_x;
  real_T c10_cb_y;
  real_T c10_d_a;
  real_T c10_d_varargin_1;
  real_T c10_d_varargin_2;
  real_T c10_d_y;
  real_T c10_db_x;
  real_T c10_e_a;
  real_T c10_e_v;
  real_T c10_e_varargin_1;
  real_T c10_e_varargin_2;
  real_T c10_e_x;
  real_T c10_e_y;
  real_T c10_eb_x;
  real_T c10_f_a;
  real_T c10_f_v;
  real_T c10_f_x;
  real_T c10_f_y;
  real_T c10_fb_x;
  real_T c10_g_v;
  real_T c10_g_x;
  real_T c10_g_y;
  real_T c10_gb_x;
  real_T c10_h_y;
  real_T c10_hb_x;
  real_T c10_i_y;
  real_T c10_ib_x;
  real_T c10_j_x;
  real_T c10_j_y;
  real_T c10_jb_x;
  real_T c10_k_x;
  real_T c10_k_y;
  real_T c10_kb_x;
  real_T c10_m_x;
  real_T c10_m_y;
  real_T c10_mb_x;
  real_T c10_o_x;
  real_T c10_o_y;
  real_T c10_ob_x;
  real_T c10_p_x;
  real_T c10_p_y;
  real_T c10_pb_x;
  real_T c10_q_x;
  real_T c10_q_y;
  real_T c10_qb_x;
  real_T c10_r_x;
  real_T c10_r_y;
  real_T c10_rb_x;
  real_T c10_s_b;
  real_T c10_s_x;
  real_T c10_s_y;
  real_T c10_sb_x;
  real_T c10_t_b;
  real_T c10_t_x;
  real_T c10_t_y;
  real_T c10_u_b;
  real_T c10_u_x;
  real_T c10_u_y;
  real_T c10_v_b;
  real_T c10_v_x;
  real_T c10_v_y;
  real_T c10_varargin_1;
  real_T c10_varargin_2;
  real_T c10_w_b;
  real_T c10_w_x;
  real_T c10_w_y;
  real_T c10_x_x;
  real_T c10_x_y;
  real_T c10_y_x;
  real_T c10_y_y;
  int32_T c10_b;
  int32_T c10_b_idx;
  int32_T c10_b_ix0;
  int32_T c10_b_loop_ub;
  int32_T c10_b_mEq;
  int32_T c10_b_var;
  int32_T c10_c_idx;
  int32_T c10_c_ix0;
  int32_T c10_c_loop_ub;
  int32_T c10_d_idx;
  int32_T c10_d_loop_ub;
  int32_T c10_e_b;
  int32_T c10_e_idx;
  int32_T c10_e_loop_ub;
  int32_T c10_f_b;
  int32_T c10_f_idx;
  int32_T c10_f_loop_ub;
  int32_T c10_f_n;
  int32_T c10_g_b;
  int32_T c10_g_idx;
  int32_T c10_g_loop_ub;
  int32_T c10_h_b;
  int32_T c10_h_idx;
  int32_T c10_h_loop_ub;
  int32_T c10_h_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i19;
  int32_T c10_i2;
  int32_T c10_i20;
  int32_T c10_i21;
  int32_T c10_i22;
  int32_T c10_i23;
  int32_T c10_i24;
  int32_T c10_i25;
  int32_T c10_i26;
  int32_T c10_i27;
  int32_T c10_i28;
  int32_T c10_i29;
  int32_T c10_i3;
  int32_T c10_i30;
  int32_T c10_i31;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_i_loop_ub;
  int32_T c10_i_n;
  int32_T c10_idx;
  int32_T c10_idxFixed;
  int32_T c10_idxLB;
  int32_T c10_idxUB;
  int32_T c10_ix0_start;
  int32_T c10_j_b;
  int32_T c10_j_loop_ub;
  int32_T c10_j_n;
  int32_T c10_k_b;
  int32_T c10_k_n;
  int32_T c10_loop_ub;
  int32_T c10_mEq;
  int32_T c10_mFixed;
  int32_T c10_mLB;
  int32_T c10_mUB;
  int32_T c10_m_n;
  int32_T c10_o_b;
  int32_T c10_offsetEq1;
  int32_T c10_offsetEq2;
  int32_T c10_p_b;
  int32_T c10_q_b;
  int32_T c10_var;
  boolean_T c10_b_overflow;
  boolean_T c10_c_overflow;
  boolean_T c10_d_overflow;
  boolean_T c10_e_overflow;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_mLB = c10_b_obj->sizes[3];
  c10_mUB = c10_b_obj->sizes[4];
  c10_mFixed = c10_b_obj->sizes[0];
  if (c10_b_obj->probType == 2) {
    c10_st.site = &c10_eh_emlrtRSI;
    c10_c_ix0 = c10_ix0;
    c10_g_v = 0.0;
    c10_b_mEq = c10_b_obj->sizes[1];
    if (c10_b_obj->Aeq.size(0) != 0) {
      c10_b_st.site = &c10_fh_emlrtRSI;
      c10_h_n = c10_b_mEq;
      c10_b_x.set_size(&c10_jh_emlrtRTEI, &c10_b_st, c10_b_obj->beq.size[0]);
      c10_b_loop_ub = c10_b_obj->beq.size[0] - 1;
      for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
        c10_b_x[c10_i1] = c10_b_obj->beq.data[c10_i1];
      }

      c10_y.set_size(&c10_jh_emlrtRTEI, &c10_b_st,
                     c10_b_obj->maxConstrWorkspace.size[0]);
      c10_d_loop_ub = c10_b_obj->maxConstrWorkspace.size[0] - 1;
      for (c10_i3 = 0; c10_i3 <= c10_d_loop_ub; c10_i3++) {
        c10_y[c10_i3] = c10_b_obj->maxConstrWorkspace.data[c10_i3];
      }

      if (!(c10_h_n < 1)) {
        c10_c_st.site = &c10_ad_emlrtRSI;
        c10_j_n = c10_h_n;
        c10_m_n = c10_j_n;
        c10_b_var = c10_m_n;
        c10_b_n_t = (ptrdiff_t)c10_b_var;
        c10_b_incx_t = (ptrdiff_t)1;
        c10_b_incy_t = (ptrdiff_t)1;
        dcopy(&c10_b_n_t, &(c10_b_x.data())[0], &c10_b_incx_t, &(c10_y.data())[0],
              &c10_b_incy_t);
      }

      c10_b_obj->maxConstrWorkspace.size[0] = c10_y.size(0);
      c10_f_loop_ub = c10_y.size(0) - 1;
      for (c10_i5 = 0; c10_i5 <= c10_f_loop_ub; c10_i5++) {
        c10_b_obj->maxConstrWorkspace.data[c10_i5] = c10_y[c10_i5];
      }

      c10_d_obj.set_size(&c10_jh_emlrtRTEI, &c10_st, c10_b_obj->Aeq.size(0));
      c10_h_loop_ub = c10_b_obj->Aeq.size(0) - 1;
      for (c10_i10 = 0; c10_i10 <= c10_h_loop_ub; c10_i10++) {
        c10_d_obj[c10_i10] = c10_b_obj->Aeq[c10_i10];
      }

      c10_d_x.set_size(&c10_jh_emlrtRTEI, &c10_st, c10_x.size(0), c10_x.size(1));
      c10_j_loop_ub = c10_x.size(0) * c10_x.size(1) - 1;
      for (c10_i16 = 0; c10_i16 <= c10_j_loop_ub; c10_i16++) {
        c10_d_x[c10_i16] = c10_x[c10_i16];
      }

      c10_b_st.site = &c10_fh_emlrtRSI;
      c10_g_xgemv(chartInstance, c10_b_obj->nVarOrig, c10_b_mEq, c10_d_obj,
                  c10_b_obj->ldA, c10_d_x, c10_c_ix0,
                  c10_b_obj->maxConstrWorkspace.data);
      c10_offsetEq1 = c10_b_obj->nVarOrig - 1;
      c10_offsetEq2 = c10_offsetEq1 + c10_b_mEq;
      c10_b_st.site = &c10_fh_emlrtRSI;
      c10_p_b = c10_b_mEq;
      c10_q_b = c10_p_b;
      if (c10_q_b < 1) {
        c10_e_overflow = false;
      } else {
        c10_e_overflow = (c10_q_b > 2147483646);
      }

      if (c10_e_overflow) {
        c10_c_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
      }

      c10_i26 = static_cast<uint16_T>(c10_b_mEq) - 1;
      for (c10_g_idx = 0; c10_g_idx <= c10_i26; c10_g_idx++) {
        c10_h_idx = c10_g_idx + 1;
        if ((c10_h_idx < 1) || (c10_h_idx > c10_b_obj->maxConstrWorkspace.size[0]))
        {
          emlrtDynamicBoundsCheckR2012b(c10_h_idx, 1,
            c10_b_obj->maxConstrWorkspace.size[0], &c10_op_emlrtBCI, &c10_st);
        }

        c10_i28 = c10_x.size(0) * c10_x.size(1);
        c10_i29 = (c10_c_ix0 + c10_offsetEq1) + c10_h_idx;
        if ((c10_i29 < 1) || (c10_i29 > c10_i28)) {
          emlrtDynamicBoundsCheckR2012b(c10_i29, 1, c10_i28, &c10_op_emlrtBCI,
            &c10_st);
        }

        c10_i30 = c10_x.size(0) * c10_x.size(1);
        c10_i31 = (c10_c_ix0 + c10_offsetEq2) + c10_h_idx;
        if ((c10_i31 < 1) || (c10_i31 > c10_i30)) {
          emlrtDynamicBoundsCheckR2012b(c10_i31, 1, c10_i30, &c10_op_emlrtBCI,
            &c10_st);
        }

        if ((c10_h_idx < 1) || (c10_h_idx > c10_b_obj->maxConstrWorkspace.size[0]))
        {
          emlrtDynamicBoundsCheckR2012b(c10_h_idx, 1,
            c10_b_obj->maxConstrWorkspace.size[0], &c10_op_emlrtBCI, &c10_st);
        }

        c10_b_obj->maxConstrWorkspace.data[c10_h_idx - 1] =
          (c10_b_obj->maxConstrWorkspace.data[c10_h_idx - 1] - c10_x[c10_i29 - 1])
          + c10_x[c10_i31 - 1];
        c10_e_varargin_1 = c10_g_v;
        if ((c10_h_idx < 1) || (c10_h_idx > c10_b_obj->maxConstrWorkspace.size[0]))
        {
          emlrtDynamicBoundsCheckR2012b(c10_h_idx, 1,
            c10_b_obj->maxConstrWorkspace.size[0], &c10_op_emlrtBCI, &c10_st);
        }

        c10_jb_x = c10_b_obj->maxConstrWorkspace.data[c10_h_idx - 1];
        c10_kb_x = c10_jb_x;
        c10_mb_x = c10_kb_x;
        c10_e_varargin_2 = muDoubleScalarAbs(c10_mb_x);
        c10_ob_x = c10_e_varargin_1;
        c10_x_y = c10_e_varargin_2;
        c10_pb_x = c10_ob_x;
        c10_y_y = c10_x_y;
        c10_qb_x = c10_pb_x;
        c10_ab_y = c10_y_y;
        c10_f_a = c10_qb_x;
        c10_w_b = c10_ab_y;
        c10_rb_x = c10_f_a;
        c10_bb_y = c10_w_b;
        c10_sb_x = c10_rb_x;
        c10_cb_y = c10_bb_y;
        c10_g_v = muDoubleScalarMax(c10_sb_x, c10_cb_y);
      }
    }

    c10_e_v = c10_g_v;
  } else {
    c10_st.site = &c10_eh_emlrtRSI;
    c10_b_ix0 = c10_ix0;
    c10_f_v = 0.0;
    c10_mEq = c10_b_obj->sizes[1];
    if (c10_b_obj->Aeq.size(0) != 0) {
      c10_b_st.site = &c10_hh_emlrtRSI;
      c10_f_n = c10_mEq;
      c10_b_x.set_size(&c10_ih_emlrtRTEI, &c10_b_st, c10_b_obj->beq.size[0]);
      c10_loop_ub = c10_b_obj->beq.size[0] - 1;
      for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
        c10_b_x[c10_i] = c10_b_obj->beq.data[c10_i];
      }

      c10_y.set_size(&c10_ih_emlrtRTEI, &c10_b_st,
                     c10_b_obj->maxConstrWorkspace.size[0]);
      c10_c_loop_ub = c10_b_obj->maxConstrWorkspace.size[0] - 1;
      for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
        c10_y[c10_i2] = c10_b_obj->maxConstrWorkspace.data[c10_i2];
      }

      if (!(c10_f_n < 1)) {
        c10_c_st.site = &c10_ad_emlrtRSI;
        c10_i_n = c10_f_n;
        c10_k_n = c10_i_n;
        c10_var = c10_k_n;
        c10_n_t = (ptrdiff_t)c10_var;
        c10_incx_t = (ptrdiff_t)1;
        c10_incy_t = (ptrdiff_t)1;
        dcopy(&c10_n_t, &(c10_b_x.data())[0], &c10_incx_t, &(c10_y.data())[0],
              &c10_incy_t);
      }

      c10_b_obj->maxConstrWorkspace.size[0] = c10_y.size(0);
      c10_e_loop_ub = c10_y.size(0) - 1;
      for (c10_i4 = 0; c10_i4 <= c10_e_loop_ub; c10_i4++) {
        c10_b_obj->maxConstrWorkspace.data[c10_i4] = c10_y[c10_i4];
      }

      c10_c_obj.set_size(&c10_ih_emlrtRTEI, &c10_st, c10_b_obj->Aeq.size(0));
      c10_g_loop_ub = c10_b_obj->Aeq.size(0) - 1;
      for (c10_i9 = 0; c10_i9 <= c10_g_loop_ub; c10_i9++) {
        c10_c_obj[c10_i9] = c10_b_obj->Aeq[c10_i9];
      }

      c10_c_x.set_size(&c10_ih_emlrtRTEI, &c10_st, c10_x.size(0), c10_x.size(1));
      c10_i_loop_ub = c10_x.size(0) * c10_x.size(1) - 1;
      for (c10_i15 = 0; c10_i15 <= c10_i_loop_ub; c10_i15++) {
        c10_c_x[c10_i15] = c10_x[c10_i15];
      }

      c10_b_st.site = &c10_hh_emlrtRSI;
      c10_g_xgemv(chartInstance, c10_b_obj->nVar, c10_mEq, c10_c_obj,
                  c10_b_obj->ldA, c10_c_x, c10_b_ix0,
                  c10_b_obj->maxConstrWorkspace.data);
      c10_b_st.site = &c10_hh_emlrtRSI;
      c10_k_b = c10_mEq;
      c10_o_b = c10_k_b;
      if (c10_o_b < 1) {
        c10_d_overflow = false;
      } else {
        c10_d_overflow = (c10_o_b > 2147483646);
      }

      if (c10_d_overflow) {
        c10_c_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
      }

      c10_i25 = static_cast<uint16_T>(c10_mEq) - 1;
      for (c10_e_idx = 0; c10_e_idx <= c10_i25; c10_e_idx++) {
        c10_f_idx = c10_e_idx;
        c10_d_varargin_1 = c10_f_v;
        c10_i27 = c10_f_idx + 1;
        if ((c10_i27 < 1) || (c10_i27 > c10_b_obj->maxConstrWorkspace.size[0]))
        {
          emlrtDynamicBoundsCheckR2012b(c10_i27, 1,
            c10_b_obj->maxConstrWorkspace.size[0], &c10_mp_emlrtBCI, &c10_st);
        }

        c10_y_x = c10_b_obj->maxConstrWorkspace.data[c10_i27 - 1];
        c10_ab_x = c10_y_x;
        c10_bb_x = c10_ab_x;
        c10_d_varargin_2 = muDoubleScalarAbs(c10_bb_x);
        c10_db_x = c10_d_varargin_1;
        c10_r_y = c10_d_varargin_2;
        c10_fb_x = c10_db_x;
        c10_t_y = c10_r_y;
        c10_gb_x = c10_fb_x;
        c10_u_y = c10_t_y;
        c10_e_a = c10_gb_x;
        c10_v_b = c10_u_y;
        c10_hb_x = c10_e_a;
        c10_v_y = c10_v_b;
        c10_ib_x = c10_hb_x;
        c10_w_y = c10_v_y;
        c10_f_v = muDoubleScalarMax(c10_ib_x, c10_w_y);
      }
    }

    c10_e_v = c10_f_v;
  }

  if (c10_mLB > 0) {
    c10_ix0_start = c10_ix0;
    c10_st.site = &c10_eh_emlrtRSI;
    c10_b = c10_mLB;
    c10_e_b = c10_b;
    if (c10_e_b < 1) {
      c10_overflow = false;
    } else {
      c10_overflow = (c10_e_b > 2147483646);
    }

    if (c10_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_idx = 0; c10_idx < c10_mLB; c10_idx++) {
      c10_c_idx = c10_idx;
      c10_i6 = c10_b_obj->indexLB.size(0);
      c10_i7 = c10_c_idx + 1;
      if ((c10_i7 < 1) || (c10_i7 > c10_i6)) {
        emlrtDynamicBoundsCheckR2012b(c10_i7, 1, c10_i6, &c10_kp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_idxLB = c10_b_obj->indexLB[c10_i7 - 1];
      c10_varargin_1 = c10_e_v;
      c10_i14 = c10_x.size(0) * c10_x.size(1);
      c10_i17 = (c10_ix0_start + c10_idxLB) - 1;
      if ((c10_i17 < 1) || (c10_i17 > c10_i14)) {
        emlrtDynamicBoundsCheckR2012b(c10_i17, 1, c10_i14, &c10_kp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i21 = c10_b_obj->lb.size(0);
      if ((c10_idxLB < 1) || (c10_idxLB > c10_i21)) {
        emlrtDynamicBoundsCheckR2012b(c10_idxLB, 1, c10_i21, &c10_kp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_varargin_2 = -c10_x[c10_i17 - 1] - c10_b_obj->lb[c10_idxLB - 1];
      c10_e_x = c10_varargin_1;
      c10_b_y = c10_varargin_2;
      c10_g_x = c10_e_x;
      c10_d_y = c10_b_y;
      c10_o_x = c10_g_x;
      c10_f_y = c10_d_y;
      c10_b_a = c10_o_x;
      c10_s_b = c10_f_y;
      c10_s_x = c10_b_a;
      c10_i_y = c10_s_b;
      c10_v_x = c10_s_x;
      c10_m_y = c10_i_y;
      c10_e_v = muDoubleScalarMax(c10_v_x, c10_m_y);
    }
  }

  if (c10_mUB > 0) {
    c10_ix0_start = c10_ix0;
    c10_st.site = &c10_eh_emlrtRSI;
    c10_f_b = c10_mUB;
    c10_g_b = c10_f_b;
    if (c10_g_b < 1) {
      c10_b_overflow = false;
    } else {
      c10_b_overflow = (c10_g_b > 2147483646);
    }

    if (c10_b_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_b_idx = 0; c10_b_idx < c10_mUB; c10_b_idx++) {
      c10_c_idx = c10_b_idx;
      c10_i8 = c10_b_obj->indexUB.size(0);
      c10_i11 = c10_c_idx + 1;
      if ((c10_i11 < 1) || (c10_i11 > c10_i8)) {
        emlrtDynamicBoundsCheckR2012b(c10_i11, 1, c10_i8, &c10_kp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_idxUB = c10_b_obj->indexUB[c10_i11 - 1];
      c10_b_varargin_1 = c10_e_v;
      c10_i18 = c10_x.size(0) * c10_x.size(1);
      c10_i19 = (c10_ix0_start + c10_idxUB) - 1;
      if ((c10_i19 < 1) || (c10_i19 > c10_i18)) {
        emlrtDynamicBoundsCheckR2012b(c10_i19, 1, c10_i18, &c10_kp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i23 = c10_b_obj->ub.size(0);
      if ((c10_idxUB < 1) || (c10_idxUB > c10_i23)) {
        emlrtDynamicBoundsCheckR2012b(c10_idxUB, 1, c10_i23, &c10_kp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_varargin_2 = c10_x[c10_i19 - 1] - c10_b_obj->ub[c10_idxUB - 1];
      c10_f_x = c10_b_varargin_1;
      c10_c_y = c10_b_varargin_2;
      c10_m_x = c10_f_x;
      c10_e_y = c10_c_y;
      c10_q_x = c10_m_x;
      c10_g_y = c10_e_y;
      c10_c_a = c10_q_x;
      c10_t_b = c10_g_y;
      c10_u_x = c10_c_a;
      c10_k_y = c10_t_b;
      c10_x_x = c10_u_x;
      c10_p_y = c10_k_y;
      c10_e_v = muDoubleScalarMax(c10_x_x, c10_p_y);
    }
  }

  if (c10_mFixed > 0) {
    c10_ix0_start = c10_ix0;
    c10_st.site = &c10_eh_emlrtRSI;
    c10_h_b = c10_mFixed;
    c10_j_b = c10_h_b;
    if (c10_j_b < 1) {
      c10_c_overflow = false;
    } else {
      c10_c_overflow = (c10_j_b > 2147483646);
    }

    if (c10_c_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_d_idx = 0; c10_d_idx < c10_mFixed; c10_d_idx++) {
      c10_c_idx = c10_d_idx;
      c10_i12 = c10_b_obj->indexFixed.size(0);
      c10_i13 = c10_c_idx + 1;
      if ((c10_i13 < 1) || (c10_i13 > c10_i12)) {
        emlrtDynamicBoundsCheckR2012b(c10_i13, 1, c10_i12, &c10_kp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_idxFixed = c10_b_obj->indexFixed[c10_i13 - 1];
      c10_c_varargin_1 = c10_e_v;
      c10_i20 = c10_x.size(0) * c10_x.size(1);
      c10_i22 = (c10_ix0_start + c10_idxFixed) - 1;
      if ((c10_i22 < 1) || (c10_i22 > c10_i20)) {
        emlrtDynamicBoundsCheckR2012b(c10_i22, 1, c10_i20, &c10_kp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i24 = c10_b_obj->ub.size(0);
      if ((c10_idxFixed < 1) || (c10_idxFixed > c10_i24)) {
        emlrtDynamicBoundsCheckR2012b(c10_idxFixed, 1, c10_i24, &c10_kp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_j_x = c10_x[c10_i22 - 1] - c10_b_obj->ub[c10_idxFixed - 1];
      c10_k_x = c10_j_x;
      c10_p_x = c10_k_x;
      c10_c_varargin_2 = muDoubleScalarAbs(c10_p_x);
      c10_r_x = c10_c_varargin_1;
      c10_h_y = c10_c_varargin_2;
      c10_t_x = c10_r_x;
      c10_j_y = c10_h_y;
      c10_w_x = c10_t_x;
      c10_o_y = c10_j_y;
      c10_d_a = c10_w_x;
      c10_u_b = c10_o_y;
      c10_cb_x = c10_d_a;
      c10_q_y = c10_u_b;
      c10_eb_x = c10_cb_x;
      c10_s_y = c10_q_y;
      c10_e_v = muDoubleScalarMax(c10_eb_x, c10_s_y);
    }
  }

  return c10_e_v;
}

static void c10_g_xgemv(SFc10_ACCMPCInstanceStruct *chartInstance, int32_T c10_m,
  int32_T c10_f_n, coder::array<real_T, 1U> &c10_A, int32_T c10_lda, coder::
  array<real_T, 2U> &c10_x, int32_T c10_ix0, real_T c10_y_data[])
{
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_lda_t;
  ptrdiff_t c10_m_t;
  ptrdiff_t c10_n_t;
  real_T c10_alpha1;
  real_T c10_beta1;
  int32_T c10_b_ix0;
  int32_T c10_b_var;
  int32_T c10_c_ix0;
  int32_T c10_c_lda;
  int32_T c10_c_m;
  int32_T c10_c_var;
  int32_T c10_d_lda;
  int32_T c10_d_m;
  int32_T c10_h_n;
  int32_T c10_i_n;
  int32_T c10_var;
  char_T c10_TRANSA;
  if ((c10_m < 1) || (c10_f_n < 1)) {
  } else {
    c10_c_m = c10_m;
    c10_h_n = c10_f_n;
    c10_c_lda = c10_lda;
    c10_b_ix0 = c10_ix0;
    c10_d_m = c10_c_m;
    c10_i_n = c10_h_n;
    c10_alpha1 = 1.0;
    c10_d_lda = c10_c_lda;
    c10_c_ix0 = c10_b_ix0 - 1;
    c10_beta1 = -1.0;
    c10_TRANSA = 'T';
    c10_var = c10_d_m;
    c10_m_t = (ptrdiff_t)c10_var;
    c10_b_var = c10_i_n;
    c10_n_t = (ptrdiff_t)c10_b_var;
    c10_c_var = c10_d_lda;
    c10_lda_t = (ptrdiff_t)c10_c_var;
    c10_incx_t = (ptrdiff_t)1;
    c10_incy_t = (ptrdiff_t)1;
    dgemv(&c10_TRANSA, &c10_m_t, &c10_n_t, &c10_alpha1, &(c10_A.data())[0],
          &c10_lda_t, &c10_x[c10_c_ix0], &c10_incx_t, &c10_beta1, &c10_y_data[0],
          &c10_incy_t);
  }
}

static real_T c10_f_maxConstraintViolation(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_b_obj, coder::array<real_T, 1U> &c10_x)
{
  ptrdiff_t c10_b_incx_t;
  ptrdiff_t c10_b_incy_t;
  ptrdiff_t c10_b_n_t;
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 1U> c10_b_x;
  coder::array<real_T, 1U> c10_c_obj;
  coder::array<real_T, 1U> c10_c_x;
  coder::array<real_T, 1U> c10_d_obj;
  coder::array<real_T, 1U> c10_d_x;
  coder::array<real_T, 1U> c10_y;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  real_T c10_ab_x;
  real_T c10_ab_y;
  real_T c10_b_a;
  real_T c10_b_varargin_1;
  real_T c10_b_varargin_2;
  real_T c10_b_y;
  real_T c10_bb_x;
  real_T c10_bb_y;
  real_T c10_c_a;
  real_T c10_c_varargin_1;
  real_T c10_c_varargin_2;
  real_T c10_c_y;
  real_T c10_cb_x;
  real_T c10_cb_y;
  real_T c10_d_a;
  real_T c10_d_varargin_1;
  real_T c10_d_varargin_2;
  real_T c10_d_y;
  real_T c10_db_x;
  real_T c10_e_a;
  real_T c10_e_v;
  real_T c10_e_varargin_1;
  real_T c10_e_varargin_2;
  real_T c10_e_x;
  real_T c10_e_y;
  real_T c10_eb_x;
  real_T c10_f_a;
  real_T c10_f_v;
  real_T c10_f_x;
  real_T c10_f_y;
  real_T c10_fb_x;
  real_T c10_g_v;
  real_T c10_g_x;
  real_T c10_g_y;
  real_T c10_gb_x;
  real_T c10_h_y;
  real_T c10_hb_x;
  real_T c10_i_y;
  real_T c10_ib_x;
  real_T c10_j_x;
  real_T c10_j_y;
  real_T c10_jb_x;
  real_T c10_k_x;
  real_T c10_k_y;
  real_T c10_kb_x;
  real_T c10_m_x;
  real_T c10_m_y;
  real_T c10_mb_x;
  real_T c10_o_x;
  real_T c10_o_y;
  real_T c10_ob_x;
  real_T c10_p_x;
  real_T c10_p_y;
  real_T c10_pb_x;
  real_T c10_q_x;
  real_T c10_q_y;
  real_T c10_qb_x;
  real_T c10_r_x;
  real_T c10_r_y;
  real_T c10_rb_x;
  real_T c10_s_b;
  real_T c10_s_x;
  real_T c10_s_y;
  real_T c10_sb_x;
  real_T c10_t_b;
  real_T c10_t_x;
  real_T c10_t_y;
  real_T c10_u_b;
  real_T c10_u_x;
  real_T c10_u_y;
  real_T c10_v_b;
  real_T c10_v_x;
  real_T c10_v_y;
  real_T c10_varargin_1;
  real_T c10_varargin_2;
  real_T c10_w_b;
  real_T c10_w_x;
  real_T c10_w_y;
  real_T c10_x_x;
  real_T c10_x_y;
  real_T c10_y_x;
  real_T c10_y_y;
  int32_T c10_b;
  int32_T c10_b_idx;
  int32_T c10_b_loop_ub;
  int32_T c10_b_mEq;
  int32_T c10_b_var;
  int32_T c10_c_idx;
  int32_T c10_c_loop_ub;
  int32_T c10_d_idx;
  int32_T c10_d_loop_ub;
  int32_T c10_e_b;
  int32_T c10_e_idx;
  int32_T c10_e_loop_ub;
  int32_T c10_f_b;
  int32_T c10_f_idx;
  int32_T c10_f_loop_ub;
  int32_T c10_f_n;
  int32_T c10_g_b;
  int32_T c10_g_idx;
  int32_T c10_g_loop_ub;
  int32_T c10_h_b;
  int32_T c10_h_idx;
  int32_T c10_h_loop_ub;
  int32_T c10_h_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i19;
  int32_T c10_i2;
  int32_T c10_i20;
  int32_T c10_i21;
  int32_T c10_i22;
  int32_T c10_i23;
  int32_T c10_i24;
  int32_T c10_i25;
  int32_T c10_i26;
  int32_T c10_i27;
  int32_T c10_i28;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_i_loop_ub;
  int32_T c10_i_n;
  int32_T c10_idx;
  int32_T c10_idxFixed;
  int32_T c10_idxLB;
  int32_T c10_idxUB;
  int32_T c10_j_b;
  int32_T c10_j_loop_ub;
  int32_T c10_j_n;
  int32_T c10_k_b;
  int32_T c10_k_n;
  int32_T c10_loop_ub;
  int32_T c10_mEq;
  int32_T c10_mFixed;
  int32_T c10_mLB;
  int32_T c10_mUB;
  int32_T c10_m_n;
  int32_T c10_o_b;
  int32_T c10_offsetEq1;
  int32_T c10_offsetEq2;
  int32_T c10_p_b;
  int32_T c10_q_b;
  int32_T c10_var;
  boolean_T c10_b_overflow;
  boolean_T c10_c_overflow;
  boolean_T c10_d_overflow;
  boolean_T c10_e_overflow;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_mLB = c10_b_obj->sizes[3];
  c10_mUB = c10_b_obj->sizes[4];
  c10_mFixed = c10_b_obj->sizes[0];
  if (c10_b_obj->probType == 2) {
    c10_st.site = &c10_eh_emlrtRSI;
    c10_g_v = 0.0;
    c10_b_mEq = c10_b_obj->sizes[1];
    if (c10_b_obj->Aeq.size(0) != 0) {
      c10_b_st.site = &c10_fh_emlrtRSI;
      c10_h_n = c10_b_mEq;
      c10_b_x.set_size(&c10_jh_emlrtRTEI, &c10_b_st, c10_b_obj->beq.size[0]);
      c10_b_loop_ub = c10_b_obj->beq.size[0] - 1;
      for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
        c10_b_x[c10_i1] = c10_b_obj->beq.data[c10_i1];
      }

      c10_y.set_size(&c10_jh_emlrtRTEI, &c10_b_st,
                     c10_b_obj->maxConstrWorkspace.size[0]);
      c10_d_loop_ub = c10_b_obj->maxConstrWorkspace.size[0] - 1;
      for (c10_i3 = 0; c10_i3 <= c10_d_loop_ub; c10_i3++) {
        c10_y[c10_i3] = c10_b_obj->maxConstrWorkspace.data[c10_i3];
      }

      if (!(c10_h_n < 1)) {
        c10_c_st.site = &c10_ad_emlrtRSI;
        c10_j_n = c10_h_n;
        c10_m_n = c10_j_n;
        c10_b_var = c10_m_n;
        c10_b_n_t = (ptrdiff_t)c10_b_var;
        c10_b_incx_t = (ptrdiff_t)1;
        c10_b_incy_t = (ptrdiff_t)1;
        dcopy(&c10_b_n_t, &(c10_b_x.data())[0], &c10_b_incx_t, &(c10_y.data())[0],
              &c10_b_incy_t);
      }

      c10_b_obj->maxConstrWorkspace.size[0] = c10_y.size(0);
      c10_f_loop_ub = c10_y.size(0) - 1;
      for (c10_i5 = 0; c10_i5 <= c10_f_loop_ub; c10_i5++) {
        c10_b_obj->maxConstrWorkspace.data[c10_i5] = c10_y[c10_i5];
      }

      c10_d_obj.set_size(&c10_jh_emlrtRTEI, &c10_st, c10_b_obj->Aeq.size(0));
      c10_h_loop_ub = c10_b_obj->Aeq.size(0) - 1;
      for (c10_i11 = 0; c10_i11 <= c10_h_loop_ub; c10_i11++) {
        c10_d_obj[c10_i11] = c10_b_obj->Aeq[c10_i11];
      }

      c10_d_x.set_size(&c10_jh_emlrtRTEI, &c10_st, c10_x.size(0));
      c10_j_loop_ub = c10_x.size(0) - 1;
      for (c10_i16 = 0; c10_i16 <= c10_j_loop_ub; c10_i16++) {
        c10_d_x[c10_i16] = c10_x[c10_i16];
      }

      c10_b_st.site = &c10_fh_emlrtRSI;
      c10_h_xgemv(chartInstance, c10_b_obj->nVarOrig, c10_b_mEq, c10_d_obj,
                  c10_b_obj->ldA, c10_d_x, c10_b_obj->maxConstrWorkspace.data);
      c10_offsetEq1 = c10_b_obj->nVarOrig;
      c10_offsetEq2 = c10_offsetEq1 + c10_b_mEq;
      c10_b_st.site = &c10_fh_emlrtRSI;
      c10_p_b = c10_b_mEq;
      c10_q_b = c10_p_b;
      if (c10_q_b < 1) {
        c10_e_overflow = false;
      } else {
        c10_e_overflow = (c10_q_b > 2147483646);
      }

      if (c10_e_overflow) {
        c10_c_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
      }

      c10_i23 = static_cast<uint16_T>(c10_b_mEq) - 1;
      for (c10_g_idx = 0; c10_g_idx <= c10_i23; c10_g_idx++) {
        c10_h_idx = c10_g_idx + 1;
        if ((c10_h_idx < 1) || (c10_h_idx > c10_b_obj->maxConstrWorkspace.size[0]))
        {
          emlrtDynamicBoundsCheckR2012b(c10_h_idx, 1,
            c10_b_obj->maxConstrWorkspace.size[0], &c10_op_emlrtBCI, &c10_st);
        }

        c10_i25 = c10_x.size(0);
        c10_i26 = c10_offsetEq1 + c10_h_idx;
        if ((c10_i26 < 1) || (c10_i26 > c10_i25)) {
          emlrtDynamicBoundsCheckR2012b(c10_i26, 1, c10_i25, &c10_op_emlrtBCI,
            &c10_st);
        }

        c10_i27 = c10_x.size(0);
        c10_i28 = c10_offsetEq2 + c10_h_idx;
        if ((c10_i28 < 1) || (c10_i28 > c10_i27)) {
          emlrtDynamicBoundsCheckR2012b(c10_i28, 1, c10_i27, &c10_op_emlrtBCI,
            &c10_st);
        }

        if ((c10_h_idx < 1) || (c10_h_idx > c10_b_obj->maxConstrWorkspace.size[0]))
        {
          emlrtDynamicBoundsCheckR2012b(c10_h_idx, 1,
            c10_b_obj->maxConstrWorkspace.size[0], &c10_op_emlrtBCI, &c10_st);
        }

        c10_b_obj->maxConstrWorkspace.data[c10_h_idx - 1] =
          (c10_b_obj->maxConstrWorkspace.data[c10_h_idx - 1] - c10_x[c10_i26 - 1])
          + c10_x[c10_i28 - 1];
        c10_e_varargin_1 = c10_g_v;
        if ((c10_h_idx < 1) || (c10_h_idx > c10_b_obj->maxConstrWorkspace.size[0]))
        {
          emlrtDynamicBoundsCheckR2012b(c10_h_idx, 1,
            c10_b_obj->maxConstrWorkspace.size[0], &c10_op_emlrtBCI, &c10_st);
        }

        c10_jb_x = c10_b_obj->maxConstrWorkspace.data[c10_h_idx - 1];
        c10_kb_x = c10_jb_x;
        c10_mb_x = c10_kb_x;
        c10_e_varargin_2 = muDoubleScalarAbs(c10_mb_x);
        c10_ob_x = c10_e_varargin_1;
        c10_x_y = c10_e_varargin_2;
        c10_pb_x = c10_ob_x;
        c10_y_y = c10_x_y;
        c10_qb_x = c10_pb_x;
        c10_ab_y = c10_y_y;
        c10_f_a = c10_qb_x;
        c10_w_b = c10_ab_y;
        c10_rb_x = c10_f_a;
        c10_bb_y = c10_w_b;
        c10_sb_x = c10_rb_x;
        c10_cb_y = c10_bb_y;
        c10_g_v = muDoubleScalarMax(c10_sb_x, c10_cb_y);
      }
    }

    c10_e_v = c10_g_v;
  } else {
    c10_st.site = &c10_eh_emlrtRSI;
    c10_f_v = 0.0;
    c10_mEq = c10_b_obj->sizes[1];
    if (c10_b_obj->Aeq.size(0) != 0) {
      c10_b_st.site = &c10_hh_emlrtRSI;
      c10_f_n = c10_mEq;
      c10_b_x.set_size(&c10_ih_emlrtRTEI, &c10_b_st, c10_b_obj->beq.size[0]);
      c10_loop_ub = c10_b_obj->beq.size[0] - 1;
      for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
        c10_b_x[c10_i] = c10_b_obj->beq.data[c10_i];
      }

      c10_y.set_size(&c10_ih_emlrtRTEI, &c10_b_st,
                     c10_b_obj->maxConstrWorkspace.size[0]);
      c10_c_loop_ub = c10_b_obj->maxConstrWorkspace.size[0] - 1;
      for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
        c10_y[c10_i2] = c10_b_obj->maxConstrWorkspace.data[c10_i2];
      }

      if (!(c10_f_n < 1)) {
        c10_c_st.site = &c10_ad_emlrtRSI;
        c10_i_n = c10_f_n;
        c10_k_n = c10_i_n;
        c10_var = c10_k_n;
        c10_n_t = (ptrdiff_t)c10_var;
        c10_incx_t = (ptrdiff_t)1;
        c10_incy_t = (ptrdiff_t)1;
        dcopy(&c10_n_t, &(c10_b_x.data())[0], &c10_incx_t, &(c10_y.data())[0],
              &c10_incy_t);
      }

      c10_b_obj->maxConstrWorkspace.size[0] = c10_y.size(0);
      c10_e_loop_ub = c10_y.size(0) - 1;
      for (c10_i4 = 0; c10_i4 <= c10_e_loop_ub; c10_i4++) {
        c10_b_obj->maxConstrWorkspace.data[c10_i4] = c10_y[c10_i4];
      }

      c10_c_obj.set_size(&c10_ih_emlrtRTEI, &c10_st, c10_b_obj->Aeq.size(0));
      c10_g_loop_ub = c10_b_obj->Aeq.size(0) - 1;
      for (c10_i10 = 0; c10_i10 <= c10_g_loop_ub; c10_i10++) {
        c10_c_obj[c10_i10] = c10_b_obj->Aeq[c10_i10];
      }

      c10_c_x.set_size(&c10_ih_emlrtRTEI, &c10_st, c10_x.size(0));
      c10_i_loop_ub = c10_x.size(0) - 1;
      for (c10_i15 = 0; c10_i15 <= c10_i_loop_ub; c10_i15++) {
        c10_c_x[c10_i15] = c10_x[c10_i15];
      }

      c10_b_st.site = &c10_hh_emlrtRSI;
      c10_h_xgemv(chartInstance, c10_b_obj->nVar, c10_mEq, c10_c_obj,
                  c10_b_obj->ldA, c10_c_x, c10_b_obj->maxConstrWorkspace.data);
      c10_b_st.site = &c10_hh_emlrtRSI;
      c10_k_b = c10_mEq;
      c10_o_b = c10_k_b;
      if (c10_o_b < 1) {
        c10_d_overflow = false;
      } else {
        c10_d_overflow = (c10_o_b > 2147483646);
      }

      if (c10_d_overflow) {
        c10_c_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
      }

      c10_i22 = static_cast<uint16_T>(c10_mEq) - 1;
      for (c10_e_idx = 0; c10_e_idx <= c10_i22; c10_e_idx++) {
        c10_f_idx = c10_e_idx;
        c10_d_varargin_1 = c10_f_v;
        c10_i24 = c10_f_idx + 1;
        if ((c10_i24 < 1) || (c10_i24 > c10_b_obj->maxConstrWorkspace.size[0]))
        {
          emlrtDynamicBoundsCheckR2012b(c10_i24, 1,
            c10_b_obj->maxConstrWorkspace.size[0], &c10_mp_emlrtBCI, &c10_st);
        }

        c10_y_x = c10_b_obj->maxConstrWorkspace.data[c10_i24 - 1];
        c10_bb_x = c10_y_x;
        c10_cb_x = c10_bb_x;
        c10_d_varargin_2 = muDoubleScalarAbs(c10_cb_x);
        c10_eb_x = c10_d_varargin_1;
        c10_s_y = c10_d_varargin_2;
        c10_fb_x = c10_eb_x;
        c10_t_y = c10_s_y;
        c10_gb_x = c10_fb_x;
        c10_u_y = c10_t_y;
        c10_e_a = c10_gb_x;
        c10_v_b = c10_u_y;
        c10_hb_x = c10_e_a;
        c10_v_y = c10_v_b;
        c10_ib_x = c10_hb_x;
        c10_w_y = c10_v_y;
        c10_f_v = muDoubleScalarMax(c10_ib_x, c10_w_y);
      }
    }

    c10_e_v = c10_f_v;
  }

  if (c10_mLB > 0) {
    c10_st.site = &c10_eh_emlrtRSI;
    c10_b = c10_mLB;
    c10_e_b = c10_b;
    if (c10_e_b < 1) {
      c10_overflow = false;
    } else {
      c10_overflow = (c10_e_b > 2147483646);
    }

    if (c10_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_idx = 0; c10_idx < c10_mLB; c10_idx++) {
      c10_c_idx = c10_idx;
      c10_i6 = c10_b_obj->indexLB.size(0);
      c10_i7 = c10_c_idx + 1;
      if ((c10_i7 < 1) || (c10_i7 > c10_i6)) {
        emlrtDynamicBoundsCheckR2012b(c10_i7, 1, c10_i6, &c10_kp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_idxLB = c10_b_obj->indexLB[c10_i7 - 1];
      c10_varargin_1 = c10_e_v;
      c10_i14 = c10_x.size(0);
      if ((c10_idxLB < 1) || (c10_idxLB > c10_i14)) {
        emlrtDynamicBoundsCheckR2012b(c10_idxLB, 1, c10_i14, &c10_kp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i18 = c10_b_obj->lb.size(0);
      if ((c10_idxLB < 1) || (c10_idxLB > c10_i18)) {
        emlrtDynamicBoundsCheckR2012b(c10_idxLB, 1, c10_i18, &c10_kp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_varargin_2 = -c10_x[c10_idxLB - 1] - c10_b_obj->lb[c10_idxLB - 1];
      c10_e_x = c10_varargin_1;
      c10_b_y = c10_varargin_2;
      c10_g_x = c10_e_x;
      c10_d_y = c10_b_y;
      c10_o_x = c10_g_x;
      c10_f_y = c10_d_y;
      c10_b_a = c10_o_x;
      c10_s_b = c10_f_y;
      c10_s_x = c10_b_a;
      c10_i_y = c10_s_b;
      c10_v_x = c10_s_x;
      c10_m_y = c10_i_y;
      c10_e_v = muDoubleScalarMax(c10_v_x, c10_m_y);
    }
  }

  if (c10_mUB > 0) {
    c10_st.site = &c10_eh_emlrtRSI;
    c10_f_b = c10_mUB;
    c10_g_b = c10_f_b;
    if (c10_g_b < 1) {
      c10_b_overflow = false;
    } else {
      c10_b_overflow = (c10_g_b > 2147483646);
    }

    if (c10_b_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_b_idx = 0; c10_b_idx < c10_mUB; c10_b_idx++) {
      c10_c_idx = c10_b_idx;
      c10_i8 = c10_b_obj->indexUB.size(0);
      c10_i9 = c10_c_idx + 1;
      if ((c10_i9 < 1) || (c10_i9 > c10_i8)) {
        emlrtDynamicBoundsCheckR2012b(c10_i9, 1, c10_i8, &c10_kp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_idxUB = c10_b_obj->indexUB[c10_i9 - 1];
      c10_b_varargin_1 = c10_e_v;
      c10_i17 = c10_x.size(0);
      if ((c10_idxUB < 1) || (c10_idxUB > c10_i17)) {
        emlrtDynamicBoundsCheckR2012b(c10_idxUB, 1, c10_i17, &c10_kp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i20 = c10_b_obj->ub.size(0);
      if ((c10_idxUB < 1) || (c10_idxUB > c10_i20)) {
        emlrtDynamicBoundsCheckR2012b(c10_idxUB, 1, c10_i20, &c10_kp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_varargin_2 = c10_x[c10_idxUB - 1] - c10_b_obj->ub[c10_idxUB - 1];
      c10_f_x = c10_b_varargin_1;
      c10_c_y = c10_b_varargin_2;
      c10_m_x = c10_f_x;
      c10_e_y = c10_c_y;
      c10_q_x = c10_m_x;
      c10_g_y = c10_e_y;
      c10_c_a = c10_q_x;
      c10_t_b = c10_g_y;
      c10_u_x = c10_c_a;
      c10_k_y = c10_t_b;
      c10_x_x = c10_u_x;
      c10_p_y = c10_k_y;
      c10_e_v = muDoubleScalarMax(c10_x_x, c10_p_y);
    }
  }

  if (c10_mFixed > 0) {
    c10_st.site = &c10_eh_emlrtRSI;
    c10_h_b = c10_mFixed;
    c10_j_b = c10_h_b;
    if (c10_j_b < 1) {
      c10_c_overflow = false;
    } else {
      c10_c_overflow = (c10_j_b > 2147483646);
    }

    if (c10_c_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_d_idx = 0; c10_d_idx < c10_mFixed; c10_d_idx++) {
      c10_c_idx = c10_d_idx;
      c10_i12 = c10_b_obj->indexFixed.size(0);
      c10_i13 = c10_c_idx + 1;
      if ((c10_i13 < 1) || (c10_i13 > c10_i12)) {
        emlrtDynamicBoundsCheckR2012b(c10_i13, 1, c10_i12, &c10_kp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_idxFixed = c10_b_obj->indexFixed[c10_i13 - 1];
      c10_c_varargin_1 = c10_e_v;
      c10_i19 = c10_x.size(0);
      if ((c10_idxFixed < 1) || (c10_idxFixed > c10_i19)) {
        emlrtDynamicBoundsCheckR2012b(c10_idxFixed, 1, c10_i19, &c10_kp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i21 = c10_b_obj->ub.size(0);
      if ((c10_idxFixed < 1) || (c10_idxFixed > c10_i21)) {
        emlrtDynamicBoundsCheckR2012b(c10_idxFixed, 1, c10_i21, &c10_kp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_j_x = c10_x[c10_idxFixed - 1] - c10_b_obj->ub[c10_idxFixed - 1];
      c10_k_x = c10_j_x;
      c10_p_x = c10_k_x;
      c10_c_varargin_2 = muDoubleScalarAbs(c10_p_x);
      c10_r_x = c10_c_varargin_1;
      c10_h_y = c10_c_varargin_2;
      c10_t_x = c10_r_x;
      c10_j_y = c10_h_y;
      c10_w_x = c10_t_x;
      c10_o_y = c10_j_y;
      c10_d_a = c10_w_x;
      c10_u_b = c10_o_y;
      c10_ab_x = c10_d_a;
      c10_q_y = c10_u_b;
      c10_db_x = c10_ab_x;
      c10_r_y = c10_q_y;
      c10_e_v = muDoubleScalarMax(c10_db_x, c10_r_y);
    }
  }

  return c10_e_v;
}

static void c10_h_xgemv(SFc10_ACCMPCInstanceStruct *chartInstance, int32_T c10_m,
  int32_T c10_f_n, coder::array<real_T, 1U> &c10_A, int32_T c10_lda, coder::
  array<real_T, 1U> &c10_x, real_T c10_y_data[])
{
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_lda_t;
  ptrdiff_t c10_m_t;
  ptrdiff_t c10_n_t;
  real_T c10_alpha1;
  real_T c10_beta1;
  int32_T c10_b_var;
  int32_T c10_c_lda;
  int32_T c10_c_m;
  int32_T c10_c_var;
  int32_T c10_d_lda;
  int32_T c10_d_m;
  int32_T c10_h_n;
  int32_T c10_i_n;
  int32_T c10_var;
  char_T c10_TRANSA;
  if ((c10_m < 1) || (c10_f_n < 1)) {
  } else {
    c10_c_m = c10_m;
    c10_h_n = c10_f_n;
    c10_c_lda = c10_lda;
    c10_d_m = c10_c_m;
    c10_i_n = c10_h_n;
    c10_alpha1 = 1.0;
    c10_d_lda = c10_c_lda;
    c10_beta1 = -1.0;
    c10_TRANSA = 'T';
    c10_var = c10_d_m;
    c10_m_t = (ptrdiff_t)c10_var;
    c10_b_var = c10_i_n;
    c10_n_t = (ptrdiff_t)c10_b_var;
    c10_c_var = c10_d_lda;
    c10_lda_t = (ptrdiff_t)c10_c_var;
    c10_incx_t = (ptrdiff_t)1;
    c10_incy_t = (ptrdiff_t)1;
    dgemv(&c10_TRANSA, &c10_m_t, &c10_n_t, &c10_alpha1, &(c10_A.data())[0],
          &c10_lda_t, &(c10_x.data())[0], &c10_incx_t, &c10_beta1, &c10_y_data[0],
          &c10_incy_t);
  }
}

static void c10_b_removeAllIneqConstr(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL *c10_b_obj)
{
  emlrtStack c10_b_st;
  emlrtStack c10_st;
  int32_T c10_TYPE;
  int32_T c10_b;
  int32_T c10_b_a;
  int32_T c10_c_a;
  int32_T c10_e_b;
  int32_T c10_idxConstr;
  int32_T c10_idxEndIneq;
  int32_T c10_idxStartIneq;
  int32_T c10_idx_global;
  int32_T c10_idx_local;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_idxStartIneq = (c10_b_obj->nWConstr[0] + c10_b_obj->nWConstr[1]) + 1;
  c10_idxEndIneq = c10_b_obj->nActiveConstr;
  c10_st.site = &c10_ih_emlrtRSI;
  c10_b_a = c10_idxStartIneq;
  c10_b = c10_idxEndIneq;
  c10_c_a = c10_b_a;
  c10_e_b = c10_b;
  if (c10_c_a > c10_e_b) {
    c10_overflow = false;
  } else {
    c10_overflow = (c10_e_b > 2147483646);
  }

  if (c10_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  for (c10_idx_global = c10_idxStartIneq; c10_idx_global <= c10_idxEndIneq;
       c10_idx_global++) {
    if ((c10_idx_global < 1) || (c10_idx_global > c10_b_obj->Wid.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_idx_global, 1, c10_b_obj->Wid.size[0],
        &c10_pp_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_TYPE = c10_b_obj->Wid.data[c10_idx_global - 1];
    if ((c10_idx_global < 1) || (c10_idx_global > c10_b_obj->Wlocalidx.size[0]))
    {
      emlrtDynamicBoundsCheckR2012b(c10_idx_global, 1, c10_b_obj->
        Wlocalidx.size[0], &c10_pp_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_idx_local = c10_b_obj->Wlocalidx.data[c10_idx_global - 1] - 1;
    if ((c10_TYPE < 1) || (c10_TYPE > 6)) {
      emlrtDynamicBoundsCheckR2012b(c10_TYPE, 1, 6, &c10_qp_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_idxConstr = c10_b_obj->isActiveIdx[c10_TYPE - 1] + c10_idx_local;
    if ((c10_idxConstr < 1) || (c10_idxConstr > c10_b_obj->isActiveConstr.size[0]))
    {
      emlrtDynamicBoundsCheckR2012b(c10_idxConstr, 1,
        c10_b_obj->isActiveConstr.size[0], &c10_pp_emlrtBCI, (emlrtConstCTX)
        c10_sp);
    }

    c10_b_obj->isActiveConstr.data[c10_idxConstr - 1] = false;
  }

  c10_b_obj->nWConstr[2] = 0;
  c10_b_obj->nWConstr[3] = 0;
  c10_b_obj->nWConstr[4] = 0;
  c10_b_obj->nActiveConstr = c10_b_obj->nWConstr[0] + c10_b_obj->nWConstr[1];
}

static void c10_b_phaseone(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_c_H, coder::array<real_T, 1U>
  &c10_f, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_memspace, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_i_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager,
  c10_s_lryvQQZbN23ozlLWy4I3pD *c10_cholmanager, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_objective, c10_scZhlMkNxPxOgM0FLkVrfPH *c10_b_options,
  c10_sL9bDKomAYkxZSVrG9w6En *c10_runTimeOptions)
{
  coder::array<real_T, 2U> c10_b_r;
  coder::array<real_T, 2U> c10_d_H;
  coder::array<real_T, 2U> c10_e_H;
  coder::array<real_T, 1U> c10_b_f;
  coder::array<real_T, 1U> c10_b_solution;
  coder::array<real_T, 1U> c10_c_f;
  c10_scZhlMkNxPxOgM0FLkVrfPH c10_c_options;
  emlrtStack c10_b_st;
  emlrtStack c10_st;
  real_T c10_d;
  int32_T c10_NumVars;
  int32_T c10_PROBTYPE_ORIG;
  int32_T c10_TYPE;
  int32_T c10_b;
  int32_T c10_b_TYPE;
  int32_T c10_b_a;
  int32_T c10_b_idxConstr;
  int32_T c10_b_idx_global;
  int32_T c10_b_idx_local;
  int32_T c10_b_loop_ub;
  int32_T c10_c_PHASEONE;
  int32_T c10_c_a;
  int32_T c10_c_idxConstr;
  int32_T c10_c_idx_local;
  int32_T c10_c_loop_ub;
  int32_T c10_d_loop_ub;
  int32_T c10_e_b;
  int32_T c10_e_loop_ub;
  int32_T c10_f_loop_ub;
  int32_T c10_g_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_idx;
  int32_T c10_idxConstr;
  int32_T c10_idx_global;
  int32_T c10_idx_local;
  int32_T c10_loop_ub;
  int32_T c10_mConstr;
  int32_T c10_mEqFixed;
  int32_T c10_nVar;
  int32_T c10_nVarP1;
  int32_T c10_startIdx;
  boolean_T c10_exitg1;
  boolean_T c10_overflow;
  boolean_T c10_tf;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  chartInstance->c10_obj = *c10_i_workingset;
  c10_PROBTYPE_ORIG = chartInstance->c10_obj.probType;
  c10_nVar = c10_i_workingset->nVar;
  c10_nVarP1 = c10_i_workingset->nVar + 1;
  c10_i = c10_solution->xstar.size(0);
  if ((c10_nVarP1 < 1) || (c10_nVarP1 > c10_i)) {
    emlrtDynamicBoundsCheckR2012b(c10_nVarP1, 1, c10_i, &c10_rp_emlrtBCI,
      (emlrtConstCTX)c10_sp);
  }

  c10_solution->xstar[c10_nVarP1 - 1] = c10_solution->maxConstr + 1.0;
  if (c10_PROBTYPE_ORIG == 3) {
    c10_c_PHASEONE = 1;
  } else {
    c10_c_PHASEONE = 4;
  }

  c10_st.site = &c10_jh_emlrtRSI;
  c10_b_setProblemType(chartInstance, &c10_st, c10_i_workingset, c10_c_PHASEONE);
  c10_st.site = &c10_jh_emlrtRSI;
  c10_b_removeAllIneqConstr(chartInstance, &c10_st, c10_i_workingset);
  c10_NumVars = c10_nVarP1;
  c10_objective->prev_objtype = c10_objective->objtype;
  c10_objective->prev_nvar = c10_objective->nvar;
  c10_objective->prev_hasLinear = c10_objective->hasLinear;
  c10_objective->objtype = 5;
  c10_objective->nvar = c10_NumVars;
  c10_objective->gammaScalar = 1.0;
  c10_objective->hasLinear = true;
  c10_b_options->ObjectiveLimit = 1.0E-8 *
    c10_runTimeOptions->ConstrRelTolFactor;
  c10_b_options->StepTolerance = 1.4901161193847657E-10;
  c10_b_r.set_size(&c10_ag_emlrtRTEI, c10_sp,
                   c10_memspace->workspace_double.size(0),
                   c10_memspace->workspace_double.size(1));
  c10_loop_ub = c10_memspace->workspace_double.size(0) *
    c10_memspace->workspace_double.size(1) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_loop_ub; c10_i1++) {
    c10_b_r[c10_i1] = c10_memspace->workspace_double[c10_i1];
  }

  c10_d_H.set_size(&c10_ag_emlrtRTEI, c10_sp, c10_c_H.size(0), c10_c_H.size(1));
  c10_b_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
  for (c10_i2 = 0; c10_i2 <= c10_b_loop_ub; c10_i2++) {
    c10_d_H[c10_i2] = c10_c_H[c10_i2];
  }

  c10_b_f.set_size(&c10_ag_emlrtRTEI, c10_sp, c10_f.size(0));
  c10_c_loop_ub = c10_f.size(0) - 1;
  for (c10_i3 = 0; c10_i3 <= c10_c_loop_ub; c10_i3++) {
    c10_b_f[c10_i3] = c10_f[c10_i3];
  }

  c10_b_solution.set_size(&c10_ag_emlrtRTEI, c10_sp, c10_solution->xstar.size(0));
  c10_d_loop_ub = c10_solution->xstar.size(0) - 1;
  for (c10_i4 = 0; c10_i4 <= c10_d_loop_ub; c10_i4++) {
    c10_b_solution[c10_i4] = c10_solution->xstar[c10_i4];
  }

  c10_st.site = &c10_jh_emlrtRSI;
  c10_d = c10_b_computeFval(chartInstance, &c10_st, c10_objective, c10_b_r,
    c10_d_H, c10_b_f, c10_b_solution);
  c10_solution->fstar = c10_d;
  c10_memspace->workspace_double.set_size(&c10_ag_emlrtRTEI, c10_sp,
    c10_b_r.size(0), c10_b_r.size(1));
  c10_e_loop_ub = c10_b_r.size(0) * c10_b_r.size(1) - 1;
  for (c10_i5 = 0; c10_i5 <= c10_e_loop_ub; c10_i5++) {
    c10_memspace->workspace_double[c10_i5] = c10_b_r[c10_i5];
  }

  c10_solution->state = 5;
  c10_e_H.set_size(&c10_ag_emlrtRTEI, c10_sp, c10_c_H.size(0), c10_c_H.size(1));
  c10_f_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
  for (c10_i6 = 0; c10_i6 <= c10_f_loop_ub; c10_i6++) {
    c10_e_H[c10_i6] = c10_c_H[c10_i6];
  }

  c10_c_f.set_size(&c10_ag_emlrtRTEI, c10_sp, c10_f.size(0));
  c10_g_loop_ub = c10_f.size(0) - 1;
  for (c10_i7 = 0; c10_i7 <= c10_g_loop_ub; c10_i7++) {
    c10_c_f[c10_i7] = c10_f[c10_i7];
  }

  c10_st.site = &c10_jh_emlrtRSI;
  c10_c_options = *c10_b_options;
  c10_b_iterate(chartInstance, &c10_st, c10_e_H, c10_c_f, c10_solution,
                c10_memspace, c10_i_workingset, c10_b_qrmanager, c10_cholmanager,
                c10_objective, &c10_c_options, *c10_runTimeOptions);
  c10_startIdx = (c10_i_workingset->sizes[0] + c10_i_workingset->sizes[1]) + 1;
  c10_st.site = &c10_jh_emlrtRSI;
  chartInstance->c10_obj = *c10_i_workingset;
  c10_idx_local = c10_i_workingset->sizes[3] - 1;
  c10_idxConstr = chartInstance->c10_obj.isActiveIdx[3] + c10_idx_local;
  if ((c10_idxConstr < 1) || (c10_idxConstr >
       chartInstance->c10_obj.isActiveConstr.size[0])) {
    emlrtDynamicBoundsCheckR2012b(c10_idxConstr, 1,
      chartInstance->c10_obj.isActiveConstr.size[0], &c10_sp_emlrtBCI, &c10_st);
  }

  c10_tf = chartInstance->c10_obj.isActiveConstr.data[c10_idxConstr - 1];
  if (c10_tf) {
    c10_i8 = c10_i_workingset->nActiveConstr;
    c10_st.site = &c10_jh_emlrtRSI;
    c10_b_a = c10_startIdx;
    c10_b = c10_i8;
    c10_c_a = c10_b_a;
    c10_e_b = c10_b;
    if (c10_c_a > c10_e_b) {
      c10_overflow = false;
    } else {
      c10_overflow = (c10_e_b > 2147483646);
    }

    if (c10_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    c10_idx = c10_startIdx;
    c10_exitg1 = false;
    while ((!c10_exitg1) && (c10_idx <= c10_i8)) {
      if ((c10_idx < 1) || (c10_idx > c10_i_workingset->Wid.size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_idx, 1, c10_i_workingset->Wid.size[0],
          &c10_rp_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      if (c10_i_workingset->Wid.data[c10_idx - 1] == 4) {
        if ((c10_idx < 1) || (c10_idx > c10_i_workingset->Wlocalidx.size[0])) {
          emlrtDynamicBoundsCheckR2012b(c10_idx, 1,
            c10_i_workingset->Wlocalidx.size[0], &c10_rp_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        if (c10_i_workingset->Wlocalidx.data[c10_idx - 1] ==
            c10_i_workingset->sizes[3]) {
          c10_st.site = &c10_jh_emlrtRSI;
          c10_b_idx_global = c10_idx;
          if ((c10_b_idx_global < 1) || (c10_b_idx_global >
               c10_i_workingset->Wid.size[0])) {
            emlrtDynamicBoundsCheckR2012b(c10_b_idx_global, 1,
              c10_i_workingset->Wid.size[0], &c10_wo_emlrtBCI, &c10_st);
          }

          c10_b_TYPE = c10_i_workingset->Wid.data[c10_b_idx_global - 1];
          if ((c10_b_idx_global < 1) || (c10_b_idx_global >
               c10_i_workingset->Wlocalidx.size[0])) {
            emlrtDynamicBoundsCheckR2012b(c10_b_idx_global, 1,
              c10_i_workingset->Wlocalidx.size[0], &c10_wo_emlrtBCI, &c10_st);
          }

          c10_c_idx_local = c10_i_workingset->Wlocalidx.data[c10_b_idx_global -
            1] - 1;
          if ((c10_b_TYPE < 1) || (c10_b_TYPE > 6)) {
            emlrtDynamicBoundsCheckR2012b(c10_b_TYPE, 1, 6, &c10_xo_emlrtBCI,
              &c10_st);
          }

          c10_c_idxConstr = c10_i_workingset->isActiveIdx[c10_b_TYPE - 1] +
            c10_c_idx_local;
          if ((c10_c_idxConstr < 1) || (c10_c_idxConstr >
               c10_i_workingset->isActiveConstr.size[0])) {
            emlrtDynamicBoundsCheckR2012b(c10_c_idxConstr, 1,
              c10_i_workingset->isActiveConstr.size[0], &c10_wo_emlrtBCI,
              &c10_st);
          }

          c10_i_workingset->isActiveConstr.data[c10_c_idxConstr - 1] = false;
          c10_i11 = c10_i_workingset->nActiveConstr;
          c10_b_st.site = &c10_gg_emlrtRSI;
          c10_b_moveConstraint_(chartInstance, &c10_b_st, c10_i_workingset,
                                c10_i11, c10_b_idx_global);
          c10_i_workingset->nActiveConstr--;
          if ((c10_b_TYPE < 1) || (c10_b_TYPE > 5)) {
            emlrtDynamicBoundsCheckR2012b(c10_b_TYPE, 1, 5, &c10_yo_emlrtBCI,
              &c10_st);
          }

          c10_i_workingset->nWConstr[c10_b_TYPE - 1]--;
          c10_exitg1 = true;
        } else {
          c10_idx++;
        }
      } else {
        c10_idx++;
      }
    }
  }

  c10_mConstr = c10_i_workingset->nActiveConstr;
  c10_mEqFixed = c10_i_workingset->sizes[0] + c10_i_workingset->sizes[1];
  while ((c10_mConstr > c10_mEqFixed) && (c10_mConstr > c10_nVar)) {
    c10_st.site = &c10_jh_emlrtRSI;
    c10_idx_global = c10_mConstr;
    if ((c10_idx_global < 1) || (c10_idx_global > c10_i_workingset->Wid.size[0]))
    {
      emlrtDynamicBoundsCheckR2012b(c10_idx_global, 1,
        c10_i_workingset->Wid.size[0], &c10_wo_emlrtBCI, &c10_st);
    }

    c10_TYPE = c10_i_workingset->Wid.data[c10_idx_global - 1];
    if ((c10_idx_global < 1) || (c10_idx_global >
         c10_i_workingset->Wlocalidx.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_idx_global, 1,
        c10_i_workingset->Wlocalidx.size[0], &c10_wo_emlrtBCI, &c10_st);
    }

    c10_b_idx_local = c10_i_workingset->Wlocalidx.data[c10_idx_global - 1] - 1;
    if ((c10_TYPE < 1) || (c10_TYPE > 6)) {
      emlrtDynamicBoundsCheckR2012b(c10_TYPE, 1, 6, &c10_xo_emlrtBCI, &c10_st);
    }

    c10_b_idxConstr = c10_i_workingset->isActiveIdx[c10_TYPE - 1] +
      c10_b_idx_local;
    if ((c10_b_idxConstr < 1) || (c10_b_idxConstr >
         c10_i_workingset->isActiveConstr.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_b_idxConstr, 1,
        c10_i_workingset->isActiveConstr.size[0], &c10_wo_emlrtBCI, &c10_st);
    }

    c10_i_workingset->isActiveConstr.data[c10_b_idxConstr - 1] = false;
    c10_i10 = c10_i_workingset->nActiveConstr;
    c10_b_st.site = &c10_gg_emlrtRSI;
    c10_b_moveConstraint_(chartInstance, &c10_b_st, c10_i_workingset, c10_i10,
                          c10_idx_global);
    c10_i_workingset->nActiveConstr--;
    if ((c10_TYPE < 1) || (c10_TYPE > 5)) {
      emlrtDynamicBoundsCheckR2012b(c10_TYPE, 1, 5, &c10_yo_emlrtBCI, &c10_st);
    }

    c10_i_workingset->nWConstr[c10_TYPE - 1]--;
    c10_mConstr--;
  }

  c10_i9 = c10_solution->xstar.size(0);
  if ((c10_nVarP1 < 1) || (c10_nVarP1 > c10_i9)) {
    emlrtDynamicBoundsCheckR2012b(c10_nVarP1, 1, c10_i9, &c10_rp_emlrtBCI,
      (emlrtConstCTX)c10_sp);
  }

  c10_solution->maxConstr = c10_solution->xstar[c10_nVarP1 - 1];
  c10_st.site = &c10_jh_emlrtRSI;
  c10_b_setProblemType(chartInstance, &c10_st, c10_i_workingset,
                       c10_PROBTYPE_ORIG);
  c10_objective->objtype = c10_objective->prev_objtype;
  c10_objective->nvar = c10_objective->prev_nvar;
  c10_objective->hasLinear = c10_objective->prev_hasLinear;
  c10_b_options->ObjectiveLimit = -1.0E+20;
  c10_b_options->StepTolerance = 1.0E-8;
}

static void c10_b_setProblemType(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL *c10_b_obj, int32_T
  c10_PROBLEM_TYPE)
{
  emlrtStack c10_b_st;
  emlrtStack c10_st;
  int32_T c10_b;
  int32_T c10_b_idx;
  int32_T c10_e_b;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_idx;
  int32_T c10_idxUpperExisting;
  int32_T c10_idxUpperNormal;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  switch (c10_PROBLEM_TYPE) {
   case 3:
    c10_b_obj->nVar = c10_b_obj->nVarOrig;
    c10_b_obj->mConstr = c10_b_obj->mConstrOrig;
    if (c10_b_obj->nWConstr[4] > 0) {
      c10_idxUpperNormal = c10_b_obj->isActiveIdxNormal[4] - 1;
      c10_idxUpperExisting = c10_b_obj->isActiveIdx[4] - 1;
      c10_i6 = c10_b_obj->sizesNormal[4];
      c10_st.site = &c10_kh_emlrtRSI;
      c10_b = c10_i6;
      c10_e_b = c10_b;
      if (c10_e_b < 1) {
        c10_overflow = false;
      } else {
        c10_overflow = (c10_e_b > 2147483646);
      }

      if (c10_overflow) {
        c10_b_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
      }

      for (c10_idx = 0; c10_idx < c10_i6; c10_idx++) {
        c10_b_idx = c10_idx + 1;
        c10_i9 = c10_idxUpperExisting + c10_b_idx;
        if ((c10_i9 < 1) || (c10_i9 > c10_b_obj->isActiveConstr.size[0])) {
          emlrtDynamicBoundsCheckR2012b(c10_i9, 1,
            c10_b_obj->isActiveConstr.size[0], &c10_tp_emlrtBCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_i10 = c10_idxUpperNormal + c10_b_idx;
        if ((c10_i10 < 1) || (c10_i10 > c10_b_obj->isActiveConstr.size[0])) {
          emlrtDynamicBoundsCheckR2012b(c10_i10, 1,
            c10_b_obj->isActiveConstr.size[0], &c10_tp_emlrtBCI, (emlrtConstCTX)
            c10_sp);
        }

        c10_b_obj->isActiveConstr.data[c10_i10 - 1] =
          c10_b_obj->isActiveConstr.data[c10_i9 - 1];
      }
    }

    for (c10_i4 = 0; c10_i4 < 5; c10_i4++) {
      c10_b_obj->sizes[c10_i4] = c10_b_obj->sizesNormal[c10_i4];
    }

    for (c10_i7 = 0; c10_i7 < 6; c10_i7++) {
      c10_b_obj->isActiveIdx[c10_i7] = c10_b_obj->isActiveIdxNormal[c10_i7];
    }
    break;

   case 1:
    c10_b_obj->nVar = c10_b_obj->nVarOrig + 1;
    c10_b_obj->mConstr = c10_b_obj->mConstrOrig + 1;
    for (c10_i1 = 0; c10_i1 < 5; c10_i1++) {
      c10_b_obj->sizes[c10_i1] = c10_b_obj->sizesPhaseOne[c10_i1];
    }

    for (c10_i5 = 0; c10_i5 < 6; c10_i5++) {
      c10_b_obj->isActiveIdx[c10_i5] = c10_b_obj->isActiveIdxPhaseOne[c10_i5];
    }

    c10_st.site = &c10_kh_emlrtRSI;
    c10_b_modifyOverheadPhaseOne_(chartInstance, &c10_st, c10_b_obj);
    break;

   case 2:
    c10_b_obj->nVar = c10_b_obj->nVarMax - 1;
    c10_b_obj->mConstr = c10_b_obj->mConstrMax - 1;
    for (c10_i2 = 0; c10_i2 < 5; c10_i2++) {
      c10_b_obj->sizes[c10_i2] = c10_b_obj->sizesRegularized[c10_i2];
    }

    if (c10_b_obj->probType != 4) {
      c10_st.site = &c10_kh_emlrtRSI;
      c10_b_modifyOverheadRegularized_(chartInstance, &c10_st, c10_b_obj);
    }

    for (c10_i8 = 0; c10_i8 < 6; c10_i8++) {
      c10_b_obj->isActiveIdx[c10_i8] = c10_b_obj->isActiveIdxRegularized[c10_i8];
    }
    break;

   default:
    c10_b_obj->nVar = c10_b_obj->nVarMax;
    c10_b_obj->mConstr = c10_b_obj->mConstrMax;
    for (c10_i = 0; c10_i < 5; c10_i++) {
      c10_b_obj->sizes[c10_i] = c10_b_obj->sizesRegPhaseOne[c10_i];
    }

    for (c10_i3 = 0; c10_i3 < 6; c10_i3++) {
      c10_b_obj->isActiveIdx[c10_i3] = c10_b_obj->isActiveIdxRegPhaseOne[c10_i3];
    }

    c10_st.site = &c10_kh_emlrtRSI;
    c10_b_modifyOverheadPhaseOne_(chartInstance, &c10_st, c10_b_obj);
    break;
  }

  c10_b_obj->probType = c10_PROBLEM_TYPE;
}

static void c10_b_modifyOverheadPhaseOne_(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_b_obj)
{
  emlrtStack c10_b_st;
  emlrtStack c10_st;
  int32_T c10_b;
  int32_T c10_b_a;
  int32_T c10_b_idx;
  int32_T c10_c_a;
  int32_T c10_c_idx;
  int32_T c10_d_idx;
  int32_T c10_e_b;
  int32_T c10_e_idx;
  int32_T c10_eqOffset;
  int32_T c10_f_b;
  int32_T c10_g_b;
  int32_T c10_h_b;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_idx;
  int32_T c10_idxATw;
  int32_T c10_idxATwIneq;
  int32_T c10_idxEq;
  int32_T c10_idxStartIneq;
  int32_T c10_idxUpperExisting;
  int32_T c10_j_b;
  int32_T c10_k_b;
  int32_T c10_o_b;
  boolean_T c10_b_overflow;
  boolean_T c10_c_overflow;
  boolean_T c10_d_overflow;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_i = c10_b_obj->sizes[0];
  c10_st.site = &c10_mh_emlrtRSI;
  c10_b = c10_i;
  c10_e_b = c10_b;
  if (c10_e_b < 1) {
    c10_overflow = false;
  } else {
    c10_overflow = (c10_e_b > 2147483646);
  }

  if (c10_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  for (c10_idx = 0; c10_idx < c10_i; c10_idx++) {
    c10_b_idx = c10_idx;
    c10_idxATw = c10_b_obj->nVar + c10_b_obj->ldA * c10_b_idx;
    c10_i2 = c10_b_obj->ATwset.size(0);
    if ((c10_idxATw < 1) || (c10_idxATw > c10_i2)) {
      emlrtDynamicBoundsCheckR2012b(c10_idxATw, 1, c10_i2, &c10_up_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->ATwset[c10_idxATw - 1] = 0.0;
  }

  c10_eqOffset = c10_b_obj->isActiveIdx[1];
  c10_i1 = c10_b_obj->sizes[1];
  c10_st.site = &c10_mh_emlrtRSI;
  c10_f_b = c10_i1;
  c10_g_b = c10_f_b;
  if (c10_g_b < 1) {
    c10_b_overflow = false;
  } else {
    c10_b_overflow = (c10_g_b > 2147483646);
  }

  if (c10_b_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  c10_i3 = static_cast<uint16_T>(c10_i1) - 1;
  for (c10_c_idx = 0; c10_c_idx <= c10_i3; c10_c_idx++) {
    c10_b_idx = c10_c_idx;
    c10_idxEq = c10_b_obj->nVar + c10_b_obj->ldA * c10_b_idx;
    c10_i5 = c10_b_obj->Aeq.size(0);
    if ((c10_idxEq < 1) || (c10_idxEq > c10_i5)) {
      emlrtDynamicBoundsCheckR2012b(c10_idxEq, 1, c10_i5, &c10_up_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->Aeq[c10_idxEq - 1] = 0.0;
    c10_i7 = c10_b_obj->ATwset.size(0);
    c10_i8 = c10_idxEq + c10_b_obj->ldA * (c10_eqOffset - 1);
    if ((c10_i8 < 1) || (c10_i8 > c10_i7)) {
      emlrtDynamicBoundsCheckR2012b(c10_i8, 1, c10_i7, &c10_up_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->ATwset[c10_i8 - 1] = 0.0;
  }

  c10_st.site = &c10_mh_emlrtRSI;
  c10_i4 = c10_b_obj->indexLB.size(0);
  if ((c10_b_obj->sizes[3] < 1) || (c10_b_obj->sizes[3] > c10_i4)) {
    emlrtDynamicBoundsCheckR2012b(c10_b_obj->sizes[3], 1, c10_i4,
      &c10_up_emlrtBCI, (emlrtConstCTX)c10_sp);
  }

  c10_b_obj->indexLB[c10_b_obj->sizes[3] - 1] = c10_b_obj->nVar;
  c10_i6 = c10_b_obj->lb.size(0);
  if ((c10_b_obj->nVar < 1) || (c10_b_obj->nVar > c10_i6)) {
    emlrtDynamicBoundsCheckR2012b(c10_b_obj->nVar, 1, c10_i6, &c10_up_emlrtBCI,
      (emlrtConstCTX)c10_sp);
  }

  c10_b_obj->lb[c10_b_obj->nVar - 1] = 0.0;
  c10_idxStartIneq = c10_b_obj->isActiveIdx[2];
  c10_i9 = c10_b_obj->nActiveConstr;
  c10_st.site = &c10_mh_emlrtRSI;
  c10_b_a = c10_idxStartIneq;
  c10_h_b = c10_i9;
  c10_c_a = c10_b_a;
  c10_j_b = c10_h_b;
  if (c10_c_a > c10_j_b) {
    c10_c_overflow = false;
  } else {
    c10_c_overflow = (c10_j_b > 2147483646);
  }

  if (c10_c_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  for (c10_d_idx = c10_idxStartIneq; c10_d_idx <= c10_i9; c10_d_idx++) {
    c10_idxATwIneq = c10_b_obj->nVar + c10_b_obj->ldA * (c10_d_idx - 1);
    c10_i10 = c10_b_obj->ATwset.size(0);
    if ((c10_idxATwIneq < 1) || (c10_idxATwIneq > c10_i10)) {
      emlrtDynamicBoundsCheckR2012b(c10_idxATwIneq, 1, c10_i10, &c10_up_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->ATwset[c10_idxATwIneq - 1] = -1.0;
  }

  c10_idxUpperExisting = c10_b_obj->isActiveIdx[4] - 1;
  if (c10_b_obj->nWConstr[4] > 0) {
    c10_i11 = c10_b_obj->sizesNormal[4];
    c10_st.site = &c10_mh_emlrtRSI;
    c10_k_b = c10_i11 + 1;
    c10_o_b = c10_k_b;
    if (c10_o_b < 1) {
      c10_d_overflow = false;
    } else {
      c10_d_overflow = (c10_o_b > 2147483646);
    }

    if (c10_d_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_e_idx = 0; c10_e_idx <= c10_i11; c10_e_idx++) {
      c10_b_idx = c10_e_idx;
      c10_i12 = (c10_idxUpperExisting + c10_b_idx) + 1;
      if ((c10_i12 < 1) || (c10_i12 > c10_b_obj->isActiveConstr.size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i12, 1, c10_b_obj->
          isActiveConstr.size[0], &c10_up_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->isActiveConstr.data[c10_i12 - 1] = false;
    }
  }

  if ((c10_idxUpperExisting < 1) || (c10_idxUpperExisting >
       c10_b_obj->isActiveConstr.size[0])) {
    emlrtDynamicBoundsCheckR2012b(c10_idxUpperExisting, 1,
      c10_b_obj->isActiveConstr.size[0], &c10_up_emlrtBCI, (emlrtConstCTX)c10_sp);
  }

  c10_b_obj->isActiveConstr.data[c10_idxUpperExisting - 1] = false;
}

static void c10_b_modifyOverheadRegularized_(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_b_obj)
{
  emlrtStack c10_b_st;
  emlrtStack c10_st;
  int32_T c10_ab_a;
  int32_T c10_ab_b;
  int32_T c10_b;
  int32_T c10_b_a;
  int32_T c10_b_idx;
  int32_T c10_b_idx_col;
  int32_T c10_b_idx_lb;
  int32_T c10_b_idx_row;
  int32_T c10_bb_a;
  int32_T c10_c_a;
  int32_T c10_c_idx;
  int32_T c10_c_idx_col;
  int32_T c10_c_idx_row;
  int32_T c10_cb_b;
  int32_T c10_colOffsetATw;
  int32_T c10_colOffsetAeq;
  int32_T c10_d_a;
  int32_T c10_d_idx;
  int32_T c10_d_idx_col;
  int32_T c10_d_idx_row;
  int32_T c10_db_a;
  int32_T c10_e_a;
  int32_T c10_e_b;
  int32_T c10_e_idx;
  int32_T c10_e_idx_row;
  int32_T c10_eb_a;
  int32_T c10_eb_b;
  int32_T c10_f_a;
  int32_T c10_f_b;
  int32_T c10_f_idx_row;
  int32_T c10_fb_b;
  int32_T c10_g_a;
  int32_T c10_g_b;
  int32_T c10_g_idx_row;
  int32_T c10_gb_b;
  int32_T c10_h_a;
  int32_T c10_h_b;
  int32_T c10_h_idx_row;
  int32_T c10_hb_b;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i19;
  int32_T c10_i2;
  int32_T c10_i20;
  int32_T c10_i21;
  int32_T c10_i22;
  int32_T c10_i23;
  int32_T c10_i24;
  int32_T c10_i25;
  int32_T c10_i26;
  int32_T c10_i27;
  int32_T c10_i28;
  int32_T c10_i29;
  int32_T c10_i3;
  int32_T c10_i30;
  int32_T c10_i31;
  int32_T c10_i32;
  int32_T c10_i33;
  int32_T c10_i34;
  int32_T c10_i35;
  int32_T c10_i36;
  int32_T c10_i37;
  int32_T c10_i38;
  int32_T c10_i39;
  int32_T c10_i4;
  int32_T c10_i40;
  int32_T c10_i41;
  int32_T c10_i42;
  int32_T c10_i43;
  int32_T c10_i44;
  int32_T c10_i45;
  int32_T c10_i46;
  int32_T c10_i47;
  int32_T c10_i48;
  int32_T c10_i49;
  int32_T c10_i5;
  int32_T c10_i50;
  int32_T c10_i51;
  int32_T c10_i52;
  int32_T c10_i53;
  int32_T c10_i54;
  int32_T c10_i55;
  int32_T c10_i56;
  int32_T c10_i57;
  int32_T c10_i58;
  int32_T c10_i59;
  int32_T c10_i6;
  int32_T c10_i60;
  int32_T c10_i61;
  int32_T c10_i62;
  int32_T c10_i63;
  int32_T c10_i64;
  int32_T c10_i65;
  int32_T c10_i66;
  int32_T c10_i67;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_i_a;
  int32_T c10_i_idx_row;
  int32_T c10_idx;
  int32_T c10_idxGlobalColStart;
  int32_T c10_idxStartIneq;
  int32_T c10_idxUpperExisting;
  int32_T c10_idxUpperRegularized;
  int32_T c10_idx_col;
  int32_T c10_idx_local;
  int32_T c10_idx_row;
  int32_T c10_j_a;
  int32_T c10_j_b;
  int32_T c10_jb_b;
  int32_T c10_k_a;
  int32_T c10_k_b;
  int32_T c10_kb_b;
  int32_T c10_mEq;
  int32_T c10_m_a;
  int32_T c10_mb_b;
  int32_T c10_o_a;
  int32_T c10_o_b;
  int32_T c10_ob_b;
  int32_T c10_offsetEq1;
  int32_T c10_offsetEq2;
  int32_T c10_offsetIneq;
  int32_T c10_p_a;
  int32_T c10_p_b;
  int32_T c10_pb_b;
  int32_T c10_q_a;
  int32_T c10_q_b;
  int32_T c10_qb_b;
  int32_T c10_r_a;
  int32_T c10_rb_b;
  int32_T c10_s_a;
  int32_T c10_s_b;
  int32_T c10_sb_b;
  int32_T c10_t_a;
  int32_T c10_t_b;
  int32_T c10_tb_b;
  int32_T c10_u_a;
  int32_T c10_u_b;
  int32_T c10_ub_b;
  int32_T c10_v_a;
  int32_T c10_v_b;
  int32_T c10_w_a;
  int32_T c10_w_b;
  int32_T c10_x_a;
  int32_T c10_x_b;
  int32_T c10_y;
  int32_T c10_y_a;
  int32_T c10_y_b;
  boolean_T c10_b_overflow;
  boolean_T c10_c_overflow;
  boolean_T c10_d_overflow;
  boolean_T c10_e_overflow;
  boolean_T c10_f_overflow;
  boolean_T c10_g_overflow;
  boolean_T c10_h_overflow;
  boolean_T c10_i_overflow;
  boolean_T c10_j_overflow;
  boolean_T c10_k_overflow;
  boolean_T c10_m_overflow;
  boolean_T c10_o_overflow;
  boolean_T c10_overflow;
  boolean_T c10_p_overflow;
  boolean_T c10_q_overflow;
  boolean_T c10_r_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_mEq = c10_b_obj->sizes[1];
  c10_offsetIneq = c10_b_obj->nVarOrig + 1;
  c10_offsetEq1 = c10_b_obj->nVarOrig;
  c10_offsetEq2 = c10_b_obj->nVarOrig + c10_mEq;
  c10_i = c10_b_obj->sizes[0];
  c10_st.site = &c10_oh_emlrtRSI;
  c10_b = c10_i;
  c10_e_b = c10_b;
  if (c10_e_b < 1) {
    c10_overflow = false;
  } else {
    c10_overflow = (c10_e_b > 2147483646);
  }

  if (c10_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  for (c10_idx_col = 0; c10_idx_col < c10_i; c10_idx_col++) {
    c10_b_idx_col = c10_idx_col;
    c10_colOffsetATw = c10_b_obj->ldA * c10_b_idx_col;
    c10_i1 = c10_b_obj->nVarOrig + 1;
    c10_i2 = c10_b_obj->nVar;
    c10_st.site = &c10_oh_emlrtRSI;
    c10_b_a = c10_i1;
    c10_h_b = c10_i2;
    c10_c_a = c10_b_a;
    c10_j_b = c10_h_b;
    if (c10_c_a > c10_j_b) {
      c10_c_overflow = false;
    } else {
      c10_c_overflow = (c10_j_b > 2147483646);
    }

    if (c10_c_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_idx_row = c10_i1; c10_idx_row <= c10_i2; c10_idx_row++) {
      c10_i7 = c10_b_obj->ATwset.size(0);
      c10_i8 = c10_idx_row + c10_colOffsetATw;
      if ((c10_i8 < 1) || (c10_i8 > c10_i7)) {
        emlrtDynamicBoundsCheckR2012b(c10_i8, 1, c10_i7, &c10_vp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->ATwset[c10_i8 - 1] = 0.0;
    }
  }

  c10_st.site = &c10_oh_emlrtRSI;
  c10_idxGlobalColStart = c10_b_obj->isActiveIdx[1];
  c10_st.site = &c10_oh_emlrtRSI;
  c10_f_b = c10_mEq;
  c10_g_b = c10_f_b;
  if (c10_g_b < 1) {
    c10_b_overflow = false;
  } else {
    c10_b_overflow = (c10_g_b > 2147483646);
  }

  if (c10_b_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  c10_i3 = static_cast<uint16_T>(c10_mEq) - 1;
  for (c10_c_idx_col = 0; c10_c_idx_col <= c10_i3; c10_c_idx_col++) {
    c10_b_idx_col = c10_c_idx_col;
    c10_colOffsetAeq = c10_b_obj->ldA * c10_b_idx_col;
    c10_colOffsetATw = c10_colOffsetAeq + c10_b_obj->ldA *
      (c10_idxGlobalColStart - 1);
    c10_i6 = c10_offsetIneq;
    c10_st.site = &c10_oh_emlrtRSI;
    c10_e_a = c10_i6;
    c10_o_b = c10_offsetEq1;
    c10_g_a = c10_e_a;
    c10_q_b = c10_o_b;
    if (c10_g_a > c10_q_b) {
      c10_e_overflow = false;
    } else {
      c10_e_overflow = (c10_q_b > 2147483646);
    }

    if (c10_e_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_b_idx_row = c10_i6; c10_b_idx_row <= c10_offsetEq1; c10_b_idx_row++)
    {
      c10_i11 = c10_b_obj->Aeq.size(0);
      c10_i14 = c10_b_idx_row + c10_colOffsetAeq;
      if ((c10_i14 < 1) || (c10_i14 > c10_i11)) {
        emlrtDynamicBoundsCheckR2012b(c10_i14, 1, c10_i11, &c10_vp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->Aeq[c10_i14 - 1] = 0.0;
      c10_i17 = c10_b_obj->ATwset.size(0);
      c10_i18 = c10_b_idx_row + c10_colOffsetATw;
      if ((c10_i18 < 1) || (c10_i18 > c10_i17)) {
        emlrtDynamicBoundsCheckR2012b(c10_i18, 1, c10_i17, &c10_vp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->ATwset[c10_i18 - 1] = 0.0;
    }

    c10_i10 = c10_offsetEq1 + 1;
    c10_i13 = c10_offsetEq1 + c10_b_idx_col;
    c10_st.site = &c10_oh_emlrtRSI;
    c10_h_a = c10_i10;
    c10_t_b = c10_i13;
    c10_j_a = c10_h_a;
    c10_w_b = c10_t_b;
    if (c10_j_a > c10_w_b) {
      c10_g_overflow = false;
    } else {
      c10_g_overflow = (c10_w_b > 2147483646);
    }

    if (c10_g_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_c_idx_row = c10_i10; c10_c_idx_row <= c10_i13; c10_c_idx_row++) {
      c10_i21 = c10_b_obj->Aeq.size(0);
      c10_i24 = c10_c_idx_row + c10_colOffsetAeq;
      if ((c10_i24 < 1) || (c10_i24 > c10_i21)) {
        emlrtDynamicBoundsCheckR2012b(c10_i24, 1, c10_i21, &c10_vp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->Aeq[c10_i24 - 1] = 0.0;
      c10_i28 = c10_b_obj->ATwset.size(0);
      c10_i30 = c10_c_idx_row + c10_colOffsetATw;
      if ((c10_i30 < 1) || (c10_i30 > c10_i28)) {
        emlrtDynamicBoundsCheckR2012b(c10_i30, 1, c10_i28, &c10_vp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->ATwset[c10_i30 - 1] = 0.0;
    }

    c10_i20 = c10_b_obj->Aeq.size(0);
    c10_i23 = ((c10_offsetEq1 + c10_b_idx_col) + c10_colOffsetAeq) + 1;
    if ((c10_i23 < 1) || (c10_i23 > c10_i20)) {
      emlrtDynamicBoundsCheckR2012b(c10_i23, 1, c10_i20, &c10_vp_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->Aeq[c10_i23 - 1] = -1.0;
    c10_i27 = c10_b_obj->ATwset.size(0);
    c10_i29 = ((c10_offsetEq1 + c10_b_idx_col) + c10_colOffsetATw) + 1;
    if ((c10_i29 < 1) || (c10_i29 > c10_i27)) {
      emlrtDynamicBoundsCheckR2012b(c10_i29, 1, c10_i27, &c10_vp_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->ATwset[c10_i29 - 1] = -1.0;
    c10_i31 = (c10_offsetEq1 + c10_b_idx_col) + 2;
    c10_st.site = &c10_oh_emlrtRSI;
    c10_p_a = c10_i31;
    c10_eb_b = c10_offsetEq2;
    c10_q_a = c10_p_a;
    c10_fb_b = c10_eb_b;
    if (c10_q_a > c10_fb_b) {
      c10_j_overflow = false;
    } else {
      c10_j_overflow = (c10_fb_b > 2147483646);
    }

    if (c10_j_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_d_idx_row = c10_i31; c10_d_idx_row <= c10_offsetEq2; c10_d_idx_row
         ++) {
      c10_i35 = c10_b_obj->Aeq.size(0);
      c10_i37 = c10_d_idx_row + c10_colOffsetAeq;
      if ((c10_i37 < 1) || (c10_i37 > c10_i35)) {
        emlrtDynamicBoundsCheckR2012b(c10_i37, 1, c10_i35, &c10_vp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->Aeq[c10_i37 - 1] = 0.0;
      c10_i38 = c10_b_obj->ATwset.size(0);
      c10_i39 = c10_d_idx_row + c10_colOffsetATw;
      if ((c10_i39 < 1) || (c10_i39 > c10_i38)) {
        emlrtDynamicBoundsCheckR2012b(c10_i39, 1, c10_i38, &c10_vp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->ATwset[c10_i39 - 1] = 0.0;
    }

    c10_i34 = c10_offsetEq2 + 1;
    c10_i36 = c10_offsetEq2 + c10_b_idx_col;
    c10_st.site = &c10_oh_emlrtRSI;
    c10_t_a = c10_i34;
    c10_jb_b = c10_i36;
    c10_u_a = c10_t_a;
    c10_kb_b = c10_jb_b;
    if (c10_u_a > c10_kb_b) {
      c10_m_overflow = false;
    } else {
      c10_m_overflow = (c10_kb_b > 2147483646);
    }

    if (c10_m_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_e_idx_row = c10_i34; c10_e_idx_row <= c10_i36; c10_e_idx_row++) {
      c10_i43 = c10_b_obj->Aeq.size(0);
      c10_i46 = c10_e_idx_row + c10_colOffsetAeq;
      if ((c10_i46 < 1) || (c10_i46 > c10_i43)) {
        emlrtDynamicBoundsCheckR2012b(c10_i46, 1, c10_i43, &c10_vp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->Aeq[c10_i46 - 1] = 0.0;
      c10_i49 = c10_b_obj->ATwset.size(0);
      c10_i51 = c10_e_idx_row + c10_colOffsetATw;
      if ((c10_i51 < 1) || (c10_i51 > c10_i49)) {
        emlrtDynamicBoundsCheckR2012b(c10_i51, 1, c10_i49, &c10_vp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->ATwset[c10_i51 - 1] = 0.0;
    }

    c10_i42 = c10_b_obj->Aeq.size(0);
    c10_i45 = ((c10_offsetEq2 + c10_b_idx_col) + c10_colOffsetAeq) + 1;
    if ((c10_i45 < 1) || (c10_i45 > c10_i42)) {
      emlrtDynamicBoundsCheckR2012b(c10_i45, 1, c10_i42, &c10_vp_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->Aeq[c10_i45 - 1] = 1.0;
    c10_i48 = c10_b_obj->ATwset.size(0);
    c10_i50 = ((c10_offsetEq2 + c10_b_idx_col) + c10_colOffsetATw) + 1;
    if ((c10_i50 < 1) || (c10_i50 > c10_i48)) {
      emlrtDynamicBoundsCheckR2012b(c10_i50, 1, c10_i48, &c10_vp_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->ATwset[c10_i50 - 1] = 1.0;
    c10_i52 = (c10_offsetEq2 + c10_b_idx_col) + 2;
    c10_i53 = c10_b_obj->nVar;
    c10_st.site = &c10_oh_emlrtRSI;
    c10_ab_a = c10_i52;
    c10_rb_b = c10_i53;
    c10_bb_a = c10_ab_a;
    c10_sb_b = c10_rb_b;
    if (c10_bb_a > c10_sb_b) {
      c10_q_overflow = false;
    } else {
      c10_q_overflow = (c10_sb_b > 2147483646);
    }

    if (c10_q_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_h_idx_row = c10_i52; c10_h_idx_row <= c10_i53; c10_h_idx_row++) {
      c10_i62 = c10_b_obj->Aeq.size(0);
      c10_i63 = c10_h_idx_row + c10_colOffsetAeq;
      if ((c10_i63 < 1) || (c10_i63 > c10_i62)) {
        emlrtDynamicBoundsCheckR2012b(c10_i63, 1, c10_i62, &c10_vp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->Aeq[c10_i63 - 1] = 0.0;
      c10_i64 = c10_b_obj->ATwset.size(0);
      c10_i65 = c10_h_idx_row + c10_colOffsetATw;
      if ((c10_i65 < 1) || (c10_i65 > c10_i64)) {
        emlrtDynamicBoundsCheckR2012b(c10_i65, 1, c10_i64, &c10_vp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->ATwset[c10_i65 - 1] = 0.0;
    }
  }

  c10_b_idx_lb = c10_b_obj->nVarOrig;
  c10_i4 = c10_b_obj->sizesNormal[3] + 1;
  c10_i5 = c10_b_obj->sizesRegularized[3];
  c10_st.site = &c10_oh_emlrtRSI;
  c10_d_a = c10_i4;
  c10_k_b = c10_i5;
  c10_f_a = c10_d_a;
  c10_p_b = c10_k_b;
  if (c10_f_a > c10_p_b) {
    c10_d_overflow = false;
  } else {
    c10_d_overflow = (c10_p_b > 2147483646);
  }

  if (c10_d_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  for (c10_idx = c10_i4; c10_idx <= c10_i5; c10_idx++) {
    c10_b_idx_lb++;
    c10_i9 = c10_b_obj->indexLB.size(0);
    if ((c10_idx < 1) || (c10_idx > c10_i9)) {
      emlrtDynamicBoundsCheckR2012b(c10_idx, 1, c10_i9, &c10_vp_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->indexLB[c10_idx - 1] = c10_b_idx_lb;
  }

  if (c10_b_obj->nWConstr[4] > 0) {
    c10_idxUpperRegularized = c10_b_obj->isActiveIdxRegularized[4];
    c10_idxUpperExisting = c10_b_obj->isActiveIdx[4] - 1;
    c10_i16 = c10_b_obj->sizesRegularized[4];
    c10_st.site = &c10_oh_emlrtRSI;
    c10_s_b = c10_i16;
    c10_v_b = c10_s_b;
    if (c10_v_b < 1) {
      c10_f_overflow = false;
    } else {
      c10_f_overflow = (c10_v_b > 2147483646);
    }

    if (c10_f_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_b_idx = 0; c10_b_idx < c10_i16; c10_b_idx++) {
      c10_d_idx = c10_b_idx + 1;
      c10_i19 = c10_idxUpperExisting + c10_d_idx;
      if ((c10_i19 < 1) || (c10_i19 > c10_b_obj->isActiveConstr.size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i19, 1, c10_b_obj->
          isActiveConstr.size[0], &c10_vp_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_i25 = c10_idxUpperRegularized + c10_d_idx;
      if ((c10_i25 < 1) || (c10_i25 > c10_b_obj->isActiveConstr.size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i25, 1, c10_b_obj->
          isActiveConstr.size[0], &c10_vp_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->isActiveConstr.data[c10_i25 - 1] =
        c10_b_obj->isActiveConstr.data[c10_i19 - 1];
    }
  }

  c10_i12 = c10_b_obj->isActiveIdx[4];
  c10_i15 = c10_b_obj->isActiveIdxRegularized[4] - 1;
  c10_st.site = &c10_oh_emlrtRSI;
  c10_i_a = c10_i12;
  c10_u_b = c10_i15;
  c10_k_a = c10_i_a;
  c10_x_b = c10_u_b;
  if (c10_k_a > c10_x_b) {
    c10_h_overflow = false;
  } else {
    c10_h_overflow = (c10_x_b > 2147483646);
  }

  if (c10_h_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  for (c10_c_idx = c10_i12; c10_c_idx <= c10_i15; c10_c_idx++) {
    if ((c10_c_idx < 1) || (c10_c_idx > c10_b_obj->isActiveConstr.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_c_idx, 1, c10_b_obj->
        isActiveConstr.size[0], &c10_vp_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->isActiveConstr.data[c10_c_idx - 1] = false;
  }

  c10_i22 = c10_b_obj->nVarOrig + 1;
  c10_y_b = c10_mEq;
  c10_y = c10_y_b << 1;
  c10_i26 = c10_b_obj->nVarOrig + c10_y;
  c10_st.site = &c10_oh_emlrtRSI;
  c10_m_a = c10_i22;
  c10_ab_b = c10_i26;
  c10_o_a = c10_m_a;
  c10_cb_b = c10_ab_b;
  if (c10_o_a > c10_cb_b) {
    c10_i_overflow = false;
  } else {
    c10_i_overflow = (c10_cb_b > 2147483646);
  }

  if (c10_i_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  for (c10_e_idx = c10_i22; c10_e_idx <= c10_i26; c10_e_idx++) {
    c10_i32 = c10_b_obj->lb.size(0);
    if ((c10_e_idx < 1) || (c10_e_idx > c10_i32)) {
      emlrtDynamicBoundsCheckR2012b(c10_e_idx, 1, c10_i32, &c10_vp_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->lb[c10_e_idx - 1] = 0.0;
  }

  c10_idxStartIneq = c10_b_obj->isActiveIdx[2];
  c10_i33 = c10_b_obj->nActiveConstr;
  c10_st.site = &c10_oh_emlrtRSI;
  c10_r_a = c10_idxStartIneq;
  c10_gb_b = c10_i33;
  c10_s_a = c10_r_a;
  c10_hb_b = c10_gb_b;
  if (c10_s_a > c10_hb_b) {
    c10_k_overflow = false;
  } else {
    c10_k_overflow = (c10_hb_b > 2147483646);
  }

  if (c10_k_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  for (c10_d_idx_col = c10_idxStartIneq; c10_d_idx_col <= c10_i33; c10_d_idx_col
       ++) {
    c10_colOffsetATw = c10_b_obj->ldA * (c10_d_idx_col - 1);
    if ((c10_d_idx_col < 1) || (c10_d_idx_col > c10_b_obj->Wid.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_d_idx_col, 1, c10_b_obj->Wid.size[0],
        &c10_vp_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    if (c10_b_obj->Wid.data[c10_d_idx_col - 1] == 3) {
      if ((c10_d_idx_col < 1) || (c10_d_idx_col > c10_b_obj->Wlocalidx.size[0]))
      {
        emlrtDynamicBoundsCheckR2012b(c10_d_idx_col, 1,
          c10_b_obj->Wlocalidx.size[0], &c10_vp_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_idx_local = c10_b_obj->Wlocalidx.data[c10_d_idx_col - 1];
      c10_i44 = c10_offsetIneq;
      c10_i47 = (c10_offsetIneq + c10_idx_local) - 2;
      c10_st.site = &c10_oh_emlrtRSI;
      c10_x_a = c10_i44;
      c10_pb_b = c10_i47;
      c10_y_a = c10_x_a;
      c10_qb_b = c10_pb_b;
      if (c10_y_a > c10_qb_b) {
        c10_p_overflow = false;
      } else {
        c10_p_overflow = (c10_qb_b > 2147483646);
      }

      if (c10_p_overflow) {
        c10_b_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
      }

      for (c10_g_idx_row = c10_i44; c10_g_idx_row <= c10_i47; c10_g_idx_row++) {
        c10_i57 = c10_b_obj->ATwset.size(0);
        c10_i59 = c10_g_idx_row + c10_colOffsetATw;
        if ((c10_i59 < 1) || (c10_i59 > c10_i57)) {
          emlrtDynamicBoundsCheckR2012b(c10_i59, 1, c10_i57, &c10_vp_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_b_obj->ATwset[c10_i59 - 1] = 0.0;
      }

      c10_i56 = c10_b_obj->ATwset.size(0);
      c10_i58 = ((c10_offsetIneq + c10_idx_local) + c10_colOffsetATw) - 1;
      if ((c10_i58 < 1) || (c10_i58 > c10_i56)) {
        emlrtDynamicBoundsCheckR2012b(c10_i58, 1, c10_i56, &c10_vp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->ATwset[c10_i58 - 1] = -1.0;
      c10_i60 = c10_offsetIneq + c10_idx_local;
      c10_i61 = c10_b_obj->nVar;
      c10_st.site = &c10_oh_emlrtRSI;
      c10_db_a = c10_i60;
      c10_tb_b = c10_i61;
      c10_eb_a = c10_db_a;
      c10_ub_b = c10_tb_b;
      if (c10_eb_a > c10_ub_b) {
        c10_r_overflow = false;
      } else {
        c10_r_overflow = (c10_ub_b > 2147483646);
      }

      if (c10_r_overflow) {
        c10_b_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
      }

      for (c10_i_idx_row = c10_i60; c10_i_idx_row <= c10_i61; c10_i_idx_row++) {
        c10_i66 = c10_b_obj->ATwset.size(0);
        c10_i67 = c10_i_idx_row + c10_colOffsetATw;
        if ((c10_i67 < 1) || (c10_i67 > c10_i66)) {
          emlrtDynamicBoundsCheckR2012b(c10_i67, 1, c10_i66, &c10_vp_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_b_obj->ATwset[c10_i67 - 1] = 0.0;
      }
    } else {
      c10_i40 = c10_offsetIneq;
      c10_i41 = c10_b_obj->nVar;
      c10_st.site = &c10_oh_emlrtRSI;
      c10_v_a = c10_i40;
      c10_mb_b = c10_i41;
      c10_w_a = c10_v_a;
      c10_ob_b = c10_mb_b;
      if (c10_w_a > c10_ob_b) {
        c10_o_overflow = false;
      } else {
        c10_o_overflow = (c10_ob_b > 2147483646);
      }

      if (c10_o_overflow) {
        c10_b_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
      }

      for (c10_f_idx_row = c10_i40; c10_f_idx_row <= c10_i41; c10_f_idx_row++) {
        c10_i54 = c10_b_obj->ATwset.size(0);
        c10_i55 = c10_f_idx_row + c10_colOffsetATw;
        if ((c10_i55 < 1) || (c10_i55 > c10_i54)) {
          emlrtDynamicBoundsCheckR2012b(c10_i55, 1, c10_i54, &c10_vp_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_b_obj->ATwset[c10_i55 - 1] = 0.0;
      }
    }
  }
}

static real_T c10_b_computeFval(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_obj, coder::array<
  real_T, 2U> &c10_workspace, coder::array<real_T, 2U> &c10_c_H, coder::array<
  real_T, 1U> &c10_f, coder::array<real_T, 1U> &c10_x)
{
  ptrdiff_t c10_b_incx_t;
  ptrdiff_t c10_b_incy_t;
  ptrdiff_t c10_b_n_t;
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 2U> c10_d_H;
  coder::array<real_T, 2U> c10_e_H;
  coder::array<real_T, 2U> c10_y;
  coder::array<real_T, 1U> c10_b_f;
  coder::array<real_T, 1U> c10_b_x;
  coder::array<real_T, 1U> c10_c_f;
  coder::array<real_T, 1U> c10_c_x;
  c10_s_saWPFfMboRdWeRqIEJ4x8C c10_c_obj;
  c10_s_saWPFfMboRdWeRqIEJ4x8C c10_d_obj;
  c10_s_saWPFfMboRdWeRqIEJ4x8C c10_e_obj;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  real_T c10_val;
  int32_T c10_b;
  int32_T c10_b_a;
  int32_T c10_b_loop_ub;
  int32_T c10_b_var;
  int32_T c10_c_a;
  int32_T c10_c_loop_ub;
  int32_T c10_d_loop_ub;
  int32_T c10_e_b;
  int32_T c10_e_loop_ub;
  int32_T c10_f_loop_ub;
  int32_T c10_f_n;
  int32_T c10_g_loop_ub;
  int32_T c10_h_loop_ub;
  int32_T c10_h_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_i_n;
  int32_T c10_idx;
  int32_T c10_j_n;
  int32_T c10_k_n;
  int32_T c10_loop_ub;
  int32_T c10_m_n;
  int32_T c10_var;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  switch (c10_b_obj->objtype) {
   case 5:
    c10_i = c10_x.size(0);
    if ((c10_b_obj->nvar < 1) || (c10_b_obj->nvar > c10_i)) {
      emlrtDynamicBoundsCheckR2012b(c10_b_obj->nvar, 1, c10_i, &c10_wp_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_val = c10_b_obj->gammaScalar * c10_x[c10_b_obj->nvar - 1];
    break;

   case 3:
    c10_d_obj = *c10_b_obj;
    c10_e_H.set_size(&c10_bg_emlrtRTEI, c10_sp, c10_c_H.size(0), c10_c_H.size(1));
    c10_b_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
    for (c10_i2 = 0; c10_i2 <= c10_b_loop_ub; c10_i2++) {
      c10_e_H[c10_i2] = c10_c_H[c10_i2];
    }

    c10_c_f.set_size(&c10_bg_emlrtRTEI, c10_sp, c10_f.size(0));
    c10_d_loop_ub = c10_f.size(0) - 1;
    for (c10_i4 = 0; c10_i4 <= c10_d_loop_ub; c10_i4++) {
      c10_c_f[c10_i4] = c10_f[c10_i4];
    }

    c10_c_x.set_size(&c10_bg_emlrtRTEI, c10_sp, c10_x.size(0));
    c10_f_loop_ub = c10_x.size(0) - 1;
    for (c10_i6 = 0; c10_i6 <= c10_f_loop_ub; c10_i6++) {
      c10_c_x[c10_i6] = c10_x[c10_i6];
    }

    c10_st.site = &c10_ph_emlrtRSI;
    c10_c_linearForm_(chartInstance, &c10_st, &c10_d_obj, c10_workspace, c10_e_H,
                      c10_c_f, c10_c_x);
    c10_f_n = c10_b_obj->nvar;
    c10_y.set_size(&c10_bg_emlrtRTEI, c10_sp, c10_workspace.size(0),
                   c10_workspace.size(1));
    c10_g_loop_ub = c10_workspace.size(0) * c10_workspace.size(1) - 1;
    for (c10_i9 = 0; c10_i9 <= c10_g_loop_ub; c10_i9++) {
      c10_y[c10_i9] = c10_workspace[c10_i9];
    }

    if (c10_f_n < 1) {
      c10_val = 0.0;
    } else {
      c10_h_n = c10_f_n;
      c10_i_n = c10_h_n;
      c10_var = c10_i_n;
      c10_n_t = (ptrdiff_t)c10_var;
      c10_incx_t = (ptrdiff_t)1;
      c10_incy_t = (ptrdiff_t)1;
      c10_val = ddot(&c10_n_t, &(c10_x.data())[0], &c10_incx_t, &(c10_y.data())
                     [0], &c10_incy_t);
    }
    break;

   default:
    c10_c_obj = *c10_b_obj;
    c10_d_H.set_size(&c10_bg_emlrtRTEI, c10_sp, c10_c_H.size(0), c10_c_H.size(1));
    c10_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
    for (c10_i1 = 0; c10_i1 <= c10_loop_ub; c10_i1++) {
      c10_d_H[c10_i1] = c10_c_H[c10_i1];
    }

    c10_b_f.set_size(&c10_bg_emlrtRTEI, c10_sp, c10_f.size(0));
    c10_c_loop_ub = c10_f.size(0) - 1;
    for (c10_i3 = 0; c10_i3 <= c10_c_loop_ub; c10_i3++) {
      c10_b_f[c10_i3] = c10_f[c10_i3];
    }

    c10_b_x.set_size(&c10_bg_emlrtRTEI, c10_sp, c10_x.size(0));
    c10_e_loop_ub = c10_x.size(0) - 1;
    for (c10_i5 = 0; c10_i5 <= c10_e_loop_ub; c10_i5++) {
      c10_b_x[c10_i5] = c10_x[c10_i5];
    }

    c10_st.site = &c10_ph_emlrtRSI;
    c10_c_linearForm_(chartInstance, &c10_st, &c10_c_obj, c10_workspace, c10_d_H,
                      c10_b_f, c10_b_x);
    c10_st.site = &c10_ph_emlrtRSI;
    c10_e_obj = *c10_b_obj;
    c10_i7 = c10_e_obj.nvar + 1;
    c10_i8 = c10_e_obj.maxVar - 1;
    c10_b_st.site = &c10_uh_emlrtRSI;
    c10_b_a = c10_i7;
    c10_b = c10_i8;
    c10_c_a = c10_b_a;
    c10_e_b = c10_b;
    if (c10_c_a > c10_e_b) {
      c10_overflow = false;
    } else {
      c10_overflow = (c10_e_b > 2147483646);
    }

    if (c10_overflow) {
      c10_c_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
    }

    for (c10_idx = c10_i7; c10_idx <= c10_i8; c10_idx++) {
      c10_i10 = c10_x.size(0);
      if ((c10_idx < 1) || (c10_idx > c10_i10)) {
        emlrtDynamicBoundsCheckR2012b(c10_idx, 1, c10_i10, &c10_xp_emlrtBCI,
          &c10_st);
      }

      c10_i12 = c10_workspace.size(0) * c10_workspace.size(1);
      if ((c10_idx < 1) || (c10_idx > c10_i12)) {
        emlrtDynamicBoundsCheckR2012b(c10_idx, 1, c10_i12, &c10_xp_emlrtBCI,
          &c10_st);
      }

      c10_workspace[c10_idx - 1] = 0.0 * c10_x[c10_idx - 1];
    }

    c10_j_n = c10_b_obj->maxVar - 1;
    c10_y.set_size(&c10_bg_emlrtRTEI, c10_sp, c10_workspace.size(0),
                   c10_workspace.size(1));
    c10_h_loop_ub = c10_workspace.size(0) * c10_workspace.size(1) - 1;
    for (c10_i11 = 0; c10_i11 <= c10_h_loop_ub; c10_i11++) {
      c10_y[c10_i11] = c10_workspace[c10_i11];
    }

    if (c10_j_n < 1) {
      c10_val = 0.0;
    } else {
      c10_k_n = c10_j_n;
      c10_m_n = c10_k_n;
      c10_b_var = c10_m_n;
      c10_b_n_t = (ptrdiff_t)c10_b_var;
      c10_b_incx_t = (ptrdiff_t)1;
      c10_b_incy_t = (ptrdiff_t)1;
      c10_val = ddot(&c10_b_n_t, &(c10_x.data())[0], &c10_b_incx_t, &(c10_y.data
        ())[0], &c10_b_incy_t);
    }
    break;
  }

  return c10_val;
}

static void c10_c_linearForm_(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_obj, coder::array<
  real_T, 2U> &c10_workspace, coder::array<real_T, 2U> &c10_c_H, coder::array<
  real_T, 1U> &c10_f, coder::array<real_T, 1U> &c10_x)
{
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_lda_t;
  ptrdiff_t c10_m_t;
  ptrdiff_t c10_n_t;
  emlrtStack c10_b_st;
  emlrtStack c10_st;
  real_T c10_alpha1;
  real_T c10_b_beta1;
  real_T c10_beta1;
  real_T c10_c_beta1;
  real_T c10_fMultiplier;
  int32_T c10_b;
  int32_T c10_b_var;
  int32_T c10_c_i;
  int32_T c10_c_lda;
  int32_T c10_c_m;
  int32_T c10_c_var;
  int32_T c10_d_lda;
  int32_T c10_d_m;
  int32_T c10_e_b;
  int32_T c10_e_i;
  int32_T c10_f_n;
  int32_T c10_h_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_i_n;
  int32_T c10_lda;
  int32_T c10_m;
  int32_T c10_var;
  char_T c10_TRANSA;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_fMultiplier = 0.0;
  if (c10_b_obj->hasLinear) {
    c10_i = c10_b_obj->nvar;
    c10_st.site = &c10_qh_emlrtRSI;
    c10_b = c10_i;
    c10_e_b = c10_b;
    if (c10_e_b < 1) {
      c10_overflow = false;
    } else {
      c10_overflow = (c10_e_b > 2147483646);
    }

    if (c10_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_c_i = 0; c10_c_i < c10_i; c10_c_i++) {
      c10_e_i = c10_c_i + 1;
      c10_i1 = c10_f.size(0);
      if ((c10_e_i < 1) || (c10_e_i > c10_i1)) {
        emlrtDynamicBoundsCheckR2012b(c10_e_i, 1, c10_i1, &c10_yp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i2 = c10_workspace.size(0) * c10_workspace.size(1);
      if ((c10_e_i < 1) || (c10_e_i > c10_i2)) {
        emlrtDynamicBoundsCheckR2012b(c10_e_i, 1, c10_i2, &c10_yp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_workspace[c10_e_i - 1] = c10_f[c10_e_i - 1];
    }

    c10_fMultiplier = 1.0;
  }

  c10_st.site = &c10_qh_emlrtRSI;
  c10_m = c10_b_obj->nvar;
  c10_f_n = c10_b_obj->nvar;
  c10_lda = c10_b_obj->nvar;
  c10_beta1 = c10_fMultiplier;
  if ((c10_m < 1) || (c10_f_n < 1)) {
  } else {
    c10_c_m = c10_m;
    c10_h_n = c10_f_n;
    c10_c_lda = c10_lda;
    c10_b_beta1 = c10_beta1;
    c10_d_m = c10_c_m;
    c10_i_n = c10_h_n;
    c10_alpha1 = 0.5;
    c10_d_lda = c10_c_lda;
    c10_c_beta1 = c10_b_beta1;
    c10_TRANSA = 'N';
    c10_var = c10_d_m;
    c10_m_t = (ptrdiff_t)c10_var;
    c10_b_var = c10_i_n;
    c10_n_t = (ptrdiff_t)c10_b_var;
    c10_c_var = c10_d_lda;
    c10_lda_t = (ptrdiff_t)c10_c_var;
    c10_incx_t = (ptrdiff_t)1;
    c10_incy_t = (ptrdiff_t)1;
    dgemv(&c10_TRANSA, &c10_m_t, &c10_n_t, &c10_alpha1, &(c10_c_H.data())[0],
          &c10_lda_t, &(c10_x.data())[0], &c10_incx_t, &c10_c_beta1,
          &(c10_workspace.data())[0], &c10_incy_t);
  }
}

static void c10_b_iterate(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_c_H, coder::array<real_T, 1U>
  &c10_f, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_memspace, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_i_workingset, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager,
  c10_s_lryvQQZbN23ozlLWy4I3pD *c10_cholmanager, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_objective, c10_scZhlMkNxPxOgM0FLkVrfPH *c10_b_options,
  c10_sL9bDKomAYkxZSVrG9w6En c10_runTimeOptions)
{
  ptrdiff_t c10_b_incx_t;
  ptrdiff_t c10_b_n_t;
  ptrdiff_t c10_c_incx_t;
  ptrdiff_t c10_c_n_t;
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 2U> c10_b_r;
  coder::array<real_T, 2U> c10_d_H;
  coder::array<real_T, 2U> c10_e_H;
  coder::array<real_T, 2U> c10_s_H;
  coder::array<real_T, 1U> c10_b_f;
  coder::array<real_T, 1U> c10_b_solution;
  coder::array<real_T, 1U> c10_c_f;
  coder::array<real_T, 1U> c10_c_solution;
  coder::array<real_T, 1U> c10_d_f;
  coder::array<real_T, 1U> c10_d_solution;
  coder::array<real_T, 1U> c10_e_f;
  coder::array<real_T, 1U> c10_f_f;
  coder::array<real_T, 1U> c10_g_solution;
  coder::array<real_T, 1U> c10_j_workingset;
  coder::array<real_T, 1U> c10_o_workingset;
  coder::array<real_T, 1U> c10_x;
  coder::array<real_T, 1U> c10_y;
  c10_s_pF7WiHvRtoO0ktfmCER3HD c10_e_solution;
  c10_s_pF7WiHvRtoO0ktfmCER3HD c10_f_solution;
  c10_scZhlMkNxPxOgM0FLkVrfPH c10_c_options;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_d_st;
  emlrtStack c10_st;
  real_T c10_alpha;
  real_T c10_b_alpha;
  real_T c10_b_normDelta;
  real_T c10_c_alpha;
  real_T c10_d;
  real_T c10_d1;
  real_T c10_d_a;
  real_T c10_d_tolDelta;
  real_T c10_e_a;
  real_T c10_e_tolDelta;
  real_T c10_f_a;
  real_T c10_minLambda;
  real_T c10_normDelta;
  int32_T c10_TYPE;
  int32_T c10_ab_loop_ub;
  int32_T c10_activeConstrChangedType;
  int32_T c10_activeSetChangeID;
  int32_T c10_b_TYPE;
  int32_T c10_b_a;
  int32_T c10_b_activeSetChangeID;
  int32_T c10_b_idx;
  int32_T c10_b_idxConstr;
  int32_T c10_b_idx_global;
  int32_T c10_b_idx_local;
  int32_T c10_b_loop_ub;
  int32_T c10_b_nVar;
  int32_T c10_b_var;
  int32_T c10_bb_loop_ub;
  int32_T c10_c_TYPE;
  int32_T c10_c_a;
  int32_T c10_c_idx;
  int32_T c10_c_idxConstr;
  int32_T c10_c_idx_global;
  int32_T c10_c_idx_local;
  int32_T c10_c_loop_ub;
  int32_T c10_c_var;
  int32_T c10_cb_loop_ub;
  int32_T c10_colOffset;
  int32_T c10_d_TYPE;
  int32_T c10_d_idx;
  int32_T c10_d_idxConstr;
  int32_T c10_d_idx_global;
  int32_T c10_d_idx_local;
  int32_T c10_d_loop_ub;
  int32_T c10_db_loop_ub;
  int32_T c10_e_TYPE;
  int32_T c10_e_b;
  int32_T c10_e_idx;
  int32_T c10_e_idx_global;
  int32_T c10_e_idx_local;
  int32_T c10_e_loop_ub;
  int32_T c10_eb_loop_ub;
  int32_T c10_exitg1;
  int32_T c10_f_b;
  int32_T c10_f_idx_local;
  int32_T c10_f_loop_ub;
  int32_T c10_f_n;
  int32_T c10_fb_loop_ub;
  int32_T c10_g_a;
  int32_T c10_g_b;
  int32_T c10_g_idx_local;
  int32_T c10_g_loop_ub;
  int32_T c10_gb_loop_ub;
  int32_T c10_globalActiveConstrIdx;
  int32_T c10_h_a;
  int32_T c10_h_b;
  int32_T c10_h_idx_local;
  int32_T c10_h_loop_ub;
  int32_T c10_h_n;
  int32_T c10_hb_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i19;
  int32_T c10_i2;
  int32_T c10_i20;
  int32_T c10_i21;
  int32_T c10_i22;
  int32_T c10_i23;
  int32_T c10_i24;
  int32_T c10_i25;
  int32_T c10_i26;
  int32_T c10_i27;
  int32_T c10_i28;
  int32_T c10_i29;
  int32_T c10_i3;
  int32_T c10_i30;
  int32_T c10_i31;
  int32_T c10_i32;
  int32_T c10_i33;
  int32_T c10_i34;
  int32_T c10_i35;
  int32_T c10_i36;
  int32_T c10_i37;
  int32_T c10_i38;
  int32_T c10_i39;
  int32_T c10_i4;
  int32_T c10_i40;
  int32_T c10_i41;
  int32_T c10_i42;
  int32_T c10_i43;
  int32_T c10_i44;
  int32_T c10_i45;
  int32_T c10_i46;
  int32_T c10_i47;
  int32_T c10_i48;
  int32_T c10_i49;
  int32_T c10_i5;
  int32_T c10_i50;
  int32_T c10_i51;
  int32_T c10_i52;
  int32_T c10_i53;
  int32_T c10_i54;
  int32_T c10_i55;
  int32_T c10_i56;
  int32_T c10_i57;
  int32_T c10_i58;
  int32_T c10_i59;
  int32_T c10_i6;
  int32_T c10_i60;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_iAineq0;
  int32_T c10_i_loop_ub;
  int32_T c10_i_n;
  int32_T c10_ib_loop_ub;
  int32_T c10_idx;
  int32_T c10_idxConstr;
  int32_T c10_idxMinLambda;
  int32_T c10_idx_bnd_local;
  int32_T c10_idx_global;
  int32_T c10_idx_local;
  int32_T c10_j_b;
  int32_T c10_j_loop_ub;
  int32_T c10_j_n;
  int32_T c10_jb_loop_ub;
  int32_T c10_k_b;
  int32_T c10_k_loop_ub;
  int32_T c10_k_n;
  int32_T c10_kb_loop_ub;
  int32_T c10_localActiveConstrIdx;
  int32_T c10_loop_ub;
  int32_T c10_mEq;
  int32_T c10_mFixed;
  int32_T c10_m_loop_ub;
  int32_T c10_m_n;
  int32_T c10_mb_loop_ub;
  int32_T c10_nVar;
  int32_T c10_o_loop_ub;
  int32_T c10_o_n;
  int32_T c10_p_loop_ub;
  int32_T c10_p_n;
  int32_T c10_q_loop_ub;
  int32_T c10_q_n;
  int32_T c10_r_loop_ub;
  int32_T c10_s_loop_ub;
  int32_T c10_t_loop_ub;
  int32_T c10_u_loop_ub;
  int32_T c10_v_loop_ub;
  int32_T c10_var;
  int32_T c10_w_loop_ub;
  int32_T c10_workingIdx;
  int32_T c10_x_loop_ub;
  int32_T c10_y_loop_ub;
  boolean_T c10_b;
  boolean_T c10_b1;
  boolean_T c10_b_overflow;
  boolean_T c10_c_overflow;
  boolean_T c10_guard1;
  boolean_T c10_isLP;
  boolean_T c10_newBlocking;
  boolean_T c10_overflow;
  boolean_T c10_subProblemChanged;
  boolean_T c10_updateFval;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_d_st.prev = &c10_c_st;
  c10_d_st.tls = c10_c_st.tls;
  c10_subProblemChanged = true;
  c10_updateFval = true;
  c10_activeSetChangeID = 0;
  c10_TYPE = c10_objective->objtype;
  c10_d_tolDelta = 6.7434957617430445E-7;
  c10_nVar = c10_i_workingset->nVar;
  c10_globalActiveConstrIdx = 0;
  c10_d_H.set_size(&c10_dg_emlrtRTEI, c10_sp, c10_c_H.size(0), c10_c_H.size(1));
  c10_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_d_H[c10_i] = c10_c_H[c10_i];
  }

  c10_b_f.set_size(&c10_dg_emlrtRTEI, c10_sp, c10_f.size(0));
  c10_b_loop_ub = c10_f.size(0) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_b_f[c10_i1] = c10_f[c10_i1];
  }

  c10_b_solution.set_size(&c10_dg_emlrtRTEI, c10_sp, c10_solution->xstar.size(0));
  c10_c_loop_ub = c10_solution->xstar.size(0) - 1;
  for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
    c10_b_solution[c10_i2] = c10_solution->xstar[c10_i2];
  }

  c10_st.site = &c10_vh_emlrtRSI;
  c10_b_computeGrad_StoreHx(chartInstance, &c10_st, c10_objective, c10_d_H,
    c10_b_f, c10_b_solution);
  c10_b_r.set_size(&c10_dg_emlrtRTEI, c10_sp,
                   c10_memspace->workspace_double.size(0),
                   c10_memspace->workspace_double.size(1));
  c10_d_loop_ub = c10_memspace->workspace_double.size(0) *
    c10_memspace->workspace_double.size(1) - 1;
  for (c10_i3 = 0; c10_i3 <= c10_d_loop_ub; c10_i3++) {
    c10_b_r[c10_i3] = c10_memspace->workspace_double[c10_i3];
  }

  c10_c_f.set_size(&c10_dg_emlrtRTEI, c10_sp, c10_f.size(0));
  c10_e_loop_ub = c10_f.size(0) - 1;
  for (c10_i4 = 0; c10_i4 <= c10_e_loop_ub; c10_i4++) {
    c10_c_f[c10_i4] = c10_f[c10_i4];
  }

  c10_c_solution.set_size(&c10_dg_emlrtRTEI, c10_sp, c10_solution->xstar.size(0));
  c10_f_loop_ub = c10_solution->xstar.size(0) - 1;
  for (c10_i5 = 0; c10_i5 <= c10_f_loop_ub; c10_i5++) {
    c10_c_solution[c10_i5] = c10_solution->xstar[c10_i5];
  }

  c10_st.site = &c10_vh_emlrtRSI;
  c10_d = c10_b_computeFval_ReuseHx(chartInstance, &c10_st, c10_objective,
    c10_b_r, c10_c_f, c10_c_solution);
  c10_solution->fstar = c10_d;
  c10_memspace->workspace_double.set_size(&c10_dg_emlrtRTEI, c10_sp,
    c10_b_r.size(0), c10_b_r.size(1));
  c10_g_loop_ub = c10_b_r.size(0) * c10_b_r.size(1) - 1;
  for (c10_i6 = 0; c10_i6 <= c10_g_loop_ub; c10_i6++) {
    c10_memspace->workspace_double[c10_i6] = c10_b_r[c10_i6];
  }

  if (c10_solution->iterations < c10_runTimeOptions.MaxIterations) {
    c10_solution->state = -5;
  } else {
    c10_solution->state = 0;
  }

  c10_x.set_size(&c10_dg_emlrtRTEI, c10_sp, c10_solution->lambda.size[0]);
  c10_h_loop_ub = c10_solution->lambda.size[0] - 1;
  for (c10_i7 = 0; c10_i7 <= c10_h_loop_ub; c10_i7++) {
    c10_x[c10_i7] = c10_solution->lambda.data[c10_i7];
  }

  c10_st.site = &c10_vh_emlrtRSI;
  c10_b_xcopy(chartInstance, &c10_st, c10_i_workingset->mConstrMax, c10_x);
  c10_solution->lambda.size[0] = c10_x.size(0);
  c10_i_loop_ub = c10_x.size(0) - 1;
  for (c10_i8 = 0; c10_i8 <= c10_i_loop_ub; c10_i8++) {
    c10_solution->lambda.data[c10_i8] = c10_x[c10_i8];
  }

  do {
    c10_exitg1 = 0;
    if (c10_solution->state == -5) {
      c10_guard1 = false;
      if (c10_subProblemChanged) {
        switch (c10_activeSetChangeID) {
         case 1:
          c10_workingIdx = c10_i_workingset->ldA *
            (c10_i_workingset->nActiveConstr - 1);
          c10_o_workingset.set_size(&c10_dg_emlrtRTEI, c10_sp,
            c10_i_workingset->ATwset.size(0));
          c10_m_loop_ub = c10_i_workingset->ATwset.size(0) - 1;
          for (c10_i11 = 0; c10_i11 <= c10_m_loop_ub; c10_i11++) {
            c10_o_workingset[c10_i11] = c10_i_workingset->ATwset[c10_i11];
          }

          c10_st.site = &c10_vh_emlrtRSI;
          c10_b_squareQ_appendCol(chartInstance, &c10_st, c10_b_qrmanager,
            c10_o_workingset, c10_workingIdx + 1);
          break;

         case -1:
          c10_st.site = &c10_vh_emlrtRSI;
          c10_b_deleteColMoveEnd(chartInstance, &c10_st, c10_b_qrmanager,
            c10_globalActiveConstrIdx);
          break;

         default:
          c10_j_workingset.set_size(&c10_dg_emlrtRTEI, c10_sp,
            c10_i_workingset->ATwset.size(0));
          c10_k_loop_ub = c10_i_workingset->ATwset.size(0) - 1;
          for (c10_i10 = 0; c10_i10 <= c10_k_loop_ub; c10_i10++) {
            c10_j_workingset[c10_i10] = c10_i_workingset->ATwset[c10_i10];
          }

          c10_st.site = &c10_vh_emlrtRSI;
          c10_b_factorQR(chartInstance, &c10_st, c10_b_qrmanager,
                         c10_j_workingset, c10_nVar,
                         c10_i_workingset->nActiveConstr, c10_i_workingset->ldA);
          c10_st.site = &c10_vh_emlrtRSI;
          c10_i14 = c10_b_qrmanager->mrows;
          c10_b_st.site = &c10_sf_emlrtRSI;
          c10_b_computeQ_(chartInstance, &c10_b_st, c10_b_qrmanager, c10_i14);
          break;
        }

        c10_e_H.set_size(&c10_dg_emlrtRTEI, c10_sp, c10_c_H.size(0),
                         c10_c_H.size(1));
        c10_p_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
        for (c10_i13 = 0; c10_i13 <= c10_p_loop_ub; c10_i13++) {
          c10_e_H[c10_i13] = c10_c_H[c10_i13];
        }

        c10_st.site = &c10_vh_emlrtRSI;
        c10_b_compute_deltax(chartInstance, &c10_st, c10_e_H, c10_solution,
                             c10_memspace, c10_b_qrmanager, c10_cholmanager,
                             c10_objective);
        if (c10_solution->state != -5) {
          c10_exitg1 = 1;
        } else {
          c10_f_n = c10_nVar;
          c10_x.set_size(&c10_dg_emlrtRTEI, c10_sp, c10_solution->searchDir.size
                         (0));
          c10_u_loop_ub = c10_solution->searchDir.size(0) - 1;
          for (c10_i19 = 0; c10_i19 <= c10_u_loop_ub; c10_i19++) {
            c10_x[c10_i19] = c10_solution->searchDir[c10_i19];
          }

          if (c10_f_n < 1) {
            c10_normDelta = 0.0;
          } else {
            c10_h_n = c10_f_n;
            c10_i_n = c10_h_n;
            c10_var = c10_i_n;
            c10_n_t = (ptrdiff_t)c10_var;
            c10_incx_t = (ptrdiff_t)1;
            c10_normDelta = dnrm2(&c10_n_t, &(c10_x.data())[0], &c10_incx_t);
          }

          c10_guard1 = true;
        }
      } else {
        c10_st.site = &c10_vh_emlrtRSI;
        c10_b_xcopy(chartInstance, &c10_st, c10_nVar, c10_solution->searchDir);
        c10_normDelta = 0.0;
        c10_guard1 = true;
      }

      if (c10_guard1) {
        if ((!c10_subProblemChanged) || (c10_normDelta <
             c10_b_options->StepTolerance) || (c10_i_workingset->nActiveConstr >=
             c10_nVar)) {
          c10_b_r.set_size(&c10_dg_emlrtRTEI, c10_sp,
                           c10_memspace->workspace_double.size(0),
                           c10_memspace->workspace_double.size(1));
          c10_r_loop_ub = c10_memspace->workspace_double.size(0) *
            c10_memspace->workspace_double.size(1) - 1;
          for (c10_i16 = 0; c10_i16 <= c10_r_loop_ub; c10_i16++) {
            c10_b_r[c10_i16] = c10_memspace->workspace_double[c10_i16];
          }

          c10_st.site = &c10_vh_emlrtRSI;
          c10_b_compute_lambda(chartInstance, &c10_st, c10_b_r, c10_solution,
                               c10_objective, c10_b_qrmanager);
          c10_memspace->workspace_double.set_size(&c10_dg_emlrtRTEI, c10_sp,
            c10_b_r.size(0), c10_b_r.size(1));
          c10_v_loop_ub = c10_b_r.size(0) * c10_b_r.size(1) - 1;
          for (c10_i22 = 0; c10_i22 <= c10_v_loop_ub; c10_i22++) {
            c10_memspace->workspace_double[c10_i22] = c10_b_r[c10_i22];
          }

          if ((c10_solution->state != -7) || (c10_i_workingset->nActiveConstr >
               c10_nVar)) {
            c10_st.site = &c10_vh_emlrtRSI;
            c10_f_solution = *c10_solution;
            chartInstance->c10_h_workingset = *c10_i_workingset;
            c10_b_TYPE = c10_TYPE;
            c10_mFixed = chartInstance->c10_h_workingset.nWConstr[0] + 1;
            c10_mEq = chartInstance->c10_h_workingset.nWConstr[1];
            c10_idxMinLambda = 0;
            c10_minLambda = 0.0 * c10_runTimeOptions.ProbRelTolFactor *
              static_cast<real_T>(c10_b_TYPE != 5);
            c10_i28 = c10_mFixed + c10_mEq;
            c10_i29 = chartInstance->c10_h_workingset.nActiveConstr;
            c10_b_st.site = &c10_dj_emlrtRSI;
            c10_b_a = c10_i28;
            c10_e_b = c10_i29;
            c10_c_a = c10_b_a;
            c10_f_b = c10_e_b;
            if (c10_c_a > c10_f_b) {
              c10_overflow = false;
            } else {
              c10_overflow = (c10_f_b > 2147483646);
            }

            if (c10_overflow) {
              c10_c_st.site = &c10_v_emlrtRSI;
              c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
            }

            for (c10_idx = c10_i28; c10_idx <= c10_i29; c10_idx++) {
              if ((c10_idx < 1) || (c10_idx > c10_f_solution.lambda.size[0])) {
                emlrtDynamicBoundsCheckR2012b(c10_idx, 1,
                  c10_f_solution.lambda.size[0], &c10_cq_emlrtBCI, &c10_st);
              }

              if (c10_f_solution.lambda.data[c10_idx - 1] < c10_minLambda) {
                if ((c10_idx < 1) || (c10_idx > c10_f_solution.lambda.size[0]))
                {
                  emlrtDynamicBoundsCheckR2012b(c10_idx, 1,
                    c10_f_solution.lambda.size[0], &c10_cq_emlrtBCI, &c10_st);
                }

                c10_minLambda = c10_f_solution.lambda.data[c10_idx - 1];
                c10_idxMinLambda = c10_idx;
              }
            }

            if (c10_idxMinLambda == 0) {
              c10_solution->state = 1;
            } else {
              c10_activeSetChangeID = -1;
              c10_globalActiveConstrIdx = c10_idxMinLambda;
              c10_subProblemChanged = true;
              if ((c10_idxMinLambda < 1) || (c10_idxMinLambda >
                   c10_i_workingset->Wid.size[0])) {
                emlrtDynamicBoundsCheckR2012b(c10_idxMinLambda, 1,
                  c10_i_workingset->Wid.size[0], &c10_aq_emlrtBCI,
                  (emlrtConstCTX)c10_sp);
              }

              if ((c10_idxMinLambda < 1) || (c10_idxMinLambda >
                   c10_i_workingset->Wlocalidx.size[0])) {
                emlrtDynamicBoundsCheckR2012b(c10_idxMinLambda, 1,
                  c10_i_workingset->Wlocalidx.size[0], &c10_aq_emlrtBCI,
                  (emlrtConstCTX)c10_sp);
              }

              c10_st.site = &c10_vh_emlrtRSI;
              c10_e_idx_global = c10_idxMinLambda;
              if ((c10_e_idx_global < 1) || (c10_e_idx_global >
                   c10_i_workingset->Wid.size[0])) {
                emlrtDynamicBoundsCheckR2012b(c10_e_idx_global, 1,
                  c10_i_workingset->Wid.size[0], &c10_wo_emlrtBCI, &c10_st);
              }

              c10_e_TYPE = c10_i_workingset->Wid.data[c10_e_idx_global - 1];
              if ((c10_e_idx_global < 1) || (c10_e_idx_global >
                   c10_i_workingset->Wlocalidx.size[0])) {
                emlrtDynamicBoundsCheckR2012b(c10_e_idx_global, 1,
                  c10_i_workingset->Wlocalidx.size[0], &c10_wo_emlrtBCI, &c10_st);
              }

              c10_h_idx_local = c10_i_workingset->
                Wlocalidx.data[c10_e_idx_global - 1] - 1;
              if ((c10_e_TYPE < 1) || (c10_e_TYPE > 6)) {
                emlrtDynamicBoundsCheckR2012b(c10_e_TYPE, 1, 6, &c10_xo_emlrtBCI,
                  &c10_st);
              }

              c10_d_idxConstr = c10_i_workingset->isActiveIdx[c10_e_TYPE - 1] +
                c10_h_idx_local;
              if ((c10_d_idxConstr < 1) || (c10_d_idxConstr >
                   c10_i_workingset->isActiveConstr.size[0])) {
                emlrtDynamicBoundsCheckR2012b(c10_d_idxConstr, 1,
                  c10_i_workingset->isActiveConstr.size[0], &c10_wo_emlrtBCI,
                  &c10_st);
              }

              c10_i_workingset->isActiveConstr.data[c10_d_idxConstr - 1] = false;
              c10_i48 = c10_i_workingset->nActiveConstr;
              c10_b_st.site = &c10_gg_emlrtRSI;
              c10_b_moveConstraint_(chartInstance, &c10_b_st, c10_i_workingset,
                                    c10_i48, c10_e_idx_global);
              c10_i_workingset->nActiveConstr--;
              if ((c10_e_TYPE < 1) || (c10_e_TYPE > 5)) {
                emlrtDynamicBoundsCheckR2012b(c10_e_TYPE, 1, 5, &c10_yo_emlrtBCI,
                  &c10_st);
              }

              c10_i_workingset->nWConstr[c10_e_TYPE - 1]--;
              if ((c10_idxMinLambda < 1) || (c10_idxMinLambda >
                   c10_solution->lambda.size[0])) {
                emlrtDynamicBoundsCheckR2012b(c10_idxMinLambda, 1,
                  c10_solution->lambda.size[0], &c10_aq_emlrtBCI, (emlrtConstCTX)
                  c10_sp);
              }

              c10_solution->lambda.data[c10_idxMinLambda - 1] = 0.0;
            }
          } else {
            c10_idxMinLambda = c10_i_workingset->nActiveConstr;
            c10_activeSetChangeID = 0;
            c10_globalActiveConstrIdx = c10_idxMinLambda;
            c10_subProblemChanged = true;
            if ((c10_idxMinLambda < 1) || (c10_idxMinLambda >
                 c10_i_workingset->Wid.size[0])) {
              emlrtDynamicBoundsCheckR2012b(c10_idxMinLambda, 1,
                c10_i_workingset->Wid.size[0], &c10_aq_emlrtBCI, (emlrtConstCTX)
                c10_sp);
            }

            if ((c10_idxMinLambda < 1) || (c10_idxMinLambda >
                 c10_i_workingset->Wlocalidx.size[0])) {
              emlrtDynamicBoundsCheckR2012b(c10_idxMinLambda, 1,
                c10_i_workingset->Wlocalidx.size[0], &c10_aq_emlrtBCI,
                (emlrtConstCTX)c10_sp);
            }

            c10_st.site = &c10_vh_emlrtRSI;
            c10_idx_global = c10_idxMinLambda;
            if ((c10_idx_global < 1) || (c10_idx_global >
                 c10_i_workingset->Wid.size[0])) {
              emlrtDynamicBoundsCheckR2012b(c10_idx_global, 1,
                c10_i_workingset->Wid.size[0], &c10_wo_emlrtBCI, &c10_st);
            }

            c10_d_TYPE = c10_i_workingset->Wid.data[c10_idx_global - 1];
            if ((c10_idx_global < 1) || (c10_idx_global >
                 c10_i_workingset->Wlocalidx.size[0])) {
              emlrtDynamicBoundsCheckR2012b(c10_idx_global, 1,
                c10_i_workingset->Wlocalidx.size[0], &c10_wo_emlrtBCI, &c10_st);
            }

            c10_g_idx_local = c10_i_workingset->Wlocalidx.data[c10_idx_global -
              1] - 1;
            if ((c10_d_TYPE < 1) || (c10_d_TYPE > 6)) {
              emlrtDynamicBoundsCheckR2012b(c10_d_TYPE, 1, 6, &c10_xo_emlrtBCI,
                &c10_st);
            }

            c10_c_idxConstr = c10_i_workingset->isActiveIdx[c10_d_TYPE - 1] +
              c10_g_idx_local;
            if ((c10_c_idxConstr < 1) || (c10_c_idxConstr >
                 c10_i_workingset->isActiveConstr.size[0])) {
              emlrtDynamicBoundsCheckR2012b(c10_c_idxConstr, 1,
                c10_i_workingset->isActiveConstr.size[0], &c10_wo_emlrtBCI,
                &c10_st);
            }

            c10_i_workingset->isActiveConstr.data[c10_c_idxConstr - 1] = false;
            c10_i34 = c10_i_workingset->nActiveConstr;
            c10_b_st.site = &c10_gg_emlrtRSI;
            c10_b_moveConstraint_(chartInstance, &c10_b_st, c10_i_workingset,
                                  c10_i34, c10_idx_global);
            c10_i_workingset->nActiveConstr--;
            if ((c10_d_TYPE < 1) || (c10_d_TYPE > 5)) {
              emlrtDynamicBoundsCheckR2012b(c10_d_TYPE, 1, 5, &c10_yo_emlrtBCI,
                &c10_st);
            }

            c10_i_workingset->nWConstr[c10_d_TYPE - 1]--;
            if ((c10_idxMinLambda < 1) || (c10_idxMinLambda >
                 c10_solution->lambda.size[0])) {
              emlrtDynamicBoundsCheckR2012b(c10_idxMinLambda, 1,
                c10_solution->lambda.size[0], &c10_aq_emlrtBCI, (emlrtConstCTX)
                c10_sp);
            }

            c10_solution->lambda.data[c10_idxMinLambda - 1] = 0.0;
          }

          c10_updateFval = false;
        } else {
          c10_subProblemChanged = true;
          c10_isLP = (c10_TYPE == 5);
          if (c10_isLP || c10_runTimeOptions.RemainFeasible) {
            c10_b_r.set_size(&c10_dg_emlrtRTEI, c10_sp,
                             c10_memspace->workspace_double.size(0),
                             c10_memspace->workspace_double.size(1));
            c10_t_loop_ub = c10_memspace->workspace_double.size(0) *
              c10_memspace->workspace_double.size(1) - 1;
            for (c10_i18 = 0; c10_i18 <= c10_t_loop_ub; c10_i18++) {
              c10_b_r[c10_i18] = c10_memspace->workspace_double[c10_i18];
            }

            c10_st.site = &c10_vh_emlrtRSI;
            c10_b_feasibleratiotest(chartInstance, &c10_st, c10_solution,
              c10_i_workingset, c10_isLP, &c10_alpha, &c10_b, &c10_i20, &c10_i21);
            c10_b_alpha = c10_alpha;
            c10_newBlocking = c10_b;
            c10_activeConstrChangedType = c10_i20;
            c10_localActiveConstrIdx = c10_i21;
            c10_memspace->workspace_double.set_size(&c10_dg_emlrtRTEI, c10_sp,
              c10_b_r.size(0), c10_b_r.size(1));
            c10_x_loop_ub = c10_b_r.size(0) * c10_b_r.size(1) - 1;
            for (c10_i26 = 0; c10_i26 <= c10_x_loop_ub; c10_i26++) {
              c10_memspace->workspace_double[c10_i26] = c10_b_r[c10_i26];
            }
          } else {
            c10_b_r.set_size(&c10_dg_emlrtRTEI, c10_sp,
                             c10_memspace->workspace_double.size(0),
                             c10_memspace->workspace_double.size(1));
            c10_s_loop_ub = c10_memspace->workspace_double.size(0) *
              c10_memspace->workspace_double.size(1) - 1;
            for (c10_i17 = 0; c10_i17 <= c10_s_loop_ub; c10_i17++) {
              c10_b_r[c10_i17] = c10_memspace->workspace_double[c10_i17];
            }

            c10_e_tolDelta = c10_d_tolDelta;
            c10_e_solution = *c10_solution;
            chartInstance->c10_g_workingset = *c10_i_workingset;
            c10_st.site = &c10_vh_emlrtRSI;
            c10_b_ratiotest(chartInstance, &c10_st, &c10_e_solution,
                            &chartInstance->c10_g_workingset, &c10_e_tolDelta,
                            &c10_c_alpha, &c10_b1, &c10_i24, &c10_i25);
            c10_b_alpha = c10_c_alpha;
            c10_newBlocking = c10_b1;
            c10_activeConstrChangedType = c10_i24;
            c10_localActiveConstrIdx = c10_i25;
            c10_memspace->workspace_double.set_size(&c10_dg_emlrtRTEI, c10_sp,
              c10_b_r.size(0), c10_b_r.size(1));
            c10_y_loop_ub = c10_b_r.size(0) * c10_b_r.size(1) - 1;
            for (c10_i27 = 0; c10_i27 <= c10_y_loop_ub; c10_i27++) {
              c10_memspace->workspace_double[c10_i27] = c10_b_r[c10_i27];
            }

            c10_d_tolDelta = c10_e_tolDelta;
          }

          if (c10_newBlocking) {
            switch (c10_activeConstrChangedType) {
             case 3:
              c10_st.site = &c10_vh_emlrtRSI;
              c10_b_idx_local = c10_localActiveConstrIdx;
              c10_b_st.site = &c10_gj_emlrtRSI;
              c10_d_idx_local = c10_b_idx_local;
              c10_i_workingset->nWConstr[2]++;
              c10_idxConstr = c10_i_workingset->isActiveIdx[2] + c10_d_idx_local;
              c10_i31 = c10_idxConstr - 1;
              if ((c10_i31 < 1) || (c10_i31 >
                                    c10_i_workingset->isActiveConstr.size[0])) {
                emlrtDynamicBoundsCheckR2012b(c10_i31, 1,
                  c10_i_workingset->isActiveConstr.size[0], &c10_bq_emlrtBCI,
                  &c10_b_st);
              }

              c10_i_workingset->isActiveConstr.data[c10_i31 - 1] = true;
              c10_i_workingset->nActiveConstr++;
              c10_b_idx_global = c10_i_workingset->nActiveConstr;
              if ((c10_b_idx_global < 1) || (c10_b_idx_global >
                   c10_i_workingset->Wid.size[0])) {
                emlrtDynamicBoundsCheckR2012b(c10_b_idx_global, 1,
                  c10_i_workingset->Wid.size[0], &c10_bq_emlrtBCI, &c10_b_st);
              }

              c10_i_workingset->Wid.data[c10_b_idx_global - 1] = 3;
              if ((c10_b_idx_global < 1) || (c10_b_idx_global >
                   c10_i_workingset->Wlocalidx.size[0])) {
                emlrtDynamicBoundsCheckR2012b(c10_b_idx_global, 1,
                  c10_i_workingset->Wlocalidx.size[0], &c10_bq_emlrtBCI,
                  &c10_b_st);
              }

              c10_i_workingset->Wlocalidx.data[c10_b_idx_global - 1] =
                c10_d_idx_local;
              c10_iAineq0 = c10_i_workingset->ldA * (c10_b_idx_local - 1);
              c10_i36 = c10_i_workingset->nVar;
              for (c10_b_idx = 0; c10_b_idx < c10_i36; c10_b_idx++) {
                c10_i38 = (c10_iAineq0 + c10_b_idx) + 1;
                if ((c10_i38 < 1) || (c10_i38 > 0)) {
                  emlrtDynamicBoundsCheckR2012b(c10_i38, 1, 0, &c10_fq_emlrtBCI,
                    &c10_st);
                }
              }

              emlrtDynamicBoundsCheckR2012b(c10_b_idx_local, 1, 0,
                &c10_eq_emlrtBCI, &c10_st);
              break;

             case 4:
              c10_st.site = &c10_vh_emlrtRSI;
              c10_c_idx_local = c10_localActiveConstrIdx;
              c10_b_st.site = &c10_hj_emlrtRSI;
              c10_e_idx_local = c10_c_idx_local;
              c10_c_st.site = &c10_ij_emlrtRSI;
              c10_f_idx_local = c10_e_idx_local;
              c10_i_workingset->nWConstr[3]++;
              c10_b_idxConstr = c10_i_workingset->isActiveIdx[3] +
                c10_f_idx_local;
              c10_i32 = c10_b_idxConstr - 1;
              if ((c10_i32 < 1) || (c10_i32 >
                                    c10_i_workingset->isActiveConstr.size[0])) {
                emlrtDynamicBoundsCheckR2012b(c10_i32, 1,
                  c10_i_workingset->isActiveConstr.size[0], &c10_bq_emlrtBCI,
                  &c10_c_st);
              }

              c10_i_workingset->isActiveConstr.data[c10_i32 - 1] = true;
              c10_i_workingset->nActiveConstr++;
              c10_c_idx_global = c10_i_workingset->nActiveConstr;
              if ((c10_c_idx_global < 1) || (c10_c_idx_global >
                   c10_i_workingset->Wid.size[0])) {
                emlrtDynamicBoundsCheckR2012b(c10_c_idx_global, 1,
                  c10_i_workingset->Wid.size[0], &c10_bq_emlrtBCI, &c10_c_st);
              }

              c10_i_workingset->Wid.data[c10_c_idx_global - 1] = 4;
              if ((c10_c_idx_global < 1) || (c10_c_idx_global >
                   c10_i_workingset->Wlocalidx.size[0])) {
                emlrtDynamicBoundsCheckR2012b(c10_c_idx_global, 1,
                  c10_i_workingset->Wlocalidx.size[0], &c10_bq_emlrtBCI,
                  &c10_c_st);
              }

              c10_i_workingset->Wlocalidx.data[c10_c_idx_global - 1] =
                c10_f_idx_local;
              c10_d_idx_global = c10_i_workingset->nActiveConstr;
              c10_colOffset = c10_i_workingset->ldA * (c10_d_idx_global - 1);
              c10_i39 = c10_i_workingset->indexLB.size(0);
              if ((c10_e_idx_local < 1) || (c10_e_idx_local > c10_i39)) {
                emlrtDynamicBoundsCheckR2012b(c10_e_idx_local, 1, c10_i39,
                  &c10_dq_emlrtBCI, &c10_b_st);
              }

              c10_idx_bnd_local = c10_i_workingset->indexLB[c10_e_idx_local - 1];
              c10_i42 = c10_i_workingset->lb.size(0);
              if ((c10_idx_bnd_local < 1) || (c10_idx_bnd_local > c10_i42)) {
                emlrtDynamicBoundsCheckR2012b(c10_idx_bnd_local, 1, c10_i42,
                  &c10_dq_emlrtBCI, &c10_b_st);
              }

              if ((c10_d_idx_global < 1) || (c10_d_idx_global >
                   c10_i_workingset->bwset.size[0])) {
                emlrtDynamicBoundsCheckR2012b(c10_d_idx_global, 1,
                  c10_i_workingset->bwset.size[0], &c10_dq_emlrtBCI, &c10_b_st);
              }

              c10_i_workingset->bwset.data[c10_d_idx_global - 1] =
                c10_i_workingset->lb[c10_idx_bnd_local - 1];
              c10_i46 = c10_idx_bnd_local - 2;
              c10_c_st.site = &c10_ij_emlrtRSI;
              c10_g_b = c10_i46 + 1;
              c10_h_b = c10_g_b;
              if (c10_h_b < 1) {
                c10_b_overflow = false;
              } else {
                c10_b_overflow = (c10_h_b > 2147483646);
              }

              if (c10_b_overflow) {
                c10_d_st.site = &c10_v_emlrtRSI;
                c10_check_forloop_overflow_error(chartInstance, &c10_d_st);
              }

              for (c10_c_idx = 0; c10_c_idx <= c10_i46; c10_c_idx++) {
                c10_d_idx = c10_c_idx;
                c10_i53 = c10_i_workingset->ATwset.size(0);
                c10_i54 = (c10_d_idx + c10_colOffset) + 1;
                if ((c10_i54 < 1) || (c10_i54 > c10_i53)) {
                  emlrtDynamicBoundsCheckR2012b(c10_i54, 1, c10_i53,
                    &c10_dq_emlrtBCI, &c10_b_st);
                }

                c10_i_workingset->ATwset[c10_i54 - 1] = 0.0;
              }

              c10_i51 = c10_i_workingset->ATwset.size(0);
              c10_i52 = c10_idx_bnd_local + c10_colOffset;
              if ((c10_i52 < 1) || (c10_i52 > c10_i51)) {
                emlrtDynamicBoundsCheckR2012b(c10_i52, 1, c10_i51,
                  &c10_dq_emlrtBCI, &c10_b_st);
              }

              c10_i_workingset->ATwset[c10_i52 - 1] = -1.0;
              c10_i55 = c10_idx_bnd_local + 1;
              c10_i56 = c10_i_workingset->nVar;
              c10_c_st.site = &c10_ij_emlrtRSI;
              c10_g_a = c10_i55;
              c10_j_b = c10_i56;
              c10_h_a = c10_g_a;
              c10_k_b = c10_j_b;
              if (c10_h_a > c10_k_b) {
                c10_c_overflow = false;
              } else {
                c10_c_overflow = (c10_k_b > 2147483646);
              }

              if (c10_c_overflow) {
                c10_d_st.site = &c10_v_emlrtRSI;
                c10_check_forloop_overflow_error(chartInstance, &c10_d_st);
              }

              for (c10_e_idx = c10_i55; c10_e_idx <= c10_i56; c10_e_idx++) {
                c10_i57 = c10_i_workingset->ATwset.size(0);
                c10_i59 = c10_e_idx + c10_colOffset;
                if ((c10_i59 < 1) || (c10_i59 > c10_i57)) {
                  emlrtDynamicBoundsCheckR2012b(c10_i59, 1, c10_i57,
                    &c10_dq_emlrtBCI, &c10_b_st);
                }

                c10_i_workingset->ATwset[c10_i59 - 1] = 0.0;
              }

              switch (c10_i_workingset->probType) {
               case 3:
               case 2:
                break;

               default:
                c10_i58 = c10_i_workingset->ATwset.size(0);
                c10_i60 = c10_i_workingset->nVar + c10_colOffset;
                if ((c10_i60 < 1) || (c10_i60 > c10_i58)) {
                  emlrtDynamicBoundsCheckR2012b(c10_i60, 1, c10_i58,
                    &c10_dq_emlrtBCI, &c10_b_st);
                }

                c10_i_workingset->ATwset[c10_i60 - 1] = -1.0;
                break;
              }
              break;

             default:
              c10_st.site = &c10_vh_emlrtRSI;
              c10_idx_local = c10_localActiveConstrIdx;
              c10_b_st.site = &c10_jj_emlrtRSI;
              c10_b_addBoundToActiveSetMatrix_(chartInstance, &c10_b_st,
                c10_i_workingset, c10_idx_local);
              break;
            }

            c10_activeSetChangeID = 1;
          } else {
            c10_st.site = &c10_vh_emlrtRSI;
            c10_b_nVar = c10_objective->nvar;
            c10_c_TYPE = c10_objective->objtype;
            if (c10_c_TYPE == 5) {
              c10_j_n = c10_b_nVar;
              c10_x.set_size(&c10_kh_emlrtRTEI, &c10_st,
                             c10_solution->searchDir.size(0));
              c10_ab_loop_ub = c10_solution->searchDir.size(0) - 1;
              for (c10_i30 = 0; c10_i30 <= c10_ab_loop_ub; c10_i30++) {
                c10_x[c10_i30] = c10_solution->searchDir[c10_i30];
              }

              if (c10_j_n < 1) {
                c10_b_normDelta = 0.0;
              } else {
                c10_m_n = c10_j_n;
                c10_o_n = c10_m_n;
                c10_b_var = c10_o_n;
                c10_b_n_t = (ptrdiff_t)c10_b_var;
                c10_b_incx_t = (ptrdiff_t)1;
                c10_b_normDelta = dnrm2(&c10_b_n_t, &(c10_x.data())[0],
                  &c10_b_incx_t);
              }

              c10_b_st.site = &c10_kj_emlrtRSI;
              if (c10_b_normDelta > 100.0 * static_cast<real_T>(c10_b_nVar) *
                  1.4901161193847656E-8) {
                c10_solution->state = 3;
              } else {
                c10_solution->state = 4;
              }
            }

            c10_subProblemChanged = false;
            if (c10_i_workingset->nActiveConstr == 0) {
              c10_solution->state = 1;
            }
          }

          c10_st.site = &c10_vh_emlrtRSI;
          c10_k_n = c10_nVar;
          c10_d_a = c10_b_alpha;
          c10_x.set_size(&c10_dg_emlrtRTEI, &c10_st,
                         c10_solution->searchDir.size(0));
          c10_bb_loop_ub = c10_solution->searchDir.size(0) - 1;
          for (c10_i33 = 0; c10_i33 <= c10_bb_loop_ub; c10_i33++) {
            c10_x[c10_i33] = c10_solution->searchDir[c10_i33];
          }

          c10_y.set_size(&c10_dg_emlrtRTEI, &c10_st, c10_solution->xstar.size(0));
          c10_cb_loop_ub = c10_solution->xstar.size(0) - 1;
          for (c10_i35 = 0; c10_i35 <= c10_cb_loop_ub; c10_i35++) {
            c10_y[c10_i35] = c10_solution->xstar[c10_i35];
          }

          c10_solution->xstar.set_size(&c10_dg_emlrtRTEI, &c10_st, c10_y.size(0));
          c10_db_loop_ub = c10_y.size(0) - 1;
          for (c10_i37 = 0; c10_i37 <= c10_db_loop_ub; c10_i37++) {
            c10_solution->xstar[c10_i37] = c10_y[c10_i37];
          }

          if (!(c10_k_n < 1)) {
            c10_b_st.site = &c10_ch_emlrtRSI;
            c10_p_n = c10_k_n;
            c10_e_a = c10_d_a;
            c10_y.set_size(&c10_mh_emlrtRTEI, &c10_b_st,
                           c10_solution->xstar.size(0));
            c10_gb_loop_ub = c10_solution->xstar.size(0) - 1;
            for (c10_i43 = 0; c10_i43 <= c10_gb_loop_ub; c10_i43++) {
              c10_y[c10_i43] = c10_solution->xstar[c10_i43];
            }

            c10_solution->xstar.set_size(&c10_dg_emlrtRTEI, &c10_b_st,
              c10_y.size(0));
            c10_ib_loop_ub = c10_y.size(0) - 1;
            for (c10_i45 = 0; c10_i45 <= c10_ib_loop_ub; c10_i45++) {
              c10_solution->xstar[c10_i45] = c10_y[c10_i45];
            }

            c10_c_st.site = &c10_dh_emlrtRSI;
            c10_q_n = c10_p_n;
            c10_f_a = c10_e_a;
            c10_y.set_size(&c10_oh_emlrtRTEI, &c10_c_st,
                           c10_solution->xstar.size(0));
            c10_kb_loop_ub = c10_solution->xstar.size(0) - 1;
            for (c10_i49 = 0; c10_i49 <= c10_kb_loop_ub; c10_i49++) {
              c10_y[c10_i49] = c10_solution->xstar[c10_i49];
            }

            c10_solution->xstar.set_size(&c10_dg_emlrtRTEI, &c10_c_st,
              c10_y.size(0));
            c10_mb_loop_ub = c10_y.size(0) - 1;
            for (c10_i50 = 0; c10_i50 <= c10_mb_loop_ub; c10_i50++) {
              c10_solution->xstar[c10_i50] = c10_y[c10_i50];
            }

            c10_c_var = c10_q_n;
            c10_c_n_t = (ptrdiff_t)c10_c_var;
            c10_c_incx_t = (ptrdiff_t)1;
            c10_incy_t = (ptrdiff_t)1;
            daxpy(&c10_c_n_t, &c10_f_a, &(c10_x.data())[0], &c10_c_incx_t,
                  &(c10_solution->xstar.data())[0], &c10_incy_t);
          }

          c10_s_H.set_size(&c10_dg_emlrtRTEI, c10_sp, c10_c_H.size(0),
                           c10_c_H.size(1));
          c10_fb_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
          for (c10_i41 = 0; c10_i41 <= c10_fb_loop_ub; c10_i41++) {
            c10_s_H[c10_i41] = c10_c_H[c10_i41];
          }

          c10_f_f.set_size(&c10_dg_emlrtRTEI, c10_sp, c10_f.size(0));
          c10_hb_loop_ub = c10_f.size(0) - 1;
          for (c10_i44 = 0; c10_i44 <= c10_hb_loop_ub; c10_i44++) {
            c10_f_f[c10_i44] = c10_f[c10_i44];
          }

          c10_g_solution.set_size(&c10_dg_emlrtRTEI, c10_sp,
            c10_solution->xstar.size(0));
          c10_jb_loop_ub = c10_solution->xstar.size(0) - 1;
          for (c10_i47 = 0; c10_i47 <= c10_jb_loop_ub; c10_i47++) {
            c10_g_solution[c10_i47] = c10_solution->xstar[c10_i47];
          }

          c10_st.site = &c10_vh_emlrtRSI;
          c10_b_computeGrad_StoreHx(chartInstance, &c10_st, c10_objective,
            c10_s_H, c10_f_f, c10_g_solution);
          c10_updateFval = true;
        }

        c10_b_activeSetChangeID = c10_activeSetChangeID;
        c10_e_f.set_size(&c10_dg_emlrtRTEI, c10_sp, c10_f.size(0));
        c10_eb_loop_ub = c10_f.size(0) - 1;
        for (c10_i40 = 0; c10_i40 <= c10_eb_loop_ub; c10_i40++) {
          c10_e_f[c10_i40] = c10_f[c10_i40];
        }

        c10_st.site = &c10_vh_emlrtRSI;
        c10_c_options = *c10_b_options;
        c10_b_checkStoppingAndUpdateFval(chartInstance, &c10_st,
          &c10_b_activeSetChangeID, c10_e_f, c10_solution, c10_memspace,
          c10_objective, c10_i_workingset, c10_b_qrmanager, &c10_c_options,
          c10_runTimeOptions, c10_updateFval);
        c10_activeSetChangeID = c10_b_activeSetChangeID;
      }
    } else {
      if (!c10_updateFval) {
        c10_b_r.set_size(&c10_dg_emlrtRTEI, c10_sp,
                         c10_memspace->workspace_double.size(0),
                         c10_memspace->workspace_double.size(1));
        c10_j_loop_ub = c10_memspace->workspace_double.size(0) *
          c10_memspace->workspace_double.size(1) - 1;
        for (c10_i9 = 0; c10_i9 <= c10_j_loop_ub; c10_i9++) {
          c10_b_r[c10_i9] = c10_memspace->workspace_double[c10_i9];
        }

        c10_d_f.set_size(&c10_dg_emlrtRTEI, c10_sp, c10_f.size(0));
        c10_o_loop_ub = c10_f.size(0) - 1;
        for (c10_i12 = 0; c10_i12 <= c10_o_loop_ub; c10_i12++) {
          c10_d_f[c10_i12] = c10_f[c10_i12];
        }

        c10_d_solution.set_size(&c10_dg_emlrtRTEI, c10_sp,
          c10_solution->xstar.size(0));
        c10_q_loop_ub = c10_solution->xstar.size(0) - 1;
        for (c10_i15 = 0; c10_i15 <= c10_q_loop_ub; c10_i15++) {
          c10_d_solution[c10_i15] = c10_solution->xstar[c10_i15];
        }

        c10_st.site = &c10_vh_emlrtRSI;
        c10_d1 = c10_b_computeFval_ReuseHx(chartInstance, &c10_st, c10_objective,
          c10_b_r, c10_d_f, c10_d_solution);
        c10_solution->fstar = c10_d1;
        c10_memspace->workspace_double.set_size(&c10_dg_emlrtRTEI, c10_sp,
          c10_b_r.size(0), c10_b_r.size(1));
        c10_w_loop_ub = c10_b_r.size(0) * c10_b_r.size(1) - 1;
        for (c10_i23 = 0; c10_i23 <= c10_w_loop_ub; c10_i23++) {
          c10_memspace->workspace_double[c10_i23] = c10_b_r[c10_i23];
        }
      }

      c10_exitg1 = 1;
    }
  } while (c10_exitg1 == 0);
}

static void c10_b_computeGrad_StoreHx(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_obj, coder::
  array<real_T, 2U> &c10_c_H, coder::array<real_T, 1U> &c10_f, coder::array<
  real_T, 1U> &c10_x)
{
  ptrdiff_t c10_b_incx_t;
  ptrdiff_t c10_b_incy_t;
  ptrdiff_t c10_b_n_t;
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 2U> c10_d_H;
  coder::array<real_T, 2U> c10_e_H;
  coder::array<real_T, 1U> c10_b_x;
  coder::array<real_T, 1U> c10_c_x;
  coder::array<real_T, 1U> c10_y;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  real_T c10_d_a;
  real_T c10_f_a;
  int32_T c10_b;
  int32_T c10_b_a;
  int32_T c10_b_c;
  int32_T c10_b_iy;
  int32_T c10_b_iy0;
  int32_T c10_b_loop_ub;
  int32_T c10_b_var;
  int32_T c10_c_a;
  int32_T c10_c_c;
  int32_T c10_c_i;
  int32_T c10_c_loop_ub;
  int32_T c10_d_loop_ub;
  int32_T c10_e_a;
  int32_T c10_e_b;
  int32_T c10_e_i;
  int32_T c10_e_loop_ub;
  int32_T c10_f_b;
  int32_T c10_f_i;
  int32_T c10_f_loop_ub;
  int32_T c10_f_n;
  int32_T c10_g_a;
  int32_T c10_g_b;
  int32_T c10_g_loop_ub;
  int32_T c10_h_a;
  int32_T c10_h_b;
  int32_T c10_h_i;
  int32_T c10_h_loop_ub;
  int32_T c10_h_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i19;
  int32_T c10_i2;
  int32_T c10_i20;
  int32_T c10_i21;
  int32_T c10_i22;
  int32_T c10_i23;
  int32_T c10_i24;
  int32_T c10_i25;
  int32_T c10_i26;
  int32_T c10_i27;
  int32_T c10_i28;
  int32_T c10_i29;
  int32_T c10_i3;
  int32_T c10_i30;
  int32_T c10_i31;
  int32_T c10_i32;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_i_a;
  int32_T c10_i_loop_ub;
  int32_T c10_i_n;
  int32_T c10_idx;
  int32_T c10_ig0;
  int32_T c10_iy0;
  int32_T c10_j_a;
  int32_T c10_j_b;
  int32_T c10_j_loop_ub;
  int32_T c10_j_n;
  int32_T c10_k;
  int32_T c10_k_b;
  int32_T c10_k_loop_ub;
  int32_T c10_k_n;
  int32_T c10_loop_ub;
  int32_T c10_m_loop_ub;
  int32_T c10_m_n;
  int32_T c10_maxRegVar;
  int32_T c10_o_b;
  int32_T c10_o_loop_ub;
  int32_T c10_o_n;
  int32_T c10_p_loop_ub;
  int32_T c10_p_n;
  int32_T c10_q_loop_ub;
  int32_T c10_r_loop_ub;
  int32_T c10_s_loop_ub;
  int32_T c10_t_loop_ub;
  int32_T c10_u_loop_ub;
  int32_T c10_v_loop_ub;
  int32_T c10_var;
  boolean_T c10_b_overflow;
  boolean_T c10_c_overflow;
  boolean_T c10_d_overflow;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  switch (c10_b_obj->objtype) {
   case 5:
    c10_i = c10_b_obj->nvar - 2;
    c10_st.site = &c10_wh_emlrtRSI;
    c10_b = c10_i + 1;
    c10_e_b = c10_b;
    if (c10_e_b < 1) {
      c10_overflow = false;
    } else {
      c10_overflow = (c10_e_b > 2147483646);
    }

    if (c10_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_c_i = 0; c10_c_i <= c10_i; c10_c_i++) {
      c10_e_i = c10_c_i;
      c10_i8 = c10_b_obj->grad.size(0);
      c10_i9 = c10_e_i + 1;
      if ((c10_i9 < 1) || (c10_i9 > c10_i8)) {
        emlrtDynamicBoundsCheckR2012b(c10_i9, 1, c10_i8, &c10_gq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->grad[c10_i9 - 1] = 0.0;
    }

    c10_i7 = c10_b_obj->grad.size(0);
    if ((c10_b_obj->nvar < 1) || (c10_b_obj->nvar > c10_i7)) {
      emlrtDynamicBoundsCheckR2012b(c10_b_obj->nvar, 1, c10_i7, &c10_gq_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->grad[c10_b_obj->nvar - 1] = c10_b_obj->gammaScalar;
    break;

   case 3:
    c10_d_H.set_size(&c10_eg_emlrtRTEI, c10_sp, c10_c_H.size(0), c10_c_H.size(1));
    c10_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
    for (c10_i1 = 0; c10_i1 <= c10_loop_ub; c10_i1++) {
      c10_d_H[c10_i1] = c10_c_H[c10_i1];
    }

    c10_b_x.set_size(&c10_eg_emlrtRTEI, c10_sp, c10_x.size(0));
    c10_c_loop_ub = c10_x.size(0) - 1;
    for (c10_i3 = 0; c10_i3 <= c10_c_loop_ub; c10_i3++) {
      c10_b_x[c10_i3] = c10_x[c10_i3];
    }

    c10_st.site = &c10_wh_emlrtRSI;
    c10_i_xgemv(chartInstance, c10_b_obj->nvar, c10_b_obj->nvar, c10_d_H,
                c10_b_obj->nvar, c10_b_x, c10_b_obj->Hx);
    c10_i5 = c10_b_obj->nvar;
    c10_st.site = &c10_wh_emlrtRSI;
    c10_f_b = c10_i5;
    c10_g_b = c10_f_b;
    if (c10_g_b < 1) {
      c10_b_overflow = false;
    } else {
      c10_b_overflow = (c10_g_b > 2147483646);
    }

    if (c10_b_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_f_i = 0; c10_f_i < c10_i5; c10_f_i++) {
      c10_e_i = c10_f_i + 1;
      c10_i10 = c10_b_obj->Hx.size(0);
      if ((c10_e_i < 1) || (c10_e_i > c10_i10)) {
        emlrtDynamicBoundsCheckR2012b(c10_e_i, 1, c10_i10, &c10_gq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i12 = c10_b_obj->grad.size(0);
      if ((c10_e_i < 1) || (c10_e_i > c10_i12)) {
        emlrtDynamicBoundsCheckR2012b(c10_e_i, 1, c10_i12, &c10_gq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->grad[c10_e_i - 1] = c10_b_obj->Hx[c10_e_i - 1];
    }

    if (c10_b_obj->hasLinear) {
      c10_st.site = &c10_wh_emlrtRSI;
      c10_f_n = c10_b_obj->nvar;
      c10_y.set_size(&c10_eg_emlrtRTEI, &c10_st, c10_b_obj->grad.size(0));
      c10_e_loop_ub = c10_b_obj->grad.size(0) - 1;
      for (c10_i13 = 0; c10_i13 <= c10_e_loop_ub; c10_i13++) {
        c10_y[c10_i13] = c10_b_obj->grad[c10_i13];
      }

      c10_b_obj->grad.set_size(&c10_eg_emlrtRTEI, &c10_st, c10_y.size(0));
      c10_f_loop_ub = c10_y.size(0) - 1;
      for (c10_i15 = 0; c10_i15 <= c10_f_loop_ub; c10_i15++) {
        c10_b_obj->grad[c10_i15] = c10_y[c10_i15];
      }

      if (!(c10_f_n < 1)) {
        c10_b_st.site = &c10_ch_emlrtRSI;
        c10_h_n = c10_f_n;
        c10_y.set_size(&c10_mh_emlrtRTEI, &c10_b_st, c10_b_obj->grad.size(0));
        c10_g_loop_ub = c10_b_obj->grad.size(0) - 1;
        for (c10_i17 = 0; c10_i17 <= c10_g_loop_ub; c10_i17++) {
          c10_y[c10_i17] = c10_b_obj->grad[c10_i17];
        }

        c10_b_obj->grad.set_size(&c10_eg_emlrtRTEI, &c10_b_st, c10_y.size(0));
        c10_j_loop_ub = c10_y.size(0) - 1;
        for (c10_i21 = 0; c10_i21 <= c10_j_loop_ub; c10_i21++) {
          c10_b_obj->grad[c10_i21] = c10_y[c10_i21];
        }

        c10_c_st.site = &c10_dh_emlrtRSI;
        c10_k_n = c10_h_n;
        c10_d_a = 1.0;
        c10_y.set_size(&c10_oh_emlrtRTEI, &c10_c_st, c10_b_obj->grad.size(0));
        c10_o_loop_ub = c10_b_obj->grad.size(0) - 1;
        for (c10_i24 = 0; c10_i24 <= c10_o_loop_ub; c10_i24++) {
          c10_y[c10_i24] = c10_b_obj->grad[c10_i24];
        }

        c10_b_obj->grad.set_size(&c10_eg_emlrtRTEI, &c10_c_st, c10_y.size(0));
        c10_r_loop_ub = c10_y.size(0) - 1;
        for (c10_i27 = 0; c10_i27 <= c10_r_loop_ub; c10_i27++) {
          c10_b_obj->grad[c10_i27] = c10_y[c10_i27];
        }

        c10_var = c10_k_n;
        c10_n_t = (ptrdiff_t)c10_var;
        c10_incx_t = (ptrdiff_t)1;
        c10_incy_t = (ptrdiff_t)1;
        daxpy(&c10_n_t, &c10_d_a, &(c10_f.data())[0], &c10_incx_t,
              &(c10_b_obj->grad.data())[0], &c10_incy_t);
      }
    }
    break;

   default:
    c10_maxRegVar = c10_b_obj->maxVar - 1;
    c10_e_H.set_size(&c10_eg_emlrtRTEI, c10_sp, c10_c_H.size(0), c10_c_H.size(1));
    c10_b_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
    for (c10_i2 = 0; c10_i2 <= c10_b_loop_ub; c10_i2++) {
      c10_e_H[c10_i2] = c10_c_H[c10_i2];
    }

    c10_c_x.set_size(&c10_eg_emlrtRTEI, c10_sp, c10_x.size(0));
    c10_d_loop_ub = c10_x.size(0) - 1;
    for (c10_i4 = 0; c10_i4 <= c10_d_loop_ub; c10_i4++) {
      c10_c_x[c10_i4] = c10_x[c10_i4];
    }

    c10_st.site = &c10_wh_emlrtRSI;
    c10_i_xgemv(chartInstance, c10_b_obj->nvar, c10_b_obj->nvar, c10_e_H,
                c10_b_obj->nvar, c10_c_x, c10_b_obj->Hx);
    c10_i6 = c10_b_obj->nvar + 1;
    c10_st.site = &c10_wh_emlrtRSI;
    c10_b_a = c10_i6;
    c10_h_b = c10_maxRegVar;
    c10_c_a = c10_b_a;
    c10_j_b = c10_h_b;
    if (c10_c_a > c10_j_b) {
      c10_c_overflow = false;
    } else {
      c10_c_overflow = (c10_j_b > 2147483646);
    }

    if (c10_c_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_idx = c10_i6; c10_idx <= c10_maxRegVar; c10_idx++) {
      c10_i11 = c10_x.size(0);
      if ((c10_idx < 1) || (c10_idx > c10_i11)) {
        emlrtDynamicBoundsCheckR2012b(c10_idx, 1, c10_i11, &c10_gq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i14 = c10_b_obj->Hx.size(0);
      if ((c10_idx < 1) || (c10_idx > c10_i14)) {
        emlrtDynamicBoundsCheckR2012b(c10_idx, 1, c10_i14, &c10_gq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->Hx[c10_idx - 1] = 0.0 * c10_x[c10_idx - 1];
    }

    c10_st.site = &c10_wh_emlrtRSI;
    c10_k_b = c10_maxRegVar;
    c10_o_b = c10_k_b;
    if (c10_o_b < 1) {
      c10_d_overflow = false;
    } else {
      c10_d_overflow = (c10_o_b > 2147483646);
    }

    if (c10_d_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_h_i = 0; c10_h_i < c10_maxRegVar; c10_h_i++) {
      c10_e_i = c10_h_i + 1;
      c10_i16 = c10_b_obj->Hx.size(0);
      if ((c10_e_i < 1) || (c10_e_i > c10_i16)) {
        emlrtDynamicBoundsCheckR2012b(c10_e_i, 1, c10_i16, &c10_gq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i18 = c10_b_obj->grad.size(0);
      if ((c10_e_i < 1) || (c10_e_i > c10_i18)) {
        emlrtDynamicBoundsCheckR2012b(c10_e_i, 1, c10_i18, &c10_gq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->grad[c10_e_i - 1] = c10_b_obj->Hx[c10_e_i - 1];
    }

    if (c10_b_obj->hasLinear) {
      c10_st.site = &c10_wh_emlrtRSI;
      c10_i_n = c10_b_obj->nvar;
      c10_y.set_size(&c10_eg_emlrtRTEI, &c10_st, c10_b_obj->grad.size(0));
      c10_h_loop_ub = c10_b_obj->grad.size(0) - 1;
      for (c10_i19 = 0; c10_i19 <= c10_h_loop_ub; c10_i19++) {
        c10_y[c10_i19] = c10_b_obj->grad[c10_i19];
      }

      c10_b_obj->grad.set_size(&c10_eg_emlrtRTEI, &c10_st, c10_y.size(0));
      c10_k_loop_ub = c10_y.size(0) - 1;
      for (c10_i22 = 0; c10_i22 <= c10_k_loop_ub; c10_i22++) {
        c10_b_obj->grad[c10_i22] = c10_y[c10_i22];
      }

      if (!(c10_i_n < 1)) {
        c10_b_st.site = &c10_ch_emlrtRSI;
        c10_o_n = c10_i_n;
        c10_y.set_size(&c10_mh_emlrtRTEI, &c10_b_st, c10_b_obj->grad.size(0));
        c10_q_loop_ub = c10_b_obj->grad.size(0) - 1;
        for (c10_i26 = 0; c10_i26 <= c10_q_loop_ub; c10_i26++) {
          c10_y[c10_i26] = c10_b_obj->grad[c10_i26];
        }

        c10_b_obj->grad.set_size(&c10_eg_emlrtRTEI, &c10_b_st, c10_y.size(0));
        c10_s_loop_ub = c10_y.size(0) - 1;
        for (c10_i28 = 0; c10_i28 <= c10_s_loop_ub; c10_i28++) {
          c10_b_obj->grad[c10_i28] = c10_y[c10_i28];
        }

        c10_c_st.site = &c10_dh_emlrtRSI;
        c10_p_n = c10_o_n;
        c10_f_a = 1.0;
        c10_y.set_size(&c10_oh_emlrtRTEI, &c10_c_st, c10_b_obj->grad.size(0));
        c10_u_loop_ub = c10_b_obj->grad.size(0) - 1;
        for (c10_i31 = 0; c10_i31 <= c10_u_loop_ub; c10_i31++) {
          c10_y[c10_i31] = c10_b_obj->grad[c10_i31];
        }

        c10_b_obj->grad.set_size(&c10_eg_emlrtRTEI, &c10_c_st, c10_y.size(0));
        c10_v_loop_ub = c10_y.size(0) - 1;
        for (c10_i32 = 0; c10_i32 <= c10_v_loop_ub; c10_i32++) {
          c10_b_obj->grad[c10_i32] = c10_y[c10_i32];
        }

        c10_b_var = c10_p_n;
        c10_b_n_t = (ptrdiff_t)c10_b_var;
        c10_b_incx_t = (ptrdiff_t)1;
        c10_b_incy_t = (ptrdiff_t)1;
        daxpy(&c10_b_n_t, &c10_f_a, &(c10_f.data())[0], &c10_b_incx_t,
              &(c10_b_obj->grad.data())[0], &c10_b_incy_t);
      }
    }

    c10_ig0 = c10_b_obj->nvar;
    c10_j_n = c10_maxRegVar - c10_b_obj->nvar;
    c10_y.set_size(&c10_eg_emlrtRTEI, c10_sp, c10_b_obj->grad.size(0));
    c10_i_loop_ub = c10_b_obj->grad.size(0) - 1;
    for (c10_i20 = 0; c10_i20 <= c10_i_loop_ub; c10_i20++) {
      c10_y[c10_i20] = c10_b_obj->grad[c10_i20];
    }

    c10_iy0 = c10_ig0 + 1;
    c10_b_obj->grad.set_size(&c10_eg_emlrtRTEI, c10_sp, c10_y.size(0));
    c10_m_loop_ub = c10_y.size(0) - 1;
    for (c10_i23 = 0; c10_i23 <= c10_m_loop_ub; c10_i23++) {
      c10_b_obj->grad[c10_i23] = c10_y[c10_i23];
    }

    c10_m_n = c10_j_n;
    c10_y.set_size(&c10_ph_emlrtRTEI, c10_sp, c10_b_obj->grad.size(0));
    c10_p_loop_ub = c10_b_obj->grad.size(0) - 1;
    for (c10_i25 = 0; c10_i25 <= c10_p_loop_ub; c10_i25++) {
      c10_y[c10_i25] = c10_b_obj->grad[c10_i25];
    }

    c10_b_iy0 = c10_iy0;
    c10_b_obj->grad.set_size(&c10_eg_emlrtRTEI, c10_sp, c10_y.size(0));
    c10_t_loop_ub = c10_y.size(0) - 1;
    for (c10_i29 = 0; c10_i29 <= c10_t_loop_ub; c10_i29++) {
      c10_b_obj->grad[c10_i29] = c10_y[c10_i29];
    }

    if (!(c10_m_n < 1)) {
      c10_e_a = c10_b_iy0 - 1;
      c10_b_iy = c10_e_a;
      c10_g_a = c10_m_n - 1;
      c10_i30 = c10_g_a;
      for (c10_k = 0; c10_k <= c10_i30; c10_k++) {
        c10_h_a = c10_b_iy + 1;
        c10_b_c = c10_h_a - 1;
        c10_i_a = c10_b_iy + 1;
        c10_c_c = c10_i_a - 1;
        c10_b_obj->grad[c10_b_c] = c10_b_obj->grad[c10_c_c];
        c10_j_a = c10_b_iy + 1;
        c10_b_iy = c10_j_a;
      }
    }
    break;
  }
}

static void c10_i_xgemv(SFc10_ACCMPCInstanceStruct *chartInstance, int32_T c10_m,
  int32_T c10_f_n, coder::array<real_T, 2U> &c10_A, int32_T c10_lda, coder::
  array<real_T, 1U> &c10_x, coder::array<real_T, 1U> &c10_y)
{
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_lda_t;
  ptrdiff_t c10_m_t;
  ptrdiff_t c10_n_t;
  real_T c10_alpha1;
  real_T c10_beta1;
  int32_T c10_b_var;
  int32_T c10_c_lda;
  int32_T c10_c_m;
  int32_T c10_c_var;
  int32_T c10_d_lda;
  int32_T c10_d_m;
  int32_T c10_h_n;
  int32_T c10_i_n;
  int32_T c10_var;
  char_T c10_TRANSA;
  if ((c10_m < 1) || (c10_f_n < 1)) {
  } else {
    c10_c_m = c10_m;
    c10_h_n = c10_f_n;
    c10_c_lda = c10_lda;
    c10_d_m = c10_c_m;
    c10_i_n = c10_h_n;
    c10_alpha1 = 1.0;
    c10_d_lda = c10_c_lda;
    c10_beta1 = 0.0;
    c10_TRANSA = 'N';
    c10_var = c10_d_m;
    c10_m_t = (ptrdiff_t)c10_var;
    c10_b_var = c10_i_n;
    c10_n_t = (ptrdiff_t)c10_b_var;
    c10_c_var = c10_d_lda;
    c10_lda_t = (ptrdiff_t)c10_c_var;
    c10_incx_t = (ptrdiff_t)1;
    c10_incy_t = (ptrdiff_t)1;
    dgemv(&c10_TRANSA, &c10_m_t, &c10_n_t, &c10_alpha1, &(c10_A.data())[0],
          &c10_lda_t, &(c10_x.data())[0], &c10_incx_t, &c10_beta1, &(c10_y.data())
          [0], &c10_incy_t);
  }
}

static real_T c10_b_computeFval_ReuseHx(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_b_obj, coder::array<real_T, 2U> &c10_workspace, coder::array<real_T, 1U>
  &c10_f, coder::array<real_T, 1U> &c10_x)
{
  ptrdiff_t c10_b_incx_t;
  ptrdiff_t c10_b_incy_t;
  ptrdiff_t c10_b_n_t;
  ptrdiff_t c10_c_incx_t;
  ptrdiff_t c10_c_incy_t;
  ptrdiff_t c10_c_n_t;
  ptrdiff_t c10_d_incx_t;
  ptrdiff_t c10_d_incy_t;
  ptrdiff_t c10_d_n_t;
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 2U> c10_b_y;
  coder::array<real_T, 1U> c10_y;
  emlrtStack c10_b_st;
  emlrtStack c10_st;
  real_T c10_val;
  int32_T c10_b;
  int32_T c10_b_a;
  int32_T c10_b_loop_ub;
  int32_T c10_b_var;
  int32_T c10_c_a;
  int32_T c10_c_i;
  int32_T c10_c_loop_ub;
  int32_T c10_c_var;
  int32_T c10_d_loop_ub;
  int32_T c10_d_var;
  int32_T c10_e_b;
  int32_T c10_e_i;
  int32_T c10_f_b;
  int32_T c10_f_i;
  int32_T c10_f_n;
  int32_T c10_g_b;
  int32_T c10_h_b;
  int32_T c10_h_i;
  int32_T c10_h_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i19;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_i_n;
  int32_T c10_idx;
  int32_T c10_j_b;
  int32_T c10_j_i;
  int32_T c10_j_n;
  int32_T c10_k_b;
  int32_T c10_k_n;
  int32_T c10_loop_ub;
  int32_T c10_m_n;
  int32_T c10_maxRegVar;
  int32_T c10_o_b;
  int32_T c10_o_n;
  int32_T c10_p_b;
  int32_T c10_p_n;
  int32_T c10_q_b;
  int32_T c10_q_n;
  int32_T c10_v_n;
  int32_T c10_var;
  int32_T c10_x_n;
  int32_T c10_y_n;
  boolean_T c10_b_overflow;
  boolean_T c10_c_overflow;
  boolean_T c10_d_overflow;
  boolean_T c10_e_overflow;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  switch (c10_b_obj->objtype) {
   case 5:
    c10_i = c10_x.size(0);
    if ((c10_b_obj->nvar < 1) || (c10_b_obj->nvar > c10_i)) {
      emlrtDynamicBoundsCheckR2012b(c10_b_obj->nvar, 1, c10_i, &c10_hq_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_val = c10_b_obj->gammaScalar * c10_x[c10_b_obj->nvar - 1];
    break;

   case 3:
    if (c10_b_obj->hasLinear) {
      c10_i1 = c10_b_obj->nvar;
      c10_st.site = &c10_xh_emlrtRSI;
      c10_b = c10_i1;
      c10_f_b = c10_b;
      if (c10_f_b < 1) {
        c10_overflow = false;
      } else {
        c10_overflow = (c10_f_b > 2147483646);
      }

      if (c10_overflow) {
        c10_b_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
      }

      for (c10_c_i = 0; c10_c_i < c10_i1; c10_c_i++) {
        c10_f_i = c10_c_i + 1;
        c10_i7 = c10_b_obj->Hx.size(0);
        if ((c10_f_i < 1) || (c10_f_i > c10_i7)) {
          emlrtDynamicBoundsCheckR2012b(c10_f_i, 1, c10_i7, &c10_hq_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_i10 = c10_f.size(0);
        if ((c10_f_i < 1) || (c10_f_i > c10_i10)) {
          emlrtDynamicBoundsCheckR2012b(c10_f_i, 1, c10_i10, &c10_hq_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_i12 = c10_workspace.size(0) * c10_workspace.size(1);
        if ((c10_f_i < 1) || (c10_f_i > c10_i12)) {
          emlrtDynamicBoundsCheckR2012b(c10_f_i, 1, c10_i12, &c10_hq_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_workspace[c10_f_i - 1] = 0.5 * c10_b_obj->Hx[c10_f_i - 1] +
          c10_f[c10_f_i - 1];
      }

      c10_o_n = c10_b_obj->nvar;
      c10_b_y.set_size(&c10_fg_emlrtRTEI, c10_sp, c10_workspace.size(0),
                       c10_workspace.size(1));
      c10_c_loop_ub = c10_workspace.size(0) * c10_workspace.size(1) - 1;
      for (c10_i9 = 0; c10_i9 <= c10_c_loop_ub; c10_i9++) {
        c10_b_y[c10_i9] = c10_workspace[c10_i9];
      }

      if (c10_o_n < 1) {
        c10_val = 0.0;
      } else {
        c10_p_n = c10_o_n;
        c10_q_n = c10_p_n;
        c10_c_var = c10_q_n;
        c10_c_n_t = (ptrdiff_t)c10_c_var;
        c10_c_incx_t = (ptrdiff_t)1;
        c10_c_incy_t = (ptrdiff_t)1;
        c10_val = ddot(&c10_c_n_t, &(c10_x.data())[0], &c10_c_incx_t,
                       &(c10_b_y.data())[0], &c10_c_incy_t);
      }
    } else {
      c10_f_n = c10_b_obj->nvar;
      c10_y.set_size(&c10_fg_emlrtRTEI, c10_sp, c10_b_obj->Hx.size(0));
      c10_loop_ub = c10_b_obj->Hx.size(0) - 1;
      for (c10_i3 = 0; c10_i3 <= c10_loop_ub; c10_i3++) {
        c10_y[c10_i3] = c10_b_obj->Hx[c10_i3];
      }

      if (c10_f_n < 1) {
        c10_val = 0.0;
      } else {
        c10_i_n = c10_f_n;
        c10_k_n = c10_i_n;
        c10_var = c10_k_n;
        c10_n_t = (ptrdiff_t)c10_var;
        c10_incx_t = (ptrdiff_t)1;
        c10_incy_t = (ptrdiff_t)1;
        c10_val = ddot(&c10_n_t, &(c10_x.data())[0], &c10_incx_t, &(c10_y.data())
                       [0], &c10_incy_t);
      }

      c10_val *= 0.5;
    }
    break;

   default:
    c10_maxRegVar = c10_b_obj->maxVar - 1;
    if (c10_b_obj->hasLinear) {
      c10_i2 = c10_b_obj->nvar;
      c10_st.site = &c10_xh_emlrtRSI;
      c10_e_b = c10_i2;
      c10_g_b = c10_e_b;
      if (c10_g_b < 1) {
        c10_b_overflow = false;
      } else {
        c10_b_overflow = (c10_g_b > 2147483646);
      }

      if (c10_b_overflow) {
        c10_b_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
      }

      for (c10_e_i = 0; c10_e_i < c10_i2; c10_e_i++) {
        c10_f_i = c10_e_i + 1;
        c10_i8 = c10_f.size(0);
        if ((c10_f_i < 1) || (c10_f_i > c10_i8)) {
          emlrtDynamicBoundsCheckR2012b(c10_f_i, 1, c10_i8, &c10_hq_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_i11 = c10_workspace.size(0) * c10_workspace.size(1);
        if ((c10_f_i < 1) || (c10_f_i > c10_i11)) {
          emlrtDynamicBoundsCheckR2012b(c10_f_i, 1, c10_i11, &c10_hq_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_workspace[c10_f_i - 1] = c10_f[c10_f_i - 1];
      }

      c10_i6 = c10_maxRegVar - c10_b_obj->nvar;
      c10_st.site = &c10_xh_emlrtRSI;
      c10_j_b = c10_i6;
      c10_o_b = c10_j_b;
      if (c10_o_b < 1) {
        c10_d_overflow = false;
      } else {
        c10_d_overflow = (c10_o_b > 2147483646);
      }

      if (c10_d_overflow) {
        c10_b_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
      }

      for (c10_h_i = 0; c10_h_i < c10_i6; c10_h_i++) {
        c10_f_i = c10_h_i;
        c10_i14 = c10_workspace.size(0) * c10_workspace.size(1);
        c10_i15 = (c10_b_obj->nvar + c10_f_i) + 1;
        if ((c10_i15 < 1) || (c10_i15 > c10_i14)) {
          emlrtDynamicBoundsCheckR2012b(c10_i15, 1, c10_i14, &c10_hq_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_workspace[c10_i15 - 1] = 0.0;
      }

      c10_st.site = &c10_xh_emlrtRSI;
      c10_p_b = c10_maxRegVar;
      c10_q_b = c10_p_b;
      if (c10_q_b < 1) {
        c10_e_overflow = false;
      } else {
        c10_e_overflow = (c10_q_b > 2147483646);
      }

      if (c10_e_overflow) {
        c10_b_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
      }

      for (c10_j_i = 0; c10_j_i < c10_maxRegVar; c10_j_i++) {
        c10_f_i = c10_j_i + 1;
        c10_i16 = c10_workspace.size(0) * c10_workspace.size(1);
        if ((c10_f_i < 1) || (c10_f_i > c10_i16)) {
          emlrtDynamicBoundsCheckR2012b(c10_f_i, 1, c10_i16, &c10_hq_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_i18 = c10_b_obj->Hx.size(0);
        if ((c10_f_i < 1) || (c10_f_i > c10_i18)) {
          emlrtDynamicBoundsCheckR2012b(c10_f_i, 1, c10_i18, &c10_hq_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_i19 = c10_workspace.size(0) * c10_workspace.size(1);
        if ((c10_f_i < 1) || (c10_f_i > c10_i19)) {
          emlrtDynamicBoundsCheckR2012b(c10_f_i, 1, c10_i19, &c10_hq_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_workspace[c10_f_i - 1] = c10_workspace[c10_f_i - 1] + 0.5 *
          c10_b_obj->Hx[c10_f_i - 1];
      }

      c10_v_n = c10_maxRegVar;
      c10_b_y.set_size(&c10_fg_emlrtRTEI, c10_sp, c10_workspace.size(0),
                       c10_workspace.size(1));
      c10_d_loop_ub = c10_workspace.size(0) * c10_workspace.size(1) - 1;
      for (c10_i17 = 0; c10_i17 <= c10_d_loop_ub; c10_i17++) {
        c10_b_y[c10_i17] = c10_workspace[c10_i17];
      }

      if (c10_v_n < 1) {
        c10_val = 0.0;
      } else {
        c10_x_n = c10_v_n;
        c10_y_n = c10_x_n;
        c10_d_var = c10_y_n;
        c10_d_n_t = (ptrdiff_t)c10_d_var;
        c10_d_incx_t = (ptrdiff_t)1;
        c10_d_incy_t = (ptrdiff_t)1;
        c10_val = ddot(&c10_d_n_t, &(c10_x.data())[0], &c10_d_incx_t,
                       &(c10_b_y.data())[0], &c10_d_incy_t);
      }
    } else {
      c10_h_n = c10_maxRegVar;
      c10_y.set_size(&c10_fg_emlrtRTEI, c10_sp, c10_b_obj->Hx.size(0));
      c10_b_loop_ub = c10_b_obj->Hx.size(0) - 1;
      for (c10_i4 = 0; c10_i4 <= c10_b_loop_ub; c10_i4++) {
        c10_y[c10_i4] = c10_b_obj->Hx[c10_i4];
      }

      if (c10_h_n < 1) {
        c10_val = 0.0;
      } else {
        c10_j_n = c10_h_n;
        c10_m_n = c10_j_n;
        c10_b_var = c10_m_n;
        c10_b_n_t = (ptrdiff_t)c10_b_var;
        c10_b_incx_t = (ptrdiff_t)1;
        c10_b_incy_t = (ptrdiff_t)1;
        c10_val = ddot(&c10_b_n_t, &(c10_x.data())[0], &c10_b_incx_t,
                       &(c10_y.data())[0], &c10_b_incy_t);
      }

      c10_val *= 0.5;
      c10_i5 = c10_b_obj->nvar + 1;
      c10_st.site = &c10_xh_emlrtRSI;
      c10_b_a = c10_i5;
      c10_h_b = c10_maxRegVar;
      c10_c_a = c10_b_a;
      c10_k_b = c10_h_b;
      if (c10_c_a > c10_k_b) {
        c10_c_overflow = false;
      } else {
        c10_c_overflow = (c10_k_b > 2147483646);
      }

      if (c10_c_overflow) {
        c10_b_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
      }

      for (c10_idx = c10_i5; c10_idx <= c10_maxRegVar; c10_idx++) {
        c10_i13 = c10_x.size(0);
        if ((c10_idx < 1) || (c10_idx > c10_i13)) {
          emlrtDynamicBoundsCheckR2012b(c10_idx, 1, c10_i13, &c10_hq_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_val += c10_x[c10_idx - 1] * 0.0;
      }
    }
    break;
  }

  return c10_val;
}

static void c10_b_xcopy(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, int32_T c10_f_n, coder::array<real_T, 1U> &c10_y)
{
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  int32_T c10_b;
  int32_T c10_b_k;
  int32_T c10_e_b;
  int32_T c10_h_n;
  int32_T c10_k;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_st.site = &c10_yh_emlrtRSI;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_h_n = c10_f_n;
  c10_b_st.site = &c10_bd_emlrtRSI;
  c10_b = c10_h_n;
  c10_e_b = c10_b;
  if (c10_e_b < 1) {
    c10_overflow = false;
  } else {
    c10_overflow = (c10_e_b > 2147483646);
  }

  if (c10_overflow) {
    c10_c_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
  }

  for (c10_k = 0; c10_k < c10_h_n; c10_k++) {
    c10_b_k = c10_k;
    c10_y[c10_b_k] = 0.0;
  }
}

static void c10_b_squareQ_appendCol(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_obj, coder::
  array<real_T, 1U> &c10_vec, int32_T c10_iv0)
{
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_lda_t;
  ptrdiff_t c10_m_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 2U> c10_A;
  coder::array<real_T, 2U> c10_f_y;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  real_T c10_alpha1;
  real_T c10_b_c;
  real_T c10_beta1;
  real_T c10_c_a;
  real_T c10_c_c;
  real_T c10_c_s;
  real_T c10_d;
  real_T c10_d1;
  real_T c10_d_a;
  real_T c10_d_c;
  real_T c10_e_a;
  real_T c10_e_b;
  real_T c10_e_c;
  real_T c10_e_s;
  real_T c10_f_a;
  real_T c10_f_b;
  real_T c10_f_s;
  real_T c10_g_a;
  real_T c10_g_b;
  real_T c10_h_b;
  real_T c10_j_b;
  real_T c10_s;
  real_T c10_temp;
  int32_T c10_Qk0;
  int32_T c10_Qk10;
  int32_T c10_b;
  int32_T c10_b_a;
  int32_T c10_b_ix0;
  int32_T c10_b_iy;
  int32_T c10_b_iy0;
  int32_T c10_b_loop_ub;
  int32_T c10_b_var;
  int32_T c10_b_x;
  int32_T c10_b_y;
  int32_T c10_c_ix0;
  int32_T c10_c_iy0;
  int32_T c10_c_lda;
  int32_T c10_c_loop_ub;
  int32_T c10_c_m;
  int32_T c10_c_var;
  int32_T c10_c_x;
  int32_T c10_c_y;
  int32_T c10_d_ix0;
  int32_T c10_d_iy0;
  int32_T c10_d_lda;
  int32_T c10_d_loop_ub;
  int32_T c10_d_m;
  int32_T c10_d_x;
  int32_T c10_d_y;
  int32_T c10_e_loop_ub;
  int32_T c10_e_x;
  int32_T c10_e_y;
  int32_T c10_f_loop_ub;
  int32_T c10_f_n;
  int32_T c10_g_loop_ub;
  int32_T c10_h_loop_ub;
  int32_T c10_h_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_iQR0;
  int32_T c10_i_loop_ub;
  int32_T c10_i_n;
  int32_T c10_idx;
  int32_T c10_idxRotGCol;
  int32_T c10_ix;
  int32_T c10_ix0;
  int32_T c10_iy0;
  int32_T c10_j_n;
  int32_T c10_k;
  int32_T c10_k_b;
  int32_T c10_lda;
  int32_T c10_loop_ub;
  int32_T c10_m;
  int32_T c10_minval;
  int32_T c10_o_b;
  int32_T c10_var;
  int32_T c10_varargin_1;
  int32_T c10_varargin_2;
  int32_T c10_x;
  int32_T c10_y;
  char_T c10_TRANSA;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_varargin_1 = c10_b_obj->mrows;
  c10_varargin_2 = c10_b_obj->ncols;
  c10_x = c10_varargin_1;
  c10_y = c10_varargin_2 + 1;
  c10_b_x = c10_x;
  c10_b_y = c10_y;
  c10_c_x = c10_b_x;
  c10_c_y = c10_b_y;
  c10_b_a = c10_c_x;
  c10_b = c10_c_y;
  c10_d_x = c10_b_a;
  c10_d_y = c10_b;
  c10_e_x = c10_d_x;
  c10_e_y = c10_d_y;
  c10_minval = muIntScalarMin_sint32(c10_e_x, c10_e_y);
  c10_b_obj->minRowCol = c10_minval;
  c10_iQR0 = c10_b_obj->ldq * c10_b_obj->ncols;
  c10_st.site = &c10_ai_emlrtRSI;
  c10_m = c10_b_obj->mrows;
  c10_f_n = c10_b_obj->mrows;
  c10_A.set_size(&c10_hg_emlrtRTEI, &c10_st, c10_b_obj->Q.size(0),
                 c10_b_obj->Q.size(1));
  c10_loop_ub = c10_b_obj->Q.size(0) * c10_b_obj->Q.size(1) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_A[c10_i] = c10_b_obj->Q[c10_i];
  }

  c10_lda = c10_b_obj->ldq;
  c10_ix0 = c10_iv0;
  c10_f_y.set_size(&c10_hg_emlrtRTEI, &c10_st, c10_b_obj->QR.size(0),
                   c10_b_obj->QR.size(1));
  c10_b_loop_ub = c10_b_obj->QR.size(0) * c10_b_obj->QR.size(1) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_f_y[c10_i1] = c10_b_obj->QR[c10_i1];
  }

  c10_iy0 = c10_iQR0 + 1;
  c10_b_obj->QR.set_size(&c10_hg_emlrtRTEI, &c10_st, c10_f_y.size(0),
    c10_f_y.size(1));
  c10_c_loop_ub = c10_f_y.size(0) * c10_f_y.size(1) - 1;
  for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
    c10_b_obj->QR[c10_i2] = c10_f_y[c10_i2];
  }

  if ((c10_m < 1) || (c10_f_n < 1)) {
  } else {
    c10_b_st.site = &c10_bf_emlrtRSI;
    c10_c_m = c10_m;
    c10_h_n = c10_f_n;
    c10_c_lda = c10_lda;
    c10_b_ix0 = c10_ix0;
    c10_f_y.set_size(&c10_qh_emlrtRTEI, &c10_b_st, c10_b_obj->QR.size(0),
                     c10_b_obj->QR.size(1));
    c10_d_loop_ub = c10_b_obj->QR.size(0) * c10_b_obj->QR.size(1) - 1;
    for (c10_i4 = 0; c10_i4 <= c10_d_loop_ub; c10_i4++) {
      c10_f_y[c10_i4] = c10_b_obj->QR[c10_i4];
    }

    c10_b_iy0 = c10_iy0;
    c10_b_obj->QR.set_size(&c10_hg_emlrtRTEI, &c10_b_st, c10_f_y.size(0),
      c10_f_y.size(1));
    c10_e_loop_ub = c10_f_y.size(0) * c10_f_y.size(1) - 1;
    for (c10_i6 = 0; c10_i6 <= c10_e_loop_ub; c10_i6++) {
      c10_b_obj->QR[c10_i6] = c10_f_y[c10_i6];
    }

    c10_c_st.site = &c10_ff_emlrtRSI;
    c10_d_m = c10_c_m;
    c10_i_n = c10_h_n;
    c10_alpha1 = 1.0;
    c10_d_lda = c10_c_lda;
    c10_c_ix0 = c10_b_ix0 - 1;
    c10_beta1 = 0.0;
    c10_f_y.set_size(&c10_sh_emlrtRTEI, &c10_c_st, c10_b_obj->QR.size(0),
                     c10_b_obj->QR.size(1));
    c10_f_loop_ub = c10_b_obj->QR.size(0) * c10_b_obj->QR.size(1) - 1;
    for (c10_i10 = 0; c10_i10 <= c10_f_loop_ub; c10_i10++) {
      c10_f_y[c10_i10] = c10_b_obj->QR[c10_i10];
    }

    c10_c_iy0 = c10_b_iy0 - 1;
    c10_TRANSA = 'T';
    c10_b_obj->QR.set_size(&c10_hg_emlrtRTEI, &c10_c_st, c10_f_y.size(0),
      c10_f_y.size(1));
    c10_g_loop_ub = c10_f_y.size(0) * c10_f_y.size(1) - 1;
    for (c10_i11 = 0; c10_i11 <= c10_g_loop_ub; c10_i11++) {
      c10_b_obj->QR[c10_i11] = c10_f_y[c10_i11];
    }

    c10_var = c10_d_m;
    c10_m_t = (ptrdiff_t)c10_var;
    c10_b_var = c10_i_n;
    c10_n_t = (ptrdiff_t)c10_b_var;
    c10_c_var = c10_d_lda;
    c10_lda_t = (ptrdiff_t)c10_c_var;
    c10_incx_t = (ptrdiff_t)1;
    c10_incy_t = (ptrdiff_t)1;
    dgemv(&c10_TRANSA, &c10_m_t, &c10_n_t, &c10_alpha1, &(c10_A.data())[0],
          &c10_lda_t, &c10_vec[c10_c_ix0], &c10_incx_t, &c10_beta1,
          &c10_b_obj->QR[c10_c_iy0], &c10_incy_t);
  }

  c10_b_obj->ncols++;
  c10_i3 = c10_b_obj->jpvt.size(0);
  if ((c10_b_obj->ncols < 1) || (c10_b_obj->ncols > c10_i3)) {
    emlrtDynamicBoundsCheckR2012b(c10_b_obj->ncols, 1, c10_i3, &c10_iq_emlrtBCI,
      (emlrtConstCTX)c10_sp);
  }

  c10_b_obj->jpvt[c10_b_obj->ncols - 1] = c10_b_obj->ncols;
  for (c10_idx = c10_b_obj->mrows; c10_idx > c10_b_obj->ncols; c10_idx--) {
    c10_idxRotGCol = c10_b_obj->ldq * (c10_b_obj->ncols - 1);
    c10_st.site = &c10_ai_emlrtRSI;
    c10_i5 = c10_b_obj->QR.size(0) * c10_b_obj->QR.size(1);
    c10_i7 = (c10_idx + c10_idxRotGCol) - 1;
    if ((c10_i7 < 1) || (c10_i7 > c10_i5)) {
      emlrtDynamicBoundsCheckR2012b(c10_i7, 1, c10_i5, &c10_iq_emlrtBCI, &c10_st);
    }

    c10_c_a = c10_b_obj->QR[c10_i7 - 1];
    c10_i8 = c10_b_obj->QR.size(0) * c10_b_obj->QR.size(1);
    c10_i9 = c10_idx + c10_idxRotGCol;
    if ((c10_i9 < 1) || (c10_i9 > c10_i8)) {
      emlrtDynamicBoundsCheckR2012b(c10_i9, 1, c10_i8, &c10_iq_emlrtBCI, &c10_st);
    }

    c10_e_b = c10_b_obj->QR[c10_i9 - 1];
    c10_d = c10_e_b;
    c10_d1 = c10_c_a;
    c10_b_st.site = &c10_bi_emlrtRSI;
    c10_d_a = c10_d1;
    c10_f_b = c10_d;
    c10_g_b = c10_f_b;
    c10_e_a = c10_d_a;
    c10_c_st.site = &c10_di_emlrtRSI;
    c10_f_a = c10_e_a;
    c10_h_b = c10_g_b;
    c10_j_b = c10_h_b;
    c10_g_a = c10_f_a;
    c10_b_c = 0.0;
    c10_s = 0.0;
    drotg(&c10_g_a, &c10_j_b, &c10_b_c, &c10_s);
    c10_e_a = c10_g_a;
    c10_g_b = c10_j_b;
    c10_c_c = c10_b_c;
    c10_c_s = c10_s;
    c10_d1 = c10_e_a;
    c10_d = c10_g_b;
    c10_d_c = c10_c_c;
    c10_e_s = c10_c_s;
    c10_i12 = c10_b_obj->QR.size(0) * c10_b_obj->QR.size(1);
    c10_i13 = (c10_idx + c10_idxRotGCol) - 1;
    if ((c10_i13 < 1) || (c10_i13 > c10_i12)) {
      emlrtDynamicBoundsCheckR2012b(c10_i13, 1, c10_i12, &c10_iq_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->QR[c10_i13 - 1] = c10_d1;
    c10_i14 = c10_b_obj->QR.size(0) * c10_b_obj->QR.size(1);
    c10_i15 = c10_idx + c10_idxRotGCol;
    if ((c10_i15 < 1) || (c10_i15 > c10_i14)) {
      emlrtDynamicBoundsCheckR2012b(c10_i15, 1, c10_i14, &c10_iq_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->QR[c10_i15 - 1] = c10_d;
    c10_Qk0 = c10_b_obj->ldq * (c10_idx - 2) + 1;
    c10_Qk10 = c10_b_obj->ldq + c10_Qk0;
    c10_st.site = &c10_ai_emlrtRSI;
    c10_j_n = c10_b_obj->mrows;
    c10_A.set_size(&c10_hg_emlrtRTEI, &c10_st, c10_b_obj->Q.size(0),
                   c10_b_obj->Q.size(1));
    c10_h_loop_ub = c10_b_obj->Q.size(0) * c10_b_obj->Q.size(1) - 1;
    for (c10_i16 = 0; c10_i16 <= c10_h_loop_ub; c10_i16++) {
      c10_A[c10_i16] = c10_b_obj->Q[c10_i16];
    }

    c10_d_ix0 = c10_Qk0;
    c10_d_iy0 = c10_Qk10;
    c10_e_c = c10_d_c;
    c10_f_s = c10_e_s;
    c10_b_obj->Q.set_size(&c10_hg_emlrtRTEI, &c10_st, c10_A.size(0), c10_A.size
                          (1));
    c10_i_loop_ub = c10_A.size(0) * c10_A.size(1) - 1;
    for (c10_i17 = 0; c10_i17 <= c10_i_loop_ub; c10_i17++) {
      c10_b_obj->Q[c10_i17] = c10_A[c10_i17];
    }

    if (!(c10_j_n < 1)) {
      c10_ix = c10_d_ix0 - 1;
      c10_b_iy = c10_d_iy0 - 1;
      c10_b_st.site = &c10_ei_emlrtRSI;
      c10_k_b = c10_j_n;
      c10_o_b = c10_k_b;
      if (c10_o_b < 1) {
        c10_overflow = false;
      } else {
        c10_overflow = (c10_o_b > 2147483646);
      }

      if (c10_overflow) {
        c10_c_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
      }

      for (c10_k = 0; c10_k < c10_j_n; c10_k++) {
        c10_temp = c10_e_c * c10_b_obj->Q[c10_ix] + c10_f_s * c10_b_obj->
          Q[c10_b_iy];
        c10_b_obj->Q[c10_b_iy] = c10_e_c * c10_b_obj->Q[c10_b_iy] - c10_f_s *
          c10_b_obj->Q[c10_ix];
        c10_b_obj->Q[c10_ix] = c10_temp;
        c10_b_iy++;
        c10_ix++;
      }
    }
  }
}

static void c10_b_deleteColMoveEnd(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_obj, int32_T
  c10_idx)
{
  coder::array<real_T, 2U> c10_o_x;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  real_T c10_b_c;
  real_T c10_b_temp;
  real_T c10_c_c;
  real_T c10_c_s;
  real_T c10_c_temp;
  real_T c10_d;
  real_T c10_d1;
  real_T c10_d2;
  real_T c10_d3;
  real_T c10_d_c;
  real_T c10_d_temp;
  real_T c10_e_c;
  real_T c10_e_s;
  real_T c10_f_a;
  real_T c10_f_c;
  real_T c10_f_s;
  real_T c10_g_a;
  real_T c10_g_s;
  real_T c10_h_a;
  real_T c10_h_s;
  real_T c10_i_a;
  real_T c10_i_c;
  real_T c10_j_a;
  real_T c10_j_c;
  real_T c10_j_s;
  real_T c10_k_a;
  real_T c10_k_b;
  real_T c10_k_c;
  real_T c10_k_s;
  real_T c10_m_a;
  real_T c10_m_s;
  real_T c10_o_a;
  real_T c10_o_b;
  real_T c10_o_c;
  real_T c10_o_s;
  real_T c10_p_a;
  real_T c10_p_b;
  real_T c10_p_c;
  real_T c10_q_a;
  real_T c10_q_b;
  real_T c10_s;
  real_T c10_s_b;
  real_T c10_t_b;
  real_T c10_temp;
  real_T c10_u_b;
  real_T c10_v_b;
  real_T c10_w_b;
  real_T c10_x_b;
  int32_T c10_QRk0;
  int32_T c10_QRk10;
  int32_T c10_Qk0;
  int32_T c10_Qk10;
  int32_T c10_ab_b;
  int32_T c10_b;
  int32_T c10_b_a;
  int32_T c10_b_incx;
  int32_T c10_b_incy;
  int32_T c10_b_ix;
  int32_T c10_b_ix0;
  int32_T c10_b_iy;
  int32_T c10_b_iy0;
  int32_T c10_b_k;
  int32_T c10_b_loop_ub;
  int32_T c10_b_varargin_1;
  int32_T c10_b_varargin_2;
  int32_T c10_b_x;
  int32_T c10_b_y;
  int32_T c10_c_a;
  int32_T c10_c_i;
  int32_T c10_c_ix;
  int32_T c10_c_ix0;
  int32_T c10_c_iy;
  int32_T c10_c_iy0;
  int32_T c10_c_loop_ub;
  int32_T c10_c_x;
  int32_T c10_c_y;
  int32_T c10_cb_b;
  int32_T c10_d_a;
  int32_T c10_d_ix;
  int32_T c10_d_ix0;
  int32_T c10_d_iy;
  int32_T c10_d_iy0;
  int32_T c10_d_k;
  int32_T c10_d_loop_ub;
  int32_T c10_d_x;
  int32_T c10_d_y;
  int32_T c10_e_a;
  int32_T c10_e_b;
  int32_T c10_e_iy;
  int32_T c10_e_loop_ub;
  int32_T c10_e_x;
  int32_T c10_e_y;
  int32_T c10_eb_b;
  int32_T c10_endIdx;
  int32_T c10_f_b;
  int32_T c10_f_k;
  int32_T c10_f_loop_ub;
  int32_T c10_f_n;
  int32_T c10_f_x;
  int32_T c10_f_y;
  int32_T c10_fb_b;
  int32_T c10_g_b;
  int32_T c10_g_k;
  int32_T c10_g_loop_ub;
  int32_T c10_g_x;
  int32_T c10_g_y;
  int32_T c10_gb_b;
  int32_T c10_h_b;
  int32_T c10_h_k;
  int32_T c10_h_loop_ub;
  int32_T c10_h_n;
  int32_T c10_h_y;
  int32_T c10_hb_b;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i19;
  int32_T c10_i2;
  int32_T c10_i20;
  int32_T c10_i21;
  int32_T c10_i22;
  int32_T c10_i23;
  int32_T c10_i24;
  int32_T c10_i25;
  int32_T c10_i26;
  int32_T c10_i27;
  int32_T c10_i28;
  int32_T c10_i29;
  int32_T c10_i3;
  int32_T c10_i30;
  int32_T c10_i31;
  int32_T c10_i32;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_i_k;
  int32_T c10_i_n;
  int32_T c10_i_y;
  int32_T c10_idxRotGCol;
  int32_T c10_incx;
  int32_T c10_incy;
  int32_T c10_ix;
  int32_T c10_ix0;
  int32_T c10_iy0;
  int32_T c10_j_b;
  int32_T c10_j_n;
  int32_T c10_j_x;
  int32_T c10_j_y;
  int32_T c10_jb_b;
  int32_T c10_k;
  int32_T c10_k_x;
  int32_T c10_loop_ub;
  int32_T c10_m_x;
  int32_T c10_minval;
  int32_T c10_qrMoveFrom;
  int32_T c10_qrMoveTo;
  int32_T c10_qrSubDiag;
  int32_T c10_varargin_1;
  int32_T c10_varargin_2;
  int32_T c10_x;
  int32_T c10_y;
  int32_T c10_y_b;
  boolean_T c10_b_overflow;
  boolean_T c10_c_overflow;
  boolean_T c10_d_overflow;
  boolean_T c10_e_overflow;
  boolean_T c10_exitg1;
  boolean_T c10_f_overflow;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  if (c10_b_obj->usedPivoting) {
    c10_i = 1;
    c10_exitg1 = false;
    while ((!c10_exitg1) && (c10_i <= c10_b_obj->ncols)) {
      c10_i1 = c10_b_obj->jpvt.size(0);
      if ((c10_i < 1) || (c10_i > c10_i1)) {
        emlrtDynamicBoundsCheckR2012b(c10_i, 1, c10_i1, &c10_jq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      if (c10_b_obj->jpvt[c10_i - 1] != c10_idx) {
        c10_i++;
      } else {
        c10_exitg1 = true;
      }
    }

    c10_idx = c10_i;
  }

  if (c10_idx >= c10_b_obj->ncols) {
    c10_b_obj->ncols--;
  } else {
    c10_c_i = c10_b_obj->jpvt.size(0);
    if ((c10_b_obj->ncols < 1) || (c10_b_obj->ncols > c10_c_i)) {
      emlrtDynamicBoundsCheckR2012b(c10_b_obj->ncols, 1, c10_c_i,
        &c10_jq_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_i2 = c10_b_obj->jpvt.size(0);
    if ((c10_idx < 1) || (c10_idx > c10_i2)) {
      emlrtDynamicBoundsCheckR2012b(c10_idx, 1, c10_i2, &c10_jq_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->jpvt[c10_idx - 1] = c10_b_obj->jpvt[c10_b_obj->ncols - 1];
    c10_i3 = c10_b_obj->minRowCol;
    c10_st.site = &c10_fi_emlrtRSI;
    c10_b = c10_i3;
    c10_e_b = c10_b;
    if (c10_e_b < 1) {
      c10_overflow = false;
    } else {
      c10_overflow = (c10_e_b > 2147483646);
    }

    if (c10_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_k = 0; c10_k < c10_i3; c10_k++) {
      c10_b_k = c10_k + 1;
      c10_qrMoveTo = c10_b_k + c10_b_obj->ldq * (c10_idx - 1);
      c10_qrMoveFrom = c10_b_k + c10_b_obj->ldq * (c10_b_obj->ncols - 1);
      c10_i4 = c10_b_obj->QR.size(0) * c10_b_obj->QR.size(1);
      if ((c10_qrMoveFrom < 1) || (c10_qrMoveFrom > c10_i4)) {
        emlrtDynamicBoundsCheckR2012b(c10_qrMoveFrom, 1, c10_i4,
          &c10_jq_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_i5 = c10_b_obj->QR.size(0) * c10_b_obj->QR.size(1);
      if ((c10_qrMoveTo < 1) || (c10_qrMoveTo > c10_i5)) {
        emlrtDynamicBoundsCheckR2012b(c10_qrMoveTo, 1, c10_i5, &c10_jq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->QR[c10_qrMoveTo - 1] = c10_b_obj->QR[c10_qrMoveFrom - 1];
    }

    c10_b_obj->ncols--;
    c10_varargin_1 = c10_b_obj->mrows;
    c10_varargin_2 = c10_b_obj->ncols;
    c10_x = c10_varargin_1;
    c10_y = c10_varargin_2;
    c10_b_x = c10_x;
    c10_b_y = c10_y;
    c10_c_x = c10_b_x;
    c10_c_y = c10_b_y;
    c10_b_a = c10_c_x;
    c10_f_b = c10_c_y;
    c10_d_x = c10_b_a;
    c10_d_y = c10_f_b;
    c10_e_x = c10_d_x;
    c10_e_y = c10_d_y;
    c10_minval = muIntScalarMin_sint32(c10_e_x, c10_e_y);
    c10_b_obj->minRowCol = c10_minval;
    if (c10_idx >= c10_b_obj->mrows) {
    } else {
      c10_b_varargin_1 = c10_b_obj->mrows;
      c10_b_varargin_2 = c10_b_obj->ncols;
      c10_f_x = c10_b_varargin_1 - 1;
      c10_f_y = c10_b_varargin_2;
      c10_g_x = c10_f_x;
      c10_g_y = c10_f_y;
      c10_j_x = c10_g_x;
      c10_h_y = c10_g_y;
      c10_c_a = c10_j_x;
      c10_g_b = c10_h_y;
      c10_k_x = c10_c_a;
      c10_i_y = c10_g_b;
      c10_m_x = c10_k_x;
      c10_j_y = c10_i_y;
      c10_endIdx = muIntScalarMin_sint32(c10_m_x, c10_j_y);
      c10_b_k = c10_endIdx;
      c10_idxRotGCol = c10_b_obj->ldq * (c10_idx - 1);
      while (c10_b_k >= c10_idx) {
        c10_st.site = &c10_fi_emlrtRSI;
        c10_i7 = c10_b_obj->QR.size(0) * c10_b_obj->QR.size(1);
        c10_i8 = c10_b_k + c10_idxRotGCol;
        if ((c10_i8 < 1) || (c10_i8 > c10_i7)) {
          emlrtDynamicBoundsCheckR2012b(c10_i8, 1, c10_i7, &c10_jq_emlrtBCI,
            &c10_st);
        }

        c10_f_a = c10_b_obj->QR[c10_i8 - 1];
        c10_i9 = c10_b_obj->QR.size(0) * c10_b_obj->QR.size(1);
        c10_i10 = (c10_b_k + c10_idxRotGCol) + 1;
        if ((c10_i10 < 1) || (c10_i10 > c10_i9)) {
          emlrtDynamicBoundsCheckR2012b(c10_i10, 1, c10_i9, &c10_jq_emlrtBCI,
            &c10_st);
        }

        c10_k_b = c10_b_obj->QR[c10_i10 - 1];
        c10_d = c10_k_b;
        c10_d1 = c10_f_a;
        c10_b_st.site = &c10_bi_emlrtRSI;
        c10_g_a = c10_d1;
        c10_o_b = c10_d;
        c10_p_b = c10_o_b;
        c10_h_a = c10_g_a;
        c10_c_st.site = &c10_di_emlrtRSI;
        c10_j_a = c10_h_a;
        c10_q_b = c10_p_b;
        c10_s_b = c10_q_b;
        c10_k_a = c10_j_a;
        c10_b_c = 0.0;
        c10_s = 0.0;
        drotg(&c10_k_a, &c10_s_b, &c10_b_c, &c10_s);
        c10_h_a = c10_k_a;
        c10_p_b = c10_s_b;
        c10_c_c = c10_b_c;
        c10_c_s = c10_s;
        c10_d1 = c10_h_a;
        c10_d = c10_p_b;
        c10_d_c = c10_c_c;
        c10_e_s = c10_c_s;
        c10_i15 = c10_b_obj->QR.size(0) * c10_b_obj->QR.size(1);
        c10_i16 = c10_b_k + c10_idxRotGCol;
        if ((c10_i16 < 1) || (c10_i16 > c10_i15)) {
          emlrtDynamicBoundsCheckR2012b(c10_i16, 1, c10_i15, &c10_jq_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_b_obj->QR[c10_i16 - 1] = c10_d1;
        c10_i17 = c10_b_obj->QR.size(0) * c10_b_obj->QR.size(1);
        c10_i18 = (c10_b_k + c10_idxRotGCol) + 1;
        if ((c10_i18 < 1) || (c10_i18 > c10_i17)) {
          emlrtDynamicBoundsCheckR2012b(c10_i18, 1, c10_i17, &c10_jq_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_b_obj->QR[c10_i18 - 1] = c10_d;
        c10_qrSubDiag = c10_b_k + c10_b_obj->ldq * (c10_b_k - 1);
        c10_i19 = c10_b_obj->QR.size(0) * c10_b_obj->QR.size(1);
        c10_i20 = c10_qrSubDiag + 1;
        if ((c10_i20 < 1) || (c10_i20 > c10_i19)) {
          emlrtDynamicBoundsCheckR2012b(c10_i20, 1, c10_i19, &c10_jq_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_b_obj->QR[c10_i20 - 1] = 0.0;
        c10_QRk0 = c10_b_k + c10_b_obj->ldq * c10_idx;
        c10_QRk10 = c10_QRk0;
        c10_st.site = &c10_fi_emlrtRSI;
        c10_f_n = c10_b_obj->ncols - c10_idx;
        c10_o_x.set_size(&c10_th_emlrtRTEI, &c10_st, c10_b_obj->QR.size(0),
                         c10_b_obj->QR.size(1));
        c10_loop_ub = c10_b_obj->QR.size(0) * c10_b_obj->QR.size(1) - 1;
        for (c10_i25 = 0; c10_i25 <= c10_loop_ub; c10_i25++) {
          c10_o_x[c10_i25] = c10_b_obj->QR[c10_i25];
        }

        c10_ix0 = c10_QRk0;
        c10_incx = c10_b_obj->ldq;
        c10_iy0 = c10_QRk10 + 1;
        c10_incy = c10_b_obj->ldq;
        c10_j_c = c10_d_c;
        c10_j_s = c10_e_s;
        c10_b_obj->QR.set_size(&c10_th_emlrtRTEI, &c10_st, c10_o_x.size(0),
          c10_o_x.size(1));
        c10_c_loop_ub = c10_o_x.size(0) * c10_o_x.size(1) - 1;
        for (c10_i27 = 0; c10_i27 <= c10_c_loop_ub; c10_i27++) {
          c10_b_obj->QR[c10_i27] = c10_o_x[c10_i27];
        }

        if (!(c10_f_n < 1)) {
          c10_ix = c10_ix0 - 1;
          c10_b_iy = c10_iy0 - 1;
          c10_b_st.site = &c10_ei_emlrtRSI;
          c10_y_b = c10_f_n;
          c10_ab_b = c10_y_b;
          if (c10_ab_b < 1) {
            c10_c_overflow = false;
          } else {
            c10_c_overflow = (c10_ab_b > 2147483646);
          }

          if (c10_c_overflow) {
            c10_c_st.site = &c10_v_emlrtRSI;
            c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
          }

          for (c10_f_k = 0; c10_f_k < c10_f_n; c10_f_k++) {
            c10_temp = c10_j_c * c10_b_obj->QR[c10_ix] + c10_j_s * c10_b_obj->
              QR[c10_b_iy];
            c10_b_obj->QR[c10_b_iy] = c10_j_c * c10_b_obj->QR[c10_b_iy] -
              c10_j_s * c10_b_obj->QR[c10_ix];
            c10_b_obj->QR[c10_ix] = c10_temp;
            c10_b_iy += c10_incy;
            c10_ix += c10_incx;
          }
        }

        c10_Qk0 = c10_b_obj->ldq * (c10_b_k - 1) + 1;
        c10_Qk10 = c10_b_obj->ldq + c10_Qk0;
        c10_st.site = &c10_fi_emlrtRSI;
        c10_i_n = c10_b_obj->mrows;
        c10_o_x.set_size(&c10_th_emlrtRTEI, &c10_st, c10_b_obj->Q.size(0),
                         c10_b_obj->Q.size(1));
        c10_e_loop_ub = c10_b_obj->Q.size(0) * c10_b_obj->Q.size(1) - 1;
        for (c10_i29 = 0; c10_i29 <= c10_e_loop_ub; c10_i29++) {
          c10_o_x[c10_i29] = c10_b_obj->Q[c10_i29];
        }

        c10_c_ix0 = c10_Qk0;
        c10_c_iy0 = c10_Qk10;
        c10_o_c = c10_d_c;
        c10_m_s = c10_e_s;
        c10_b_obj->Q.set_size(&c10_th_emlrtRTEI, &c10_st, c10_o_x.size(0),
                              c10_o_x.size(1));
        c10_g_loop_ub = c10_o_x.size(0) * c10_o_x.size(1) - 1;
        for (c10_i31 = 0; c10_i31 <= c10_g_loop_ub; c10_i31++) {
          c10_b_obj->Q[c10_i31] = c10_o_x[c10_i31];
        }

        if (!(c10_i_n < 1)) {
          c10_c_ix = c10_c_ix0 - 1;
          c10_d_iy = c10_c_iy0 - 1;
          c10_b_st.site = &c10_ei_emlrtRSI;
          c10_fb_b = c10_i_n;
          c10_gb_b = c10_fb_b;
          if (c10_gb_b < 1) {
            c10_e_overflow = false;
          } else {
            c10_e_overflow = (c10_gb_b > 2147483646);
          }

          if (c10_e_overflow) {
            c10_c_st.site = &c10_v_emlrtRSI;
            c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
          }

          for (c10_h_k = 0; c10_h_k < c10_i_n; c10_h_k++) {
            c10_c_temp = c10_o_c * c10_b_obj->Q[c10_c_ix] + c10_m_s *
              c10_b_obj->Q[c10_d_iy];
            c10_b_obj->Q[c10_d_iy] = c10_o_c * c10_b_obj->Q[c10_d_iy] - c10_m_s *
              c10_b_obj->Q[c10_c_ix];
            c10_b_obj->Q[c10_c_ix] = c10_c_temp;
            c10_d_iy++;
            c10_c_ix++;
          }
        }

        c10_b_k--;
      }

      c10_i6 = c10_idx + 1;
      c10_st.site = &c10_fi_emlrtRSI;
      c10_d_a = c10_i6;
      c10_h_b = c10_endIdx;
      c10_e_a = c10_d_a;
      c10_j_b = c10_h_b;
      if (c10_e_a > c10_j_b) {
        c10_b_overflow = false;
      } else {
        c10_b_overflow = (c10_j_b > 2147483646);
      }

      if (c10_b_overflow) {
        c10_b_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
      }

      for (c10_d_k = c10_i6; c10_d_k <= c10_endIdx; c10_d_k++) {
        c10_idxRotGCol = c10_b_obj->ldq * (c10_d_k - 1);
        c10_st.site = &c10_fi_emlrtRSI;
        c10_i11 = c10_b_obj->QR.size(0) * c10_b_obj->QR.size(1);
        c10_i12 = c10_d_k + c10_idxRotGCol;
        if ((c10_i12 < 1) || (c10_i12 > c10_i11)) {
          emlrtDynamicBoundsCheckR2012b(c10_i12, 1, c10_i11, &c10_jq_emlrtBCI,
            &c10_st);
        }

        c10_i_a = c10_b_obj->QR[c10_i12 - 1];
        c10_i13 = c10_b_obj->QR.size(0) * c10_b_obj->QR.size(1);
        c10_i14 = (c10_d_k + c10_idxRotGCol) + 1;
        if ((c10_i14 < 1) || (c10_i14 > c10_i13)) {
          emlrtDynamicBoundsCheckR2012b(c10_i14, 1, c10_i13, &c10_jq_emlrtBCI,
            &c10_st);
        }

        c10_t_b = c10_b_obj->QR[c10_i14 - 1];
        c10_d2 = c10_t_b;
        c10_d3 = c10_i_a;
        c10_b_st.site = &c10_bi_emlrtRSI;
        c10_m_a = c10_d3;
        c10_u_b = c10_d2;
        c10_v_b = c10_u_b;
        c10_o_a = c10_m_a;
        c10_c_st.site = &c10_di_emlrtRSI;
        c10_p_a = c10_o_a;
        c10_w_b = c10_v_b;
        c10_x_b = c10_w_b;
        c10_q_a = c10_p_a;
        c10_e_c = 0.0;
        c10_f_s = 0.0;
        drotg(&c10_q_a, &c10_x_b, &c10_e_c, &c10_f_s);
        c10_o_a = c10_q_a;
        c10_v_b = c10_x_b;
        c10_f_c = c10_e_c;
        c10_g_s = c10_f_s;
        c10_d3 = c10_o_a;
        c10_d2 = c10_v_b;
        c10_i_c = c10_f_c;
        c10_h_s = c10_g_s;
        c10_i21 = c10_b_obj->QR.size(0) * c10_b_obj->QR.size(1);
        c10_i22 = c10_d_k + c10_idxRotGCol;
        if ((c10_i22 < 1) || (c10_i22 > c10_i21)) {
          emlrtDynamicBoundsCheckR2012b(c10_i22, 1, c10_i21, &c10_jq_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_b_obj->QR[c10_i22 - 1] = c10_d3;
        c10_i23 = c10_b_obj->QR.size(0) * c10_b_obj->QR.size(1);
        c10_i24 = (c10_d_k + c10_idxRotGCol) + 1;
        if ((c10_i24 < 1) || (c10_i24 > c10_i23)) {
          emlrtDynamicBoundsCheckR2012b(c10_i24, 1, c10_i23, &c10_jq_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_b_obj->QR[c10_i24 - 1] = c10_d2;
        c10_QRk0 = c10_d_k * (c10_b_obj->ldq + 1);
        c10_QRk10 = c10_QRk0;
        c10_st.site = &c10_fi_emlrtRSI;
        c10_h_n = c10_b_obj->ncols - c10_d_k;
        c10_o_x.set_size(&c10_th_emlrtRTEI, &c10_st, c10_b_obj->QR.size(0),
                         c10_b_obj->QR.size(1));
        c10_b_loop_ub = c10_b_obj->QR.size(0) * c10_b_obj->QR.size(1) - 1;
        for (c10_i26 = 0; c10_i26 <= c10_b_loop_ub; c10_i26++) {
          c10_o_x[c10_i26] = c10_b_obj->QR[c10_i26];
        }

        c10_b_ix0 = c10_QRk0;
        c10_b_incx = c10_b_obj->ldq;
        c10_b_iy0 = c10_QRk10 + 1;
        c10_b_incy = c10_b_obj->ldq;
        c10_k_c = c10_i_c;
        c10_k_s = c10_h_s;
        c10_b_obj->QR.set_size(&c10_th_emlrtRTEI, &c10_st, c10_o_x.size(0),
          c10_o_x.size(1));
        c10_d_loop_ub = c10_o_x.size(0) * c10_o_x.size(1) - 1;
        for (c10_i28 = 0; c10_i28 <= c10_d_loop_ub; c10_i28++) {
          c10_b_obj->QR[c10_i28] = c10_o_x[c10_i28];
        }

        if (!(c10_h_n < 1)) {
          c10_b_ix = c10_b_ix0 - 1;
          c10_c_iy = c10_b_iy0 - 1;
          c10_b_st.site = &c10_ei_emlrtRSI;
          c10_cb_b = c10_h_n;
          c10_eb_b = c10_cb_b;
          if (c10_eb_b < 1) {
            c10_d_overflow = false;
          } else {
            c10_d_overflow = (c10_eb_b > 2147483646);
          }

          if (c10_d_overflow) {
            c10_c_st.site = &c10_v_emlrtRSI;
            c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
          }

          for (c10_g_k = 0; c10_g_k < c10_h_n; c10_g_k++) {
            c10_b_temp = c10_k_c * c10_b_obj->QR[c10_b_ix] + c10_k_s *
              c10_b_obj->QR[c10_c_iy];
            c10_b_obj->QR[c10_c_iy] = c10_k_c * c10_b_obj->QR[c10_c_iy] -
              c10_k_s * c10_b_obj->QR[c10_b_ix];
            c10_b_obj->QR[c10_b_ix] = c10_b_temp;
            c10_c_iy += c10_b_incy;
            c10_b_ix += c10_b_incx;
          }
        }

        c10_Qk0 = c10_b_obj->ldq * (c10_d_k - 1) + 1;
        c10_Qk10 = c10_b_obj->ldq + c10_Qk0;
        c10_st.site = &c10_fi_emlrtRSI;
        c10_j_n = c10_b_obj->mrows;
        c10_o_x.set_size(&c10_th_emlrtRTEI, &c10_st, c10_b_obj->Q.size(0),
                         c10_b_obj->Q.size(1));
        c10_f_loop_ub = c10_b_obj->Q.size(0) * c10_b_obj->Q.size(1) - 1;
        for (c10_i30 = 0; c10_i30 <= c10_f_loop_ub; c10_i30++) {
          c10_o_x[c10_i30] = c10_b_obj->Q[c10_i30];
        }

        c10_d_ix0 = c10_Qk0;
        c10_d_iy0 = c10_Qk10;
        c10_p_c = c10_i_c;
        c10_o_s = c10_h_s;
        c10_b_obj->Q.set_size(&c10_th_emlrtRTEI, &c10_st, c10_o_x.size(0),
                              c10_o_x.size(1));
        c10_h_loop_ub = c10_o_x.size(0) * c10_o_x.size(1) - 1;
        for (c10_i32 = 0; c10_i32 <= c10_h_loop_ub; c10_i32++) {
          c10_b_obj->Q[c10_i32] = c10_o_x[c10_i32];
        }

        if (!(c10_j_n < 1)) {
          c10_d_ix = c10_d_ix0 - 1;
          c10_e_iy = c10_d_iy0 - 1;
          c10_b_st.site = &c10_ei_emlrtRSI;
          c10_hb_b = c10_j_n;
          c10_jb_b = c10_hb_b;
          if (c10_jb_b < 1) {
            c10_f_overflow = false;
          } else {
            c10_f_overflow = (c10_jb_b > 2147483646);
          }

          if (c10_f_overflow) {
            c10_c_st.site = &c10_v_emlrtRSI;
            c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
          }

          for (c10_i_k = 0; c10_i_k < c10_j_n; c10_i_k++) {
            c10_d_temp = c10_p_c * c10_b_obj->Q[c10_d_ix] + c10_o_s *
              c10_b_obj->Q[c10_e_iy];
            c10_b_obj->Q[c10_e_iy] = c10_p_c * c10_b_obj->Q[c10_e_iy] - c10_o_s *
              c10_b_obj->Q[c10_d_ix];
            c10_b_obj->Q[c10_d_ix] = c10_d_temp;
            c10_e_iy++;
            c10_d_ix++;
          }
        }
      }
    }
  }
}

static void c10_b_compute_deltax(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_c_H,
  c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution, c10_s_pIaUYPkQBTqVmAKxFPiGQF
  *c10_memspace, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager,
  c10_s_lryvQQZbN23ozlLWy4I3pD *c10_cholmanager, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_objective)
{
  ptrdiff_t c10_b_incx_t;
  ptrdiff_t c10_b_k_t;
  ptrdiff_t c10_b_lda_t;
  ptrdiff_t c10_b_ldb_t;
  ptrdiff_t c10_b_ldc_t;
  ptrdiff_t c10_b_m_t;
  ptrdiff_t c10_b_n_t;
  ptrdiff_t c10_c_incx_t;
  ptrdiff_t c10_c_lda_t;
  ptrdiff_t c10_c_m_t;
  ptrdiff_t c10_c_n_t;
  ptrdiff_t c10_d_incx_t;
  ptrdiff_t c10_d_lda_t;
  ptrdiff_t c10_d_n_t;
  ptrdiff_t c10_e_incx_t;
  ptrdiff_t c10_e_lda_t;
  ptrdiff_t c10_e_n_t;
  ptrdiff_t c10_f_incx_t;
  ptrdiff_t c10_f_lda_t;
  ptrdiff_t c10_f_n_t;
  ptrdiff_t c10_g_lda_t;
  ptrdiff_t c10_g_n_t;
  ptrdiff_t c10_h_n_t;
  ptrdiff_t c10_idxmax_t;
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_k_t;
  ptrdiff_t c10_lda_t;
  ptrdiff_t c10_ldb_t;
  ptrdiff_t c10_ldc_t;
  ptrdiff_t c10_m_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 2U> c10_A;
  coder::array<real_T, 2U> c10_b_memspace;
  coder::array<real_T, 2U> c10_c_B;
  coder::array<real_T, 2U> c10_c_memspace;
  coder::array<real_T, 2U> c10_c_qrmanager;
  coder::array<real_T, 2U> c10_d_H;
  coder::array<real_T, 2U> c10_d_qrmanager;
  coder::array<real_T, 2U> c10_q_C;
  coder::array<real_T, 1U> c10_b_rhs;
  coder::array<real_T, 1U> c10_g_C;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_d_st;
  emlrtStack c10_st;
  real_T c10_SCALED_REG_PRIMAL;
  real_T c10_alpha1;
  real_T c10_b_a;
  real_T c10_b_alpha1;
  real_T c10_b_beta1;
  real_T c10_b_x;
  real_T c10_b_y;
  real_T c10_beta1;
  real_T c10_c_alpha1;
  real_T c10_c_beta1;
  real_T c10_c_x;
  real_T c10_c_y;
  real_T c10_d_x;
  real_T c10_d_y;
  real_T c10_e_x;
  real_T c10_e_y;
  real_T c10_f_x;
  real_T c10_f_y;
  real_T c10_g_x;
  real_T c10_j_x;
  real_T c10_k_x;
  real_T c10_m_x;
  real_T c10_maxval;
  real_T c10_o_x;
  real_T c10_p_b;
  real_T c10_varargin_1;
  real_T c10_varargin_2;
  real_T c10_x;
  real_T c10_y;
  int32_T c10_A_maxDiag_idx;
  int32_T c10_LD_diagOffset;
  int32_T c10_LDimSizeP1;
  int32_T c10_TYPE;
  int32_T c10_ab_loop_ub;
  int32_T c10_ab_n;
  int32_T c10_ab_var;
  int32_T c10_b;
  int32_T c10_b_ib0;
  int32_T c10_b_idx;
  int32_T c10_b_idxDiag;
  int32_T c10_b_incx;
  int32_T c10_b_k;
  int32_T c10_b_ldQ;
  int32_T c10_b_ldb;
  int32_T c10_b_ldc;
  int32_T c10_b_loop_ub;
  int32_T c10_b_mConstr;
  int32_T c10_b_mNull;
  int32_T c10_b_ndims;
  int32_T c10_b_var;
  int32_T c10_bb_loop_ub;
  int32_T c10_bb_n;
  int32_T c10_bb_var;
  int32_T c10_c_ia0;
  int32_T c10_c_ib0;
  int32_T c10_c_idx;
  int32_T c10_c_idxDiag;
  int32_T c10_c_incx;
  int32_T c10_c_lda;
  int32_T c10_c_ldb;
  int32_T c10_c_ldc;
  int32_T c10_c_loop_ub;
  int32_T c10_c_m;
  int32_T c10_c_ndims;
  int32_T c10_c_var;
  int32_T c10_cb_loop_ub;
  int32_T c10_cb_n;
  int32_T c10_cb_var;
  int32_T c10_d_ia0;
  int32_T c10_d_ib0;
  int32_T c10_d_idx;
  int32_T c10_d_k;
  int32_T c10_d_lda;
  int32_T c10_d_ldb;
  int32_T c10_d_ldc;
  int32_T c10_d_loop_ub;
  int32_T c10_d_m;
  int32_T c10_d_var;
  int32_T c10_db_loop_ub;
  int32_T c10_db_n;
  int32_T c10_diagIdx;
  int32_T c10_e_b;
  int32_T c10_e_ia0;
  int32_T c10_e_idx;
  int32_T c10_e_lda;
  int32_T c10_e_ldb;
  int32_T c10_e_ldc;
  int32_T c10_e_loop_ub;
  int32_T c10_e_m;
  int32_T c10_e_var;
  int32_T c10_eb_loop_ub;
  int32_T c10_eb_n;
  int32_T c10_exitg2;
  int32_T c10_f_b;
  int32_T c10_f_ia0;
  int32_T c10_f_idx;
  int32_T c10_f_k;
  int32_T c10_f_lda;
  int32_T c10_f_ldb;
  int32_T c10_f_ldc;
  int32_T c10_f_loop_ub;
  int32_T c10_f_m;
  int32_T c10_f_n;
  int32_T c10_f_var;
  int32_T c10_fb_loop_ub;
  int32_T c10_fb_n;
  int32_T c10_g_b;
  int32_T c10_g_ia0;
  int32_T c10_g_idx;
  int32_T c10_g_k;
  int32_T c10_g_lda;
  int32_T c10_g_ldc;
  int32_T c10_g_loop_ub;
  int32_T c10_g_m;
  int32_T c10_g_var;
  int32_T c10_gb_loop_ub;
  int32_T c10_gb_n;
  int32_T c10_h_b;
  int32_T c10_h_idx;
  int32_T c10_h_k;
  int32_T c10_h_lda;
  int32_T c10_h_loop_ub;
  int32_T c10_h_m;
  int32_T c10_h_n;
  int32_T c10_hb_loop_ub;
  int32_T c10_hb_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i19;
  int32_T c10_i2;
  int32_T c10_i20;
  int32_T c10_i21;
  int32_T c10_i22;
  int32_T c10_i23;
  int32_T c10_i24;
  int32_T c10_i25;
  int32_T c10_i26;
  int32_T c10_i27;
  int32_T c10_i28;
  int32_T c10_i29;
  int32_T c10_i3;
  int32_T c10_i30;
  int32_T c10_i31;
  int32_T c10_i32;
  int32_T c10_i33;
  int32_T c10_i34;
  int32_T c10_i35;
  int32_T c10_i36;
  int32_T c10_i37;
  int32_T c10_i38;
  int32_T c10_i39;
  int32_T c10_i4;
  int32_T c10_i40;
  int32_T c10_i41;
  int32_T c10_i42;
  int32_T c10_i43;
  int32_T c10_i44;
  int32_T c10_i45;
  int32_T c10_i46;
  int32_T c10_i47;
  int32_T c10_i48;
  int32_T c10_i49;
  int32_T c10_i5;
  int32_T c10_i50;
  int32_T c10_i51;
  int32_T c10_i52;
  int32_T c10_i53;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_i_idx;
  int32_T c10_i_k;
  int32_T c10_i_lda;
  int32_T c10_i_loop_ub;
  int32_T c10_i_m;
  int32_T c10_i_n;
  int32_T c10_i_var;
  int32_T c10_ia0;
  int32_T c10_ib_loop_ub;
  int32_T c10_ib_n;
  int32_T c10_idx;
  int32_T c10_idxDiag;
  int32_T c10_idxQ;
  int32_T c10_incx;
  int32_T c10_j_b;
  int32_T c10_j_idx;
  int32_T c10_j_lda;
  int32_T c10_j_loop_ub;
  int32_T c10_j_m;
  int32_T c10_j_n;
  int32_T c10_j_var;
  int32_T c10_jb_loop_ub;
  int32_T c10_jb_n;
  int32_T c10_k;
  int32_T c10_k_b;
  int32_T c10_k_lda;
  int32_T c10_k_loop_ub;
  int32_T c10_k_n;
  int32_T c10_k_var;
  int32_T c10_kb_loop_ub;
  int32_T c10_kb_n;
  int32_T c10_ldH;
  int32_T c10_lda;
  int32_T c10_ldb;
  int32_T c10_ldm;
  int32_T c10_ldw;
  int32_T c10_loop_ub;
  int32_T c10_m;
  int32_T c10_mConstr;
  int32_T c10_mNull;
  int32_T c10_m_lda;
  int32_T c10_m_loop_ub;
  int32_T c10_m_n;
  int32_T c10_m_var;
  int32_T c10_mb_loop_ub;
  int32_T c10_mb_n;
  int32_T c10_nVar;
  int32_T c10_nVars;
  int32_T c10_ndims;
  int32_T c10_nullStart;
  int32_T c10_nullStartIdx;
  int32_T c10_o_b;
  int32_T c10_o_lda;
  int32_T c10_o_loop_ub;
  int32_T c10_o_n;
  int32_T c10_o_var;
  int32_T c10_ob_loop_ub;
  int32_T c10_order;
  int32_T c10_p_lda;
  int32_T c10_p_loop_ub;
  int32_T c10_p_n;
  int32_T c10_p_var;
  int32_T c10_pb_loop_ub;
  int32_T c10_q_b;
  int32_T c10_q_lda;
  int32_T c10_q_loop_ub;
  int32_T c10_q_n;
  int32_T c10_q_var;
  int32_T c10_r_lda;
  int32_T c10_r_loop_ub;
  int32_T c10_r_var;
  int32_T c10_s_b;
  int32_T c10_s_lda;
  int32_T c10_s_loop_ub;
  int32_T c10_s_var;
  int32_T c10_t_b;
  int32_T c10_t_lda;
  int32_T c10_t_loop_ub;
  int32_T c10_t_var;
  int32_T c10_u_b;
  int32_T c10_u_lda;
  int32_T c10_u_loop_ub;
  int32_T c10_u_var;
  int32_T c10_v_lda;
  int32_T c10_v_loop_ub;
  int32_T c10_v_n;
  int32_T c10_v_var;
  int32_T c10_var;
  int32_T c10_w_lda;
  int32_T c10_w_loop_ub;
  int32_T c10_w_var;
  int32_T c10_x_lda;
  int32_T c10_x_loop_ub;
  int32_T c10_x_n;
  int32_T c10_x_var;
  int32_T c10_y_loop_ub;
  int32_T c10_y_n;
  int32_T c10_y_var;
  char_T c10_DIAGA1;
  char_T c10_TRANSA;
  char_T c10_TRANSA1;
  char_T c10_TRANSB1;
  char_T c10_UPLO1;
  char_T c10_b_DIAGA1;
  char_T c10_b_TRANSA1;
  char_T c10_b_TRANSB1;
  char_T c10_b_UPLO1;
  char_T c10_c_DIAGA1;
  char_T c10_c_TRANSA1;
  char_T c10_c_UPLO1;
  char_T c10_d_DIAGA1;
  char_T c10_d_TRANSA1;
  char_T c10_d_UPLO1;
  char_T c10_e_TRANSA1;
  char_T c10_f_TRANSA1;
  boolean_T c10_b_overflow;
  boolean_T c10_c_overflow;
  boolean_T c10_d_overflow;
  boolean_T c10_e_overflow;
  boolean_T c10_exitg1;
  boolean_T c10_f_overflow;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_d_st.prev = &c10_c_st;
  c10_d_st.tls = c10_c_st.tls;
  c10_nVar = c10_b_qrmanager->mrows;
  c10_mConstr = c10_b_qrmanager->ncols;
  c10_mNull = c10_nVar - c10_mConstr;
  c10_TYPE = c10_objective->objtype;
  if (c10_mNull <= 0) {
    c10_st.site = &c10_gi_emlrtRSI;
    c10_e_b = c10_nVar;
    c10_g_b = c10_e_b;
    if (c10_g_b < 1) {
      c10_b_overflow = false;
    } else {
      c10_b_overflow = (c10_g_b > 2147483646);
    }

    if (c10_b_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_b_idx = 0; c10_b_idx < c10_nVar; c10_b_idx++) {
      c10_c_idx = c10_b_idx;
      c10_i1 = c10_solution->searchDir.size(0);
      c10_i2 = c10_c_idx + 1;
      if ((c10_i2 < 1) || (c10_i2 > c10_i1)) {
        emlrtDynamicBoundsCheckR2012b(c10_i2, 1, c10_i1, &c10_kq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_solution->searchDir[c10_i2 - 1] = 0.0;
    }
  } else {
    c10_st.site = &c10_gi_emlrtRSI;
    c10_b = c10_nVar;
    c10_f_b = c10_b;
    if (c10_f_b < 1) {
      c10_overflow = false;
    } else {
      c10_overflow = (c10_f_b > 2147483646);
    }

    if (c10_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_idx = 0; c10_idx < c10_nVar; c10_idx++) {
      c10_c_idx = c10_idx + 1;
      c10_i = c10_objective->grad.size(0);
      if ((c10_c_idx < 1) || (c10_c_idx > c10_i)) {
        emlrtDynamicBoundsCheckR2012b(c10_c_idx, 1, c10_i, &c10_kq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i3 = c10_solution->searchDir.size(0);
      if ((c10_c_idx < 1) || (c10_c_idx > c10_i3)) {
        emlrtDynamicBoundsCheckR2012b(c10_c_idx, 1, c10_i3, &c10_kq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_solution->searchDir[c10_c_idx - 1] = -c10_objective->grad[c10_c_idx -
        1];
    }

    if (c10_mConstr <= 0) {
      if (c10_TYPE == 3) {
        c10_st.site = &c10_gi_emlrtRSI;
        c10_ndims = c10_nVar;
        c10_ldH = c10_nVar;
        c10_d_H.set_size(&c10_ig_emlrtRTEI, &c10_st, c10_c_H.size(0),
                         c10_c_H.size(1));
        c10_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
        for (c10_i4 = 0; c10_i4 <= c10_loop_ub; c10_i4++) {
          c10_d_H[c10_i4] = c10_c_H[c10_i4];
        }

        c10_b_st.site = &c10_gi_emlrtRSI;
        c10_b_factor(chartInstance, &c10_b_st, c10_cholmanager, c10_d_H,
                     c10_ndims, c10_ldH);
        if (c10_cholmanager->info != 0) {
          c10_solution->state = -6;
        } else {
          c10_st.site = &c10_gi_emlrtRSI;
          c10_b_rhs.set_size(&c10_ig_emlrtRTEI, &c10_st,
                             c10_solution->searchDir.size(0));
          c10_d_loop_ub = c10_solution->searchDir.size(0) - 1;
          for (c10_i8 = 0; c10_i8 <= c10_d_loop_ub; c10_i8++) {
            c10_b_rhs[c10_i8] = c10_solution->searchDir[c10_i8];
          }

          c10_b_st.site = &c10_gi_emlrtRSI;
          c10_c_st.site = &c10_ti_emlrtRSI;
          c10_j_n = c10_cholmanager->ndims;
          c10_g_C.set_size(&c10_xh_emlrtRTEI, &c10_c_st,
                           c10_cholmanager->FMat.size(0));
          c10_g_loop_ub = c10_cholmanager->FMat.size(0) - 1;
          for (c10_i14 = 0; c10_i14 <= c10_g_loop_ub; c10_i14++) {
            c10_g_C[c10_i14] = c10_cholmanager->FMat[c10_i14];
          }

          c10_c_lda = c10_cholmanager->ldm;
          if (!(c10_j_n < 1)) {
            c10_d_st.site = &c10_ui_emlrtRSI;
            c10_m_n = c10_j_n;
            c10_d_lda = c10_c_lda;
            c10_o_n = c10_m_n;
            c10_e_lda = c10_d_lda;
            c10_DIAGA1 = 'U';
            c10_TRANSA1 = 'N';
            c10_UPLO1 = 'L';
            c10_c_var = c10_o_n;
            c10_b_n_t = (ptrdiff_t)c10_c_var;
            c10_d_var = c10_e_lda;
            c10_lda_t = (ptrdiff_t)c10_d_var;
            c10_b_incx_t = (ptrdiff_t)1;
            dtrsv(&c10_UPLO1, &c10_TRANSA1, &c10_DIAGA1, &c10_b_n_t,
                  &(c10_g_C.data())[0], &c10_lda_t, &(c10_b_rhs.data())[0],
                  &c10_b_incx_t);
          }

          c10_i16 = c10_cholmanager->ndims;
          c10_c_st.site = &c10_ti_emlrtRSI;
          c10_k_b = c10_i16;
          c10_o_b = c10_k_b;
          if (c10_o_b < 1) {
            c10_d_overflow = false;
          } else {
            c10_d_overflow = (c10_o_b > 2147483646);
          }

          if (c10_d_overflow) {
            c10_d_st.site = &c10_v_emlrtRSI;
            c10_check_forloop_overflow_error(chartInstance, &c10_d_st);
          }

          for (c10_e_idx = 0; c10_e_idx < c10_i16; c10_e_idx++) {
            c10_f_idx = c10_e_idx + 1;
            c10_idxDiag = c10_f_idx + c10_cholmanager->ldm * (c10_f_idx - 1);
            c10_i19 = c10_b_rhs.size(0);
            if ((c10_f_idx < 1) || (c10_f_idx > c10_i19)) {
              emlrtDynamicBoundsCheckR2012b(c10_f_idx, 1, c10_i19,
                &c10_oq_emlrtBCI, &c10_b_st);
            }

            c10_i22 = c10_cholmanager->FMat.size(0);
            if ((c10_idxDiag < 1) || (c10_idxDiag > c10_i22)) {
              emlrtDynamicBoundsCheckR2012b(c10_idxDiag, 1, c10_i22,
                &c10_oq_emlrtBCI, &c10_b_st);
            }

            c10_i24 = c10_b_rhs.size(0);
            if ((c10_f_idx < 1) || (c10_f_idx > c10_i24)) {
              emlrtDynamicBoundsCheckR2012b(c10_f_idx, 1, c10_i24,
                &c10_oq_emlrtBCI, &c10_b_st);
            }

            c10_b_rhs[c10_f_idx - 1] = c10_b_rhs[c10_f_idx - 1] /
              c10_cholmanager->FMat[c10_idxDiag - 1];
          }

          c10_c_st.site = &c10_ti_emlrtRSI;
          c10_v_n = c10_cholmanager->ndims;
          c10_g_C.set_size(&c10_xh_emlrtRTEI, &c10_c_st,
                           c10_cholmanager->FMat.size(0));
          c10_m_loop_ub = c10_cholmanager->FMat.size(0) - 1;
          for (c10_i21 = 0; c10_i21 <= c10_m_loop_ub; c10_i21++) {
            c10_g_C[c10_i21] = c10_cholmanager->FMat[c10_i21];
          }

          c10_h_lda = c10_cholmanager->ldm;
          if (!(c10_v_n < 1)) {
            c10_x_n = c10_v_n;
            c10_i_lda = c10_h_lda;
            c10_y_n = c10_x_n;
            c10_j_lda = c10_i_lda;
            c10_b_DIAGA1 = 'U';
            c10_b_TRANSA1 = 'T';
            c10_b_UPLO1 = 'L';
            c10_e_var = c10_y_n;
            c10_c_n_t = (ptrdiff_t)c10_e_var;
            c10_f_var = c10_j_lda;
            c10_b_lda_t = (ptrdiff_t)c10_f_var;
            c10_c_incx_t = (ptrdiff_t)1;
            dtrsv(&c10_b_UPLO1, &c10_b_TRANSA1, &c10_b_DIAGA1, &c10_c_n_t,
                  &(c10_g_C.data())[0], &c10_b_lda_t, &(c10_b_rhs.data())[0],
                  &c10_c_incx_t);
          }

          c10_solution->searchDir.set_size(&c10_ig_emlrtRTEI, c10_sp,
            c10_b_rhs.size(0));
          c10_q_loop_ub = c10_b_rhs.size(0) - 1;
          for (c10_i26 = 0; c10_i26 <= c10_q_loop_ub; c10_i26++) {
            c10_solution->searchDir[c10_i26] = c10_b_rhs[c10_i26];
          }
        }
      }
    } else {
      c10_nullStartIdx = c10_b_qrmanager->ldq * c10_mConstr + 1;
      if (c10_TYPE == 5) {
        c10_st.site = &c10_gi_emlrtRSI;
        c10_h_b = c10_mNull;
        c10_j_b = c10_h_b;
        if (c10_j_b < 1) {
          c10_c_overflow = false;
        } else {
          c10_c_overflow = (c10_j_b > 2147483646);
        }

        if (c10_c_overflow) {
          c10_b_st.site = &c10_v_emlrtRSI;
          c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
        }

        for (c10_d_idx = 0; c10_d_idx < c10_mNull; c10_d_idx++) {
          c10_c_idx = c10_d_idx;
          c10_idxQ = c10_nVar + c10_b_qrmanager->ldq * (c10_mConstr + c10_c_idx);
          c10_i7 = c10_b_qrmanager->Q.size(0) * c10_b_qrmanager->Q.size(1);
          if ((c10_idxQ < 1) || (c10_idxQ > c10_i7)) {
            emlrtDynamicBoundsCheckR2012b(c10_idxQ, 1, c10_i7, &c10_kq_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_i9 = c10_memspace->workspace_double.size(0) *
            c10_memspace->workspace_double.size(1);
          c10_i12 = c10_c_idx + 1;
          if ((c10_i12 < 1) || (c10_i12 > c10_i9)) {
            emlrtDynamicBoundsCheckR2012b(c10_i12, 1, c10_i9, &c10_kq_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_memspace->workspace_double[c10_i12 - 1] = -c10_b_qrmanager->
            Q[c10_idxQ - 1];
        }

        c10_c_qrmanager.set_size(&c10_ig_emlrtRTEI, c10_sp,
          c10_b_qrmanager->Q.size(0), c10_b_qrmanager->Q.size(1));
        c10_c_loop_ub = c10_b_qrmanager->Q.size(0) * c10_b_qrmanager->Q.size(1)
          - 1;
        for (c10_i6 = 0; c10_i6 <= c10_c_loop_ub; c10_i6++) {
          c10_c_qrmanager[c10_i6] = c10_b_qrmanager->Q[c10_i6];
        }

        c10_b_memspace.set_size(&c10_ig_emlrtRTEI, c10_sp,
          c10_memspace->workspace_double.size(0),
          c10_memspace->workspace_double.size(1));
        c10_f_loop_ub = c10_memspace->workspace_double.size(0) *
          c10_memspace->workspace_double.size(1) - 1;
        for (c10_i11 = 0; c10_i11 <= c10_f_loop_ub; c10_i11++) {
          c10_b_memspace[c10_i11] = c10_memspace->workspace_double[c10_i11];
        }

        c10_st.site = &c10_gi_emlrtRSI;
        c10_j_xgemv(chartInstance, c10_nVar, c10_mNull, c10_c_qrmanager,
                    c10_nullStartIdx, c10_b_qrmanager->ldq, c10_b_memspace,
                    c10_solution->searchDir);
      } else {
        if (c10_TYPE == 3) {
          c10_st.site = &c10_gi_emlrtRSI;
          c10_nVars = c10_b_qrmanager->mrows;
          c10_b_mConstr = c10_b_qrmanager->ncols;
          c10_b_mNull = c10_nVars - c10_b_mConstr;
          c10_ldw = c10_memspace->workspace_double.size(0);
          c10_ldm = c10_cholmanager->ldm;
          c10_b_ldQ = c10_b_qrmanager->ldq;
          c10_nullStart = c10_b_ldQ * c10_b_mConstr + 1;
          c10_b_st.site = &c10_xi_emlrtRSI;
          c10_m = c10_nVars;
          c10_h_n = c10_b_mNull;
          c10_k = c10_nVars;
          c10_lda = c10_nVars;
          c10_c_B.set_size(&c10_uh_emlrtRTEI, &c10_b_st, c10_b_qrmanager->Q.size
                           (0), c10_b_qrmanager->Q.size(1));
          c10_e_loop_ub = c10_b_qrmanager->Q.size(0) * c10_b_qrmanager->Q.size(1)
            - 1;
          for (c10_i10 = 0; c10_i10 <= c10_e_loop_ub; c10_i10++) {
            c10_c_B[c10_i10] = c10_b_qrmanager->Q[c10_i10];
          }

          c10_b_ib0 = c10_nullStart;
          c10_ldb = c10_b_ldQ;
          c10_q_C.set_size(&c10_uh_emlrtRTEI, &c10_b_st,
                           c10_memspace->workspace_double.size(0),
                           c10_memspace->workspace_double.size(1));
          c10_h_loop_ub = c10_memspace->workspace_double.size(0) *
            c10_memspace->workspace_double.size(1) - 1;
          for (c10_i15 = 0; c10_i15 <= c10_h_loop_ub; c10_i15++) {
            c10_q_C[c10_i15] = c10_memspace->workspace_double[c10_i15];
          }

          c10_b_ldc = c10_ldw;
          c10_memspace->workspace_double.set_size(&c10_uh_emlrtRTEI, &c10_b_st,
            c10_q_C.size(0), c10_q_C.size(1));
          c10_i_loop_ub = c10_q_C.size(0) * c10_q_C.size(1) - 1;
          for (c10_i17 = 0; c10_i17 <= c10_i_loop_ub; c10_i17++) {
            c10_memspace->workspace_double[c10_i17] = c10_q_C[c10_i17];
          }

          if ((c10_m < 1) || (c10_h_n < 1) || (c10_k < 1)) {
          } else {
            c10_c_st.site = &c10_tg_emlrtRSI;
            c10_c_m = c10_m;
            c10_p_n = c10_h_n;
            c10_b_k = c10_k;
            c10_f_lda = c10_lda;
            c10_c_ib0 = c10_b_ib0;
            c10_b_ldb = c10_ldb;
            c10_q_C.set_size(&c10_vh_emlrtRTEI, &c10_c_st,
                             c10_memspace->workspace_double.size(0),
                             c10_memspace->workspace_double.size(1));
            c10_k_loop_ub = c10_memspace->workspace_double.size(0) *
              c10_memspace->workspace_double.size(1) - 1;
            for (c10_i20 = 0; c10_i20 <= c10_k_loop_ub; c10_i20++) {
              c10_q_C[c10_i20] = c10_memspace->workspace_double[c10_i20];
            }

            c10_c_ldc = c10_b_ldc;
            c10_memspace->workspace_double.set_size(&c10_uh_emlrtRTEI, &c10_c_st,
              c10_q_C.size(0), c10_q_C.size(1));
            c10_p_loop_ub = c10_q_C.size(0) * c10_q_C.size(1) - 1;
            for (c10_i25 = 0; c10_i25 <= c10_p_loop_ub; c10_i25++) {
              c10_memspace->workspace_double[c10_i25] = c10_q_C[c10_i25];
            }

            c10_d_st.site = &c10_wg_emlrtRSI;
            c10_e_m = c10_c_m;
            c10_ab_n = c10_p_n;
            c10_g_k = c10_b_k;
            c10_alpha1 = 1.0;
            c10_k_lda = c10_f_lda;
            c10_d_ib0 = c10_c_ib0 - 1;
            c10_d_ldb = c10_b_ldb;
            c10_beta1 = 0.0;
            c10_q_C.set_size(&c10_wh_emlrtRTEI, &c10_d_st,
                             c10_memspace->workspace_double.size(0),
                             c10_memspace->workspace_double.size(1));
            c10_u_loop_ub = c10_memspace->workspace_double.size(0) *
              c10_memspace->workspace_double.size(1) - 1;
            for (c10_i30 = 0; c10_i30 <= c10_u_loop_ub; c10_i30++) {
              c10_q_C[c10_i30] = c10_memspace->workspace_double[c10_i30];
            }

            c10_e_ldc = c10_c_ldc;
            c10_TRANSB1 = 'N';
            c10_c_TRANSA1 = 'N';
            c10_memspace->workspace_double.set_size(&c10_uh_emlrtRTEI, &c10_d_st,
              c10_q_C.size(0), c10_q_C.size(1));
            c10_w_loop_ub = c10_q_C.size(0) * c10_q_C.size(1) - 1;
            for (c10_i33 = 0; c10_i33 <= c10_w_loop_ub; c10_i33++) {
              c10_memspace->workspace_double[c10_i33] = c10_q_C[c10_i33];
            }

            c10_g_var = c10_e_m;
            c10_m_t = (ptrdiff_t)c10_g_var;
            c10_i_var = c10_ab_n;
            c10_d_n_t = (ptrdiff_t)c10_i_var;
            c10_j_var = c10_g_k;
            c10_k_t = (ptrdiff_t)c10_j_var;
            c10_k_var = c10_k_lda;
            c10_c_lda_t = (ptrdiff_t)c10_k_var;
            c10_m_var = c10_d_ldb;
            c10_ldb_t = (ptrdiff_t)c10_m_var;
            c10_o_var = c10_e_ldc;
            c10_ldc_t = (ptrdiff_t)c10_o_var;
            dgemm(&c10_c_TRANSA1, &c10_TRANSB1, &c10_m_t, &c10_d_n_t, &c10_k_t,
                  &c10_alpha1, &(c10_c_H.data())[0], &c10_c_lda_t,
                  &c10_c_B[c10_d_ib0], &c10_ldb_t, &c10_beta1,
                  &(c10_memspace->workspace_double.data())[0], &c10_ldc_t);
          }

          c10_b_st.site = &c10_xi_emlrtRSI;
          c10_d_m = c10_b_mNull;
          c10_q_n = c10_b_mNull;
          c10_d_k = c10_nVars;
          c10_A.set_size(&c10_uh_emlrtRTEI, &c10_b_st, c10_b_qrmanager->Q.size(0),
                         c10_b_qrmanager->Q.size(1));
          c10_j_loop_ub = c10_b_qrmanager->Q.size(0) * c10_b_qrmanager->Q.size(1)
            - 1;
          for (c10_i18 = 0; c10_i18 <= c10_j_loop_ub; c10_i18++) {
            c10_A[c10_i18] = c10_b_qrmanager->Q[c10_i18];
          }

          c10_ia0 = c10_nullStart;
          c10_g_lda = c10_b_ldQ;
          c10_c_B.set_size(&c10_uh_emlrtRTEI, &c10_b_st,
                           c10_memspace->workspace_double.size(0),
                           c10_memspace->workspace_double.size(1));
          c10_o_loop_ub = c10_memspace->workspace_double.size(0) *
            c10_memspace->workspace_double.size(1) - 1;
          for (c10_i23 = 0; c10_i23 <= c10_o_loop_ub; c10_i23++) {
            c10_c_B[c10_i23] = c10_memspace->workspace_double[c10_i23];
          }

          c10_c_ldb = c10_ldw;
          c10_g_C.set_size(&c10_uh_emlrtRTEI, &c10_b_st,
                           c10_cholmanager->FMat.size(0));
          c10_r_loop_ub = c10_cholmanager->FMat.size(0) - 1;
          for (c10_i27 = 0; c10_i27 <= c10_r_loop_ub; c10_i27++) {
            c10_g_C[c10_i27] = c10_cholmanager->FMat[c10_i27];
          }

          c10_d_ldc = c10_ldm;
          c10_cholmanager->FMat.set_size(&c10_uh_emlrtRTEI, &c10_b_st,
            c10_g_C.size(0));
          c10_s_loop_ub = c10_g_C.size(0) - 1;
          for (c10_i28 = 0; c10_i28 <= c10_s_loop_ub; c10_i28++) {
            c10_cholmanager->FMat[c10_i28] = c10_g_C[c10_i28];
          }

          if ((c10_d_m < 1) || (c10_q_n < 1) || (c10_d_k < 1)) {
          } else {
            c10_c_st.site = &c10_tg_emlrtRSI;
            c10_g_m = c10_d_m;
            c10_cb_n = c10_q_n;
            c10_h_k = c10_d_k;
            c10_d_ia0 = c10_ia0;
            c10_o_lda = c10_g_lda;
            c10_e_ldb = c10_c_ldb;
            c10_g_C.set_size(&c10_vh_emlrtRTEI, &c10_c_st,
                             c10_cholmanager->FMat.size(0));
            c10_x_loop_ub = c10_cholmanager->FMat.size(0) - 1;
            for (c10_i34 = 0; c10_i34 <= c10_x_loop_ub; c10_i34++) {
              c10_g_C[c10_i34] = c10_cholmanager->FMat[c10_i34];
            }

            c10_f_ldc = c10_d_ldc;
            c10_cholmanager->FMat.set_size(&c10_uh_emlrtRTEI, &c10_c_st,
              c10_g_C.size(0));
            c10_ab_loop_ub = c10_g_C.size(0) - 1;
            for (c10_i36 = 0; c10_i36 <= c10_ab_loop_ub; c10_i36++) {
              c10_cholmanager->FMat[c10_i36] = c10_g_C[c10_i36];
            }

            c10_d_st.site = &c10_wg_emlrtRSI;
            c10_h_m = c10_g_m;
            c10_db_n = c10_cb_n;
            c10_i_k = c10_h_k;
            c10_b_alpha1 = 1.0;
            c10_f_ia0 = c10_d_ia0 - 1;
            c10_q_lda = c10_o_lda;
            c10_f_ldb = c10_e_ldb;
            c10_b_beta1 = 0.0;
            c10_g_C.set_size(&c10_wh_emlrtRTEI, &c10_d_st,
                             c10_cholmanager->FMat.size(0));
            c10_eb_loop_ub = c10_cholmanager->FMat.size(0) - 1;
            for (c10_i40 = 0; c10_i40 <= c10_eb_loop_ub; c10_i40++) {
              c10_g_C[c10_i40] = c10_cholmanager->FMat[c10_i40];
            }

            c10_g_ldc = c10_f_ldc;
            c10_b_TRANSB1 = 'N';
            c10_d_TRANSA1 = 'T';
            c10_cholmanager->FMat.set_size(&c10_uh_emlrtRTEI, &c10_d_st,
              c10_g_C.size(0));
            c10_hb_loop_ub = c10_g_C.size(0) - 1;
            for (c10_i44 = 0; c10_i44 <= c10_hb_loop_ub; c10_i44++) {
              c10_cholmanager->FMat[c10_i44] = c10_g_C[c10_i44];
            }

            c10_p_var = c10_h_m;
            c10_b_m_t = (ptrdiff_t)c10_p_var;
            c10_q_var = c10_db_n;
            c10_e_n_t = (ptrdiff_t)c10_q_var;
            c10_r_var = c10_i_k;
            c10_b_k_t = (ptrdiff_t)c10_r_var;
            c10_t_var = c10_q_lda;
            c10_d_lda_t = (ptrdiff_t)c10_t_var;
            c10_v_var = c10_f_ldb;
            c10_b_ldb_t = (ptrdiff_t)c10_v_var;
            c10_w_var = c10_g_ldc;
            c10_b_ldc_t = (ptrdiff_t)c10_w_var;
            dgemm(&c10_d_TRANSA1, &c10_b_TRANSB1, &c10_b_m_t, &c10_e_n_t,
                  &c10_b_k_t, &c10_b_alpha1, &c10_A[c10_f_ia0], &c10_d_lda_t,
                  &(c10_c_B.data())[0], &c10_b_ldb_t, &c10_b_beta1,
                  &(c10_cholmanager->FMat.data())[0], &c10_b_ldc_t);
          }
        }

        c10_st.site = &c10_gi_emlrtRSI;
        c10_b_ndims = c10_mNull;
        c10_b_st.site = &c10_gi_emlrtRSI;
        c10_c_ndims = c10_b_ndims;
        c10_SCALED_REG_PRIMAL = 1.4901161193847656E-6 * static_cast<real_T>
          (c10_c_ndims);
        c10_LDimSizeP1 = c10_cholmanager->ldm + 1;
        c10_cholmanager->ndims = c10_c_ndims;
        c10_f_n = c10_c_ndims;
        c10_g_C.set_size(&c10_jg_emlrtRTEI, &c10_b_st,
                         c10_cholmanager->FMat.size(0));
        c10_b_loop_ub = c10_cholmanager->FMat.size(0) - 1;
        for (c10_i5 = 0; c10_i5 <= c10_b_loop_ub; c10_i5++) {
          c10_g_C[c10_i5] = c10_cholmanager->FMat[c10_i5];
        }

        c10_incx = c10_LDimSizeP1;
        if (c10_f_n < 1) {
          c10_A_maxDiag_idx = 0;
        } else {
          c10_i_n = c10_f_n;
          c10_b_incx = c10_incx;
          c10_k_n = c10_i_n;
          c10_c_incx = c10_b_incx;
          c10_var = c10_k_n;
          c10_n_t = (ptrdiff_t)c10_var;
          c10_b_var = c10_c_incx;
          c10_incx_t = (ptrdiff_t)c10_b_var;
          c10_idxmax_t = idamax(&c10_n_t, &(c10_g_C.data())[0], &c10_incx_t);
          c10_A_maxDiag_idx = (int32_T)c10_idxmax_t;
        }

        c10_diagIdx = c10_A_maxDiag_idx + c10_cholmanager->ldm *
          (c10_A_maxDiag_idx - 1);
        c10_i13 = c10_cholmanager->FMat.size(0);
        if ((c10_diagIdx < 1) || (c10_diagIdx > c10_i13)) {
          emlrtDynamicBoundsCheckR2012b(c10_diagIdx, 1, c10_i13,
            &c10_mq_emlrtBCI, &c10_b_st);
        }

        c10_x = c10_cholmanager->FMat[c10_diagIdx - 1];
        c10_b_x = c10_x;
        c10_c_x = c10_b_x;
        c10_y = muDoubleScalarAbs(c10_c_x);
        c10_varargin_1 = c10_y * 2.2204460492503131E-16;
        c10_d_x = c10_SCALED_REG_PRIMAL;
        c10_e_x = c10_d_x;
        c10_f_x = c10_e_x;
        c10_varargin_2 = muDoubleScalarAbs(c10_f_x);
        c10_g_x = c10_varargin_1;
        c10_b_y = c10_varargin_2;
        c10_j_x = c10_g_x;
        c10_c_y = c10_b_y;
        c10_k_x = c10_j_x;
        c10_d_y = c10_c_y;
        c10_b_a = c10_k_x;
        c10_p_b = c10_d_y;
        c10_m_x = c10_b_a;
        c10_e_y = c10_p_b;
        c10_o_x = c10_m_x;
        c10_f_y = c10_e_y;
        c10_maxval = muDoubleScalarMax(c10_o_x, c10_f_y);
        c10_cholmanager->regTol_ = c10_maxval;
        if ((c10_cholmanager->FMat.size(0) > 16384) && (c10_c_ndims > 128)) {
          c10_f_k = 0;
          c10_exitg1 = false;
          while ((!c10_exitg1) && (c10_f_k < c10_c_ndims)) {
            c10_LD_diagOffset = 1 + c10_LDimSizeP1 * c10_f_k;
            c10_order = c10_c_ndims - c10_f_k;
            if (c10_f_k + 48 <= c10_c_ndims) {
              c10_c_st.site = &c10_hi_emlrtRSI;
              c10_b_partialColLDL3_(chartInstance, &c10_c_st, c10_cholmanager,
                                    c10_LD_diagOffset, c10_order,
                                    c10_SCALED_REG_PRIMAL);
              c10_f_k += 48;
            } else {
              c10_c_st.site = &c10_hi_emlrtRSI;
              c10_c_fullColLDL2_(chartInstance, &c10_c_st, c10_cholmanager,
                                 c10_LD_diagOffset, c10_order,
                                 c10_SCALED_REG_PRIMAL);
              c10_exitg1 = true;
            }
          }
        } else {
          c10_c_st.site = &c10_hi_emlrtRSI;
          c10_d_fullColLDL2_(chartInstance, &c10_c_st, c10_cholmanager,
                             c10_c_ndims, c10_SCALED_REG_PRIMAL);
        }

        if (c10_cholmanager->ConvexCheck) {
          c10_c_st.site = &c10_hi_emlrtRSI;
          c10_q_b = c10_c_ndims;
          c10_s_b = c10_q_b;
          if (c10_s_b < 1) {
            c10_e_overflow = false;
          } else {
            c10_e_overflow = (c10_s_b > 2147483646);
          }

          if (c10_e_overflow) {
            c10_d_st.site = &c10_v_emlrtRSI;
            c10_check_forloop_overflow_error(chartInstance, &c10_d_st);
          }

          c10_g_idx = 1;
          do {
            c10_exitg2 = 0;
            if (c10_g_idx - 1 <= c10_c_ndims - 1) {
              c10_h_idx = c10_g_idx;
              c10_b_idxDiag = c10_h_idx + c10_cholmanager->ldm * (c10_h_idx - 1);
              c10_i32 = c10_cholmanager->FMat.size(0);
              if ((c10_b_idxDiag < 1) || (c10_b_idxDiag > c10_i32)) {
                emlrtDynamicBoundsCheckR2012b(c10_b_idxDiag, 1, c10_i32,
                  &c10_mq_emlrtBCI, &c10_b_st);
              }

              if (c10_cholmanager->FMat[c10_b_idxDiag - 1] <= 0.0) {
                c10_cholmanager->info = -c10_h_idx;
                c10_exitg2 = 1;
              } else {
                c10_g_idx++;
              }
            } else {
              c10_cholmanager->ConvexCheck = false;
              c10_exitg2 = 1;
            }
          } while (c10_exitg2 == 0);
        }

        if (c10_cholmanager->info != 0) {
          c10_solution->state = -6;
        } else {
          c10_st.site = &c10_gi_emlrtRSI;
          c10_f_m = c10_nVar;
          c10_bb_n = c10_mNull;
          c10_A.set_size(&c10_ig_emlrtRTEI, &c10_st, c10_b_qrmanager->Q.size(0),
                         c10_b_qrmanager->Q.size(1));
          c10_t_loop_ub = c10_b_qrmanager->Q.size(0) * c10_b_qrmanager->Q.size(1)
            - 1;
          for (c10_i29 = 0; c10_i29 <= c10_t_loop_ub; c10_i29++) {
            c10_A[c10_i29] = c10_b_qrmanager->Q[c10_i29];
          }

          c10_c_ia0 = c10_nullStartIdx;
          c10_m_lda = c10_b_qrmanager->ldq;
          c10_g_C.set_size(&c10_ig_emlrtRTEI, &c10_st, c10_objective->grad.size
                           (0));
          c10_v_loop_ub = c10_objective->grad.size(0) - 1;
          for (c10_i31 = 0; c10_i31 <= c10_v_loop_ub; c10_i31++) {
            c10_g_C[c10_i31] = c10_objective->grad[c10_i31];
          }

          c10_q_C.set_size(&c10_ig_emlrtRTEI, &c10_st,
                           c10_memspace->workspace_double.size(0),
                           c10_memspace->workspace_double.size(1));
          c10_y_loop_ub = c10_memspace->workspace_double.size(0) *
            c10_memspace->workspace_double.size(1) - 1;
          for (c10_i35 = 0; c10_i35 <= c10_y_loop_ub; c10_i35++) {
            c10_q_C[c10_i35] = c10_memspace->workspace_double[c10_i35];
          }

          c10_memspace->workspace_double.set_size(&c10_ig_emlrtRTEI, &c10_st,
            c10_q_C.size(0), c10_q_C.size(1));
          c10_bb_loop_ub = c10_q_C.size(0) * c10_q_C.size(1) - 1;
          for (c10_i37 = 0; c10_i37 <= c10_bb_loop_ub; c10_i37++) {
            c10_memspace->workspace_double[c10_i37] = c10_q_C[c10_i37];
          }

          if (!(c10_f_m < 1)) {
            c10_b_st.site = &c10_bf_emlrtRSI;
            c10_i_m = c10_f_m;
            c10_eb_n = c10_bb_n;
            c10_e_ia0 = c10_c_ia0;
            c10_p_lda = c10_m_lda;
            c10_q_C.set_size(&c10_qh_emlrtRTEI, &c10_b_st,
                             c10_memspace->workspace_double.size(0),
                             c10_memspace->workspace_double.size(1));
            c10_db_loop_ub = c10_memspace->workspace_double.size(0) *
              c10_memspace->workspace_double.size(1) - 1;
            for (c10_i39 = 0; c10_i39 <= c10_db_loop_ub; c10_i39++) {
              c10_q_C[c10_i39] = c10_memspace->workspace_double[c10_i39];
            }

            c10_memspace->workspace_double.set_size(&c10_ig_emlrtRTEI, &c10_b_st,
              c10_q_C.size(0), c10_q_C.size(1));
            c10_gb_loop_ub = c10_q_C.size(0) * c10_q_C.size(1) - 1;
            for (c10_i42 = 0; c10_i42 <= c10_gb_loop_ub; c10_i42++) {
              c10_memspace->workspace_double[c10_i42] = c10_q_C[c10_i42];
            }

            c10_c_st.site = &c10_ff_emlrtRSI;
            c10_j_m = c10_i_m;
            c10_gb_n = c10_eb_n;
            c10_c_alpha1 = -1.0;
            c10_g_ia0 = c10_e_ia0 - 1;
            c10_t_lda = c10_p_lda;
            c10_c_beta1 = 0.0;
            c10_q_C.set_size(&c10_sh_emlrtRTEI, &c10_c_st,
                             c10_memspace->workspace_double.size(0),
                             c10_memspace->workspace_double.size(1));
            c10_ib_loop_ub = c10_memspace->workspace_double.size(0) *
              c10_memspace->workspace_double.size(1) - 1;
            for (c10_i45 = 0; c10_i45 <= c10_ib_loop_ub; c10_i45++) {
              c10_q_C[c10_i45] = c10_memspace->workspace_double[c10_i45];
            }

            c10_TRANSA = 'T';
            c10_memspace->workspace_double.set_size(&c10_ig_emlrtRTEI, &c10_c_st,
              c10_q_C.size(0), c10_q_C.size(1));
            c10_jb_loop_ub = c10_q_C.size(0) * c10_q_C.size(1) - 1;
            for (c10_i46 = 0; c10_i46 <= c10_jb_loop_ub; c10_i46++) {
              c10_memspace->workspace_double[c10_i46] = c10_q_C[c10_i46];
            }

            c10_x_var = c10_j_m;
            c10_c_m_t = (ptrdiff_t)c10_x_var;
            c10_y_var = c10_gb_n;
            c10_g_n_t = (ptrdiff_t)c10_y_var;
            c10_ab_var = c10_t_lda;
            c10_f_lda_t = (ptrdiff_t)c10_ab_var;
            c10_e_incx_t = (ptrdiff_t)1;
            c10_incy_t = (ptrdiff_t)1;
            dgemv(&c10_TRANSA, &c10_c_m_t, &c10_g_n_t, &c10_c_alpha1,
                  &c10_A[c10_g_ia0], &c10_f_lda_t, &(c10_g_C.data())[0],
                  &c10_e_incx_t, &c10_c_beta1,
                  &(c10_memspace->workspace_double.data())[0], &c10_incy_t);
          }

          c10_st.site = &c10_gi_emlrtRSI;
          c10_q_C.set_size(&c10_ig_emlrtRTEI, &c10_st,
                           c10_memspace->workspace_double.size(0),
                           c10_memspace->workspace_double.size(1));
          c10_cb_loop_ub = c10_memspace->workspace_double.size(0) *
            c10_memspace->workspace_double.size(1) - 1;
          for (c10_i38 = 0; c10_i38 <= c10_cb_loop_ub; c10_i38++) {
            c10_q_C[c10_i38] = c10_memspace->workspace_double[c10_i38];
          }

          c10_b_st.site = &c10_gi_emlrtRSI;
          c10_c_st.site = &c10_ti_emlrtRSI;
          c10_fb_n = c10_cholmanager->ndims;
          c10_g_C.set_size(&c10_xh_emlrtRTEI, &c10_c_st,
                           c10_cholmanager->FMat.size(0));
          c10_fb_loop_ub = c10_cholmanager->FMat.size(0) - 1;
          for (c10_i41 = 0; c10_i41 <= c10_fb_loop_ub; c10_i41++) {
            c10_g_C[c10_i41] = c10_cholmanager->FMat[c10_i41];
          }

          c10_r_lda = c10_cholmanager->ldm;
          if (!(c10_fb_n < 1)) {
            c10_d_st.site = &c10_ui_emlrtRSI;
            c10_hb_n = c10_fb_n;
            c10_s_lda = c10_r_lda;
            c10_ib_n = c10_hb_n;
            c10_u_lda = c10_s_lda;
            c10_c_DIAGA1 = 'U';
            c10_e_TRANSA1 = 'N';
            c10_c_UPLO1 = 'L';
            c10_s_var = c10_ib_n;
            c10_f_n_t = (ptrdiff_t)c10_s_var;
            c10_u_var = c10_u_lda;
            c10_e_lda_t = (ptrdiff_t)c10_u_var;
            c10_d_incx_t = (ptrdiff_t)1;
            dtrsv(&c10_c_UPLO1, &c10_e_TRANSA1, &c10_c_DIAGA1, &c10_f_n_t,
                  &(c10_g_C.data())[0], &c10_e_lda_t, &(c10_q_C.data())[0],
                  &c10_d_incx_t);
          }

          c10_i43 = c10_cholmanager->ndims;
          c10_c_st.site = &c10_ti_emlrtRSI;
          c10_t_b = c10_i43;
          c10_u_b = c10_t_b;
          if (c10_u_b < 1) {
            c10_f_overflow = false;
          } else {
            c10_f_overflow = (c10_u_b > 2147483646);
          }

          if (c10_f_overflow) {
            c10_d_st.site = &c10_v_emlrtRSI;
            c10_check_forloop_overflow_error(chartInstance, &c10_d_st);
          }

          for (c10_i_idx = 0; c10_i_idx < c10_i43; c10_i_idx++) {
            c10_j_idx = c10_i_idx + 1;
            c10_c_idxDiag = c10_j_idx + c10_cholmanager->ldm * (c10_j_idx - 1);
            c10_i47 = c10_q_C.size(0) * c10_q_C.size(1);
            if ((c10_j_idx < 1) || (c10_j_idx > c10_i47)) {
              emlrtDynamicBoundsCheckR2012b(c10_j_idx, 1, c10_i47,
                &c10_oq_emlrtBCI, &c10_b_st);
            }

            c10_i49 = c10_cholmanager->FMat.size(0);
            if ((c10_c_idxDiag < 1) || (c10_c_idxDiag > c10_i49)) {
              emlrtDynamicBoundsCheckR2012b(c10_c_idxDiag, 1, c10_i49,
                &c10_oq_emlrtBCI, &c10_b_st);
            }

            c10_i50 = c10_q_C.size(0) * c10_q_C.size(1);
            if ((c10_j_idx < 1) || (c10_j_idx > c10_i50)) {
              emlrtDynamicBoundsCheckR2012b(c10_j_idx, 1, c10_i50,
                &c10_oq_emlrtBCI, &c10_b_st);
            }

            c10_q_C[c10_j_idx - 1] = c10_q_C[c10_j_idx - 1] /
              c10_cholmanager->FMat[c10_c_idxDiag - 1];
          }

          c10_c_st.site = &c10_ti_emlrtRSI;
          c10_jb_n = c10_cholmanager->ndims;
          c10_g_C.set_size(&c10_xh_emlrtRTEI, &c10_c_st,
                           c10_cholmanager->FMat.size(0));
          c10_kb_loop_ub = c10_cholmanager->FMat.size(0) - 1;
          for (c10_i48 = 0; c10_i48 <= c10_kb_loop_ub; c10_i48++) {
            c10_g_C[c10_i48] = c10_cholmanager->FMat[c10_i48];
          }

          c10_v_lda = c10_cholmanager->ldm;
          if (!(c10_jb_n < 1)) {
            c10_kb_n = c10_jb_n;
            c10_w_lda = c10_v_lda;
            c10_mb_n = c10_kb_n;
            c10_x_lda = c10_w_lda;
            c10_d_DIAGA1 = 'U';
            c10_f_TRANSA1 = 'T';
            c10_d_UPLO1 = 'L';
            c10_bb_var = c10_mb_n;
            c10_h_n_t = (ptrdiff_t)c10_bb_var;
            c10_cb_var = c10_x_lda;
            c10_g_lda_t = (ptrdiff_t)c10_cb_var;
            c10_f_incx_t = (ptrdiff_t)1;
            dtrsv(&c10_d_UPLO1, &c10_f_TRANSA1, &c10_d_DIAGA1, &c10_h_n_t,
                  &(c10_g_C.data())[0], &c10_g_lda_t, &(c10_q_C.data())[0],
                  &c10_f_incx_t);
          }

          c10_memspace->workspace_double.set_size(&c10_ig_emlrtRTEI, c10_sp,
            c10_q_C.size(0), c10_q_C.size(1));
          c10_mb_loop_ub = c10_q_C.size(0) * c10_q_C.size(1) - 1;
          for (c10_i51 = 0; c10_i51 <= c10_mb_loop_ub; c10_i51++) {
            c10_memspace->workspace_double[c10_i51] = c10_q_C[c10_i51];
          }

          c10_d_qrmanager.set_size(&c10_ig_emlrtRTEI, c10_sp,
            c10_b_qrmanager->Q.size(0), c10_b_qrmanager->Q.size(1));
          c10_ob_loop_ub = c10_b_qrmanager->Q.size(0) * c10_b_qrmanager->Q.size
            (1) - 1;
          for (c10_i52 = 0; c10_i52 <= c10_ob_loop_ub; c10_i52++) {
            c10_d_qrmanager[c10_i52] = c10_b_qrmanager->Q[c10_i52];
          }

          c10_c_memspace.set_size(&c10_ig_emlrtRTEI, c10_sp,
            c10_memspace->workspace_double.size(0),
            c10_memspace->workspace_double.size(1));
          c10_pb_loop_ub = c10_memspace->workspace_double.size(0) *
            c10_memspace->workspace_double.size(1) - 1;
          for (c10_i53 = 0; c10_i53 <= c10_pb_loop_ub; c10_i53++) {
            c10_c_memspace[c10_i53] = c10_memspace->workspace_double[c10_i53];
          }

          c10_st.site = &c10_gi_emlrtRSI;
          c10_j_xgemv(chartInstance, c10_nVar, c10_mNull, c10_d_qrmanager,
                      c10_nullStartIdx, c10_b_qrmanager->ldq, c10_c_memspace,
                      c10_solution->searchDir);
        }
      }
    }
  }
}

static void c10_b_factor(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_lryvQQZbN23ozlLWy4I3pD *c10_b_obj, coder::array<
  real_T, 2U> &c10_A, int32_T c10_ndims, int32_T c10_b_ldA)
{
  ptrdiff_t c10_b_incx_t;
  ptrdiff_t c10_b_n_t;
  ptrdiff_t c10_idxmax_t;
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 1U> c10_y;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  real_T c10_SCALED_REG_PRIMAL;
  real_T c10_b_a;
  real_T c10_b_x;
  real_T c10_b_y;
  real_T c10_c_x;
  real_T c10_c_y;
  real_T c10_d_x;
  real_T c10_d_y;
  real_T c10_e_x;
  real_T c10_e_y;
  real_T c10_f_x;
  real_T c10_f_y;
  real_T c10_g_b;
  real_T c10_g_x;
  real_T c10_g_y;
  real_T c10_j_x;
  real_T c10_k_x;
  real_T c10_m_x;
  real_T c10_maxval;
  real_T c10_o_x;
  real_T c10_varargin_1;
  real_T c10_varargin_2;
  real_T c10_x;
  int32_T c10_A_maxDiag_idx;
  int32_T c10_LD_diagOffset;
  int32_T c10_LDimSizeP1;
  int32_T c10_b_iA0;
  int32_T c10_b_idx;
  int32_T c10_b_incx;
  int32_T c10_b_ix0;
  int32_T c10_b_iy0;
  int32_T c10_b_loop_ub;
  int32_T c10_b_var;
  int32_T c10_c_idx;
  int32_T c10_c_incx;
  int32_T c10_c_ix0;
  int32_T c10_c_iy0;
  int32_T c10_c_loop_ub;
  int32_T c10_c_var;
  int32_T c10_d_loop_ub;
  int32_T c10_diagIdx;
  int32_T c10_e_b;
  int32_T c10_e_loop_ub;
  int32_T c10_exitg2;
  int32_T c10_f_b;
  int32_T c10_f_loop_ub;
  int32_T c10_f_n;
  int32_T c10_g_loop_ub;
  int32_T c10_h_b;
  int32_T c10_h_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_iLD0;
  int32_T c10_i_n;
  int32_T c10_idx;
  int32_T c10_idxDiag;
  int32_T c10_incx;
  int32_T c10_ix0;
  int32_T c10_iy0;
  int32_T c10_j_b;
  int32_T c10_j_n;
  int32_T c10_k;
  int32_T c10_k_n;
  int32_T c10_loop_ub;
  int32_T c10_m_n;
  int32_T c10_order;
  int32_T c10_var;
  boolean_T c10_b;
  boolean_T c10_b1;
  boolean_T c10_b_overflow;
  boolean_T c10_exitg1;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_SCALED_REG_PRIMAL = 1.4901161193847656E-6 * static_cast<real_T>(c10_ndims);
  c10_LDimSizeP1 = c10_b_obj->ldm + 1;
  c10_b_obj->ndims = c10_ndims;
  c10_b = (c10_A.size(0) == 0);
  c10_b1 = (c10_A.size(1) == 0);
  if ((!c10_b) && (!c10_b1)) {
    c10_st.site = &c10_hi_emlrtRSI;
    c10_e_b = c10_ndims;
    c10_f_b = c10_e_b;
    if (c10_f_b < 1) {
      c10_overflow = false;
    } else {
      c10_overflow = (c10_f_b > 2147483646);
    }

    if (c10_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_idx = 0; c10_idx < c10_ndims; c10_idx++) {
      c10_b_idx = c10_idx;
      c10_b_iA0 = c10_b_ldA * c10_b_idx;
      c10_iLD0 = c10_b_obj->ldm * c10_b_idx;
      c10_st.site = &c10_hi_emlrtRSI;
      c10_j_n = c10_ndims;
      c10_ix0 = c10_b_iA0 + 1;
      c10_y.set_size(&c10_jg_emlrtRTEI, &c10_st, c10_b_obj->FMat.size(0));
      c10_b_loop_ub = c10_b_obj->FMat.size(0) - 1;
      for (c10_i2 = 0; c10_i2 <= c10_b_loop_ub; c10_i2++) {
        c10_y[c10_i2] = c10_b_obj->FMat[c10_i2];
      }

      c10_iy0 = c10_iLD0 + 1;
      c10_b_obj->FMat.set_size(&c10_jg_emlrtRTEI, &c10_st, c10_y.size(0));
      c10_c_loop_ub = c10_y.size(0) - 1;
      for (c10_i3 = 0; c10_i3 <= c10_c_loop_ub; c10_i3++) {
        c10_b_obj->FMat[c10_i3] = c10_y[c10_i3];
      }

      if (!(c10_j_n < 1)) {
        c10_b_st.site = &c10_ad_emlrtRSI;
        c10_k_n = c10_j_n;
        c10_b_ix0 = c10_ix0;
        c10_y.set_size(&c10_bf_emlrtRTEI, &c10_b_st, c10_b_obj->FMat.size(0));
        c10_d_loop_ub = c10_b_obj->FMat.size(0) - 1;
        for (c10_i4 = 0; c10_i4 <= c10_d_loop_ub; c10_i4++) {
          c10_y[c10_i4] = c10_b_obj->FMat[c10_i4];
        }

        c10_b_iy0 = c10_iy0;
        c10_b_obj->FMat.set_size(&c10_jg_emlrtRTEI, &c10_b_st, c10_y.size(0));
        c10_e_loop_ub = c10_y.size(0) - 1;
        for (c10_i5 = 0; c10_i5 <= c10_e_loop_ub; c10_i5++) {
          c10_b_obj->FMat[c10_i5] = c10_y[c10_i5];
        }

        c10_c_st.site = &c10_cd_emlrtRSI;
        c10_m_n = c10_k_n;
        c10_c_ix0 = c10_b_ix0 - 1;
        c10_y.set_size(&c10_cf_emlrtRTEI, &c10_c_st, c10_b_obj->FMat.size(0));
        c10_f_loop_ub = c10_b_obj->FMat.size(0) - 1;
        for (c10_i6 = 0; c10_i6 <= c10_f_loop_ub; c10_i6++) {
          c10_y[c10_i6] = c10_b_obj->FMat[c10_i6];
        }

        c10_c_iy0 = c10_b_iy0 - 1;
        c10_b_obj->FMat.set_size(&c10_jg_emlrtRTEI, &c10_c_st, c10_y.size(0));
        c10_g_loop_ub = c10_y.size(0) - 1;
        for (c10_i7 = 0; c10_i7 <= c10_g_loop_ub; c10_i7++) {
          c10_b_obj->FMat[c10_i7] = c10_y[c10_i7];
        }

        c10_c_var = c10_m_n;
        c10_b_n_t = (ptrdiff_t)c10_c_var;
        c10_b_incx_t = (ptrdiff_t)1;
        c10_incy_t = (ptrdiff_t)1;
        dcopy(&c10_b_n_t, &c10_A[c10_c_ix0], &c10_b_incx_t, &c10_b_obj->
              FMat[c10_c_iy0], &c10_incy_t);
      }
    }
  }

  c10_f_n = c10_ndims;
  c10_y.set_size(&c10_jg_emlrtRTEI, c10_sp, c10_b_obj->FMat.size(0));
  c10_loop_ub = c10_b_obj->FMat.size(0) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_y[c10_i] = c10_b_obj->FMat[c10_i];
  }

  c10_incx = c10_LDimSizeP1;
  if (c10_f_n < 1) {
    c10_A_maxDiag_idx = 0;
  } else {
    c10_h_n = c10_f_n;
    c10_b_incx = c10_incx;
    c10_i_n = c10_h_n;
    c10_c_incx = c10_b_incx;
    c10_var = c10_i_n;
    c10_n_t = (ptrdiff_t)c10_var;
    c10_b_var = c10_c_incx;
    c10_incx_t = (ptrdiff_t)c10_b_var;
    c10_idxmax_t = idamax(&c10_n_t, &(c10_y.data())[0], &c10_incx_t);
    c10_A_maxDiag_idx = (int32_T)c10_idxmax_t;
  }

  c10_diagIdx = c10_A_maxDiag_idx + c10_b_obj->ldm * (c10_A_maxDiag_idx - 1);
  c10_i1 = c10_b_obj->FMat.size(0);
  if ((c10_diagIdx < 1) || (c10_diagIdx > c10_i1)) {
    emlrtDynamicBoundsCheckR2012b(c10_diagIdx, 1, c10_i1, &c10_mq_emlrtBCI,
      (emlrtConstCTX)c10_sp);
  }

  c10_x = c10_b_obj->FMat[c10_diagIdx - 1];
  c10_b_x = c10_x;
  c10_c_x = c10_b_x;
  c10_b_y = muDoubleScalarAbs(c10_c_x);
  c10_varargin_1 = c10_b_y * 2.2204460492503131E-16;
  c10_d_x = c10_SCALED_REG_PRIMAL;
  c10_e_x = c10_d_x;
  c10_f_x = c10_e_x;
  c10_varargin_2 = muDoubleScalarAbs(c10_f_x);
  c10_g_x = c10_varargin_1;
  c10_c_y = c10_varargin_2;
  c10_j_x = c10_g_x;
  c10_d_y = c10_c_y;
  c10_k_x = c10_j_x;
  c10_e_y = c10_d_y;
  c10_b_a = c10_k_x;
  c10_g_b = c10_e_y;
  c10_m_x = c10_b_a;
  c10_f_y = c10_g_b;
  c10_o_x = c10_m_x;
  c10_g_y = c10_f_y;
  c10_maxval = muDoubleScalarMax(c10_o_x, c10_g_y);
  c10_b_obj->regTol_ = c10_maxval;
  if ((c10_b_obj->FMat.size(0) > 16384) && (c10_ndims > 128)) {
    c10_k = 0;
    c10_exitg1 = false;
    while ((!c10_exitg1) && (c10_k < c10_ndims)) {
      c10_LD_diagOffset = 1 + c10_LDimSizeP1 * c10_k;
      c10_order = c10_ndims - c10_k;
      if (c10_k + 48 <= c10_ndims) {
        c10_st.site = &c10_hi_emlrtRSI;
        c10_b_partialColLDL3_(chartInstance, &c10_st, c10_b_obj,
                              c10_LD_diagOffset, c10_order,
                              c10_SCALED_REG_PRIMAL);
        c10_k += 48;
      } else {
        c10_st.site = &c10_hi_emlrtRSI;
        c10_c_fullColLDL2_(chartInstance, &c10_st, c10_b_obj, c10_LD_diagOffset,
                           c10_order, c10_SCALED_REG_PRIMAL);
        c10_exitg1 = true;
      }
    }
  } else {
    c10_st.site = &c10_hi_emlrtRSI;
    c10_d_fullColLDL2_(chartInstance, &c10_st, c10_b_obj, c10_ndims,
                       c10_SCALED_REG_PRIMAL);
  }

  if (c10_b_obj->ConvexCheck) {
    c10_st.site = &c10_hi_emlrtRSI;
    c10_h_b = c10_ndims;
    c10_j_b = c10_h_b;
    if (c10_j_b < 1) {
      c10_b_overflow = false;
    } else {
      c10_b_overflow = (c10_j_b > 2147483646);
    }

    if (c10_b_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    c10_c_idx = 1;
    do {
      c10_exitg2 = 0;
      if (c10_c_idx - 1 <= c10_ndims - 1) {
        c10_b_idx = c10_c_idx;
        c10_idxDiag = c10_b_idx + c10_b_obj->ldm * (c10_b_idx - 1);
        c10_i8 = c10_b_obj->FMat.size(0);
        if ((c10_idxDiag < 1) || (c10_idxDiag > c10_i8)) {
          emlrtDynamicBoundsCheckR2012b(c10_idxDiag, 1, c10_i8, &c10_mq_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        if (c10_b_obj->FMat[c10_idxDiag - 1] <= 0.0) {
          c10_b_obj->info = -c10_b_idx;
          c10_exitg2 = 1;
        } else {
          c10_c_idx++;
        }
      } else {
        c10_b_obj->ConvexCheck = false;
        c10_exitg2 = 1;
      }
    } while (c10_exitg2 == 0);
  }
}

static void c10_b_partialColLDL3_(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_lryvQQZbN23ozlLWy4I3pD *c10_b_obj, int32_T
  c10_LD_offset, int32_T c10_NColsRemain, real_T c10_REG_PRIMAL)
{
  ptrdiff_t c10_b_incx_t;
  ptrdiff_t c10_b_incy_t;
  ptrdiff_t c10_b_lda_t;
  ptrdiff_t c10_b_m_t;
  ptrdiff_t c10_b_n_t;
  ptrdiff_t c10_c_lda_t;
  ptrdiff_t c10_c_m_t;
  ptrdiff_t c10_c_n_t;
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_k_t;
  ptrdiff_t c10_lda_t;
  ptrdiff_t c10_ldb_t;
  ptrdiff_t c10_ldc_t;
  ptrdiff_t c10_m_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 1U> c10_A;
  coder::array<real_T, 1U> c10_f_y;
  coder::array<real_T, 1U> c10_x;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  real_T c10_alpha1;
  real_T c10_b_alpha1;
  real_T c10_b_beta1;
  real_T c10_b_x;
  real_T c10_beta1;
  real_T c10_c_alpha1;
  real_T c10_c_beta1;
  real_T c10_c_x;
  real_T c10_d_x;
  real_T c10_g_y;
  int32_T c10_FMat_offset;
  int32_T c10_LDFinalOffset;
  int32_T c10_LD_diagOffset;
  int32_T c10_LDimSizeP1;
  int32_T c10_W_diagOffset;
  int32_T c10_Woffset;
  int32_T c10_ab_loop_ub;
  int32_T c10_b;
  int32_T c10_b_a;
  int32_T c10_b_ic0;
  int32_T c10_b_idx;
  int32_T c10_b_incx;
  int32_T c10_b_ix0;
  int32_T c10_b_iy0;
  int32_T c10_b_k;
  int32_T c10_b_ldb;
  int32_T c10_b_ldc;
  int32_T c10_b_loop_ub;
  int32_T c10_b_var;
  int32_T c10_b_y;
  int32_T c10_c_a;
  int32_T c10_c_ia0;
  int32_T c10_c_ic0;
  int32_T c10_c_idx;
  int32_T c10_c_incx;
  int32_T c10_c_ix0;
  int32_T c10_c_iy0;
  int32_T c10_c_lda;
  int32_T c10_c_ldb;
  int32_T c10_c_ldc;
  int32_T c10_c_loop_ub;
  int32_T c10_c_m;
  int32_T c10_c_var;
  int32_T c10_c_y;
  int32_T c10_d_ia0;
  int32_T c10_d_idx;
  int32_T c10_d_lda;
  int32_T c10_d_ldc;
  int32_T c10_d_loop_ub;
  int32_T c10_d_m;
  int32_T c10_d_var;
  int32_T c10_d_y;
  int32_T c10_e_b;
  int32_T c10_e_ia0;
  int32_T c10_e_idx;
  int32_T c10_e_lda;
  int32_T c10_e_loop_ub;
  int32_T c10_e_m;
  int32_T c10_e_var;
  int32_T c10_e_y;
  int32_T c10_f_b;
  int32_T c10_f_ia0;
  int32_T c10_f_idx;
  int32_T c10_f_lda;
  int32_T c10_f_loop_ub;
  int32_T c10_f_m;
  int32_T c10_f_n;
  int32_T c10_f_var;
  int32_T c10_g_b;
  int32_T c10_g_ia0;
  int32_T c10_g_idx;
  int32_T c10_g_lda;
  int32_T c10_g_loop_ub;
  int32_T c10_g_m;
  int32_T c10_g_var;
  int32_T c10_h_b;
  int32_T c10_h_idx;
  int32_T c10_h_lda;
  int32_T c10_h_loop_ub;
  int32_T c10_h_m;
  int32_T c10_h_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i19;
  int32_T c10_i2;
  int32_T c10_i20;
  int32_T c10_i21;
  int32_T c10_i22;
  int32_T c10_i23;
  int32_T c10_i24;
  int32_T c10_i25;
  int32_T c10_i26;
  int32_T c10_i27;
  int32_T c10_i28;
  int32_T c10_i29;
  int32_T c10_i3;
  int32_T c10_i30;
  int32_T c10_i31;
  int32_T c10_i32;
  int32_T c10_i33;
  int32_T c10_i34;
  int32_T c10_i35;
  int32_T c10_i36;
  int32_T c10_i37;
  int32_T c10_i38;
  int32_T c10_i39;
  int32_T c10_i4;
  int32_T c10_i40;
  int32_T c10_i41;
  int32_T c10_i42;
  int32_T c10_i43;
  int32_T c10_i44;
  int32_T c10_i45;
  int32_T c10_i46;
  int32_T c10_i47;
  int32_T c10_i48;
  int32_T c10_i49;
  int32_T c10_i5;
  int32_T c10_i50;
  int32_T c10_i51;
  int32_T c10_i52;
  int32_T c10_i53;
  int32_T c10_i54;
  int32_T c10_i55;
  int32_T c10_i56;
  int32_T c10_i57;
  int32_T c10_i58;
  int32_T c10_i59;
  int32_T c10_i6;
  int32_T c10_i60;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_i_lda;
  int32_T c10_i_loop_ub;
  int32_T c10_i_m;
  int32_T c10_i_n;
  int32_T c10_i_var;
  int32_T c10_ia0;
  int32_T c10_ic0;
  int32_T c10_idx;
  int32_T c10_idx2;
  int32_T c10_incx;
  int32_T c10_ix0;
  int32_T c10_iy0;
  int32_T c10_j;
  int32_T c10_j_b;
  int32_T c10_j_lda;
  int32_T c10_j_loop_ub;
  int32_T c10_j_m;
  int32_T c10_j_n;
  int32_T c10_j_var;
  int32_T c10_k;
  int32_T c10_k_b;
  int32_T c10_k_loop_ub;
  int32_T c10_k_n;
  int32_T c10_k_var;
  int32_T c10_lda;
  int32_T c10_ldb;
  int32_T c10_loop_ub;
  int32_T c10_m;
  int32_T c10_m_loop_ub;
  int32_T c10_m_n;
  int32_T c10_m_var;
  int32_T c10_numStrictLowerRows;
  int32_T c10_o_loop_ub;
  int32_T c10_offsetColK;
  int32_T c10_p_loop_ub;
  int32_T c10_q_loop_ub;
  int32_T c10_r_loop_ub;
  int32_T c10_s_loop_ub;
  int32_T c10_subBlockSize;
  int32_T c10_subRows;
  int32_T c10_t_loop_ub;
  int32_T c10_u_loop_ub;
  int32_T c10_v_loop_ub;
  int32_T c10_var;
  int32_T c10_varargin_2;
  int32_T c10_w_loop_ub;
  int32_T c10_workspace2_offset;
  int32_T c10_x_loop_ub;
  int32_T c10_y;
  int32_T c10_y_loop_ub;
  char_T c10_TRANSA;
  char_T c10_TRANSA1;
  char_T c10_TRANSB1;
  char_T c10_b_TRANSA;
  boolean_T c10_b_overflow;
  boolean_T c10_c_overflow;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_LDimSizeP1 = c10_b_obj->ldm + 1;
  for (c10_k = 0; c10_k < 48; c10_k++) {
    c10_subRows = (c10_NColsRemain - c10_k) - 1;
    c10_LD_diagOffset = c10_LD_offset + c10_LDimSizeP1 * c10_k;
    c10_W_diagOffset = c10_LDimSizeP1 * c10_k + 1;
    c10_i1 = c10_subRows;
    for (c10_idx = 0; c10_idx <= c10_i1; c10_idx++) {
      c10_i2 = c10_b_obj->FMat.size(0);
      c10_i4 = c10_LD_diagOffset + c10_idx;
      if ((c10_i4 < 1) || (c10_i4 > c10_i2)) {
        emlrtDynamicBoundsCheckR2012b(c10_i4, 1, c10_i2, &c10_pq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i6 = c10_b_obj->workspace_.size(0);
      c10_i8 = c10_W_diagOffset + c10_idx;
      if ((c10_i8 < 1) || (c10_i8 > c10_i6)) {
        emlrtDynamicBoundsCheckR2012b(c10_i8, 1, c10_i6, &c10_pq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->workspace_[c10_i8 - 1] = c10_b_obj->FMat[c10_i4 - 1];
    }

    c10_offsetColK = c10_b_obj->ldm * c10_k + 1;
    c10_i3 = c10_NColsRemain;
    for (c10_b_idx = 0; c10_b_idx < c10_i3; c10_b_idx++) {
      c10_i5 = c10_b_obj->workspace_.size(0);
      c10_i7 = c10_offsetColK + c10_b_idx;
      if ((c10_i7 < 1) || (c10_i7 > c10_i5)) {
        emlrtDynamicBoundsCheckR2012b(c10_i7, 1, c10_i5, &c10_pq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i9 = c10_b_obj->workspace2_.size(0);
      c10_i11 = 1 + c10_b_idx;
      if ((c10_i11 < 1) || (c10_i11 > c10_i9)) {
        emlrtDynamicBoundsCheckR2012b(c10_i11, 1, c10_i9, &c10_pq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->workspace2_[c10_i11 - 1] = c10_b_obj->workspace_[c10_i7 - 1];
    }

    c10_st.site = &c10_ii_emlrtRSI;
    c10_m = c10_NColsRemain;
    c10_f_n = c10_k;
    c10_A.set_size(&c10_yh_emlrtRTEI, &c10_st, c10_b_obj->workspace_.size(0));
    c10_loop_ub = c10_b_obj->workspace_.size(0) - 1;
    for (c10_i10 = 0; c10_i10 <= c10_loop_ub; c10_i10++) {
      c10_A[c10_i10] = c10_b_obj->workspace_[c10_i10];
    }

    c10_lda = c10_b_obj->ldm;
    c10_x.set_size(&c10_yh_emlrtRTEI, &c10_st, c10_b_obj->FMat.size(0));
    c10_b_loop_ub = c10_b_obj->FMat.size(0) - 1;
    for (c10_i13 = 0; c10_i13 <= c10_b_loop_ub; c10_i13++) {
      c10_x[c10_i13] = c10_b_obj->FMat[c10_i13];
    }

    c10_ix0 = c10_LD_offset + c10_k;
    c10_incx = c10_b_obj->ldm;
    c10_f_y.set_size(&c10_yh_emlrtRTEI, &c10_st, c10_b_obj->workspace2_.size(0));
    c10_c_loop_ub = c10_b_obj->workspace2_.size(0) - 1;
    for (c10_i14 = 0; c10_i14 <= c10_c_loop_ub; c10_i14++) {
      c10_f_y[c10_i14] = c10_b_obj->workspace2_[c10_i14];
    }

    c10_b_obj->workspace2_.set_size(&c10_yh_emlrtRTEI, &c10_st, c10_f_y.size(0));
    c10_d_loop_ub = c10_f_y.size(0) - 1;
    for (c10_i15 = 0; c10_i15 <= c10_d_loop_ub; c10_i15++) {
      c10_b_obj->workspace2_[c10_i15] = c10_f_y[c10_i15];
    }

    if ((c10_m < 1) || (c10_f_n < 1)) {
    } else {
      c10_b_st.site = &c10_bf_emlrtRSI;
      c10_c_m = c10_m;
      c10_h_n = c10_f_n;
      c10_c_lda = c10_lda;
      c10_b_ix0 = c10_ix0;
      c10_b_incx = c10_incx;
      c10_f_y.set_size(&c10_qh_emlrtRTEI, &c10_b_st, c10_b_obj->workspace2_.size
                       (0));
      c10_f_loop_ub = c10_b_obj->workspace2_.size(0) - 1;
      for (c10_i26 = 0; c10_i26 <= c10_f_loop_ub; c10_i26++) {
        c10_f_y[c10_i26] = c10_b_obj->workspace2_[c10_i26];
      }

      c10_b_obj->workspace2_.set_size(&c10_yh_emlrtRTEI, &c10_b_st, c10_f_y.size
        (0));
      c10_h_loop_ub = c10_f_y.size(0) - 1;
      for (c10_i34 = 0; c10_i34 <= c10_h_loop_ub; c10_i34++) {
        c10_b_obj->workspace2_[c10_i34] = c10_f_y[c10_i34];
      }

      c10_c_st.site = &c10_ff_emlrtRSI;
      c10_f_m = c10_c_m;
      c10_j_n = c10_h_n;
      c10_alpha1 = -1.0;
      c10_f_lda = c10_c_lda;
      c10_c_ix0 = c10_b_ix0 - 1;
      c10_c_incx = c10_b_incx;
      c10_beta1 = 1.0;
      c10_f_y.set_size(&c10_sh_emlrtRTEI, &c10_c_st, c10_b_obj->workspace2_.size
                       (0));
      c10_p_loop_ub = c10_b_obj->workspace2_.size(0) - 1;
      for (c10_i45 = 0; c10_i45 <= c10_p_loop_ub; c10_i45++) {
        c10_f_y[c10_i45] = c10_b_obj->workspace2_[c10_i45];
      }

      c10_TRANSA = 'N';
      c10_b_obj->workspace2_.set_size(&c10_yh_emlrtRTEI, &c10_c_st, c10_f_y.size
        (0));
      c10_r_loop_ub = c10_f_y.size(0) - 1;
      for (c10_i48 = 0; c10_i48 <= c10_r_loop_ub; c10_i48++) {
        c10_b_obj->workspace2_[c10_i48] = c10_f_y[c10_i48];
      }

      c10_var = c10_f_m;
      c10_m_t = (ptrdiff_t)c10_var;
      c10_b_var = c10_j_n;
      c10_n_t = (ptrdiff_t)c10_b_var;
      c10_c_var = c10_f_lda;
      c10_lda_t = (ptrdiff_t)c10_c_var;
      c10_d_var = c10_c_incx;
      c10_incx_t = (ptrdiff_t)c10_d_var;
      c10_incy_t = (ptrdiff_t)1;
      dgemv(&c10_TRANSA, &c10_m_t, &c10_n_t, &c10_alpha1, &(c10_A.data())[0],
            &c10_lda_t, &c10_x[c10_c_ix0], &c10_incx_t, &c10_beta1,
            &(c10_b_obj->workspace2_.data())[0], &c10_incy_t);
    }

    c10_i16 = c10_NColsRemain;
    for (c10_d_idx = 0; c10_d_idx < c10_i16; c10_d_idx++) {
      c10_i20 = c10_b_obj->workspace2_.size(0);
      c10_i21 = 1 + c10_d_idx;
      if ((c10_i21 < 1) || (c10_i21 > c10_i20)) {
        emlrtDynamicBoundsCheckR2012b(c10_i21, 1, c10_i20, &c10_pq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i28 = c10_b_obj->workspace_.size(0);
      c10_i29 = c10_offsetColK + c10_d_idx;
      if ((c10_i29 < 1) || (c10_i29 > c10_i28)) {
        emlrtDynamicBoundsCheckR2012b(c10_i29, 1, c10_i28, &c10_pq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->workspace_[c10_i29 - 1] = c10_b_obj->workspace2_[c10_i21 - 1];
    }

    c10_i19 = c10_subRows;
    for (c10_g_idx = 0; c10_g_idx <= c10_i19; c10_g_idx++) {
      c10_i24 = c10_b_obj->workspace_.size(0);
      c10_i27 = c10_W_diagOffset + c10_g_idx;
      if ((c10_i27 < 1) || (c10_i27 > c10_i24)) {
        emlrtDynamicBoundsCheckR2012b(c10_i27, 1, c10_i24, &c10_pq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i32 = c10_b_obj->FMat.size(0);
      c10_i35 = c10_LD_diagOffset + c10_g_idx;
      if ((c10_i35 < 1) || (c10_i35 > c10_i32)) {
        emlrtDynamicBoundsCheckR2012b(c10_i35, 1, c10_i32, &c10_pq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->FMat[c10_i35 - 1] = c10_b_obj->workspace_[c10_i27 - 1];
    }

    c10_i23 = c10_b_obj->FMat.size(0);
    if ((c10_LD_diagOffset < 1) || (c10_LD_diagOffset > c10_i23)) {
      emlrtDynamicBoundsCheckR2012b(c10_LD_diagOffset, 1, c10_i23,
        &c10_pq_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_b_x = c10_b_obj->FMat[c10_LD_diagOffset - 1];
    c10_c_x = c10_b_x;
    c10_d_x = c10_c_x;
    c10_g_y = muDoubleScalarAbs(c10_d_x);
    if (c10_g_y <= c10_b_obj->regTol_) {
      c10_i38 = c10_b_obj->FMat.size(0);
      if ((c10_LD_diagOffset < 1) || (c10_LD_diagOffset > c10_i38)) {
        emlrtDynamicBoundsCheckR2012b(c10_LD_diagOffset, 1, c10_i38,
          &c10_pq_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_i42 = c10_b_obj->FMat.size(0);
      if ((c10_LD_diagOffset < 1) || (c10_LD_diagOffset > c10_i42)) {
        emlrtDynamicBoundsCheckR2012b(c10_LD_diagOffset, 1, c10_i42,
          &c10_pq_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->FMat[c10_LD_diagOffset - 1] = c10_b_obj->FMat[c10_LD_diagOffset
        - 1] + c10_REG_PRIMAL;
    }

    c10_numStrictLowerRows = c10_subRows;
    c10_st.site = &c10_ii_emlrtRSI;
    c10_j_b = c10_numStrictLowerRows;
    c10_k_b = c10_j_b;
    if (c10_k_b < 1) {
      c10_c_overflow = false;
    } else {
      c10_c_overflow = (c10_k_b > 2147483646);
    }

    if (c10_c_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_h_idx = 0; c10_h_idx < c10_numStrictLowerRows; c10_h_idx++) {
      c10_f_idx = c10_h_idx + 1;
      c10_i47 = c10_b_obj->FMat.size(0);
      c10_i49 = c10_LD_diagOffset + c10_f_idx;
      if ((c10_i49 < 1) || (c10_i49 > c10_i47)) {
        emlrtDynamicBoundsCheckR2012b(c10_i49, 1, c10_i47, &c10_pq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i51 = c10_b_obj->FMat.size(0);
      if ((c10_LD_diagOffset < 1) || (c10_LD_diagOffset > c10_i51)) {
        emlrtDynamicBoundsCheckR2012b(c10_LD_diagOffset, 1, c10_i51,
          &c10_pq_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_i52 = c10_b_obj->FMat.size(0);
      c10_i54 = c10_LD_diagOffset + c10_f_idx;
      if ((c10_i54 < 1) || (c10_i54 > c10_i52)) {
        emlrtDynamicBoundsCheckR2012b(c10_i54, 1, c10_i52, &c10_pq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->FMat[c10_i54 - 1] = c10_b_obj->FMat[c10_i49 - 1] /
        c10_b_obj->FMat[c10_LD_diagOffset - 1];
    }
  }

  c10_i = c10_NColsRemain - 1;
  c10_st.site = &c10_ii_emlrtRSI;
  c10_b = c10_i;
  c10_e_b = c10_b;
  if (c10_e_b < 48) {
    c10_overflow = false;
  } else {
    c10_overflow = (c10_e_b > 2147483599);
  }

  if (c10_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  for (c10_j = 48; c10_j <= c10_i; c10_j += 48) {
    c10_varargin_2 = c10_NColsRemain - c10_j;
    c10_y = c10_varargin_2;
    c10_b_y = c10_y;
    c10_c_y = c10_b_y;
    c10_f_b = c10_c_y;
    c10_d_y = c10_f_b;
    c10_e_y = c10_d_y;
    c10_subBlockSize = muIntScalarMin_sint32(48, c10_e_y);
    c10_i12 = (c10_j + c10_subBlockSize) - 1;
    c10_st.site = &c10_ii_emlrtRSI;
    c10_b_a = c10_j;
    c10_g_b = c10_i12;
    c10_c_a = c10_b_a;
    c10_h_b = c10_g_b;
    if (c10_c_a > c10_h_b) {
      c10_b_overflow = false;
    } else {
      c10_b_overflow = (c10_h_b > 2147483646);
    }

    if (c10_b_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_b_k = c10_j; c10_b_k <= c10_i12; c10_b_k++) {
      c10_subRows = (c10_j + c10_subBlockSize) - c10_b_k;
      c10_LD_diagOffset = c10_LD_offset + c10_LDimSizeP1 * c10_b_k;
      for (c10_c_idx = 0; c10_c_idx < 48; c10_c_idx++) {
        c10_i17 = c10_b_obj->FMat.size(0);
        c10_i18 = (c10_LD_offset + c10_b_k) + c10_c_idx * c10_b_obj->ldm;
        if ((c10_i18 < 1) || (c10_i18 > c10_i17)) {
          emlrtDynamicBoundsCheckR2012b(c10_i18, 1, c10_i17, &c10_pq_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        c10_b_obj->workspace2_[c10_c_idx] = c10_b_obj->FMat[c10_i18 - 1];
      }

      c10_st.site = &c10_ii_emlrtRSI;
      c10_d_m = c10_subRows;
      c10_A.set_size(&c10_yh_emlrtRTEI, &c10_st, c10_b_obj->workspace_.size(0));
      c10_e_loop_ub = c10_b_obj->workspace_.size(0) - 1;
      for (c10_i22 = 0; c10_i22 <= c10_e_loop_ub; c10_i22++) {
        c10_A[c10_i22] = c10_b_obj->workspace_[c10_i22];
      }

      c10_ia0 = c10_b_k;
      c10_d_lda = c10_b_obj->ldm;
      c10_x.set_size(&c10_yh_emlrtRTEI, &c10_st, c10_b_obj->workspace2_.size(0));
      c10_i_loop_ub = c10_b_obj->workspace2_.size(0) - 1;
      for (c10_i36 = 0; c10_i36 <= c10_i_loop_ub; c10_i36++) {
        c10_x[c10_i36] = c10_b_obj->workspace2_[c10_i36];
      }

      c10_f_y.set_size(&c10_yh_emlrtRTEI, &c10_st, c10_b_obj->FMat.size(0));
      c10_k_loop_ub = c10_b_obj->FMat.size(0) - 1;
      for (c10_i41 = 0; c10_i41 <= c10_k_loop_ub; c10_i41++) {
        c10_f_y[c10_i41] = c10_b_obj->FMat[c10_i41];
      }

      c10_iy0 = c10_LD_diagOffset;
      c10_b_obj->FMat.set_size(&c10_yh_emlrtRTEI, &c10_st, c10_f_y.size(0));
      c10_o_loop_ub = c10_f_y.size(0) - 1;
      for (c10_i44 = 0; c10_i44 <= c10_o_loop_ub; c10_i44++) {
        c10_b_obj->FMat[c10_i44] = c10_f_y[c10_i44];
      }

      if (!(c10_d_m < 1)) {
        c10_b_st.site = &c10_bf_emlrtRSI;
        c10_g_m = c10_d_m;
        c10_d_ia0 = c10_ia0 + 1;
        c10_g_lda = c10_d_lda;
        c10_f_y.set_size(&c10_qh_emlrtRTEI, &c10_b_st, c10_b_obj->FMat.size(0));
        c10_s_loop_ub = c10_b_obj->FMat.size(0) - 1;
        for (c10_i50 = 0; c10_i50 <= c10_s_loop_ub; c10_i50++) {
          c10_f_y[c10_i50] = c10_b_obj->FMat[c10_i50];
        }

        c10_b_iy0 = c10_iy0;
        c10_b_obj->FMat.set_size(&c10_yh_emlrtRTEI, &c10_b_st, c10_f_y.size(0));
        c10_t_loop_ub = c10_f_y.size(0) - 1;
        for (c10_i53 = 0; c10_i53 <= c10_t_loop_ub; c10_i53++) {
          c10_b_obj->FMat[c10_i53] = c10_f_y[c10_i53];
        }

        c10_c_st.site = &c10_ff_emlrtRSI;
        c10_i_m = c10_g_m;
        c10_b_alpha1 = -1.0;
        c10_f_ia0 = c10_d_ia0 - 1;
        c10_i_lda = c10_g_lda;
        c10_b_beta1 = 1.0;
        c10_f_y.set_size(&c10_sh_emlrtRTEI, &c10_c_st, c10_b_obj->FMat.size(0));
        c10_w_loop_ub = c10_b_obj->FMat.size(0) - 1;
        for (c10_i57 = 0; c10_i57 <= c10_w_loop_ub; c10_i57++) {
          c10_f_y[c10_i57] = c10_b_obj->FMat[c10_i57];
        }

        c10_c_iy0 = c10_b_iy0 - 1;
        c10_b_TRANSA = 'N';
        c10_b_obj->FMat.set_size(&c10_yh_emlrtRTEI, &c10_c_st, c10_f_y.size(0));
        c10_x_loop_ub = c10_f_y.size(0) - 1;
        for (c10_i58 = 0; c10_i58 <= c10_x_loop_ub; c10_i58++) {
          c10_b_obj->FMat[c10_i58] = c10_f_y[c10_i58];
        }

        c10_e_var = c10_i_m;
        c10_b_m_t = (ptrdiff_t)c10_e_var;
        c10_b_n_t = (ptrdiff_t)48;
        c10_f_var = c10_i_lda;
        c10_b_lda_t = (ptrdiff_t)c10_f_var;
        c10_b_incx_t = (ptrdiff_t)1;
        c10_b_incy_t = (ptrdiff_t)1;
        dgemv(&c10_b_TRANSA, &c10_b_m_t, &c10_b_n_t, &c10_b_alpha1,
              &c10_A[c10_f_ia0], &c10_b_lda_t, &(c10_x.data())[0], &c10_b_incx_t,
              &c10_b_beta1, &c10_b_obj->FMat[c10_c_iy0], &c10_b_incy_t);
      }
    }

    if (c10_j + c10_subBlockSize < c10_NColsRemain) {
      c10_subRows = (c10_NColsRemain - c10_j) - c10_subBlockSize;
      c10_Woffset = c10_j + c10_subBlockSize;
      c10_LDFinalOffset = (c10_LD_offset + c10_subBlockSize) + c10_LDimSizeP1 *
        c10_j;
      for (c10_e_idx = 0; c10_e_idx < 48; c10_e_idx++) {
        c10_f_idx = c10_e_idx;
        c10_FMat_offset = (c10_LD_offset + c10_j) + c10_f_idx * c10_b_obj->ldm;
        c10_workspace2_offset = c10_f_idx * c10_b_obj->ldm;
        c10_i25 = c10_subBlockSize;
        for (c10_idx2 = 0; c10_idx2 < c10_i25; c10_idx2++) {
          c10_i31 = c10_b_obj->FMat.size(0);
          c10_i33 = c10_FMat_offset + c10_idx2;
          if ((c10_i33 < 1) || (c10_i33 > c10_i31)) {
            emlrtDynamicBoundsCheckR2012b(c10_i33, 1, c10_i31, &c10_pq_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_i37 = c10_b_obj->workspace2_.size(0);
          c10_i40 = (c10_workspace2_offset + c10_idx2) + 1;
          if ((c10_i40 < 1) || (c10_i40 > c10_i37)) {
            emlrtDynamicBoundsCheckR2012b(c10_i40, 1, c10_i37, &c10_pq_emlrtBCI,
              (emlrtConstCTX)c10_sp);
          }

          c10_b_obj->workspace2_[c10_i40 - 1] = c10_b_obj->FMat[c10_i33 - 1];
        }
      }

      c10_st.site = &c10_ii_emlrtRSI;
      c10_e_m = c10_subRows;
      c10_i_n = c10_subBlockSize;
      c10_A.set_size(&c10_yh_emlrtRTEI, &c10_st, c10_b_obj->workspace_.size(0));
      c10_g_loop_ub = c10_b_obj->workspace_.size(0) - 1;
      for (c10_i30 = 0; c10_i30 <= c10_g_loop_ub; c10_i30++) {
        c10_A[c10_i30] = c10_b_obj->workspace_[c10_i30];
      }

      c10_c_ia0 = c10_Woffset + 1;
      c10_e_lda = c10_b_obj->ldm;
      c10_x.set_size(&c10_yh_emlrtRTEI, &c10_st, c10_b_obj->workspace2_.size(0));
      c10_j_loop_ub = c10_b_obj->workspace2_.size(0) - 1;
      for (c10_i39 = 0; c10_i39 <= c10_j_loop_ub; c10_i39++) {
        c10_x[c10_i39] = c10_b_obj->workspace2_[c10_i39];
      }

      c10_ldb = c10_b_obj->ldm;
      c10_f_y.set_size(&c10_yh_emlrtRTEI, &c10_st, c10_b_obj->FMat.size(0));
      c10_m_loop_ub = c10_b_obj->FMat.size(0) - 1;
      for (c10_i43 = 0; c10_i43 <= c10_m_loop_ub; c10_i43++) {
        c10_f_y[c10_i43] = c10_b_obj->FMat[c10_i43];
      }

      c10_ic0 = c10_LDFinalOffset;
      c10_b_ldc = c10_b_obj->ldm;
      c10_b_obj->FMat.set_size(&c10_yh_emlrtRTEI, &c10_st, c10_f_y.size(0));
      c10_q_loop_ub = c10_f_y.size(0) - 1;
      for (c10_i46 = 0; c10_i46 <= c10_q_loop_ub; c10_i46++) {
        c10_b_obj->FMat[c10_i46] = c10_f_y[c10_i46];
      }

      if ((c10_e_m < 1) || (c10_i_n < 1)) {
      } else {
        c10_b_st.site = &c10_tg_emlrtRSI;
        c10_h_m = c10_e_m;
        c10_k_n = c10_i_n;
        c10_e_ia0 = c10_c_ia0;
        c10_h_lda = c10_e_lda;
        c10_b_ldb = c10_ldb;
        c10_f_y.set_size(&c10_vh_emlrtRTEI, &c10_b_st, c10_b_obj->FMat.size(0));
        c10_u_loop_ub = c10_b_obj->FMat.size(0) - 1;
        for (c10_i55 = 0; c10_i55 <= c10_u_loop_ub; c10_i55++) {
          c10_f_y[c10_i55] = c10_b_obj->FMat[c10_i55];
        }

        c10_b_ic0 = c10_ic0;
        c10_c_ldc = c10_b_ldc;
        c10_b_obj->FMat.set_size(&c10_yh_emlrtRTEI, &c10_b_st, c10_f_y.size(0));
        c10_v_loop_ub = c10_f_y.size(0) - 1;
        for (c10_i56 = 0; c10_i56 <= c10_v_loop_ub; c10_i56++) {
          c10_b_obj->FMat[c10_i56] = c10_f_y[c10_i56];
        }

        c10_c_st.site = &c10_wg_emlrtRSI;
        c10_j_m = c10_h_m;
        c10_m_n = c10_k_n;
        c10_c_alpha1 = -1.0;
        c10_g_ia0 = c10_e_ia0 - 1;
        c10_j_lda = c10_h_lda;
        c10_c_ldb = c10_b_ldb;
        c10_c_beta1 = 1.0;
        c10_f_y.set_size(&c10_wh_emlrtRTEI, &c10_c_st, c10_b_obj->FMat.size(0));
        c10_y_loop_ub = c10_b_obj->FMat.size(0) - 1;
        for (c10_i59 = 0; c10_i59 <= c10_y_loop_ub; c10_i59++) {
          c10_f_y[c10_i59] = c10_b_obj->FMat[c10_i59];
        }

        c10_c_ic0 = c10_b_ic0 - 1;
        c10_d_ldc = c10_c_ldc;
        c10_TRANSB1 = 'T';
        c10_TRANSA1 = 'N';
        c10_b_obj->FMat.set_size(&c10_yh_emlrtRTEI, &c10_c_st, c10_f_y.size(0));
        c10_ab_loop_ub = c10_f_y.size(0) - 1;
        for (c10_i60 = 0; c10_i60 <= c10_ab_loop_ub; c10_i60++) {
          c10_b_obj->FMat[c10_i60] = c10_f_y[c10_i60];
        }

        c10_g_var = c10_j_m;
        c10_c_m_t = (ptrdiff_t)c10_g_var;
        c10_i_var = c10_m_n;
        c10_c_n_t = (ptrdiff_t)c10_i_var;
        c10_k_t = (ptrdiff_t)48;
        c10_j_var = c10_j_lda;
        c10_c_lda_t = (ptrdiff_t)c10_j_var;
        c10_k_var = c10_c_ldb;
        c10_ldb_t = (ptrdiff_t)c10_k_var;
        c10_m_var = c10_d_ldc;
        c10_ldc_t = (ptrdiff_t)c10_m_var;
        dgemm(&c10_TRANSA1, &c10_TRANSB1, &c10_c_m_t, &c10_c_n_t, &c10_k_t,
              &c10_c_alpha1, &c10_A[c10_g_ia0], &c10_c_lda_t, &(c10_x.data())[0],
              &c10_ldb_t, &c10_c_beta1, &c10_b_obj->FMat[c10_c_ic0], &c10_ldc_t);
      }
    }
  }
}

static void c10_c_fullColLDL2_(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_lryvQQZbN23ozlLWy4I3pD *c10_b_obj, int32_T
  c10_LD_offset, int32_T c10_NColsRemain, real_T c10_REG_PRIMAL)
{
  ptrdiff_t c10_b_incx_t;
  ptrdiff_t c10_b_n_t;
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 1U> c10_c_obj;
  coder::array<real_T, 1U> c10_c_y;
  coder::array<real_T, 1U> c10_d_obj;
  coder::array<real_T, 1U> c10_g_x;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  real_T c10_L_diagScale;
  real_T c10_b_a;
  real_T c10_b_x;
  real_T c10_b_y;
  real_T c10_c_a;
  real_T c10_c_x;
  real_T c10_d_a;
  real_T c10_d_x;
  real_T c10_e_x;
  real_T c10_f_x;
  real_T c10_neg_D;
  real_T c10_x;
  real_T c10_y;
  int32_T c10_LD_diagOffset;
  int32_T c10_LDimSizeP1;
  int32_T c10_b;
  int32_T c10_b_ix0;
  int32_T c10_b_k;
  int32_T c10_b_loop_ub;
  int32_T c10_b_var;
  int32_T c10_c_ix0;
  int32_T c10_c_loop_ub;
  int32_T c10_d_ix0;
  int32_T c10_d_loop_ub;
  int32_T c10_e_b;
  int32_T c10_e_ix0;
  int32_T c10_e_loop_ub;
  int32_T c10_f_ix0;
  int32_T c10_f_loop_ub;
  int32_T c10_f_n;
  int32_T c10_g_loop_ub;
  int32_T c10_h_loop_ub;
  int32_T c10_h_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i19;
  int32_T c10_i2;
  int32_T c10_i20;
  int32_T c10_i21;
  int32_T c10_i22;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_i_loop_ub;
  int32_T c10_i_n;
  int32_T c10_ix0;
  int32_T c10_j_loop_ub;
  int32_T c10_j_n;
  int32_T c10_k;
  int32_T c10_k_loop_ub;
  int32_T c10_k_n;
  int32_T c10_lastDiag;
  int32_T c10_loop_ub;
  int32_T c10_m_loop_ub;
  int32_T c10_m_n;
  int32_T c10_o_loop_ub;
  int32_T c10_offset1;
  int32_T c10_offset2;
  int32_T c10_p_loop_ub;
  int32_T c10_q_loop_ub;
  int32_T c10_subMatrixDim;
  int32_T c10_var;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_LDimSizeP1 = c10_b_obj->ldm + 1;
  c10_st.site = &c10_ri_emlrtRSI;
  c10_b = c10_NColsRemain;
  c10_e_b = c10_b;
  if (c10_e_b < 1) {
    c10_overflow = false;
  } else {
    c10_overflow = (c10_e_b > 2147483646);
  }

  if (c10_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  for (c10_k = 0; c10_k < c10_NColsRemain; c10_k++) {
    c10_b_k = c10_k;
    c10_LD_diagOffset = c10_LD_offset + c10_LDimSizeP1 * c10_b_k;
    c10_i1 = c10_b_obj->FMat.size(0);
    if ((c10_LD_diagOffset < 1) || (c10_LD_diagOffset > c10_i1)) {
      emlrtDynamicBoundsCheckR2012b(c10_LD_diagOffset, 1, c10_i1,
        &c10_qq_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_c_x = c10_b_obj->FMat[c10_LD_diagOffset - 1];
    c10_e_x = c10_c_x;
    c10_f_x = c10_e_x;
    c10_b_y = muDoubleScalarAbs(c10_f_x);
    if (c10_b_y <= c10_b_obj->regTol_) {
      c10_i3 = c10_b_obj->FMat.size(0);
      if ((c10_LD_diagOffset < 1) || (c10_LD_diagOffset > c10_i3)) {
        emlrtDynamicBoundsCheckR2012b(c10_LD_diagOffset, 1, c10_i3,
          &c10_qq_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_i6 = c10_b_obj->FMat.size(0);
      if ((c10_LD_diagOffset < 1) || (c10_LD_diagOffset > c10_i6)) {
        emlrtDynamicBoundsCheckR2012b(c10_LD_diagOffset, 1, c10_i6,
          &c10_qq_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->FMat[c10_LD_diagOffset - 1] = c10_b_obj->FMat[c10_LD_diagOffset
        - 1] + c10_REG_PRIMAL;
    }

    c10_i4 = c10_b_obj->FMat.size(0);
    if ((c10_LD_diagOffset < 1) || (c10_LD_diagOffset > c10_i4)) {
      emlrtDynamicBoundsCheckR2012b(c10_LD_diagOffset, 1, c10_i4,
        &c10_qq_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_neg_D = -1.0 / c10_b_obj->FMat[c10_LD_diagOffset - 1];
    c10_subMatrixDim = (c10_NColsRemain - c10_b_k) - 1;
    c10_offset1 = c10_LD_diagOffset + 1;
    c10_offset2 = c10_LD_diagOffset + c10_LDimSizeP1;
    c10_st.site = &c10_ri_emlrtRSI;
    c10_f_n = c10_subMatrixDim;
    c10_g_x.set_size(&c10_ai_emlrtRTEI, &c10_st, c10_b_obj->FMat.size(0));
    c10_loop_ub = c10_b_obj->FMat.size(0) - 1;
    for (c10_i7 = 0; c10_i7 <= c10_loop_ub; c10_i7++) {
      c10_g_x[c10_i7] = c10_b_obj->FMat[c10_i7];
    }

    c10_ix0 = c10_offset1;
    c10_c_y.set_size(&c10_ai_emlrtRTEI, &c10_st, c10_b_obj->workspace_.size(0));
    c10_b_loop_ub = c10_b_obj->workspace_.size(0) - 1;
    for (c10_i8 = 0; c10_i8 <= c10_b_loop_ub; c10_i8++) {
      c10_c_y[c10_i8] = c10_b_obj->workspace_[c10_i8];
    }

    c10_b_obj->workspace_.set_size(&c10_ai_emlrtRTEI, &c10_st, c10_c_y.size(0));
    c10_c_loop_ub = c10_c_y.size(0) - 1;
    for (c10_i9 = 0; c10_i9 <= c10_c_loop_ub; c10_i9++) {
      c10_b_obj->workspace_[c10_i9] = c10_c_y[c10_i9];
    }

    if (!(c10_f_n < 1)) {
      c10_b_st.site = &c10_ad_emlrtRSI;
      c10_h_n = c10_f_n;
      c10_b_ix0 = c10_ix0;
      c10_c_y.set_size(&c10_bf_emlrtRTEI, &c10_b_st, c10_b_obj->workspace_.size
                       (0));
      c10_e_loop_ub = c10_b_obj->workspace_.size(0) - 1;
      for (c10_i11 = 0; c10_i11 <= c10_e_loop_ub; c10_i11++) {
        c10_c_y[c10_i11] = c10_b_obj->workspace_[c10_i11];
      }

      c10_b_obj->workspace_.set_size(&c10_ai_emlrtRTEI, &c10_b_st, c10_c_y.size
        (0));
      c10_g_loop_ub = c10_c_y.size(0) - 1;
      for (c10_i13 = 0; c10_i13 <= c10_g_loop_ub; c10_i13++) {
        c10_b_obj->workspace_[c10_i13] = c10_c_y[c10_i13];
      }

      c10_c_st.site = &c10_cd_emlrtRSI;
      c10_i_n = c10_h_n;
      c10_c_ix0 = c10_b_ix0 - 1;
      c10_c_y.set_size(&c10_cf_emlrtRTEI, &c10_c_st, c10_b_obj->workspace_.size
                       (0));
      c10_h_loop_ub = c10_b_obj->workspace_.size(0) - 1;
      for (c10_i15 = 0; c10_i15 <= c10_h_loop_ub; c10_i15++) {
        c10_c_y[c10_i15] = c10_b_obj->workspace_[c10_i15];
      }

      c10_b_obj->workspace_.set_size(&c10_ai_emlrtRTEI, &c10_c_st, c10_c_y.size
        (0));
      c10_j_loop_ub = c10_c_y.size(0) - 1;
      for (c10_i17 = 0; c10_i17 <= c10_j_loop_ub; c10_i17++) {
        c10_b_obj->workspace_[c10_i17] = c10_c_y[c10_i17];
      }

      c10_var = c10_i_n;
      c10_n_t = (ptrdiff_t)c10_var;
      c10_incx_t = (ptrdiff_t)1;
      c10_incy_t = (ptrdiff_t)1;
      dcopy(&c10_n_t, &c10_g_x[c10_c_ix0], &c10_incx_t,
            &(c10_b_obj->workspace_.data())[0], &c10_incy_t);
    }

    c10_c_obj.set_size(&c10_ai_emlrtRTEI, c10_sp, c10_b_obj->workspace_.size(0));
    c10_d_loop_ub = c10_b_obj->workspace_.size(0) - 1;
    for (c10_i10 = 0; c10_i10 <= c10_d_loop_ub; c10_i10++) {
      c10_c_obj[c10_i10] = c10_b_obj->workspace_[c10_i10];
    }

    c10_d_obj.set_size(&c10_ai_emlrtRTEI, c10_sp, c10_b_obj->workspace_.size(0));
    c10_f_loop_ub = c10_b_obj->workspace_.size(0) - 1;
    for (c10_i12 = 0; c10_i12 <= c10_f_loop_ub; c10_i12++) {
      c10_d_obj[c10_i12] = c10_b_obj->workspace_[c10_i12];
    }

    c10_st.site = &c10_ri_emlrtRSI;
    c10_b_xger(chartInstance, c10_subMatrixDim, c10_subMatrixDim, c10_neg_D,
               c10_c_obj, c10_d_obj, c10_b_obj->FMat, c10_offset2,
               c10_b_obj->ldm);
    c10_i14 = c10_b_obj->FMat.size(0);
    if ((c10_LD_diagOffset < 1) || (c10_LD_diagOffset > c10_i14)) {
      emlrtDynamicBoundsCheckR2012b(c10_LD_diagOffset, 1, c10_i14,
        &c10_qq_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_L_diagScale = 1.0 / c10_b_obj->FMat[c10_LD_diagOffset - 1];
    c10_st.site = &c10_ri_emlrtRSI;
    c10_j_n = c10_subMatrixDim;
    c10_b_a = c10_L_diagScale;
    c10_g_x.set_size(&c10_ai_emlrtRTEI, &c10_st, c10_b_obj->FMat.size(0));
    c10_i_loop_ub = c10_b_obj->FMat.size(0) - 1;
    for (c10_i16 = 0; c10_i16 <= c10_i_loop_ub; c10_i16++) {
      c10_g_x[c10_i16] = c10_b_obj->FMat[c10_i16];
    }

    c10_d_ix0 = c10_offset1;
    c10_b_obj->FMat.set_size(&c10_ai_emlrtRTEI, &c10_st, c10_g_x.size(0));
    c10_k_loop_ub = c10_g_x.size(0) - 1;
    for (c10_i18 = 0; c10_i18 <= c10_k_loop_ub; c10_i18++) {
      c10_b_obj->FMat[c10_i18] = c10_g_x[c10_i18];
    }

    if (!(c10_j_n < 1)) {
      c10_b_st.site = &c10_se_emlrtRSI;
      c10_k_n = c10_j_n;
      c10_c_a = c10_b_a;
      c10_g_x.set_size(&c10_bi_emlrtRTEI, &c10_b_st, c10_b_obj->FMat.size(0));
      c10_m_loop_ub = c10_b_obj->FMat.size(0) - 1;
      for (c10_i19 = 0; c10_i19 <= c10_m_loop_ub; c10_i19++) {
        c10_g_x[c10_i19] = c10_b_obj->FMat[c10_i19];
      }

      c10_e_ix0 = c10_d_ix0;
      c10_b_obj->FMat.set_size(&c10_ai_emlrtRTEI, &c10_b_st, c10_g_x.size(0));
      c10_o_loop_ub = c10_g_x.size(0) - 1;
      for (c10_i20 = 0; c10_i20 <= c10_o_loop_ub; c10_i20++) {
        c10_b_obj->FMat[c10_i20] = c10_g_x[c10_i20];
      }

      c10_c_st.site = &c10_ve_emlrtRSI;
      c10_m_n = c10_k_n;
      c10_d_a = c10_c_a;
      c10_g_x.set_size(&c10_ci_emlrtRTEI, &c10_c_st, c10_b_obj->FMat.size(0));
      c10_p_loop_ub = c10_b_obj->FMat.size(0) - 1;
      for (c10_i21 = 0; c10_i21 <= c10_p_loop_ub; c10_i21++) {
        c10_g_x[c10_i21] = c10_b_obj->FMat[c10_i21];
      }

      c10_f_ix0 = c10_e_ix0 - 1;
      c10_b_obj->FMat.set_size(&c10_ai_emlrtRTEI, &c10_c_st, c10_g_x.size(0));
      c10_q_loop_ub = c10_g_x.size(0) - 1;
      for (c10_i22 = 0; c10_i22 <= c10_q_loop_ub; c10_i22++) {
        c10_b_obj->FMat[c10_i22] = c10_g_x[c10_i22];
      }

      c10_b_var = c10_m_n;
      c10_b_n_t = (ptrdiff_t)c10_b_var;
      c10_b_incx_t = (ptrdiff_t)1;
      dscal(&c10_b_n_t, &c10_d_a, &c10_b_obj->FMat[c10_f_ix0], &c10_b_incx_t);
    }
  }

  c10_lastDiag = c10_LD_offset + c10_LDimSizeP1 * (c10_NColsRemain - 1);
  c10_i = c10_b_obj->FMat.size(0);
  if ((c10_lastDiag < 1) || (c10_lastDiag > c10_i)) {
    emlrtDynamicBoundsCheckR2012b(c10_lastDiag, 1, c10_i, &c10_qq_emlrtBCI,
      (emlrtConstCTX)c10_sp);
  }

  c10_x = c10_b_obj->FMat[c10_lastDiag - 1];
  c10_b_x = c10_x;
  c10_d_x = c10_b_x;
  c10_y = muDoubleScalarAbs(c10_d_x);
  if (c10_y <= c10_b_obj->regTol_) {
    c10_i2 = c10_b_obj->FMat.size(0);
    if ((c10_lastDiag < 1) || (c10_lastDiag > c10_i2)) {
      emlrtDynamicBoundsCheckR2012b(c10_lastDiag, 1, c10_i2, &c10_qq_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_i5 = c10_b_obj->FMat.size(0);
    if ((c10_lastDiag < 1) || (c10_lastDiag > c10_i5)) {
      emlrtDynamicBoundsCheckR2012b(c10_lastDiag, 1, c10_i5, &c10_qq_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->FMat[c10_lastDiag - 1] = c10_b_obj->FMat[c10_lastDiag - 1] +
      c10_REG_PRIMAL;
  }
}

static void c10_b_xger(SFc10_ACCMPCInstanceStruct *chartInstance, int32_T c10_m,
  int32_T c10_f_n, real_T c10_alpha1, coder::array<real_T, 1U> &c10_x, coder::
  array<real_T, 1U> &c10_y, coder::array<real_T, 1U> &c10_A, int32_T c10_ia0,
  int32_T c10_lda)
{
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_lda_t;
  ptrdiff_t c10_m_t;
  ptrdiff_t c10_n_t;
  real_T c10_b_alpha1;
  real_T c10_c_alpha1;
  int32_T c10_b_var;
  int32_T c10_c_ia0;
  int32_T c10_c_lda;
  int32_T c10_c_m;
  int32_T c10_c_var;
  int32_T c10_d_ia0;
  int32_T c10_d_lda;
  int32_T c10_d_m;
  int32_T c10_h_n;
  int32_T c10_i_n;
  int32_T c10_var;
  if ((c10_m < 1) || (c10_f_n < 1)) {
  } else {
    c10_c_m = c10_m;
    c10_h_n = c10_f_n;
    c10_b_alpha1 = c10_alpha1;
    c10_c_ia0 = c10_ia0;
    c10_c_lda = c10_lda;
    c10_d_m = c10_c_m;
    c10_i_n = c10_h_n;
    c10_c_alpha1 = c10_b_alpha1;
    c10_d_ia0 = c10_c_ia0 - 1;
    c10_d_lda = c10_c_lda;
    c10_var = c10_d_m;
    c10_m_t = (ptrdiff_t)c10_var;
    c10_b_var = c10_i_n;
    c10_n_t = (ptrdiff_t)c10_b_var;
    c10_incx_t = (ptrdiff_t)1;
    c10_incy_t = (ptrdiff_t)1;
    c10_c_var = c10_d_lda;
    c10_lda_t = (ptrdiff_t)c10_c_var;
    dger(&c10_m_t, &c10_n_t, &c10_c_alpha1, &(c10_x.data())[0], &c10_incx_t,
         &(c10_y.data())[0], &c10_incy_t, &c10_A[c10_d_ia0], &c10_lda_t);
  }
}

static void c10_d_fullColLDL2_(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_lryvQQZbN23ozlLWy4I3pD *c10_b_obj, int32_T
  c10_NColsRemain, real_T c10_REG_PRIMAL)
{
  ptrdiff_t c10_b_incx_t;
  ptrdiff_t c10_b_n_t;
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 1U> c10_c_obj;
  coder::array<real_T, 1U> c10_c_y;
  coder::array<real_T, 1U> c10_d_obj;
  coder::array<real_T, 1U> c10_g_x;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  real_T c10_L_diagScale;
  real_T c10_b_a;
  real_T c10_b_x;
  real_T c10_b_y;
  real_T c10_c_a;
  real_T c10_c_x;
  real_T c10_d_a;
  real_T c10_d_x;
  real_T c10_e_x;
  real_T c10_f_x;
  real_T c10_neg_D;
  real_T c10_x;
  real_T c10_y;
  int32_T c10_LD_diagOffset;
  int32_T c10_LDimSizeP1;
  int32_T c10_b;
  int32_T c10_b_ix0;
  int32_T c10_b_k;
  int32_T c10_b_loop_ub;
  int32_T c10_b_var;
  int32_T c10_c_ix0;
  int32_T c10_c_loop_ub;
  int32_T c10_d_ix0;
  int32_T c10_d_loop_ub;
  int32_T c10_e_b;
  int32_T c10_e_ix0;
  int32_T c10_e_loop_ub;
  int32_T c10_f_ix0;
  int32_T c10_f_loop_ub;
  int32_T c10_f_n;
  int32_T c10_g_loop_ub;
  int32_T c10_h_loop_ub;
  int32_T c10_h_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i19;
  int32_T c10_i2;
  int32_T c10_i20;
  int32_T c10_i21;
  int32_T c10_i22;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_i_loop_ub;
  int32_T c10_i_n;
  int32_T c10_ix0;
  int32_T c10_j_loop_ub;
  int32_T c10_j_n;
  int32_T c10_k;
  int32_T c10_k_loop_ub;
  int32_T c10_k_n;
  int32_T c10_lastDiag;
  int32_T c10_loop_ub;
  int32_T c10_m_loop_ub;
  int32_T c10_m_n;
  int32_T c10_o_loop_ub;
  int32_T c10_offset1;
  int32_T c10_offset2;
  int32_T c10_p_loop_ub;
  int32_T c10_q_loop_ub;
  int32_T c10_subMatrixDim;
  int32_T c10_var;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_LDimSizeP1 = c10_b_obj->ldm + 1;
  c10_st.site = &c10_ri_emlrtRSI;
  c10_b = c10_NColsRemain;
  c10_e_b = c10_b;
  if (c10_e_b < 1) {
    c10_overflow = false;
  } else {
    c10_overflow = (c10_e_b > 2147483646);
  }

  if (c10_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  for (c10_k = 0; c10_k < c10_NColsRemain; c10_k++) {
    c10_b_k = c10_k;
    c10_LD_diagOffset = 1 + c10_LDimSizeP1 * c10_b_k;
    c10_i1 = c10_b_obj->FMat.size(0);
    if ((c10_LD_diagOffset < 1) || (c10_LD_diagOffset > c10_i1)) {
      emlrtDynamicBoundsCheckR2012b(c10_LD_diagOffset, 1, c10_i1,
        &c10_qq_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_c_x = c10_b_obj->FMat[c10_LD_diagOffset - 1];
    c10_e_x = c10_c_x;
    c10_f_x = c10_e_x;
    c10_b_y = muDoubleScalarAbs(c10_f_x);
    if (c10_b_y <= c10_b_obj->regTol_) {
      c10_i3 = c10_b_obj->FMat.size(0);
      if ((c10_LD_diagOffset < 1) || (c10_LD_diagOffset > c10_i3)) {
        emlrtDynamicBoundsCheckR2012b(c10_LD_diagOffset, 1, c10_i3,
          &c10_qq_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_i6 = c10_b_obj->FMat.size(0);
      if ((c10_LD_diagOffset < 1) || (c10_LD_diagOffset > c10_i6)) {
        emlrtDynamicBoundsCheckR2012b(c10_LD_diagOffset, 1, c10_i6,
          &c10_qq_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_b_obj->FMat[c10_LD_diagOffset - 1] = c10_b_obj->FMat[c10_LD_diagOffset
        - 1] + c10_REG_PRIMAL;
    }

    c10_i4 = c10_b_obj->FMat.size(0);
    if ((c10_LD_diagOffset < 1) || (c10_LD_diagOffset > c10_i4)) {
      emlrtDynamicBoundsCheckR2012b(c10_LD_diagOffset, 1, c10_i4,
        &c10_qq_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_neg_D = -1.0 / c10_b_obj->FMat[c10_LD_diagOffset - 1];
    c10_subMatrixDim = (c10_NColsRemain - c10_b_k) - 1;
    c10_offset1 = c10_LD_diagOffset + 1;
    c10_offset2 = c10_LD_diagOffset + c10_LDimSizeP1;
    c10_st.site = &c10_ri_emlrtRSI;
    c10_f_n = c10_subMatrixDim;
    c10_g_x.set_size(&c10_ai_emlrtRTEI, &c10_st, c10_b_obj->FMat.size(0));
    c10_loop_ub = c10_b_obj->FMat.size(0) - 1;
    for (c10_i7 = 0; c10_i7 <= c10_loop_ub; c10_i7++) {
      c10_g_x[c10_i7] = c10_b_obj->FMat[c10_i7];
    }

    c10_ix0 = c10_offset1;
    c10_c_y.set_size(&c10_ai_emlrtRTEI, &c10_st, c10_b_obj->workspace_.size(0));
    c10_b_loop_ub = c10_b_obj->workspace_.size(0) - 1;
    for (c10_i8 = 0; c10_i8 <= c10_b_loop_ub; c10_i8++) {
      c10_c_y[c10_i8] = c10_b_obj->workspace_[c10_i8];
    }

    c10_b_obj->workspace_.set_size(&c10_ai_emlrtRTEI, &c10_st, c10_c_y.size(0));
    c10_c_loop_ub = c10_c_y.size(0) - 1;
    for (c10_i9 = 0; c10_i9 <= c10_c_loop_ub; c10_i9++) {
      c10_b_obj->workspace_[c10_i9] = c10_c_y[c10_i9];
    }

    if (!(c10_f_n < 1)) {
      c10_b_st.site = &c10_ad_emlrtRSI;
      c10_h_n = c10_f_n;
      c10_b_ix0 = c10_ix0;
      c10_c_y.set_size(&c10_bf_emlrtRTEI, &c10_b_st, c10_b_obj->workspace_.size
                       (0));
      c10_e_loop_ub = c10_b_obj->workspace_.size(0) - 1;
      for (c10_i11 = 0; c10_i11 <= c10_e_loop_ub; c10_i11++) {
        c10_c_y[c10_i11] = c10_b_obj->workspace_[c10_i11];
      }

      c10_b_obj->workspace_.set_size(&c10_ai_emlrtRTEI, &c10_b_st, c10_c_y.size
        (0));
      c10_g_loop_ub = c10_c_y.size(0) - 1;
      for (c10_i13 = 0; c10_i13 <= c10_g_loop_ub; c10_i13++) {
        c10_b_obj->workspace_[c10_i13] = c10_c_y[c10_i13];
      }

      c10_c_st.site = &c10_cd_emlrtRSI;
      c10_i_n = c10_h_n;
      c10_c_ix0 = c10_b_ix0 - 1;
      c10_c_y.set_size(&c10_cf_emlrtRTEI, &c10_c_st, c10_b_obj->workspace_.size
                       (0));
      c10_h_loop_ub = c10_b_obj->workspace_.size(0) - 1;
      for (c10_i15 = 0; c10_i15 <= c10_h_loop_ub; c10_i15++) {
        c10_c_y[c10_i15] = c10_b_obj->workspace_[c10_i15];
      }

      c10_b_obj->workspace_.set_size(&c10_ai_emlrtRTEI, &c10_c_st, c10_c_y.size
        (0));
      c10_j_loop_ub = c10_c_y.size(0) - 1;
      for (c10_i17 = 0; c10_i17 <= c10_j_loop_ub; c10_i17++) {
        c10_b_obj->workspace_[c10_i17] = c10_c_y[c10_i17];
      }

      c10_var = c10_i_n;
      c10_n_t = (ptrdiff_t)c10_var;
      c10_incx_t = (ptrdiff_t)1;
      c10_incy_t = (ptrdiff_t)1;
      dcopy(&c10_n_t, &c10_g_x[c10_c_ix0], &c10_incx_t,
            &(c10_b_obj->workspace_.data())[0], &c10_incy_t);
    }

    c10_c_obj.set_size(&c10_ai_emlrtRTEI, c10_sp, c10_b_obj->workspace_.size(0));
    c10_d_loop_ub = c10_b_obj->workspace_.size(0) - 1;
    for (c10_i10 = 0; c10_i10 <= c10_d_loop_ub; c10_i10++) {
      c10_c_obj[c10_i10] = c10_b_obj->workspace_[c10_i10];
    }

    c10_d_obj.set_size(&c10_ai_emlrtRTEI, c10_sp, c10_b_obj->workspace_.size(0));
    c10_f_loop_ub = c10_b_obj->workspace_.size(0) - 1;
    for (c10_i12 = 0; c10_i12 <= c10_f_loop_ub; c10_i12++) {
      c10_d_obj[c10_i12] = c10_b_obj->workspace_[c10_i12];
    }

    c10_st.site = &c10_ri_emlrtRSI;
    c10_b_xger(chartInstance, c10_subMatrixDim, c10_subMatrixDim, c10_neg_D,
               c10_c_obj, c10_d_obj, c10_b_obj->FMat, c10_offset2,
               c10_b_obj->ldm);
    c10_i14 = c10_b_obj->FMat.size(0);
    if ((c10_LD_diagOffset < 1) || (c10_LD_diagOffset > c10_i14)) {
      emlrtDynamicBoundsCheckR2012b(c10_LD_diagOffset, 1, c10_i14,
        &c10_qq_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_L_diagScale = 1.0 / c10_b_obj->FMat[c10_LD_diagOffset - 1];
    c10_st.site = &c10_ri_emlrtRSI;
    c10_j_n = c10_subMatrixDim;
    c10_b_a = c10_L_diagScale;
    c10_g_x.set_size(&c10_ai_emlrtRTEI, &c10_st, c10_b_obj->FMat.size(0));
    c10_i_loop_ub = c10_b_obj->FMat.size(0) - 1;
    for (c10_i16 = 0; c10_i16 <= c10_i_loop_ub; c10_i16++) {
      c10_g_x[c10_i16] = c10_b_obj->FMat[c10_i16];
    }

    c10_d_ix0 = c10_offset1;
    c10_b_obj->FMat.set_size(&c10_ai_emlrtRTEI, &c10_st, c10_g_x.size(0));
    c10_k_loop_ub = c10_g_x.size(0) - 1;
    for (c10_i18 = 0; c10_i18 <= c10_k_loop_ub; c10_i18++) {
      c10_b_obj->FMat[c10_i18] = c10_g_x[c10_i18];
    }

    if (!(c10_j_n < 1)) {
      c10_b_st.site = &c10_se_emlrtRSI;
      c10_k_n = c10_j_n;
      c10_c_a = c10_b_a;
      c10_g_x.set_size(&c10_bi_emlrtRTEI, &c10_b_st, c10_b_obj->FMat.size(0));
      c10_m_loop_ub = c10_b_obj->FMat.size(0) - 1;
      for (c10_i19 = 0; c10_i19 <= c10_m_loop_ub; c10_i19++) {
        c10_g_x[c10_i19] = c10_b_obj->FMat[c10_i19];
      }

      c10_e_ix0 = c10_d_ix0;
      c10_b_obj->FMat.set_size(&c10_ai_emlrtRTEI, &c10_b_st, c10_g_x.size(0));
      c10_o_loop_ub = c10_g_x.size(0) - 1;
      for (c10_i20 = 0; c10_i20 <= c10_o_loop_ub; c10_i20++) {
        c10_b_obj->FMat[c10_i20] = c10_g_x[c10_i20];
      }

      c10_c_st.site = &c10_ve_emlrtRSI;
      c10_m_n = c10_k_n;
      c10_d_a = c10_c_a;
      c10_g_x.set_size(&c10_ci_emlrtRTEI, &c10_c_st, c10_b_obj->FMat.size(0));
      c10_p_loop_ub = c10_b_obj->FMat.size(0) - 1;
      for (c10_i21 = 0; c10_i21 <= c10_p_loop_ub; c10_i21++) {
        c10_g_x[c10_i21] = c10_b_obj->FMat[c10_i21];
      }

      c10_f_ix0 = c10_e_ix0 - 1;
      c10_b_obj->FMat.set_size(&c10_ai_emlrtRTEI, &c10_c_st, c10_g_x.size(0));
      c10_q_loop_ub = c10_g_x.size(0) - 1;
      for (c10_i22 = 0; c10_i22 <= c10_q_loop_ub; c10_i22++) {
        c10_b_obj->FMat[c10_i22] = c10_g_x[c10_i22];
      }

      c10_b_var = c10_m_n;
      c10_b_n_t = (ptrdiff_t)c10_b_var;
      c10_b_incx_t = (ptrdiff_t)1;
      dscal(&c10_b_n_t, &c10_d_a, &c10_b_obj->FMat[c10_f_ix0], &c10_b_incx_t);
    }
  }

  c10_lastDiag = 1 + c10_LDimSizeP1 * (c10_NColsRemain - 1);
  c10_i = c10_b_obj->FMat.size(0);
  if ((c10_lastDiag < 1) || (c10_lastDiag > c10_i)) {
    emlrtDynamicBoundsCheckR2012b(c10_lastDiag, 1, c10_i, &c10_qq_emlrtBCI,
      (emlrtConstCTX)c10_sp);
  }

  c10_x = c10_b_obj->FMat[c10_lastDiag - 1];
  c10_b_x = c10_x;
  c10_d_x = c10_b_x;
  c10_y = muDoubleScalarAbs(c10_d_x);
  if (c10_y <= c10_b_obj->regTol_) {
    c10_i2 = c10_b_obj->FMat.size(0);
    if ((c10_lastDiag < 1) || (c10_lastDiag > c10_i2)) {
      emlrtDynamicBoundsCheckR2012b(c10_lastDiag, 1, c10_i2, &c10_qq_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_i5 = c10_b_obj->FMat.size(0);
    if ((c10_lastDiag < 1) || (c10_lastDiag > c10_i5)) {
      emlrtDynamicBoundsCheckR2012b(c10_lastDiag, 1, c10_i5, &c10_qq_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->FMat[c10_lastDiag - 1] = c10_b_obj->FMat[c10_lastDiag - 1] +
      c10_REG_PRIMAL;
  }
}

static void c10_j_xgemv(SFc10_ACCMPCInstanceStruct *chartInstance, int32_T c10_m,
  int32_T c10_f_n, coder::array<real_T, 2U> &c10_A, int32_T c10_ia0, int32_T
  c10_lda, coder::array<real_T, 2U> &c10_x, coder::array<real_T, 1U> &c10_y)
{
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_lda_t;
  ptrdiff_t c10_m_t;
  ptrdiff_t c10_n_t;
  real_T c10_alpha1;
  real_T c10_beta1;
  int32_T c10_b_var;
  int32_T c10_c_ia0;
  int32_T c10_c_lda;
  int32_T c10_c_m;
  int32_T c10_c_var;
  int32_T c10_d_ia0;
  int32_T c10_d_lda;
  int32_T c10_d_m;
  int32_T c10_h_n;
  int32_T c10_i_n;
  int32_T c10_var;
  char_T c10_TRANSA;
  if (!(c10_m < 1)) {
    c10_c_m = c10_m;
    c10_h_n = c10_f_n;
    c10_c_ia0 = c10_ia0;
    c10_c_lda = c10_lda;
    c10_d_m = c10_c_m;
    c10_i_n = c10_h_n;
    c10_alpha1 = 1.0;
    c10_d_ia0 = c10_c_ia0 - 1;
    c10_d_lda = c10_c_lda;
    c10_beta1 = 0.0;
    c10_TRANSA = 'N';
    c10_var = c10_d_m;
    c10_m_t = (ptrdiff_t)c10_var;
    c10_b_var = c10_i_n;
    c10_n_t = (ptrdiff_t)c10_b_var;
    c10_c_var = c10_d_lda;
    c10_lda_t = (ptrdiff_t)c10_c_var;
    c10_incx_t = (ptrdiff_t)1;
    c10_incy_t = (ptrdiff_t)1;
    dgemv(&c10_TRANSA, &c10_m_t, &c10_n_t, &c10_alpha1, &c10_A[c10_d_ia0],
          &c10_lda_t, &(c10_x.data())[0], &c10_incx_t, &c10_beta1, &(c10_y.data())
          [0], &c10_incy_t);
  }
}

static void c10_b_compute_lambda(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_workspace,
  c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_objective, c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager)
{
  ptrdiff_t c10_b_incx_t;
  ptrdiff_t c10_b_lda_t;
  ptrdiff_t c10_b_n_t;
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_lda_t;
  ptrdiff_t c10_m_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 2U> c10_A;
  coder::array<real_T, 1U> c10_x;
  c10_s_l1Gll5dfO9DpqQrvRqAf7E c10_b_obj;
  emlrtStack c10_b_st;
  emlrtStack c10_st;
  real_T c10_alpha1;
  real_T c10_b_tol;
  real_T c10_b_x;
  real_T c10_b_y;
  real_T c10_beta1;
  real_T c10_c_x;
  real_T c10_d_x;
  real_T c10_e_x;
  real_T c10_f_x;
  real_T c10_g_x;
  real_T c10_tol;
  real_T c10_y;
  int32_T c10_b;
  int32_T c10_b_idx;
  int32_T c10_b_loop_ub;
  int32_T c10_b_var;
  int32_T c10_c_idx;
  int32_T c10_c_lda;
  int32_T c10_c_loop_ub;
  int32_T c10_c_m;
  int32_T c10_c_var;
  int32_T c10_d_lda;
  int32_T c10_d_m;
  int32_T c10_d_var;
  int32_T c10_e_b;
  int32_T c10_e_lda;
  int32_T c10_e_var;
  int32_T c10_f_lda;
  int32_T c10_f_n;
  int32_T c10_g_lda;
  int32_T c10_h_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i_n;
  int32_T c10_idx;
  int32_T c10_idxQR;
  int32_T c10_j_n;
  int32_T c10_k_n;
  int32_T c10_lda;
  int32_T c10_ldq;
  int32_T c10_loop_ub;
  int32_T c10_m;
  int32_T c10_m_n;
  int32_T c10_nActiveConstr;
  int32_T c10_nVar;
  int32_T c10_var;
  char_T c10_DIAGA1;
  char_T c10_TRANSA;
  char_T c10_TRANSA1;
  char_T c10_UPLO1;
  boolean_T c10_b_nonDegenerate;
  boolean_T c10_exitg1;
  boolean_T c10_guard1;
  boolean_T c10_guard2;
  boolean_T c10_nonDegenerate;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_nVar = c10_b_qrmanager->mrows;
  c10_nActiveConstr = c10_b_qrmanager->ncols;
  if (c10_nActiveConstr <= 0) {
  } else {
    c10_guard1 = false;
    if (c10_objective->objtype != 4) {
      c10_tol = 100.0 * static_cast<real_T>(c10_nVar) * 2.2204460492503131E-16;
      c10_st.site = &c10_cj_emlrtRSI;
      c10_b_obj = *c10_b_qrmanager;
      c10_b_tol = c10_tol;
      if ((c10_b_obj.mrows > 0) && (c10_b_obj.ncols > 0)) {
        c10_nonDegenerate = true;
      } else {
        c10_nonDegenerate = false;
      }

      c10_b_nonDegenerate = c10_nonDegenerate;
      if (!c10_nonDegenerate) {
      } else {
        c10_idx = c10_b_obj.ncols;
        c10_guard2 = false;
        if (c10_b_obj.mrows < c10_b_obj.ncols) {
          c10_idxQR = c10_b_obj.mrows + c10_b_obj.ldq * (c10_idx - 1);
          c10_exitg1 = false;
          while ((!c10_exitg1) && (c10_idx > c10_b_obj.mrows)) {
            c10_i2 = c10_b_obj.QR.size(0) * c10_b_obj.QR.size(1);
            if ((c10_idxQR < 1) || (c10_idxQR > c10_i2)) {
              emlrtDynamicBoundsCheckR2012b(c10_idxQR, 1, c10_i2,
                &c10_rq_emlrtBCI, &c10_st);
            }

            c10_b_x = c10_b_obj.QR[c10_idxQR - 1];
            c10_c_x = c10_b_x;
            c10_d_x = c10_c_x;
            c10_y = muDoubleScalarAbs(c10_d_x);
            if (c10_y >= c10_b_tol) {
              c10_idx--;
              c10_idxQR -= c10_b_obj.ldq;
            } else {
              c10_exitg1 = true;
            }
          }

          c10_b_nonDegenerate = (c10_idx == c10_b_obj.mrows);
          if (!c10_b_nonDegenerate) {
          } else {
            c10_guard2 = true;
          }
        } else {
          c10_guard2 = true;
        }

        if (c10_guard2) {
          c10_idxQR = c10_idx + c10_b_obj.ldq * (c10_idx - 1);
          c10_exitg1 = false;
          while ((!c10_exitg1) && (c10_idx >= 1)) {
            c10_i3 = c10_b_obj.QR.size(0) * c10_b_obj.QR.size(1);
            if ((c10_idxQR < 1) || (c10_idxQR > c10_i3)) {
              emlrtDynamicBoundsCheckR2012b(c10_idxQR, 1, c10_i3,
                &c10_rq_emlrtBCI, &c10_st);
            }

            c10_e_x = c10_b_obj.QR[c10_idxQR - 1];
            c10_f_x = c10_e_x;
            c10_g_x = c10_f_x;
            c10_b_y = muDoubleScalarAbs(c10_g_x);
            if (c10_b_y >= c10_b_tol) {
              c10_idx--;
              c10_idxQR = (c10_idxQR - c10_b_obj.ldq) - 1;
            } else {
              c10_exitg1 = true;
            }
          }

          c10_b_nonDegenerate = (c10_idx == 0);
        }
      }

      if (!c10_b_nonDegenerate) {
        c10_solution->state = -7;
      } else {
        c10_guard1 = true;
      }
    } else {
      c10_guard1 = true;
    }

    if (c10_guard1) {
      c10_ldq = c10_b_qrmanager->ldq;
      c10_st.site = &c10_cj_emlrtRSI;
      c10_m = c10_nVar;
      c10_f_n = c10_nActiveConstr;
      c10_A.set_size(&c10_mg_emlrtRTEI, &c10_st, c10_b_qrmanager->Q.size(0),
                     c10_b_qrmanager->Q.size(1));
      c10_loop_ub = c10_b_qrmanager->Q.size(0) * c10_b_qrmanager->Q.size(1) - 1;
      for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
        c10_A[c10_i] = c10_b_qrmanager->Q[c10_i];
      }

      c10_lda = c10_ldq;
      c10_x.set_size(&c10_mg_emlrtRTEI, &c10_st, c10_objective->grad.size(0));
      c10_b_loop_ub = c10_objective->grad.size(0) - 1;
      for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
        c10_x[c10_i1] = c10_objective->grad[c10_i1];
      }

      if (!(c10_m < 1)) {
        c10_b_st.site = &c10_bf_emlrtRSI;
        c10_c_m = c10_m;
        c10_i_n = c10_f_n;
        c10_c_lda = c10_lda;
        c10_d_m = c10_c_m;
        c10_j_n = c10_i_n;
        c10_alpha1 = 1.0;
        c10_e_lda = c10_c_lda;
        c10_beta1 = 0.0;
        c10_TRANSA = 'T';
        c10_var = c10_d_m;
        c10_m_t = (ptrdiff_t)c10_var;
        c10_b_var = c10_j_n;
        c10_n_t = (ptrdiff_t)c10_b_var;
        c10_c_var = c10_e_lda;
        c10_lda_t = (ptrdiff_t)c10_c_var;
        c10_incx_t = (ptrdiff_t)1;
        c10_incy_t = (ptrdiff_t)1;
        dgemv(&c10_TRANSA, &c10_m_t, &c10_n_t, &c10_alpha1, &(c10_A.data())[0],
              &c10_lda_t, &(c10_x.data())[0], &c10_incx_t, &c10_beta1,
              &(c10_workspace.data())[0], &c10_incy_t);
      }

      c10_st.site = &c10_cj_emlrtRSI;
      c10_h_n = c10_nActiveConstr;
      c10_A.set_size(&c10_mg_emlrtRTEI, &c10_st, c10_b_qrmanager->QR.size(0),
                     c10_b_qrmanager->QR.size(1));
      c10_c_loop_ub = c10_b_qrmanager->QR.size(0) * c10_b_qrmanager->QR.size(1)
        - 1;
      for (c10_i4 = 0; c10_i4 <= c10_c_loop_ub; c10_i4++) {
        c10_A[c10_i4] = c10_b_qrmanager->QR[c10_i4];
      }

      c10_d_lda = c10_ldq;
      c10_b_st.site = &c10_ui_emlrtRSI;
      c10_k_n = c10_h_n;
      c10_f_lda = c10_d_lda;
      c10_m_n = c10_k_n;
      c10_g_lda = c10_f_lda;
      c10_DIAGA1 = 'N';
      c10_TRANSA1 = 'N';
      c10_UPLO1 = 'U';
      c10_d_var = c10_m_n;
      c10_b_n_t = (ptrdiff_t)c10_d_var;
      c10_e_var = c10_g_lda;
      c10_b_lda_t = (ptrdiff_t)c10_e_var;
      c10_b_incx_t = (ptrdiff_t)1;
      dtrsv(&c10_UPLO1, &c10_TRANSA1, &c10_DIAGA1, &c10_b_n_t, &(c10_A.data())[0],
            &c10_b_lda_t, &(c10_workspace.data())[0], &c10_b_incx_t);
      c10_st.site = &c10_cj_emlrtRSI;
      c10_b = c10_nActiveConstr;
      c10_e_b = c10_b;
      if (c10_e_b < 1) {
        c10_overflow = false;
      } else {
        c10_overflow = (c10_e_b > 2147483646);
      }

      if (c10_overflow) {
        c10_b_st.site = &c10_v_emlrtRSI;
        c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
      }

      for (c10_b_idx = 0; c10_b_idx < c10_nActiveConstr; c10_b_idx++) {
        c10_c_idx = c10_b_idx + 1;
        c10_i5 = c10_workspace.size(0) * c10_workspace.size(1);
        if ((c10_c_idx < 1) || (c10_c_idx > c10_i5)) {
          emlrtDynamicBoundsCheckR2012b(c10_c_idx, 1, c10_i5, &c10_sq_emlrtBCI,
            (emlrtConstCTX)c10_sp);
        }

        if ((c10_c_idx < 1) || (c10_c_idx > c10_solution->lambda.size[0])) {
          emlrtDynamicBoundsCheckR2012b(c10_c_idx, 1, c10_solution->lambda.size
            [0], &c10_sq_emlrtBCI, (emlrtConstCTX)c10_sp);
        }

        c10_solution->lambda.data[c10_c_idx - 1] = -c10_workspace[c10_c_idx - 1];
      }
    }
  }
}

static void c10_b_feasibleratiotest(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_i_workingset, boolean_T c10_isPhaseOne,
  real_T *c10_alpha, boolean_T *c10_newBlocking, int32_T *c10_constrType,
  int32_T *c10_constrIdx)
{
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 1U> c10_x;
  emlrtStack c10_b_st;
  emlrtStack c10_st;
  real_T c10_ab_x;
  real_T c10_alphaTemp;
  real_T c10_b_a;
  real_T c10_b_minval;
  real_T c10_b_varargin_1;
  real_T c10_b_varargin_2;
  real_T c10_b_x;
  real_T c10_b_y;
  real_T c10_bb_x;
  real_T c10_c_a;
  real_T c10_c_minval;
  real_T c10_c_varargin_1;
  real_T c10_c_varargin_2;
  real_T c10_c_x;
  real_T c10_c_y;
  real_T c10_cb_x;
  real_T c10_d_a;
  real_T c10_d_varargin_1;
  real_T c10_d_x;
  real_T c10_d_y;
  real_T c10_db_x;
  real_T c10_denomTol;
  real_T c10_e_a;
  real_T c10_e_varargin_1;
  real_T c10_e_x;
  real_T c10_e_y;
  real_T c10_eb_x;
  real_T c10_f_a;
  real_T c10_f_x;
  real_T c10_f_y;
  real_T c10_fb_x;
  real_T c10_g_x;
  real_T c10_g_y;
  real_T c10_gb_x;
  real_T c10_h_b;
  real_T c10_h_y;
  real_T c10_hb_x;
  real_T c10_i_y;
  real_T c10_ib_x;
  real_T c10_j_b;
  real_T c10_j_x;
  real_T c10_j_y;
  real_T c10_jb_x;
  real_T c10_k_b;
  real_T c10_k_x;
  real_T c10_k_y;
  real_T c10_kb_x;
  real_T c10_m_x;
  real_T c10_m_y;
  real_T c10_mb_x;
  real_T c10_minval;
  real_T c10_o_x;
  real_T c10_o_y;
  real_T c10_ob_x;
  real_T c10_p_x;
  real_T c10_p_y;
  real_T c10_pb_x;
  real_T c10_phaseOneCorrectionP;
  real_T c10_phaseOneCorrectionX;
  real_T c10_pk_corrected;
  real_T c10_q_x;
  real_T c10_q_y;
  real_T c10_r_x;
  real_T c10_r_y;
  real_T c10_ratio;
  real_T c10_s_x;
  real_T c10_t_x;
  real_T c10_u_x;
  real_T c10_v_x;
  real_T c10_varargin_1;
  real_T c10_varargin_2;
  real_T c10_w_x;
  real_T c10_x_x;
  real_T c10_y;
  real_T c10_y_x;
  int32_T c10_b;
  int32_T c10_b_idx;
  int32_T c10_b_idxConstr;
  int32_T c10_b_idx_lb;
  int32_T c10_b_idx_local;
  int32_T c10_b_idx_ub;
  int32_T c10_c_idx;
  int32_T c10_c_idxConstr;
  int32_T c10_c_idx_local;
  int32_T c10_e_b;
  int32_T c10_f_b;
  int32_T c10_f_n;
  int32_T c10_g_b;
  int32_T c10_h_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_i_n;
  int32_T c10_idx;
  int32_T c10_idxConstr;
  int32_T c10_idx_local;
  int32_T c10_loop_ub;
  int32_T c10_nVar;
  int32_T c10_nWLB;
  int32_T c10_nWUB;
  int32_T c10_nWineq;
  int32_T c10_totalLB;
  int32_T c10_totalUB;
  int32_T c10_var;
  boolean_T c10_b_overflow;
  boolean_T c10_b_tf;
  boolean_T c10_c_tf;
  boolean_T c10_overflow;
  boolean_T c10_tf;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_totalLB = c10_i_workingset->sizes[3];
  c10_totalUB = c10_i_workingset->sizes[4];
  c10_nWineq = c10_i_workingset->nWConstr[2];
  c10_nWLB = c10_i_workingset->nWConstr[3];
  c10_nWUB = c10_i_workingset->nWConstr[4];
  c10_nVar = c10_i_workingset->nVar;
  *c10_alpha = 1.0E+30;
  *c10_newBlocking = false;
  *c10_constrType = 0;
  *c10_constrIdx = 0;
  c10_f_n = c10_nVar;
  c10_x.set_size(&c10_og_emlrtRTEI, c10_sp, c10_solution->searchDir.size(0));
  c10_loop_ub = c10_solution->searchDir.size(0) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_x[c10_i] = c10_solution->searchDir[c10_i];
  }

  if (c10_f_n < 1) {
    c10_y = 0.0;
  } else {
    c10_h_n = c10_f_n;
    c10_i_n = c10_h_n;
    c10_var = c10_i_n;
    c10_n_t = (ptrdiff_t)c10_var;
    c10_incx_t = (ptrdiff_t)1;
    c10_y = dnrm2(&c10_n_t, &(c10_x.data())[0], &c10_incx_t);
  }

  c10_denomTol = 2.2204460492503131E-13 * c10_y;
  if (c10_nWineq < 0) {
    c10_st.site = &c10_ej_emlrtRSI;
  }

  if (c10_nWLB < c10_totalLB) {
    c10_i1 = c10_solution->xstar.size(0);
    if ((c10_nVar < 1) || (c10_nVar > c10_i1)) {
      emlrtDynamicBoundsCheckR2012b(c10_nVar, 1, c10_i1, &c10_tq_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_phaseOneCorrectionX = static_cast<real_T>(c10_isPhaseOne) *
      c10_solution->xstar[c10_nVar - 1];
    c10_i3 = c10_solution->searchDir.size(0);
    if ((c10_nVar < 1) || (c10_nVar > c10_i3)) {
      emlrtDynamicBoundsCheckR2012b(c10_nVar, 1, c10_i3, &c10_tq_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_phaseOneCorrectionP = static_cast<real_T>(c10_isPhaseOne) *
      c10_solution->searchDir[c10_nVar - 1];
    c10_i5 = c10_totalLB - 2;
    c10_st.site = &c10_ej_emlrtRSI;
    c10_b = c10_i5 + 1;
    c10_f_b = c10_b;
    if (c10_f_b < 1) {
      c10_overflow = false;
    } else {
      c10_overflow = (c10_f_b > 2147483646);
    }

    if (c10_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_idx = 0; c10_idx <= c10_i5; c10_idx++) {
      c10_c_idx = c10_idx + 1;
      c10_i7 = c10_i_workingset->indexLB.size(0);
      if ((c10_c_idx < 1) || (c10_c_idx > c10_i7)) {
        emlrtDynamicBoundsCheckR2012b(c10_c_idx, 1, c10_i7, &c10_tq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_idx_lb = c10_i_workingset->indexLB[c10_c_idx - 1];
      c10_i10 = c10_solution->searchDir.size(0);
      if ((c10_b_idx_lb < 1) || (c10_b_idx_lb > c10_i10)) {
        emlrtDynamicBoundsCheckR2012b(c10_b_idx_lb, 1, c10_i10, &c10_tq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_pk_corrected = -c10_solution->searchDir[c10_b_idx_lb - 1] -
        c10_phaseOneCorrectionP;
      if (c10_pk_corrected > c10_denomTol) {
        c10_st.site = &c10_ej_emlrtRSI;
        c10_b_idx_local = c10_c_idx - 1;
        c10_b_idxConstr = c10_i_workingset->isActiveIdx[3] + c10_b_idx_local;
        if ((c10_b_idxConstr < 1) || (c10_b_idxConstr >
             c10_i_workingset->isActiveConstr.size[0])) {
          emlrtDynamicBoundsCheckR2012b(c10_b_idxConstr, 1,
            c10_i_workingset->isActiveConstr.size[0], &c10_sp_emlrtBCI, &c10_st);
        }

        c10_b_tf = c10_i_workingset->isActiveConstr.data[c10_b_idxConstr - 1];
        if (!c10_b_tf) {
          c10_i13 = c10_solution->xstar.size(0);
          if ((c10_b_idx_lb < 1) || (c10_b_idx_lb > c10_i13)) {
            emlrtDynamicBoundsCheckR2012b(c10_b_idx_lb, 1, c10_i13,
              &c10_tq_emlrtBCI, (emlrtConstCTX)c10_sp);
          }

          c10_i16 = c10_i_workingset->lb.size(0);
          if ((c10_b_idx_lb < 1) || (c10_b_idx_lb > c10_i16)) {
            emlrtDynamicBoundsCheckR2012b(c10_b_idx_lb, 1, c10_i16,
              &c10_tq_emlrtBCI, (emlrtConstCTX)c10_sp);
          }

          c10_ratio = (-c10_solution->xstar[c10_b_idx_lb - 1] -
                       c10_i_workingset->lb[c10_b_idx_lb - 1]) -
            c10_phaseOneCorrectionX;
          c10_s_x = c10_ratio;
          c10_u_x = c10_s_x;
          c10_w_x = c10_u_x;
          c10_d_varargin_1 = muDoubleScalarAbs(c10_w_x);
          c10_b_varargin_2 = 1.0E-8 - c10_ratio;
          c10_bb_x = c10_d_varargin_1;
          c10_d_y = c10_b_varargin_2;
          c10_eb_x = c10_bb_x;
          c10_g_y = c10_d_y;
          c10_gb_x = c10_eb_x;
          c10_i_y = c10_g_y;
          c10_e_a = c10_gb_x;
          c10_j_b = c10_i_y;
          c10_kb_x = c10_e_a;
          c10_o_y = c10_j_b;
          c10_ob_x = c10_kb_x;
          c10_q_y = c10_o_y;
          c10_b_minval = muDoubleScalarMin(c10_ob_x, c10_q_y);
          c10_alphaTemp = c10_b_minval / c10_pk_corrected;
          if (c10_alphaTemp < *c10_alpha) {
            *c10_alpha = c10_alphaTemp;
            *c10_constrType = 4;
            *c10_constrIdx = c10_c_idx;
            *c10_newBlocking = true;
          }
        }
      }
    }

    c10_i6 = c10_i_workingset->indexLB.size(0);
    if ((c10_totalLB < 1) || (c10_totalLB > c10_i6)) {
      emlrtDynamicBoundsCheckR2012b(c10_totalLB, 1, c10_i6, &c10_tq_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_b_idx_lb = c10_i_workingset->indexLB[c10_totalLB - 1];
    c10_i9 = c10_solution->searchDir.size(0);
    if ((c10_b_idx_lb < 1) || (c10_b_idx_lb > c10_i9)) {
      emlrtDynamicBoundsCheckR2012b(c10_b_idx_lb, 1, c10_i9, &c10_tq_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    if (-c10_solution->searchDir[c10_b_idx_lb - 1] > c10_denomTol) {
      c10_st.site = &c10_ej_emlrtRSI;
      c10_idx_local = c10_totalLB - 1;
      c10_idxConstr = c10_i_workingset->isActiveIdx[3] + c10_idx_local;
      if ((c10_idxConstr < 1) || (c10_idxConstr >
           c10_i_workingset->isActiveConstr.size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_idxConstr, 1,
          c10_i_workingset->isActiveConstr.size[0], &c10_sp_emlrtBCI, &c10_st);
      }

      c10_tf = c10_i_workingset->isActiveConstr.data[c10_idxConstr - 1];
      if (!c10_tf) {
        c10_i12 = c10_solution->xstar.size(0);
        if ((c10_b_idx_lb < 1) || (c10_b_idx_lb > c10_i12)) {
          emlrtDynamicBoundsCheckR2012b(c10_b_idx_lb, 1, c10_i12,
            &c10_tq_emlrtBCI, (emlrtConstCTX)c10_sp);
        }

        c10_i15 = c10_i_workingset->lb.size(0);
        if ((c10_b_idx_lb < 1) || (c10_b_idx_lb > c10_i15)) {
          emlrtDynamicBoundsCheckR2012b(c10_b_idx_lb, 1, c10_i15,
            &c10_tq_emlrtBCI, (emlrtConstCTX)c10_sp);
        }

        c10_ratio = -c10_solution->xstar[c10_b_idx_lb - 1] -
          c10_i_workingset->lb[c10_b_idx_lb - 1];
        c10_p_x = c10_ratio;
        c10_q_x = c10_p_x;
        c10_r_x = c10_q_x;
        c10_c_varargin_1 = muDoubleScalarAbs(c10_r_x);
        c10_varargin_2 = 1.0E-8 - c10_ratio;
        c10_y_x = c10_c_varargin_1;
        c10_b_y = c10_varargin_2;
        c10_ab_x = c10_y_x;
        c10_c_y = c10_b_y;
        c10_db_x = c10_ab_x;
        c10_f_y = c10_c_y;
        c10_d_a = c10_db_x;
        c10_h_b = c10_f_y;
        c10_ib_x = c10_d_a;
        c10_k_y = c10_h_b;
        c10_jb_x = c10_ib_x;
        c10_m_y = c10_k_y;
        c10_minval = muDoubleScalarMin(c10_jb_x, c10_m_y);
        c10_i18 = c10_solution->searchDir.size(0);
        if ((c10_b_idx_lb < 1) || (c10_b_idx_lb > c10_i18)) {
          emlrtDynamicBoundsCheckR2012b(c10_b_idx_lb, 1, c10_i18,
            &c10_tq_emlrtBCI, (emlrtConstCTX)c10_sp);
        }

        c10_alphaTemp = c10_minval / -c10_solution->searchDir[c10_b_idx_lb - 1];
        if (c10_alphaTemp < *c10_alpha) {
          *c10_alpha = c10_alphaTemp;
          *c10_constrType = 4;
          *c10_constrIdx = c10_totalLB;
          *c10_newBlocking = true;
        }
      }
    }
  }

  if (c10_nWUB < c10_totalUB) {
    c10_i2 = c10_solution->xstar.size(0);
    if ((c10_nVar < 1) || (c10_nVar > c10_i2)) {
      emlrtDynamicBoundsCheckR2012b(c10_nVar, 1, c10_i2, &c10_tq_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_phaseOneCorrectionX = static_cast<real_T>(c10_isPhaseOne) *
      c10_solution->xstar[c10_nVar - 1];
    c10_i4 = c10_solution->searchDir.size(0);
    if ((c10_nVar < 1) || (c10_nVar > c10_i4)) {
      emlrtDynamicBoundsCheckR2012b(c10_nVar, 1, c10_i4, &c10_tq_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_phaseOneCorrectionP = static_cast<real_T>(c10_isPhaseOne) *
      c10_solution->searchDir[c10_nVar - 1];
    c10_st.site = &c10_ej_emlrtRSI;
    c10_e_b = c10_totalUB;
    c10_g_b = c10_e_b;
    if (c10_g_b < 1) {
      c10_b_overflow = false;
    } else {
      c10_b_overflow = (c10_g_b > 2147483646);
    }

    if (c10_b_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_b_idx = 0; c10_b_idx < c10_totalUB; c10_b_idx++) {
      c10_c_idx = c10_b_idx + 1;
      c10_i8 = c10_i_workingset->indexUB.size(0);
      if ((c10_c_idx < 1) || (c10_c_idx > c10_i8)) {
        emlrtDynamicBoundsCheckR2012b(c10_c_idx, 1, c10_i8, &c10_tq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_idx_ub = c10_i_workingset->indexUB[c10_c_idx - 1];
      c10_i11 = c10_solution->searchDir.size(0);
      if ((c10_b_idx_ub < 1) || (c10_b_idx_ub > c10_i11)) {
        emlrtDynamicBoundsCheckR2012b(c10_b_idx_ub, 1, c10_i11, &c10_tq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_pk_corrected = c10_solution->searchDir[c10_b_idx_ub - 1] -
        c10_phaseOneCorrectionP;
      if (c10_pk_corrected > c10_denomTol) {
        c10_st.site = &c10_ej_emlrtRSI;
        c10_c_idx_local = c10_c_idx - 1;
        c10_c_idxConstr = c10_i_workingset->isActiveIdx[4] + c10_c_idx_local;
        if ((c10_c_idxConstr < 1) || (c10_c_idxConstr >
             c10_i_workingset->isActiveConstr.size[0])) {
          emlrtDynamicBoundsCheckR2012b(c10_c_idxConstr, 1,
            c10_i_workingset->isActiveConstr.size[0], &c10_sp_emlrtBCI, &c10_st);
        }

        c10_c_tf = c10_i_workingset->isActiveConstr.data[c10_c_idxConstr - 1];
        if (!c10_c_tf) {
          c10_i14 = c10_solution->xstar.size(0);
          if ((c10_b_idx_ub < 1) || (c10_b_idx_ub > c10_i14)) {
            emlrtDynamicBoundsCheckR2012b(c10_b_idx_ub, 1, c10_i14,
              &c10_tq_emlrtBCI, (emlrtConstCTX)c10_sp);
          }

          c10_i17 = c10_i_workingset->ub.size(0);
          if ((c10_b_idx_ub < 1) || (c10_b_idx_ub > c10_i17)) {
            emlrtDynamicBoundsCheckR2012b(c10_b_idx_ub, 1, c10_i17,
              &c10_tq_emlrtBCI, (emlrtConstCTX)c10_sp);
          }

          c10_ratio = (c10_solution->xstar[c10_b_idx_ub - 1] -
                       c10_i_workingset->ub[c10_b_idx_ub - 1]) -
            c10_phaseOneCorrectionX;
          c10_t_x = c10_ratio;
          c10_v_x = c10_t_x;
          c10_x_x = c10_v_x;
          c10_e_varargin_1 = muDoubleScalarAbs(c10_x_x);
          c10_c_varargin_2 = 1.0E-8 - c10_ratio;
          c10_cb_x = c10_e_varargin_1;
          c10_e_y = c10_c_varargin_2;
          c10_fb_x = c10_cb_x;
          c10_h_y = c10_e_y;
          c10_hb_x = c10_fb_x;
          c10_j_y = c10_h_y;
          c10_f_a = c10_hb_x;
          c10_k_b = c10_j_y;
          c10_mb_x = c10_f_a;
          c10_p_y = c10_k_b;
          c10_pb_x = c10_mb_x;
          c10_r_y = c10_p_y;
          c10_c_minval = muDoubleScalarMin(c10_pb_x, c10_r_y);
          c10_alphaTemp = c10_c_minval / c10_pk_corrected;
          if (c10_alphaTemp < *c10_alpha) {
            *c10_alpha = c10_alphaTemp;
            *c10_constrType = 5;
            *c10_constrIdx = c10_c_idx;
            *c10_newBlocking = true;
          }
        }
      }
    }
  }

  if (c10_isPhaseOne) {
    c10_varargin_1 = *c10_alpha;
    c10_b_x = c10_varargin_1;
    c10_c_x = c10_b_x;
    c10_e_x = c10_c_x;
    c10_b_a = c10_e_x;
    c10_j_x = c10_b_a;
    c10_k_x = c10_j_x;
    *c10_alpha = muDoubleScalarMin(c10_k_x, 1.7976931348623157E+308);
  } else {
    if ((*c10_newBlocking) && (*c10_alpha > 1.0)) {
      *c10_newBlocking = false;
    }

    c10_b_varargin_1 = *c10_alpha;
    c10_d_x = c10_b_varargin_1;
    c10_f_x = c10_d_x;
    c10_g_x = c10_f_x;
    c10_c_a = c10_g_x;
    c10_m_x = c10_c_a;
    c10_o_x = c10_m_x;
    *c10_alpha = muDoubleScalarMin(c10_o_x, 1.0);
  }
}

static void c10_b_ratiotest(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_flSfA4tA26WyP6kjP59eL *c10_i_workingset, real_T *c10_toldelta, real_T
  *c10_alpha, boolean_T *c10_newBlocking, int32_T *c10_constrType, int32_T
  *c10_constrIdx)
{
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 1U> c10_x;
  emlrtStack c10_b_st;
  emlrtStack c10_st;
  real_T c10_ab_x;
  real_T c10_ab_y;
  real_T c10_ac_x;
  real_T c10_ad_x;
  real_T c10_alphaTemp;
  real_T c10_b_a;
  real_T c10_b_minval;
  real_T c10_b_varargin_1;
  real_T c10_b_varargin_2;
  real_T c10_b_x;
  real_T c10_b_y;
  real_T c10_bb_x;
  real_T c10_bb_y;
  real_T c10_bc_x;
  real_T c10_bd_x;
  real_T c10_c_a;
  real_T c10_c_minval;
  real_T c10_c_varargin_1;
  real_T c10_c_varargin_2;
  real_T c10_c_x;
  real_T c10_c_y;
  real_T c10_cb_x;
  real_T c10_cb_y;
  real_T c10_cc_x;
  real_T c10_cd_x;
  real_T c10_d_a;
  real_T c10_d_minval;
  real_T c10_d_varargin_1;
  real_T c10_d_varargin_2;
  real_T c10_d_x;
  real_T c10_d_y;
  real_T c10_db_x;
  real_T c10_db_y;
  real_T c10_dc_x;
  real_T c10_dd_x;
  real_T c10_denomTol;
  real_T c10_e_a;
  real_T c10_e_minval;
  real_T c10_e_varargin_1;
  real_T c10_e_varargin_2;
  real_T c10_e_x;
  real_T c10_e_y;
  real_T c10_eb_x;
  real_T c10_eb_y;
  real_T c10_ec_x;
  real_T c10_ed_x;
  real_T c10_f_a;
  real_T c10_f_minval;
  real_T c10_f_varargin_1;
  real_T c10_f_varargin_2;
  real_T c10_f_x;
  real_T c10_f_y;
  real_T c10_fb_x;
  real_T c10_fb_y;
  real_T c10_fc_x;
  real_T c10_fd_x;
  real_T c10_g_a;
  real_T c10_g_varargin_1;
  real_T c10_g_varargin_2;
  real_T c10_g_x;
  real_T c10_g_y;
  real_T c10_gb_x;
  real_T c10_gb_y;
  real_T c10_gc_x;
  real_T c10_gd_x;
  real_T c10_h_a;
  real_T c10_h_b;
  real_T c10_h_varargin_1;
  real_T c10_h_y;
  real_T c10_hb_x;
  real_T c10_hb_y;
  real_T c10_hc_x;
  real_T c10_hd_x;
  real_T c10_i_a;
  real_T c10_i_y;
  real_T c10_ib_x;
  real_T c10_ib_y;
  real_T c10_ic_x;
  real_T c10_j_b;
  real_T c10_j_x;
  real_T c10_j_y;
  real_T c10_jb_x;
  real_T c10_jb_y;
  real_T c10_jc_x;
  real_T c10_jd_x;
  real_T c10_k_b;
  real_T c10_k_x;
  real_T c10_k_y;
  real_T c10_kb_x;
  real_T c10_kb_y;
  real_T c10_kc_x;
  real_T c10_kd_x;
  real_T c10_m_x;
  real_T c10_m_y;
  real_T c10_mb_x;
  real_T c10_mb_y;
  real_T c10_mc_x;
  real_T c10_minval;
  real_T c10_o_b;
  real_T c10_o_x;
  real_T c10_o_y;
  real_T c10_ob_x;
  real_T c10_ob_y;
  real_T c10_oc_x;
  real_T c10_p_b;
  real_T c10_p_max;
  real_T c10_p_x;
  real_T c10_p_y;
  real_T c10_pb_x;
  real_T c10_pb_y;
  real_T c10_pc_x;
  real_T c10_phaseOneCorrectionP;
  real_T c10_phaseOneCorrectionX;
  real_T c10_pk_corrected;
  real_T c10_q_b;
  real_T c10_q_x;
  real_T c10_q_y;
  real_T c10_qb_x;
  real_T c10_qb_y;
  real_T c10_qc_x;
  real_T c10_r_x;
  real_T c10_r_y;
  real_T c10_ratio;
  real_T c10_rb_x;
  real_T c10_rb_y;
  real_T c10_rc_x;
  real_T c10_s_b;
  real_T c10_s_x;
  real_T c10_s_y;
  real_T c10_sb_x;
  real_T c10_sc_x;
  real_T c10_t_x;
  real_T c10_t_y;
  real_T c10_tb_x;
  real_T c10_tc_x;
  real_T c10_u_x;
  real_T c10_u_y;
  real_T c10_ub_x;
  real_T c10_uc_x;
  real_T c10_v_x;
  real_T c10_v_y;
  real_T c10_varargin_1;
  real_T c10_varargin_2;
  real_T c10_vb_x;
  real_T c10_vc_x;
  real_T c10_w_x;
  real_T c10_w_y;
  real_T c10_wb_x;
  real_T c10_wc_x;
  real_T c10_x_x;
  real_T c10_x_y;
  real_T c10_xb_x;
  real_T c10_xc_x;
  real_T c10_y;
  real_T c10_y_x;
  real_T c10_y_y;
  real_T c10_yb_x;
  real_T c10_yc_x;
  int32_T c10_b;
  int32_T c10_b_idx;
  int32_T c10_b_idxConstr;
  int32_T c10_b_idx_lb;
  int32_T c10_b_idx_local;
  int32_T c10_b_idx_ub;
  int32_T c10_c_idx;
  int32_T c10_c_idxConstr;
  int32_T c10_c_idx_local;
  int32_T c10_e_b;
  int32_T c10_f_b;
  int32_T c10_f_n;
  int32_T c10_g_b;
  int32_T c10_h_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i19;
  int32_T c10_i2;
  int32_T c10_i20;
  int32_T c10_i21;
  int32_T c10_i22;
  int32_T c10_i23;
  int32_T c10_i24;
  int32_T c10_i25;
  int32_T c10_i26;
  int32_T c10_i27;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_i_n;
  int32_T c10_idx;
  int32_T c10_idxConstr;
  int32_T c10_idx_local;
  int32_T c10_loop_ub;
  int32_T c10_nVar;
  int32_T c10_nWLB;
  int32_T c10_nWUB;
  int32_T c10_nWineq;
  int32_T c10_totalLB;
  int32_T c10_totalUB;
  int32_T c10_var;
  boolean_T c10_b_overflow;
  boolean_T c10_b_tf;
  boolean_T c10_c_tf;
  boolean_T c10_overflow;
  boolean_T c10_tf;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_totalLB = c10_i_workingset->sizes[3];
  c10_totalUB = c10_i_workingset->sizes[4];
  c10_nWineq = c10_i_workingset->nWConstr[2];
  c10_nWLB = c10_i_workingset->nWConstr[3];
  c10_nWUB = c10_i_workingset->nWConstr[4];
  c10_nVar = c10_i_workingset->nVar;
  *c10_alpha = 1.0E+30;
  *c10_newBlocking = false;
  *c10_constrType = 0;
  *c10_constrIdx = 0;
  c10_p_max = 0.0;
  c10_f_n = c10_nVar;
  c10_x.set_size(&c10_pg_emlrtRTEI, c10_sp, c10_solution->searchDir.size(0));
  c10_loop_ub = c10_solution->searchDir.size(0) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_x[c10_i] = c10_solution->searchDir[c10_i];
  }

  if (c10_f_n < 1) {
    c10_y = 0.0;
  } else {
    c10_h_n = c10_f_n;
    c10_i_n = c10_h_n;
    c10_var = c10_i_n;
    c10_n_t = (ptrdiff_t)c10_var;
    c10_incx_t = (ptrdiff_t)1;
    c10_y = dnrm2(&c10_n_t, &(c10_x.data())[0], &c10_incx_t);
  }

  c10_denomTol = 2.2204460492503131E-13 * c10_y;
  if (c10_nWineq < 0) {
    c10_st.site = &c10_fj_emlrtRSI;
  }

  if (c10_nWLB < c10_totalLB) {
    c10_i1 = c10_solution->xstar.size(0);
    if ((c10_nVar < 1) || (c10_nVar > c10_i1)) {
      emlrtDynamicBoundsCheckR2012b(c10_nVar, 1, c10_i1, &c10_uq_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_phaseOneCorrectionX = 0.0 * c10_solution->xstar[c10_nVar - 1];
    c10_i3 = c10_solution->searchDir.size(0);
    if ((c10_nVar < 1) || (c10_nVar > c10_i3)) {
      emlrtDynamicBoundsCheckR2012b(c10_nVar, 1, c10_i3, &c10_uq_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_phaseOneCorrectionP = 0.0 * c10_solution->searchDir[c10_nVar - 1];
    c10_i5 = c10_totalLB - 2;
    c10_st.site = &c10_fj_emlrtRSI;
    c10_b = c10_i5 + 1;
    c10_f_b = c10_b;
    if (c10_f_b < 1) {
      c10_overflow = false;
    } else {
      c10_overflow = (c10_f_b > 2147483646);
    }

    if (c10_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_idx = 0; c10_idx <= c10_i5; c10_idx++) {
      c10_c_idx = c10_idx + 1;
      c10_i7 = c10_i_workingset->indexLB.size(0);
      if ((c10_c_idx < 1) || (c10_c_idx > c10_i7)) {
        emlrtDynamicBoundsCheckR2012b(c10_c_idx, 1, c10_i7, &c10_uq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_idx_lb = c10_i_workingset->indexLB[c10_c_idx - 1];
      c10_i10 = c10_solution->searchDir.size(0);
      if ((c10_b_idx_lb < 1) || (c10_b_idx_lb > c10_i10)) {
        emlrtDynamicBoundsCheckR2012b(c10_b_idx_lb, 1, c10_i10, &c10_uq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_pk_corrected = -c10_solution->searchDir[c10_b_idx_lb - 1] -
        c10_phaseOneCorrectionP;
      if (c10_pk_corrected > c10_denomTol) {
        c10_st.site = &c10_fj_emlrtRSI;
        c10_b_idx_local = c10_c_idx - 1;
        c10_b_idxConstr = c10_i_workingset->isActiveIdx[3] + c10_b_idx_local;
        if ((c10_b_idxConstr < 1) || (c10_b_idxConstr >
             c10_i_workingset->isActiveConstr.size[0])) {
          emlrtDynamicBoundsCheckR2012b(c10_b_idxConstr, 1,
            c10_i_workingset->isActiveConstr.size[0], &c10_sp_emlrtBCI, &c10_st);
        }

        c10_b_tf = c10_i_workingset->isActiveConstr.data[c10_b_idxConstr - 1];
        if (!c10_b_tf) {
          c10_i13 = c10_solution->xstar.size(0);
          if ((c10_b_idx_lb < 1) || (c10_b_idx_lb > c10_i13)) {
            emlrtDynamicBoundsCheckR2012b(c10_b_idx_lb, 1, c10_i13,
              &c10_uq_emlrtBCI, (emlrtConstCTX)c10_sp);
          }

          c10_i16 = c10_i_workingset->lb.size(0);
          if ((c10_b_idx_lb < 1) || (c10_b_idx_lb > c10_i16)) {
            emlrtDynamicBoundsCheckR2012b(c10_b_idx_lb, 1, c10_i16,
              &c10_uq_emlrtBCI, (emlrtConstCTX)c10_sp);
          }

          c10_ratio = ((-c10_solution->xstar[c10_b_idx_lb - 1] -
                        c10_i_workingset->lb[c10_b_idx_lb - 1]) - *c10_toldelta)
            - c10_phaseOneCorrectionX;
          c10_s_x = c10_ratio;
          c10_u_x = c10_s_x;
          c10_w_x = c10_u_x;
          c10_d_varargin_1 = muDoubleScalarAbs(c10_w_x);
          c10_c_varargin_2 = 1.0E-8 - c10_ratio;
          c10_bb_x = c10_d_varargin_1;
          c10_i_y = c10_c_varargin_2;
          c10_eb_x = c10_bb_x;
          c10_m_y = c10_i_y;
          c10_gb_x = c10_eb_x;
          c10_p_y = c10_m_y;
          c10_e_a = c10_gb_x;
          c10_k_b = c10_p_y;
          c10_kb_x = c10_e_a;
          c10_t_y = c10_k_b;
          c10_ob_x = c10_kb_x;
          c10_v_y = c10_t_y;
          c10_b_minval = muDoubleScalarMin(c10_ob_x, c10_v_y);
          c10_alphaTemp = c10_b_minval / c10_pk_corrected;
          if (c10_alphaTemp <= *c10_alpha) {
            c10_qb_x = c10_pk_corrected;
            c10_sb_x = c10_qb_x;
            c10_ub_x = c10_sb_x;
            c10_x_y = muDoubleScalarAbs(c10_ub_x);
            if (c10_x_y > c10_p_max) {
              *c10_alpha = c10_alphaTemp;
              *c10_constrType = 4;
              *c10_constrIdx = c10_c_idx;
              *c10_newBlocking = true;
            }
          }

          c10_i20 = c10_solution->xstar.size(0);
          if ((c10_b_idx_lb < 1) || (c10_b_idx_lb > c10_i20)) {
            emlrtDynamicBoundsCheckR2012b(c10_b_idx_lb, 1, c10_i20,
              &c10_uq_emlrtBCI, (emlrtConstCTX)c10_sp);
          }

          c10_i23 = c10_i_workingset->lb.size(0);
          if ((c10_b_idx_lb < 1) || (c10_b_idx_lb > c10_i23)) {
            emlrtDynamicBoundsCheckR2012b(c10_b_idx_lb, 1, c10_i23,
              &c10_uq_emlrtBCI, (emlrtConstCTX)c10_sp);
          }

          c10_ratio = (-c10_solution->xstar[c10_b_idx_lb - 1] -
                       c10_i_workingset->lb[c10_b_idx_lb - 1]) -
            c10_phaseOneCorrectionX;
          c10_ac_x = c10_ratio;
          c10_dc_x = c10_ac_x;
          c10_gc_x = c10_dc_x;
          c10_f_varargin_1 = muDoubleScalarAbs(c10_gc_x);
          c10_e_varargin_2 = 1.0E-8 - c10_ratio;
          c10_jc_x = c10_f_varargin_1;
          c10_bb_y = c10_e_varargin_2;
          c10_oc_x = c10_jc_x;
          c10_eb_y = c10_bb_y;
          c10_rc_x = c10_oc_x;
          c10_hb_y = c10_eb_y;
          c10_g_a = c10_rc_x;
          c10_p_b = c10_hb_y;
          c10_uc_x = c10_g_a;
          c10_kb_y = c10_p_b;
          c10_xc_x = c10_uc_x;
          c10_pb_y = c10_kb_y;
          c10_d_minval = muDoubleScalarMin(c10_xc_x, c10_pb_y);
          c10_alphaTemp = c10_d_minval / c10_pk_corrected;
          if (c10_alphaTemp < *c10_alpha) {
            *c10_alpha = c10_alphaTemp;
            *c10_constrType = 4;
            *c10_constrIdx = c10_c_idx;
            *c10_newBlocking = true;
            c10_bd_x = c10_pk_corrected;
            c10_dd_x = c10_bd_x;
            c10_fd_x = c10_dd_x;
            c10_p_max = muDoubleScalarAbs(c10_fd_x);
          }
        }
      }
    }

    c10_i6 = c10_i_workingset->indexLB.size(0);
    if ((c10_totalLB < 1) || (c10_totalLB > c10_i6)) {
      emlrtDynamicBoundsCheckR2012b(c10_totalLB, 1, c10_i6, &c10_uq_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_b_idx_lb = c10_i_workingset->indexLB[c10_totalLB - 1];
    c10_i9 = c10_solution->searchDir.size(0);
    if ((c10_b_idx_lb < 1) || (c10_b_idx_lb > c10_i9)) {
      emlrtDynamicBoundsCheckR2012b(c10_b_idx_lb, 1, c10_i9, &c10_uq_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    if (-c10_solution->searchDir[c10_b_idx_lb - 1] > c10_denomTol) {
      c10_st.site = &c10_fj_emlrtRSI;
      c10_idx_local = c10_totalLB - 1;
      c10_idxConstr = c10_i_workingset->isActiveIdx[3] + c10_idx_local;
      if ((c10_idxConstr < 1) || (c10_idxConstr >
           c10_i_workingset->isActiveConstr.size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_idxConstr, 1,
          c10_i_workingset->isActiveConstr.size[0], &c10_sp_emlrtBCI, &c10_st);
      }

      c10_tf = c10_i_workingset->isActiveConstr.data[c10_idxConstr - 1];
      if (!c10_tf) {
        c10_i12 = c10_solution->xstar.size(0);
        if ((c10_b_idx_lb < 1) || (c10_b_idx_lb > c10_i12)) {
          emlrtDynamicBoundsCheckR2012b(c10_b_idx_lb, 1, c10_i12,
            &c10_uq_emlrtBCI, (emlrtConstCTX)c10_sp);
        }

        c10_i15 = c10_i_workingset->lb.size(0);
        if ((c10_b_idx_lb < 1) || (c10_b_idx_lb > c10_i15)) {
          emlrtDynamicBoundsCheckR2012b(c10_b_idx_lb, 1, c10_i15,
            &c10_uq_emlrtBCI, (emlrtConstCTX)c10_sp);
        }

        c10_ratio = (-c10_solution->xstar[c10_b_idx_lb - 1] -
                     c10_i_workingset->lb[c10_b_idx_lb - 1]) - *c10_toldelta;
        c10_p_x = c10_ratio;
        c10_q_x = c10_p_x;
        c10_r_x = c10_q_x;
        c10_c_varargin_1 = muDoubleScalarAbs(c10_r_x);
        c10_b_varargin_2 = 1.0E-8 - c10_ratio;
        c10_y_x = c10_c_varargin_1;
        c10_g_y = c10_b_varargin_2;
        c10_ab_x = c10_y_x;
        c10_h_y = c10_g_y;
        c10_db_x = c10_ab_x;
        c10_k_y = c10_h_y;
        c10_d_a = c10_db_x;
        c10_j_b = c10_k_y;
        c10_ib_x = c10_d_a;
        c10_r_y = c10_j_b;
        c10_jb_x = c10_ib_x;
        c10_s_y = c10_r_y;
        c10_minval = muDoubleScalarMin(c10_jb_x, c10_s_y);
        c10_i18 = c10_solution->searchDir.size(0);
        if ((c10_b_idx_lb < 1) || (c10_b_idx_lb > c10_i18)) {
          emlrtDynamicBoundsCheckR2012b(c10_b_idx_lb, 1, c10_i18,
            &c10_uq_emlrtBCI, (emlrtConstCTX)c10_sp);
        }

        c10_alphaTemp = c10_minval / -c10_solution->searchDir[c10_b_idx_lb - 1];
        if (c10_alphaTemp <= *c10_alpha) {
          c10_i19 = c10_solution->searchDir.size(0);
          if ((c10_b_idx_lb < 1) || (c10_b_idx_lb > c10_i19)) {
            emlrtDynamicBoundsCheckR2012b(c10_b_idx_lb, 1, c10_i19,
              &c10_uq_emlrtBCI, (emlrtConstCTX)c10_sp);
          }

          c10_wb_x = c10_solution->searchDir[c10_b_idx_lb - 1];
          c10_xb_x = c10_wb_x;
          c10_yb_x = c10_xb_x;
          c10_ab_y = muDoubleScalarAbs(c10_yb_x);
          if (c10_ab_y > c10_p_max) {
            *c10_alpha = c10_alphaTemp;
            *c10_constrType = 4;
            *c10_constrIdx = c10_totalLB;
            *c10_newBlocking = true;
          }
        }

        c10_i22 = c10_solution->xstar.size(0);
        if ((c10_b_idx_lb < 1) || (c10_b_idx_lb > c10_i22)) {
          emlrtDynamicBoundsCheckR2012b(c10_b_idx_lb, 1, c10_i22,
            &c10_uq_emlrtBCI, (emlrtConstCTX)c10_sp);
        }

        c10_i25 = c10_i_workingset->lb.size(0);
        if ((c10_b_idx_lb < 1) || (c10_b_idx_lb > c10_i25)) {
          emlrtDynamicBoundsCheckR2012b(c10_b_idx_lb, 1, c10_i25,
            &c10_uq_emlrtBCI, (emlrtConstCTX)c10_sp);
        }

        c10_ratio = -c10_solution->xstar[c10_b_idx_lb - 1] -
          c10_i_workingset->lb[c10_b_idx_lb - 1];
        c10_cc_x = c10_ratio;
        c10_fc_x = c10_cc_x;
        c10_ic_x = c10_fc_x;
        c10_h_varargin_1 = muDoubleScalarAbs(c10_ic_x);
        c10_g_varargin_2 = 1.0E-8 - c10_ratio;
        c10_mc_x = c10_h_varargin_1;
        c10_db_y = c10_g_varargin_2;
        c10_qc_x = c10_mc_x;
        c10_gb_y = c10_db_y;
        c10_tc_x = c10_qc_x;
        c10_jb_y = c10_gb_y;
        c10_i_a = c10_tc_x;
        c10_s_b = c10_jb_y;
        c10_wc_x = c10_i_a;
        c10_ob_y = c10_s_b;
        c10_ad_x = c10_wc_x;
        c10_rb_y = c10_ob_y;
        c10_f_minval = muDoubleScalarMin(c10_ad_x, c10_rb_y);
        c10_i26 = c10_solution->searchDir.size(0);
        if ((c10_b_idx_lb < 1) || (c10_b_idx_lb > c10_i26)) {
          emlrtDynamicBoundsCheckR2012b(c10_b_idx_lb, 1, c10_i26,
            &c10_uq_emlrtBCI, (emlrtConstCTX)c10_sp);
        }

        c10_alphaTemp = c10_f_minval / -c10_solution->searchDir[c10_b_idx_lb - 1];
        if (c10_alphaTemp < *c10_alpha) {
          *c10_alpha = c10_alphaTemp;
          *c10_constrType = 4;
          *c10_constrIdx = c10_totalLB;
          *c10_newBlocking = true;
          c10_i27 = c10_solution->searchDir.size(0);
          if ((c10_b_idx_lb < 1) || (c10_b_idx_lb > c10_i27)) {
            emlrtDynamicBoundsCheckR2012b(c10_b_idx_lb, 1, c10_i27,
              &c10_uq_emlrtBCI, (emlrtConstCTX)c10_sp);
          }

          c10_hd_x = c10_solution->searchDir[c10_b_idx_lb - 1];
          c10_jd_x = c10_hd_x;
          c10_kd_x = c10_jd_x;
          c10_p_max = muDoubleScalarAbs(c10_kd_x);
        }
      }
    }
  }

  if (c10_nWUB < c10_totalUB) {
    c10_i2 = c10_solution->xstar.size(0);
    if ((c10_nVar < 1) || (c10_nVar > c10_i2)) {
      emlrtDynamicBoundsCheckR2012b(c10_nVar, 1, c10_i2, &c10_uq_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_phaseOneCorrectionX = 0.0 * c10_solution->xstar[c10_nVar - 1];
    c10_i4 = c10_solution->searchDir.size(0);
    if ((c10_nVar < 1) || (c10_nVar > c10_i4)) {
      emlrtDynamicBoundsCheckR2012b(c10_nVar, 1, c10_i4, &c10_uq_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_phaseOneCorrectionP = 0.0 * c10_solution->searchDir[c10_nVar - 1];
    c10_st.site = &c10_fj_emlrtRSI;
    c10_e_b = c10_totalUB;
    c10_g_b = c10_e_b;
    if (c10_g_b < 1) {
      c10_b_overflow = false;
    } else {
      c10_b_overflow = (c10_g_b > 2147483646);
    }

    if (c10_b_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_b_idx = 0; c10_b_idx < c10_totalUB; c10_b_idx++) {
      c10_c_idx = c10_b_idx + 1;
      c10_i8 = c10_i_workingset->indexUB.size(0);
      if ((c10_c_idx < 1) || (c10_c_idx > c10_i8)) {
        emlrtDynamicBoundsCheckR2012b(c10_c_idx, 1, c10_i8, &c10_uq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_b_idx_ub = c10_i_workingset->indexUB[c10_c_idx - 1];
      c10_i11 = c10_solution->searchDir.size(0);
      if ((c10_b_idx_ub < 1) || (c10_b_idx_ub > c10_i11)) {
        emlrtDynamicBoundsCheckR2012b(c10_b_idx_ub, 1, c10_i11, &c10_uq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_pk_corrected = c10_solution->searchDir[c10_b_idx_ub - 1] -
        c10_phaseOneCorrectionP;
      if (c10_pk_corrected > c10_denomTol) {
        c10_st.site = &c10_fj_emlrtRSI;
        c10_c_idx_local = c10_c_idx - 1;
        c10_c_idxConstr = c10_i_workingset->isActiveIdx[4] + c10_c_idx_local;
        if ((c10_c_idxConstr < 1) || (c10_c_idxConstr >
             c10_i_workingset->isActiveConstr.size[0])) {
          emlrtDynamicBoundsCheckR2012b(c10_c_idxConstr, 1,
            c10_i_workingset->isActiveConstr.size[0], &c10_sp_emlrtBCI, &c10_st);
        }

        c10_c_tf = c10_i_workingset->isActiveConstr.data[c10_c_idxConstr - 1];
        if (!c10_c_tf) {
          c10_i14 = c10_solution->xstar.size(0);
          if ((c10_b_idx_ub < 1) || (c10_b_idx_ub > c10_i14)) {
            emlrtDynamicBoundsCheckR2012b(c10_b_idx_ub, 1, c10_i14,
              &c10_uq_emlrtBCI, (emlrtConstCTX)c10_sp);
          }

          c10_i17 = c10_i_workingset->ub.size(0);
          if ((c10_b_idx_ub < 1) || (c10_b_idx_ub > c10_i17)) {
            emlrtDynamicBoundsCheckR2012b(c10_b_idx_ub, 1, c10_i17,
              &c10_uq_emlrtBCI, (emlrtConstCTX)c10_sp);
          }

          c10_ratio = ((c10_solution->xstar[c10_b_idx_ub - 1] -
                        c10_i_workingset->ub[c10_b_idx_ub - 1]) - *c10_toldelta)
            - c10_phaseOneCorrectionX;
          c10_t_x = c10_ratio;
          c10_v_x = c10_t_x;
          c10_x_x = c10_v_x;
          c10_e_varargin_1 = muDoubleScalarAbs(c10_x_x);
          c10_d_varargin_2 = 1.0E-8 - c10_ratio;
          c10_cb_x = c10_e_varargin_1;
          c10_j_y = c10_d_varargin_2;
          c10_fb_x = c10_cb_x;
          c10_o_y = c10_j_y;
          c10_hb_x = c10_fb_x;
          c10_q_y = c10_o_y;
          c10_f_a = c10_hb_x;
          c10_o_b = c10_q_y;
          c10_mb_x = c10_f_a;
          c10_u_y = c10_o_b;
          c10_pb_x = c10_mb_x;
          c10_w_y = c10_u_y;
          c10_c_minval = muDoubleScalarMin(c10_pb_x, c10_w_y);
          c10_alphaTemp = c10_c_minval / c10_pk_corrected;
          if (c10_alphaTemp <= *c10_alpha) {
            c10_rb_x = c10_pk_corrected;
            c10_tb_x = c10_rb_x;
            c10_vb_x = c10_tb_x;
            c10_y_y = muDoubleScalarAbs(c10_vb_x);
            if (c10_y_y > c10_p_max) {
              *c10_alpha = c10_alphaTemp;
              *c10_constrType = 5;
              *c10_constrIdx = c10_c_idx;
              *c10_newBlocking = true;
            }
          }

          c10_i21 = c10_solution->xstar.size(0);
          if ((c10_b_idx_ub < 1) || (c10_b_idx_ub > c10_i21)) {
            emlrtDynamicBoundsCheckR2012b(c10_b_idx_ub, 1, c10_i21,
              &c10_uq_emlrtBCI, (emlrtConstCTX)c10_sp);
          }

          c10_i24 = c10_i_workingset->ub.size(0);
          if ((c10_b_idx_ub < 1) || (c10_b_idx_ub > c10_i24)) {
            emlrtDynamicBoundsCheckR2012b(c10_b_idx_ub, 1, c10_i24,
              &c10_uq_emlrtBCI, (emlrtConstCTX)c10_sp);
          }

          c10_ratio = (c10_solution->xstar[c10_b_idx_ub - 1] -
                       c10_i_workingset->ub[c10_b_idx_ub - 1]) -
            c10_phaseOneCorrectionX;
          c10_bc_x = c10_ratio;
          c10_ec_x = c10_bc_x;
          c10_hc_x = c10_ec_x;
          c10_g_varargin_1 = muDoubleScalarAbs(c10_hc_x);
          c10_f_varargin_2 = 1.0E-8 - c10_ratio;
          c10_kc_x = c10_g_varargin_1;
          c10_cb_y = c10_f_varargin_2;
          c10_pc_x = c10_kc_x;
          c10_fb_y = c10_cb_y;
          c10_sc_x = c10_pc_x;
          c10_ib_y = c10_fb_y;
          c10_h_a = c10_sc_x;
          c10_q_b = c10_ib_y;
          c10_vc_x = c10_h_a;
          c10_mb_y = c10_q_b;
          c10_yc_x = c10_vc_x;
          c10_qb_y = c10_mb_y;
          c10_e_minval = muDoubleScalarMin(c10_yc_x, c10_qb_y);
          c10_alphaTemp = c10_e_minval / c10_pk_corrected;
          if (c10_alphaTemp < *c10_alpha) {
            *c10_alpha = c10_alphaTemp;
            *c10_constrType = 5;
            *c10_constrIdx = c10_c_idx;
            *c10_newBlocking = true;
            c10_cd_x = c10_pk_corrected;
            c10_ed_x = c10_cd_x;
            c10_gd_x = c10_ed_x;
            c10_p_max = muDoubleScalarAbs(c10_gd_x);
          }
        }
      }
    }
  }

  *c10_toldelta += 6.608625846508183E-7;
  if (c10_p_max > 0.0) {
    c10_varargin_1 = *c10_alpha;
    c10_varargin_2 = 6.608625846508183E-7 / c10_p_max;
    c10_b_x = c10_varargin_1;
    c10_b_y = c10_varargin_2;
    c10_d_x = c10_b_x;
    c10_c_y = c10_b_y;
    c10_g_x = c10_d_x;
    c10_d_y = c10_c_y;
    c10_c_a = c10_g_x;
    c10_h_b = c10_d_y;
    c10_m_x = c10_c_a;
    c10_e_y = c10_h_b;
    c10_o_x = c10_m_x;
    c10_f_y = c10_e_y;
    *c10_alpha = muDoubleScalarMax(c10_o_x, c10_f_y);
  }

  if ((*c10_newBlocking) && (*c10_alpha > 1.0)) {
    *c10_newBlocking = false;
  }

  c10_b_varargin_1 = *c10_alpha;
  c10_c_x = c10_b_varargin_1;
  c10_e_x = c10_c_x;
  c10_f_x = c10_e_x;
  c10_b_a = c10_f_x;
  c10_j_x = c10_b_a;
  c10_k_x = c10_j_x;
  *c10_alpha = muDoubleScalarMin(c10_k_x, 1.0);
}

static void c10_b_addBoundToActiveSetMatrix_(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_b_obj, int32_T c10_idx_local)
{
  emlrtStack c10_b_st;
  emlrtStack c10_st;
  int32_T c10_b;
  int32_T c10_b_a;
  int32_T c10_b_idx;
  int32_T c10_b_idx_global;
  int32_T c10_b_idx_local;
  int32_T c10_c_a;
  int32_T c10_c_idx;
  int32_T c10_colOffset;
  int32_T c10_e_b;
  int32_T c10_f_b;
  int32_T c10_g_b;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_idx;
  int32_T c10_idxConstr;
  int32_T c10_idx_bnd_local;
  int32_T c10_idx_global;
  boolean_T c10_b_overflow;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_st.site = &c10_ij_emlrtRSI;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_b_idx_local = c10_idx_local;
  c10_b_obj->nWConstr[4]++;
  c10_idxConstr = c10_b_obj->isActiveIdx[4] + c10_b_idx_local;
  c10_i = c10_idxConstr - 1;
  if ((c10_i < 1) || (c10_i > c10_b_obj->isActiveConstr.size[0])) {
    emlrtDynamicBoundsCheckR2012b(c10_i, 1, c10_b_obj->isActiveConstr.size[0],
      &c10_bq_emlrtBCI, &c10_st);
  }

  c10_b_obj->isActiveConstr.data[c10_i - 1] = true;
  c10_b_obj->nActiveConstr++;
  c10_idx_global = c10_b_obj->nActiveConstr;
  if ((c10_idx_global < 1) || (c10_idx_global > c10_b_obj->Wid.size[0])) {
    emlrtDynamicBoundsCheckR2012b(c10_idx_global, 1, c10_b_obj->Wid.size[0],
      &c10_bq_emlrtBCI, &c10_st);
  }

  c10_b_obj->Wid.data[c10_idx_global - 1] = 5;
  if ((c10_idx_global < 1) || (c10_idx_global > c10_b_obj->Wlocalidx.size[0])) {
    emlrtDynamicBoundsCheckR2012b(c10_idx_global, 1, c10_b_obj->Wlocalidx.size[0],
      &c10_bq_emlrtBCI, &c10_st);
  }

  c10_b_obj->Wlocalidx.data[c10_idx_global - 1] = c10_b_idx_local;
  c10_b_idx_global = c10_b_obj->nActiveConstr;
  c10_colOffset = c10_b_obj->ldA * (c10_b_idx_global - 1);
  c10_i1 = c10_b_obj->indexUB.size(0);
  if ((c10_idx_local < 1) || (c10_idx_local > c10_i1)) {
    emlrtDynamicBoundsCheckR2012b(c10_idx_local, 1, c10_i1, &c10_dq_emlrtBCI,
      (emlrtConstCTX)c10_sp);
  }

  c10_idx_bnd_local = c10_b_obj->indexUB[c10_idx_local - 1];
  c10_i2 = c10_b_obj->ub.size(0);
  if ((c10_idx_bnd_local < 1) || (c10_idx_bnd_local > c10_i2)) {
    emlrtDynamicBoundsCheckR2012b(c10_idx_bnd_local, 1, c10_i2, &c10_dq_emlrtBCI,
      (emlrtConstCTX)c10_sp);
  }

  if ((c10_b_idx_global < 1) || (c10_b_idx_global > c10_b_obj->bwset.size[0])) {
    emlrtDynamicBoundsCheckR2012b(c10_b_idx_global, 1, c10_b_obj->bwset.size[0],
      &c10_dq_emlrtBCI, (emlrtConstCTX)c10_sp);
  }

  c10_b_obj->bwset.data[c10_b_idx_global - 1] = c10_b_obj->ub[c10_idx_bnd_local
    - 1];
  c10_i3 = c10_idx_bnd_local - 1;
  c10_st.site = &c10_ij_emlrtRSI;
  c10_b = c10_i3;
  c10_e_b = c10_b;
  if (c10_e_b < 1) {
    c10_overflow = false;
  } else {
    c10_overflow = (c10_e_b > 2147483646);
  }

  if (c10_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  c10_i4 = static_cast<uint8_T>(c10_i3) - 1;
  for (c10_idx = 0; c10_idx <= c10_i4; c10_idx++) {
    c10_b_idx = c10_idx;
    c10_i7 = c10_b_obj->ATwset.size(0);
    c10_i8 = (c10_b_idx + c10_colOffset) + 1;
    if ((c10_i8 < 1) || (c10_i8 > c10_i7)) {
      emlrtDynamicBoundsCheckR2012b(c10_i8, 1, c10_i7, &c10_dq_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->ATwset[c10_i8 - 1] = 0.0;
  }

  c10_i5 = c10_b_obj->ATwset.size(0);
  c10_i6 = c10_idx_bnd_local + c10_colOffset;
  if ((c10_i6 < 1) || (c10_i6 > c10_i5)) {
    emlrtDynamicBoundsCheckR2012b(c10_i6, 1, c10_i5, &c10_dq_emlrtBCI,
      (emlrtConstCTX)c10_sp);
  }

  c10_b_obj->ATwset[c10_i6 - 1] = 1.0;
  c10_i9 = c10_idx_bnd_local + 1;
  c10_i10 = c10_b_obj->nVar;
  c10_st.site = &c10_ij_emlrtRSI;
  c10_b_a = c10_i9;
  c10_f_b = c10_i10;
  c10_c_a = c10_b_a;
  c10_g_b = c10_f_b;
  if (c10_c_a > c10_g_b) {
    c10_b_overflow = false;
  } else {
    c10_b_overflow = (c10_g_b > 2147483646);
  }

  if (c10_b_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  for (c10_c_idx = c10_i9; c10_c_idx <= c10_i10; c10_c_idx++) {
    c10_i11 = c10_b_obj->ATwset.size(0);
    c10_i13 = c10_c_idx + c10_colOffset;
    if ((c10_i13 < 1) || (c10_i13 > c10_i11)) {
      emlrtDynamicBoundsCheckR2012b(c10_i13, 1, c10_i11, &c10_dq_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->ATwset[c10_i13 - 1] = 0.0;
  }

  switch (c10_b_obj->probType) {
   case 3:
   case 2:
    break;

   default:
    c10_i12 = c10_b_obj->ATwset.size(0);
    c10_i14 = c10_b_obj->nVar + c10_colOffset;
    if ((c10_i14 < 1) || (c10_i14 > c10_i12)) {
      emlrtDynamicBoundsCheckR2012b(c10_i14, 1, c10_i12, &c10_dq_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->ATwset[c10_i14 - 1] = -1.0;
    break;
  }
}

static void c10_b_checkStoppingAndUpdateFval(SFc10_ACCMPCInstanceStruct
  *chartInstance, const emlrtStack *c10_sp, int32_T *c10_activeSetChangeID,
  coder::array<real_T, 1U> &c10_f, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_pIaUYPkQBTqVmAKxFPiGQF *c10_memspace, c10_s_saWPFfMboRdWeRqIEJ4x8C
  *c10_objective, c10_s_flSfA4tA26WyP6kjP59eL *c10_i_workingset,
  c10_s_l1Gll5dfO9DpqQrvRqAf7E *c10_b_qrmanager, c10_scZhlMkNxPxOgM0FLkVrfPH
  *c10_b_options, c10_sL9bDKomAYkxZSVrG9w6En c10_runTimeOptions, boolean_T
  c10_updateFval)
{
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 2U> c10_c_r;
  coder::array<real_T, 1U> c10_b_f;
  coder::array<real_T, 1U> c10_b_solution;
  coder::array<real_T, 1U> c10_c_solution;
  coder::array<real_T, 1U> c10_d_solution;
  coder::array<real_T, 1U> c10_d_x;
  coder::array<real_T, 1U> c10_y;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  real_T c10_constrViolation_new;
  real_T c10_d;
  real_T c10_d1;
  real_T c10_tempMaxConstr;
  int32_T c10_b_a;
  int32_T c10_b_idx;
  int32_T c10_b_loop_ub;
  int32_T c10_b_r;
  int32_T c10_b_t;
  int32_T c10_b_x;
  int32_T c10_c_loop_ub;
  int32_T c10_c_x;
  int32_T c10_d_loop_ub;
  int32_T c10_e_b;
  int32_T c10_e_loop_ub;
  int32_T c10_f_b;
  int32_T c10_f_loop_ub;
  int32_T c10_f_n;
  int32_T c10_g_loop_ub;
  int32_T c10_h_loop_ub;
  int32_T c10_h_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i19;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_i_loop_ub;
  int32_T c10_i_n;
  int32_T c10_idx;
  int32_T c10_j_loop_ub;
  int32_T c10_k_loop_ub;
  int32_T c10_loop_ub;
  int32_T c10_m_loop_ub;
  int32_T c10_nVar;
  int32_T c10_o_loop_ub;
  int32_T c10_objType;
  int32_T c10_p_loop_ub;
  int32_T c10_q_loop_ub;
  int32_T c10_r_loop_ub;
  int32_T c10_s_loop_ub;
  int32_T c10_var;
  int32_T c10_x;
  boolean_T c10_b;
  boolean_T c10_b1;
  boolean_T c10_nonDegenerateWset;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  c10_solution->iterations++;
  c10_nVar = c10_objective->nvar;
  c10_objType = c10_objective->objtype;
  if (c10_solution->iterations >= c10_runTimeOptions.MaxIterations) {
    if ((c10_solution->state == 1) && (c10_objType != 5)) {
      c10_b = true;
    } else {
      c10_b = false;
    }

    if (!c10_b) {
      c10_solution->state = 0;
    }
  }

  c10_x = c10_solution->iterations;
  c10_b_a = c10_x;
  c10_b_x = c10_b_a;
  c10_c_x = c10_b_x;
  c10_b_t = c10_div_nzp_s32_floor(chartInstance, c10_c_x, 50, 0, 0U, 0, 0);
  c10_b_t *= 50;
  c10_b_r = c10_c_x - c10_b_t;
  if (c10_b_r == 0) {
    c10_b_solution.set_size(&c10_qg_emlrtRTEI, c10_sp, c10_solution->xstar.size
      (0));
    c10_loop_ub = c10_solution->xstar.size(0) - 1;
    for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
      c10_b_solution[c10_i] = c10_solution->xstar[c10_i];
    }

    c10_st.site = &c10_mj_emlrtRSI;
    c10_d = c10_f_maxConstraintViolation(chartInstance, &c10_st,
      c10_i_workingset, c10_b_solution);
    c10_solution->maxConstr = c10_d;
    c10_tempMaxConstr = c10_solution->maxConstr;
    if (c10_objType == 5) {
      c10_i3 = c10_solution->xstar.size(0);
      if ((c10_nVar < 1) || (c10_nVar > c10_i3)) {
        emlrtDynamicBoundsCheckR2012b(c10_nVar, 1, c10_i3, &c10_vq_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_tempMaxConstr -= c10_solution->xstar[c10_nVar - 1];
    }

    if (c10_tempMaxConstr > 1.0E-8 * c10_runTimeOptions.ConstrRelTolFactor) {
      c10_st.site = &c10_mj_emlrtRSI;
      c10_f_n = c10_nVar;
      c10_d_x.set_size(&c10_qg_emlrtRTEI, &c10_st, c10_solution->xstar.size(0));
      c10_e_loop_ub = c10_solution->xstar.size(0) - 1;
      for (c10_i5 = 0; c10_i5 <= c10_e_loop_ub; c10_i5++) {
        c10_d_x[c10_i5] = c10_solution->xstar[c10_i5];
      }

      c10_y.set_size(&c10_qg_emlrtRTEI, &c10_st, c10_solution->searchDir.size(0));
      c10_g_loop_ub = c10_solution->searchDir.size(0) - 1;
      for (c10_i7 = 0; c10_i7 <= c10_g_loop_ub; c10_i7++) {
        c10_y[c10_i7] = c10_solution->searchDir[c10_i7];
      }

      c10_solution->searchDir.set_size(&c10_qg_emlrtRTEI, &c10_st, c10_y.size(0));
      c10_h_loop_ub = c10_y.size(0) - 1;
      for (c10_i8 = 0; c10_i8 <= c10_h_loop_ub; c10_i8++) {
        c10_solution->searchDir[c10_i8] = c10_y[c10_i8];
      }

      if (!(c10_f_n < 1)) {
        c10_b_st.site = &c10_ad_emlrtRSI;
        c10_h_n = c10_f_n;
        c10_y.set_size(&c10_bf_emlrtRTEI, &c10_b_st,
                       c10_solution->searchDir.size(0));
        c10_j_loop_ub = c10_solution->searchDir.size(0) - 1;
        for (c10_i10 = 0; c10_i10 <= c10_j_loop_ub; c10_i10++) {
          c10_y[c10_i10] = c10_solution->searchDir[c10_i10];
        }

        c10_solution->searchDir.set_size(&c10_qg_emlrtRTEI, &c10_b_st,
          c10_y.size(0));
        c10_m_loop_ub = c10_y.size(0) - 1;
        for (c10_i12 = 0; c10_i12 <= c10_m_loop_ub; c10_i12++) {
          c10_solution->searchDir[c10_i12] = c10_y[c10_i12];
        }

        c10_c_st.site = &c10_cd_emlrtRSI;
        c10_i_n = c10_h_n;
        c10_y.set_size(&c10_cf_emlrtRTEI, &c10_c_st,
                       c10_solution->searchDir.size(0));
        c10_p_loop_ub = c10_solution->searchDir.size(0) - 1;
        for (c10_i14 = 0; c10_i14 <= c10_p_loop_ub; c10_i14++) {
          c10_y[c10_i14] = c10_solution->searchDir[c10_i14];
        }

        c10_solution->searchDir.set_size(&c10_qg_emlrtRTEI, &c10_c_st,
          c10_y.size(0));
        c10_r_loop_ub = c10_y.size(0) - 1;
        for (c10_i16 = 0; c10_i16 <= c10_r_loop_ub; c10_i16++) {
          c10_solution->searchDir[c10_i16] = c10_y[c10_i16];
        }

        c10_var = c10_i_n;
        c10_n_t = (ptrdiff_t)c10_var;
        c10_incx_t = (ptrdiff_t)1;
        c10_incy_t = (ptrdiff_t)1;
        dcopy(&c10_n_t, &(c10_d_x.data())[0], &c10_incx_t,
              &(c10_solution->searchDir.data())[0], &c10_incy_t);
      }

      c10_d_x.set_size(&c10_qg_emlrtRTEI, c10_sp, c10_solution->searchDir.size(0));
      c10_i_loop_ub = c10_solution->searchDir.size(0) - 1;
      for (c10_i9 = 0; c10_i9 <= c10_i_loop_ub; c10_i9++) {
        c10_d_x[c10_i9] = c10_solution->searchDir[c10_i9];
      }

      c10_c_r.set_size(&c10_qg_emlrtRTEI, c10_sp,
                       c10_memspace->workspace_double.size(0),
                       c10_memspace->workspace_double.size(1));
      c10_k_loop_ub = c10_memspace->workspace_double.size(0) *
        c10_memspace->workspace_double.size(1) - 1;
      for (c10_i11 = 0; c10_i11 <= c10_k_loop_ub; c10_i11++) {
        c10_c_r[c10_i11] = c10_memspace->workspace_double[c10_i11];
      }

      c10_st.site = &c10_mj_emlrtRSI;
      c10_nonDegenerateWset = c10_b_feasibleX0ForWorkingSet(chartInstance,
        &c10_st, c10_c_r, c10_d_x, c10_i_workingset, c10_b_qrmanager);
      c10_solution->searchDir.set_size(&c10_qg_emlrtRTEI, c10_sp, c10_d_x.size(0));
      c10_o_loop_ub = c10_d_x.size(0) - 1;
      for (c10_i13 = 0; c10_i13 <= c10_o_loop_ub; c10_i13++) {
        c10_solution->searchDir[c10_i13] = c10_d_x[c10_i13];
      }

      c10_memspace->workspace_double.set_size(&c10_qg_emlrtRTEI, c10_sp,
        c10_c_r.size(0), c10_c_r.size(1));
      c10_q_loop_ub = c10_c_r.size(0) * c10_c_r.size(1) - 1;
      for (c10_i15 = 0; c10_i15 <= c10_q_loop_ub; c10_i15++) {
        c10_memspace->workspace_double[c10_i15] = c10_c_r[c10_i15];
      }

      if ((!c10_nonDegenerateWset) && (c10_solution->state != 0)) {
        c10_solution->state = -2;
      }

      *c10_activeSetChangeID = 0;
      c10_d_solution.set_size(&c10_qg_emlrtRTEI, c10_sp,
        c10_solution->searchDir.size(0));
      c10_s_loop_ub = c10_solution->searchDir.size(0) - 1;
      for (c10_i17 = 0; c10_i17 <= c10_s_loop_ub; c10_i17++) {
        c10_d_solution[c10_i17] = c10_solution->searchDir[c10_i17];
      }

      c10_st.site = &c10_mj_emlrtRSI;
      c10_constrViolation_new = c10_f_maxConstraintViolation(chartInstance,
        &c10_st, c10_i_workingset, c10_d_solution);
      if (c10_constrViolation_new < c10_solution->maxConstr) {
        c10_st.site = &c10_mj_emlrtRSI;
        c10_e_b = c10_nVar;
        c10_f_b = c10_e_b;
        if (c10_f_b < 1) {
          c10_overflow = false;
        } else {
          c10_overflow = (c10_f_b > 2147483646);
        }

        if (c10_overflow) {
          c10_b_st.site = &c10_v_emlrtRSI;
          c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
        }

        for (c10_idx = 0; c10_idx < c10_nVar; c10_idx++) {
          c10_b_idx = c10_idx + 1;
          c10_i18 = c10_solution->searchDir.size(0);
          if ((c10_b_idx < 1) || (c10_b_idx > c10_i18)) {
            emlrtDynamicBoundsCheckR2012b(c10_b_idx, 1, c10_i18,
              &c10_vq_emlrtBCI, (emlrtConstCTX)c10_sp);
          }

          c10_i19 = c10_solution->xstar.size(0);
          if ((c10_b_idx < 1) || (c10_b_idx > c10_i19)) {
            emlrtDynamicBoundsCheckR2012b(c10_b_idx, 1, c10_i19,
              &c10_vq_emlrtBCI, (emlrtConstCTX)c10_sp);
          }

          c10_solution->xstar[c10_b_idx - 1] = c10_solution->searchDir[c10_b_idx
            - 1];
        }

        c10_solution->maxConstr = c10_constrViolation_new;
      }
    }
  }

  if (c10_updateFval) {
    c10_c_r.set_size(&c10_qg_emlrtRTEI, c10_sp,
                     c10_memspace->workspace_double.size(0),
                     c10_memspace->workspace_double.size(1));
    c10_b_loop_ub = c10_memspace->workspace_double.size(0) *
      c10_memspace->workspace_double.size(1) - 1;
    for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
      c10_c_r[c10_i1] = c10_memspace->workspace_double[c10_i1];
    }

    c10_b_f.set_size(&c10_qg_emlrtRTEI, c10_sp, c10_f.size(0));
    c10_c_loop_ub = c10_f.size(0) - 1;
    for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
      c10_b_f[c10_i2] = c10_f[c10_i2];
    }

    c10_c_solution.set_size(&c10_qg_emlrtRTEI, c10_sp, c10_solution->xstar.size
      (0));
    c10_d_loop_ub = c10_solution->xstar.size(0) - 1;
    for (c10_i4 = 0; c10_i4 <= c10_d_loop_ub; c10_i4++) {
      c10_c_solution[c10_i4] = c10_solution->xstar[c10_i4];
    }

    c10_st.site = &c10_mj_emlrtRSI;
    c10_d1 = c10_b_computeFval_ReuseHx(chartInstance, &c10_st, c10_objective,
      c10_c_r, c10_b_f, c10_c_solution);
    c10_solution->fstar = c10_d1;
    c10_memspace->workspace_double.set_size(&c10_qg_emlrtRTEI, c10_sp,
      c10_c_r.size(0), c10_c_r.size(1));
    c10_f_loop_ub = c10_c_r.size(0) * c10_c_r.size(1) - 1;
    for (c10_i6 = 0; c10_i6 <= c10_f_loop_ub; c10_i6++) {
      c10_memspace->workspace_double[c10_i6] = c10_c_r[c10_i6];
    }

    if (c10_solution->fstar < c10_b_options->ObjectiveLimit) {
      if ((c10_solution->state == 0) && (c10_objType == 5)) {
        c10_b1 = true;
      } else {
        c10_b1 = false;
      }

      if (!c10_b1) {
        c10_solution->state = 2;
      }
    }
  }
}

static void c10_b_computeFirstOrderOpt(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution,
  c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_objective, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_i_workingset, coder::array<real_T, 2U> &c10_workspace)
{
  ptrdiff_t c10_b_incx_t;
  ptrdiff_t c10_b_incy_t;
  ptrdiff_t c10_b_n_t;
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_lda_t;
  ptrdiff_t c10_m_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 1U> c10_x;
  emlrtStack c10_b_st;
  emlrtStack c10_st;
  real_T c10_x_data[1489];
  real_T c10_abs_workspace_i;
  real_T c10_alpha1;
  real_T c10_b_a;
  real_T c10_b_x;
  real_T c10_b_y;
  real_T c10_beta1;
  real_T c10_c_x;
  real_T c10_c_y;
  real_T c10_d_x;
  real_T c10_d_y;
  real_T c10_e_x;
  real_T c10_e_y;
  real_T c10_f_x;
  real_T c10_g_b;
  real_T c10_g_x;
  real_T c10_infNorm;
  real_T c10_j_x;
  real_T c10_k_x;
  real_T c10_m_x;
  real_T c10_varargin_1;
  real_T c10_varargin_2;
  real_T c10_y;
  int32_T c10_b;
  int32_T c10_b_loop_ub;
  int32_T c10_b_var;
  int32_T c10_c_i;
  int32_T c10_c_lda;
  int32_T c10_c_loop_ub;
  int32_T c10_c_m;
  int32_T c10_c_var;
  int32_T c10_d_lda;
  int32_T c10_d_m;
  int32_T c10_d_var;
  int32_T c10_e_b;
  int32_T c10_e_i;
  int32_T c10_f_n;
  int32_T c10_h_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_i_n;
  int32_T c10_j_n;
  int32_T c10_k_n;
  int32_T c10_lda;
  int32_T c10_ldw;
  int32_T c10_loop_ub;
  int32_T c10_m;
  int32_T c10_m_n;
  int32_T c10_nActiveConstr;
  int32_T c10_nVar;
  int32_T c10_var;
  char_T c10_TRANSA;
  boolean_T c10_exitg1;
  boolean_T c10_f_b;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_nVar = c10_i_workingset->nVar;
  c10_nActiveConstr = c10_i_workingset->nActiveConstr;
  c10_ldw = c10_i_workingset->ldA;
  c10_st.site = &c10_oj_emlrtRSI;
  c10_f_n = c10_nVar;
  c10_x.set_size(&c10_rg_emlrtRTEI, &c10_st, c10_objective->grad.size(0));
  c10_loop_ub = c10_objective->grad.size(0) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_x[c10_i] = c10_objective->grad[c10_i];
  }

  if (!(c10_f_n < 1)) {
    c10_b_st.site = &c10_ad_emlrtRSI;
    c10_h_n = c10_f_n;
    c10_i_n = c10_h_n;
    c10_var = c10_i_n;
    c10_n_t = (ptrdiff_t)c10_var;
    c10_incx_t = (ptrdiff_t)1;
    c10_incy_t = (ptrdiff_t)1;
    dcopy(&c10_n_t, &(c10_x.data())[0], &c10_incx_t, &(c10_workspace.data())[0],
          &c10_incy_t);
  }

  c10_st.site = &c10_oj_emlrtRSI;
  c10_m = c10_nVar;
  c10_j_n = c10_nActiveConstr;
  c10_x.set_size(&c10_rg_emlrtRTEI, &c10_st, c10_i_workingset->ATwset.size(0));
  c10_b_loop_ub = c10_i_workingset->ATwset.size(0) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_x[c10_i1] = c10_i_workingset->ATwset[c10_i1];
  }

  c10_lda = c10_ldw;
  c10_c_loop_ub = c10_solution->lambda.size[0] - 1;
  for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
    c10_x_data[c10_i2] = c10_solution->lambda.data[c10_i2];
  }

  if ((c10_m < 1) || (c10_j_n < 1)) {
  } else {
    c10_b_st.site = &c10_bf_emlrtRSI;
    c10_c_m = c10_m;
    c10_k_n = c10_j_n;
    c10_c_lda = c10_lda;
    c10_d_m = c10_c_m;
    c10_m_n = c10_k_n;
    c10_alpha1 = 1.0;
    c10_d_lda = c10_c_lda;
    c10_beta1 = 1.0;
    c10_TRANSA = 'N';
    c10_b_var = c10_d_m;
    c10_m_t = (ptrdiff_t)c10_b_var;
    c10_c_var = c10_m_n;
    c10_b_n_t = (ptrdiff_t)c10_c_var;
    c10_d_var = c10_d_lda;
    c10_lda_t = (ptrdiff_t)c10_d_var;
    c10_b_incx_t = (ptrdiff_t)1;
    c10_b_incy_t = (ptrdiff_t)1;
    dgemv(&c10_TRANSA, &c10_m_t, &c10_b_n_t, &c10_alpha1, &(c10_x.data())[0],
          &c10_lda_t, &c10_x_data[0], &c10_b_incx_t, &c10_beta1,
          &(c10_workspace.data())[0], &c10_b_incy_t);
  }

  c10_infNorm = 0.0;
  c10_st.site = &c10_oj_emlrtRSI;
  c10_b = c10_nVar;
  c10_e_b = c10_b;
  if (c10_e_b < 1) {
    c10_overflow = false;
  } else {
    c10_overflow = (c10_e_b > 2147483646);
  }

  if (c10_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  c10_c_i = 1;
  c10_exitg1 = false;
  while ((!c10_exitg1) && (c10_c_i - 1 <= c10_nVar - 1)) {
    c10_e_i = c10_c_i;
    c10_i3 = c10_workspace.size(0) * c10_workspace.size(1);
    if ((c10_e_i < 1) || (c10_e_i > c10_i3)) {
      emlrtDynamicBoundsCheckR2012b(c10_e_i, 1, c10_i3, &c10_wq_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_b_x = c10_workspace[c10_e_i - 1];
    c10_c_x = c10_b_x;
    c10_d_x = c10_c_x;
    c10_abs_workspace_i = muDoubleScalarAbs(c10_d_x);
    c10_e_x = c10_abs_workspace_i;
    c10_f_b = muDoubleScalarIsNaN(c10_e_x);
    if (c10_f_b) {
      c10_infNorm = rtNaN;
      c10_exitg1 = true;
    } else {
      c10_varargin_1 = c10_infNorm;
      c10_varargin_2 = c10_abs_workspace_i;
      c10_f_x = c10_varargin_1;
      c10_y = c10_varargin_2;
      c10_g_x = c10_f_x;
      c10_b_y = c10_y;
      c10_j_x = c10_g_x;
      c10_c_y = c10_b_y;
      c10_b_a = c10_j_x;
      c10_g_b = c10_c_y;
      c10_k_x = c10_b_a;
      c10_d_y = c10_g_b;
      c10_m_x = c10_k_x;
      c10_e_y = c10_d_y;
      c10_infNorm = muDoubleScalarMax(c10_m_x, c10_e_y);
      c10_c_i++;
    }
  }

  c10_solution->firstorderopt = c10_infNorm;
}

static void c10_b_computeGrad(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_obj, coder::array<
  real_T, 2U> &c10_c_H, coder::array<real_T, 1U> &c10_f, coder::array<real_T, 1U>
  &c10_x)
{
  coder::array<real_T, 2U> c10_d_H;
  coder::array<real_T, 2U> c10_e_H;
  coder::array<real_T, 1U> c10_b_f;
  coder::array<real_T, 1U> c10_b_x;
  coder::array<real_T, 1U> c10_c_f;
  coder::array<real_T, 1U> c10_c_x;
  coder::array<real_T, 1U> c10_workspace;
  c10_s_saWPFfMboRdWeRqIEJ4x8C c10_c_obj;
  emlrtStack c10_b_st;
  emlrtStack c10_c_st;
  emlrtStack c10_st;
  int32_T c10_b;
  int32_T c10_b_a;
  int32_T c10_b_loop_ub;
  int32_T c10_c_a;
  int32_T c10_c_loop_ub;
  int32_T c10_d_loop_ub;
  int32_T c10_e_b;
  int32_T c10_e_loop_ub;
  int32_T c10_f_loop_ub;
  int32_T c10_g_loop_ub;
  int32_T c10_h_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_idx;
  int32_T c10_loop_ub;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_c_st.prev = &c10_b_st;
  c10_c_st.tls = c10_b_st.tls;
  switch (c10_b_obj->objtype) {
   case 5:
    c10_i = c10_b_obj->nvar;
    c10_st.site = &c10_pj_emlrtRSI;
    c10_b_xcopy(chartInstance, &c10_st, c10_i - 1, c10_b_obj->grad);
    c10_i2 = c10_b_obj->grad.size(0);
    if ((c10_b_obj->nvar < 1) || (c10_b_obj->nvar > c10_i2)) {
      emlrtDynamicBoundsCheckR2012b(c10_b_obj->nvar, 1, c10_i2, &c10_xq_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_b_obj->grad[c10_b_obj->nvar - 1] = c10_b_obj->gammaScalar;
    break;

   case 3:
    c10_c_obj = *c10_b_obj;
    c10_e_H.set_size(&c10_sg_emlrtRTEI, c10_sp, c10_c_H.size(0), c10_c_H.size(1));
    c10_b_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
    for (c10_i3 = 0; c10_i3 <= c10_b_loop_ub; c10_i3++) {
      c10_e_H[c10_i3] = c10_c_H[c10_i3];
    }

    c10_c_f.set_size(&c10_sg_emlrtRTEI, c10_sp, c10_f.size(0));
    c10_d_loop_ub = c10_f.size(0) - 1;
    for (c10_i5 = 0; c10_i5 <= c10_d_loop_ub; c10_i5++) {
      c10_c_f[c10_i5] = c10_f[c10_i5];
    }

    c10_c_x.set_size(&c10_sg_emlrtRTEI, c10_sp, c10_x.size(0));
    c10_f_loop_ub = c10_x.size(0) - 1;
    for (c10_i7 = 0; c10_i7 <= c10_f_loop_ub; c10_i7++) {
      c10_c_x[c10_i7] = c10_x[c10_i7];
    }

    c10_st.site = &c10_pj_emlrtRSI;
    c10_d_linearForm_(chartInstance, &c10_st, &c10_c_obj, c10_b_obj->grad,
                      c10_e_H, c10_c_f, c10_c_x);
    break;

   default:
    c10_c_obj = *c10_b_obj;
    c10_d_H.set_size(&c10_sg_emlrtRTEI, c10_sp, c10_c_H.size(0), c10_c_H.size(1));
    c10_loop_ub = c10_c_H.size(0) * c10_c_H.size(1) - 1;
    for (c10_i1 = 0; c10_i1 <= c10_loop_ub; c10_i1++) {
      c10_d_H[c10_i1] = c10_c_H[c10_i1];
    }

    c10_b_f.set_size(&c10_sg_emlrtRTEI, c10_sp, c10_f.size(0));
    c10_c_loop_ub = c10_f.size(0) - 1;
    for (c10_i4 = 0; c10_i4 <= c10_c_loop_ub; c10_i4++) {
      c10_b_f[c10_i4] = c10_f[c10_i4];
    }

    c10_b_x.set_size(&c10_sg_emlrtRTEI, c10_sp, c10_x.size(0));
    c10_e_loop_ub = c10_x.size(0) - 1;
    for (c10_i6 = 0; c10_i6 <= c10_e_loop_ub; c10_i6++) {
      c10_b_x[c10_i6] = c10_x[c10_i6];
    }

    c10_st.site = &c10_pj_emlrtRSI;
    c10_d_linearForm_(chartInstance, &c10_st, &c10_c_obj, c10_b_obj->grad,
                      c10_d_H, c10_b_f, c10_b_x);
    c10_st.site = &c10_pj_emlrtRSI;
    c10_c_obj = *c10_b_obj;
    c10_workspace.set_size(&c10_sg_emlrtRTEI, &c10_st, c10_b_obj->grad.size(0));
    c10_g_loop_ub = c10_b_obj->grad.size(0) - 1;
    for (c10_i8 = 0; c10_i8 <= c10_g_loop_ub; c10_i8++) {
      c10_workspace[c10_i8] = c10_b_obj->grad[c10_i8];
    }

    c10_b_obj->grad.set_size(&c10_sg_emlrtRTEI, &c10_st, c10_workspace.size(0));
    c10_h_loop_ub = c10_workspace.size(0) - 1;
    for (c10_i9 = 0; c10_i9 <= c10_h_loop_ub; c10_i9++) {
      c10_b_obj->grad[c10_i9] = c10_workspace[c10_i9];
    }

    c10_i10 = c10_c_obj.nvar + 1;
    c10_i11 = c10_c_obj.maxVar - 1;
    c10_b_st.site = &c10_uh_emlrtRSI;
    c10_b_a = c10_i10;
    c10_b = c10_i11;
    c10_c_a = c10_b_a;
    c10_e_b = c10_b;
    if (c10_c_a > c10_e_b) {
      c10_overflow = false;
    } else {
      c10_overflow = (c10_e_b > 2147483646);
    }

    if (c10_overflow) {
      c10_c_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_c_st);
    }

    for (c10_idx = c10_i10; c10_idx <= c10_i11; c10_idx++) {
      c10_i12 = c10_x.size(0);
      if ((c10_idx < 1) || (c10_idx > c10_i12)) {
        emlrtDynamicBoundsCheckR2012b(c10_idx, 1, c10_i12, &c10_xp_emlrtBCI,
          &c10_st);
      }

      c10_i13 = c10_b_obj->grad.size(0);
      if ((c10_idx < 1) || (c10_idx > c10_i13)) {
        emlrtDynamicBoundsCheckR2012b(c10_idx, 1, c10_i13, &c10_xp_emlrtBCI,
          &c10_st);
      }

      c10_b_obj->grad[c10_idx - 1] = 0.0 * c10_x[c10_idx - 1];
    }
    break;
  }
}

static void c10_d_linearForm_(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, c10_s_saWPFfMboRdWeRqIEJ4x8C *c10_b_obj, coder::array<
  real_T, 1U> &c10_workspace, coder::array<real_T, 2U> &c10_c_H, coder::array<
  real_T, 1U> &c10_f, coder::array<real_T, 1U> &c10_x)
{
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_lda_t;
  ptrdiff_t c10_m_t;
  ptrdiff_t c10_n_t;
  emlrtStack c10_b_st;
  emlrtStack c10_st;
  real_T c10_alpha1;
  real_T c10_b_beta1;
  real_T c10_beta1;
  real_T c10_c_beta1;
  real_T c10_fMultiplier;
  int32_T c10_b;
  int32_T c10_b_var;
  int32_T c10_c_i;
  int32_T c10_c_lda;
  int32_T c10_c_m;
  int32_T c10_c_var;
  int32_T c10_d_lda;
  int32_T c10_d_m;
  int32_T c10_e_b;
  int32_T c10_e_i;
  int32_T c10_f_n;
  int32_T c10_h_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_i_n;
  int32_T c10_lda;
  int32_T c10_m;
  int32_T c10_var;
  char_T c10_TRANSA;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_fMultiplier = 0.0;
  if (c10_b_obj->hasLinear) {
    c10_i = c10_b_obj->nvar;
    c10_st.site = &c10_qh_emlrtRSI;
    c10_b = c10_i;
    c10_e_b = c10_b;
    if (c10_e_b < 1) {
      c10_overflow = false;
    } else {
      c10_overflow = (c10_e_b > 2147483646);
    }

    if (c10_overflow) {
      c10_b_st.site = &c10_v_emlrtRSI;
      c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
    }

    for (c10_c_i = 0; c10_c_i < c10_i; c10_c_i++) {
      c10_e_i = c10_c_i + 1;
      c10_i1 = c10_f.size(0);
      if ((c10_e_i < 1) || (c10_e_i > c10_i1)) {
        emlrtDynamicBoundsCheckR2012b(c10_e_i, 1, c10_i1, &c10_yp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_i2 = c10_workspace.size(0);
      if ((c10_e_i < 1) || (c10_e_i > c10_i2)) {
        emlrtDynamicBoundsCheckR2012b(c10_e_i, 1, c10_i2, &c10_yp_emlrtBCI,
          (emlrtConstCTX)c10_sp);
      }

      c10_workspace[c10_e_i - 1] = c10_f[c10_e_i - 1];
    }

    c10_fMultiplier = 1.0;
  }

  c10_st.site = &c10_qh_emlrtRSI;
  c10_m = c10_b_obj->nvar;
  c10_f_n = c10_b_obj->nvar;
  c10_lda = c10_b_obj->nvar;
  c10_beta1 = c10_fMultiplier;
  if ((c10_m < 1) || (c10_f_n < 1)) {
  } else {
    c10_c_m = c10_m;
    c10_h_n = c10_f_n;
    c10_c_lda = c10_lda;
    c10_b_beta1 = c10_beta1;
    c10_d_m = c10_c_m;
    c10_i_n = c10_h_n;
    c10_alpha1 = 1.0;
    c10_d_lda = c10_c_lda;
    c10_c_beta1 = c10_b_beta1;
    c10_TRANSA = 'N';
    c10_var = c10_d_m;
    c10_m_t = (ptrdiff_t)c10_var;
    c10_b_var = c10_i_n;
    c10_n_t = (ptrdiff_t)c10_b_var;
    c10_c_var = c10_d_lda;
    c10_lda_t = (ptrdiff_t)c10_c_var;
    c10_incx_t = (ptrdiff_t)1;
    c10_incy_t = (ptrdiff_t)1;
    dgemv(&c10_TRANSA, &c10_m_t, &c10_n_t, &c10_alpha1, &(c10_c_H.data())[0],
          &c10_lda_t, &(c10_x.data())[0], &c10_incx_t, &c10_c_beta1,
          &(c10_workspace.data())[0], &c10_incy_t);
  }
}

static void c10_b_sortLambdaQP(SFc10_ACCMPCInstanceStruct *chartInstance, const
  emlrtStack *c10_sp, real_T c10_lambda_data[], int32_T c10_lambda_size[1],
  c10_s_flSfA4tA26WyP6kjP59eL *c10_k_WorkingSet, coder::array<real_T, 2U>
  &c10_workspace)
{
  ptrdiff_t c10_incx_t;
  ptrdiff_t c10_incy_t;
  ptrdiff_t c10_n_t;
  coder::array<real_T, 1U> c10_x;
  emlrtStack c10_st;
  int32_T c10_b_loop_ub;
  int32_T c10_c_loop_ub;
  int32_T c10_currentMplier;
  int32_T c10_f_n;
  int32_T c10_h_n;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i_n;
  int32_T c10_idx;
  int32_T c10_idxEq;
  int32_T c10_idxIneq;
  int32_T c10_idxLB;
  int32_T c10_idxOffset;
  int32_T c10_idxUB;
  int32_T c10_localIdx;
  int32_T c10_loop_ub;
  int32_T c10_mAll;
  int32_T c10_mEq;
  int32_T c10_mFixed;
  int32_T c10_mLB;
  int32_T c10_mUB;
  int32_T c10_var;
  boolean_T c10_exitg1;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_mEq = c10_k_WorkingSet->sizes[1];
  c10_mLB = c10_k_WorkingSet->sizes[3];
  c10_mUB = c10_k_WorkingSet->sizes[4];
  c10_mFixed = c10_k_WorkingSet->sizes[0];
  c10_mAll = ((c10_mFixed + c10_mEq) + c10_mLB) + c10_mUB;
  c10_st.site = &c10_qj_emlrtRSI;
  c10_f_n = c10_mAll;
  c10_x.set_size(&c10_tg_emlrtRTEI, &c10_st, c10_lambda_size[0]);
  c10_loop_ub = c10_lambda_size[0] - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_x[c10_i] = c10_lambda_data[c10_i];
  }

  if (!(c10_f_n < 1)) {
    c10_h_n = c10_f_n;
    c10_i_n = c10_h_n;
    c10_var = c10_i_n;
    c10_n_t = (ptrdiff_t)c10_var;
    c10_incx_t = (ptrdiff_t)1;
    c10_incy_t = (ptrdiff_t)1;
    dcopy(&c10_n_t, &(c10_x.data())[0], &c10_incx_t, &(c10_workspace.data())[0],
          &c10_incy_t);
  }

  c10_x.set_size(&c10_tg_emlrtRTEI, c10_sp, c10_lambda_size[0]);
  c10_b_loop_ub = c10_lambda_size[0] - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_x[c10_i1] = c10_lambda_data[c10_i1];
  }

  c10_st.site = &c10_qj_emlrtRSI;
  c10_b_xcopy(chartInstance, &c10_st, c10_mAll, c10_x);
  c10_lambda_size[0] = c10_x.size(0);
  c10_c_loop_ub = c10_x.size(0) - 1;
  for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
    c10_lambda_data[c10_i2] = c10_x[c10_i2];
  }

  c10_idxEq = c10_k_WorkingSet->isActiveIdx[1];
  c10_idxIneq = c10_k_WorkingSet->isActiveIdx[2];
  c10_idxLB = c10_k_WorkingSet->isActiveIdx[3];
  c10_idxUB = c10_k_WorkingSet->isActiveIdx[4];
  c10_currentMplier = 1;
  c10_idx = 1;
  c10_exitg1 = false;
  while ((!c10_exitg1) && (c10_idx <= c10_k_WorkingSet->nActiveConstr)) {
    if ((c10_idx < 1) || (c10_idx > c10_k_WorkingSet->Wid.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_idx, 1, c10_k_WorkingSet->Wid.size[0],
        &c10_yq_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    if (c10_k_WorkingSet->Wid.data[c10_idx - 1] <= 2) {
      if ((c10_idx < 1) || (c10_idx > c10_k_WorkingSet->Wlocalidx.size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_idx, 1,
          c10_k_WorkingSet->Wlocalidx.size[0], &c10_yq_emlrtBCI, (emlrtConstCTX)
          c10_sp);
      }

      c10_localIdx = c10_k_WorkingSet->Wlocalidx.data[c10_idx - 1];
      if ((c10_idx < 1) || (c10_idx > c10_k_WorkingSet->Wid.size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_idx, 1, c10_k_WorkingSet->Wid.size[0],
          &c10_yq_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      if (c10_k_WorkingSet->Wid.data[c10_idx - 1] == 1) {
        c10_idxOffset = 0;
      } else {
        c10_idxOffset = c10_idxEq - 1;
      }

      c10_i4 = c10_workspace.size(0) * c10_workspace.size(1);
      if ((c10_currentMplier < 1) || (c10_currentMplier > c10_i4)) {
        emlrtDynamicBoundsCheckR2012b(c10_currentMplier, 1, c10_i4,
          &c10_yq_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_i6 = c10_idxOffset + c10_localIdx;
      if ((c10_i6 < 1) || (c10_i6 > c10_lambda_size[0])) {
        emlrtDynamicBoundsCheckR2012b(c10_i6, 1, c10_lambda_size[0],
          &c10_yq_emlrtBCI, (emlrtConstCTX)c10_sp);
      }

      c10_lambda_data[c10_i6 - 1] = c10_workspace[c10_currentMplier - 1];
      c10_currentMplier++;
      c10_idx++;
    } else {
      c10_exitg1 = true;
    }
  }

  while (c10_idx <= c10_k_WorkingSet->nActiveConstr) {
    if ((c10_idx < 1) || (c10_idx > c10_k_WorkingSet->Wlocalidx.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_idx, 1, c10_k_WorkingSet->
        Wlocalidx.size[0], &c10_yq_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_localIdx = c10_k_WorkingSet->Wlocalidx.data[c10_idx - 1];
    if ((c10_idx < 1) || (c10_idx > c10_k_WorkingSet->Wid.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_idx, 1, c10_k_WorkingSet->Wid.size[0],
        &c10_yq_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    switch (c10_k_WorkingSet->Wid.data[c10_idx - 1]) {
     case 3:
      c10_idxOffset = c10_idxIneq - 1;
      break;

     case 4:
      c10_idxOffset = c10_idxLB - 1;
      break;

     default:
      c10_idxOffset = c10_idxUB - 1;
      break;
    }

    c10_i3 = c10_workspace.size(0) * c10_workspace.size(1);
    if ((c10_currentMplier < 1) || (c10_currentMplier > c10_i3)) {
      emlrtDynamicBoundsCheckR2012b(c10_currentMplier, 1, c10_i3,
        &c10_yq_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_i5 = c10_idxOffset + c10_localIdx;
    if ((c10_i5 < 1) || (c10_i5 > c10_lambda_size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_i5, 1, c10_lambda_size[0],
        &c10_yq_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_lambda_data[c10_i5 - 1] = c10_workspace[c10_currentMplier - 1];
    c10_currentMplier++;
    c10_idx++;
  }
}

static void c10_b_dealLambdaIntoStruct(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, c10_s_rT6K4jgKQs07oLkxgXMCC *c10_lambda,
  c10_s_pF7WiHvRtoO0ktfmCER3HD *c10_solution, c10_s_flSfA4tA26WyP6kjP59eL
  *c10_k_WorkingSet)
{
  emlrtStack c10_b_st;
  emlrtStack c10_st;
  int32_T c10_b;
  int32_T c10_b_a;
  int32_T c10_b_idx;
  int32_T c10_c_a;
  int32_T c10_c_idx;
  int32_T c10_d_a;
  int32_T c10_d_idx;
  int32_T c10_e_a;
  int32_T c10_e_b;
  int32_T c10_e_idx;
  int32_T c10_f_a;
  int32_T c10_f_b;
  int32_T c10_g_a;
  int32_T c10_g_b;
  int32_T c10_h_a;
  int32_T c10_h_b;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i10;
  int32_T c10_i11;
  int32_T c10_i12;
  int32_T c10_i13;
  int32_T c10_i14;
  int32_T c10_i15;
  int32_T c10_i16;
  int32_T c10_i17;
  int32_T c10_i18;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_i4;
  int32_T c10_i5;
  int32_T c10_i6;
  int32_T c10_i7;
  int32_T c10_i8;
  int32_T c10_i9;
  int32_T c10_i_a;
  int32_T c10_idx;
  int32_T c10_j_b;
  int32_T c10_k_b;
  int32_T c10_lowerIdx;
  int32_T c10_o_b;
  int32_T c10_offset;
  int32_T c10_p_b;
  int32_T c10_q_b;
  boolean_T c10_b_overflow;
  boolean_T c10_c_overflow;
  boolean_T c10_d_overflow;
  boolean_T c10_e_overflow;
  boolean_T c10_overflow;
  c10_st.prev = c10_sp;
  c10_st.tls = c10_sp->tls;
  c10_b_st.prev = &c10_st;
  c10_b_st.tls = c10_st.tls;
  c10_i = c10_k_WorkingSet->isActiveIdx[1] - 1;
  c10_st.site = &c10_rj_emlrtRSI;
  c10_b = c10_i;
  c10_e_b = c10_b;
  if (c10_e_b < 1) {
    c10_overflow = false;
  } else {
    c10_overflow = (c10_e_b > 2147483646);
  }

  if (c10_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  for (c10_idx = 1; c10_idx <= c10_i; c10_idx++) {
    if ((c10_idx < 1) || (c10_idx > c10_solution->lambda.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_idx, 1, c10_solution->lambda.size[0],
        &c10_ar_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_i2 = c10_lambda->lower.size(0);
    c10_i3 = c10_k_WorkingSet->indexFixed.size(0);
    if ((c10_idx < 1) || (c10_idx > c10_i3)) {
      emlrtDynamicBoundsCheckR2012b(c10_idx, 1, c10_i3, &c10_ar_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_i4 = c10_k_WorkingSet->indexFixed[c10_idx - 1];
    if ((c10_i4 < 1) || (c10_i4 > c10_i2)) {
      emlrtDynamicBoundsCheckR2012b(c10_i4, 1, c10_i2, &c10_ar_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_lambda->lower[c10_i4 - 1] = c10_solution->lambda.data[c10_idx - 1];
    if ((c10_idx < 1) || (c10_idx > c10_solution->lambda.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_idx, 1, c10_solution->lambda.size[0],
        &c10_ar_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_i5 = c10_lambda->upper.size(0);
    c10_i6 = c10_k_WorkingSet->indexFixed.size(0);
    if ((c10_idx < 1) || (c10_idx > c10_i6)) {
      emlrtDynamicBoundsCheckR2012b(c10_idx, 1, c10_i6, &c10_ar_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_i9 = c10_k_WorkingSet->indexFixed[c10_idx - 1];
    if ((c10_i9 < 1) || (c10_i9 > c10_i5)) {
      emlrtDynamicBoundsCheckR2012b(c10_i9, 1, c10_i5, &c10_ar_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_lambda->upper[c10_i9 - 1] = c10_solution->lambda.data[c10_idx - 1];
  }

  c10_offset = c10_k_WorkingSet->isActiveIdx[1];
  c10_i1 = c10_k_WorkingSet->isActiveIdx[2] - 1;
  c10_st.site = &c10_rj_emlrtRSI;
  c10_b_a = c10_offset;
  c10_f_b = c10_i1;
  c10_c_a = c10_b_a;
  c10_g_b = c10_f_b;
  if (c10_c_a > c10_g_b) {
    c10_b_overflow = false;
  } else {
    c10_b_overflow = (c10_g_b > 2147483646);
  }

  if (c10_b_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  for (c10_b_idx = c10_offset; c10_b_idx <= c10_i1; c10_b_idx++) {
    if ((c10_b_idx < 1) || (c10_b_idx > c10_solution->lambda.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_b_idx, 1, c10_solution->lambda.size[0],
        &c10_ar_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_i8 = (c10_b_idx - c10_offset) + 1;
    if ((c10_i8 < 1) || (c10_i8 > c10_lambda->eqlin.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_i8, 1, c10_lambda->eqlin.size[0],
        &c10_ar_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_lambda->eqlin.data[c10_i8 - 1] = c10_solution->lambda.data[c10_b_idx - 1];
  }

  c10_offset = c10_k_WorkingSet->isActiveIdx[2];
  c10_i7 = c10_k_WorkingSet->isActiveIdx[3] - 1;
  c10_st.site = &c10_rj_emlrtRSI;
  c10_d_a = c10_offset;
  c10_h_b = c10_i7;
  c10_e_a = c10_d_a;
  c10_j_b = c10_h_b;
  if (c10_e_a > c10_j_b) {
    c10_c_overflow = false;
  } else {
    c10_c_overflow = (c10_j_b > 2147483646);
  }

  if (c10_c_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  for (c10_c_idx = c10_offset; c10_c_idx <= c10_i7; c10_c_idx++) {
    c10_i10 = (c10_c_idx - c10_offset) + 1;
    emlrtDynamicBoundsCheckR2012b(c10_i10, 1, 0, &c10_br_emlrtBCI,
      (emlrtConstCTX)c10_sp);
  }

  c10_offset = c10_k_WorkingSet->isActiveIdx[3];
  c10_i11 = c10_k_WorkingSet->isActiveIdx[4] - 1;
  c10_st.site = &c10_rj_emlrtRSI;
  c10_f_a = c10_offset;
  c10_k_b = c10_i11;
  c10_g_a = c10_f_a;
  c10_o_b = c10_k_b;
  if (c10_g_a > c10_o_b) {
    c10_d_overflow = false;
  } else {
    c10_d_overflow = (c10_o_b > 2147483646);
  }

  if (c10_d_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  for (c10_d_idx = c10_offset; c10_d_idx <= c10_i11; c10_d_idx++) {
    c10_i12 = c10_k_WorkingSet->indexLB.size(0);
    c10_i14 = (c10_d_idx - c10_offset) + 1;
    if ((c10_i14 < 1) || (c10_i14 > c10_i12)) {
      emlrtDynamicBoundsCheckR2012b(c10_i14, 1, c10_i12, &c10_ar_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_lowerIdx = c10_k_WorkingSet->indexLB[c10_i14 - 1];
    if ((c10_d_idx < 1) || (c10_d_idx > c10_solution->lambda.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_d_idx, 1, c10_solution->lambda.size[0],
        &c10_ar_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_i15 = c10_lambda->lower.size(0);
    if ((c10_lowerIdx < 1) || (c10_lowerIdx > c10_i15)) {
      emlrtDynamicBoundsCheckR2012b(c10_lowerIdx, 1, c10_i15, &c10_ar_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_lambda->lower[c10_lowerIdx - 1] = c10_solution->lambda.data[c10_d_idx -
      1];
  }

  c10_offset = c10_k_WorkingSet->isActiveIdx[4];
  c10_i13 = c10_k_WorkingSet->isActiveIdx[5] - 1;
  c10_st.site = &c10_rj_emlrtRSI;
  c10_h_a = c10_offset;
  c10_p_b = c10_i13;
  c10_i_a = c10_h_a;
  c10_q_b = c10_p_b;
  if (c10_i_a > c10_q_b) {
    c10_e_overflow = false;
  } else {
    c10_e_overflow = (c10_q_b > 2147483646);
  }

  if (c10_e_overflow) {
    c10_b_st.site = &c10_v_emlrtRSI;
    c10_check_forloop_overflow_error(chartInstance, &c10_b_st);
  }

  for (c10_e_idx = c10_offset; c10_e_idx <= c10_i13; c10_e_idx++) {
    c10_i16 = c10_k_WorkingSet->indexUB.size(0);
    c10_i17 = (c10_e_idx - c10_offset) + 1;
    if ((c10_i17 < 1) || (c10_i17 > c10_i16)) {
      emlrtDynamicBoundsCheckR2012b(c10_i17, 1, c10_i16, &c10_ar_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_lowerIdx = c10_k_WorkingSet->indexUB[c10_i17 - 1];
    if ((c10_e_idx < 1) || (c10_e_idx > c10_solution->lambda.size[0])) {
      emlrtDynamicBoundsCheckR2012b(c10_e_idx, 1, c10_solution->lambda.size[0],
        &c10_ar_emlrtBCI, (emlrtConstCTX)c10_sp);
    }

    c10_i18 = c10_lambda->upper.size(0);
    if ((c10_lowerIdx < 1) || (c10_lowerIdx > c10_i18)) {
      emlrtDynamicBoundsCheckR2012b(c10_lowerIdx, 1, c10_i18, &c10_ar_emlrtBCI,
        (emlrtConstCTX)c10_sp);
    }

    c10_lambda->upper[c10_lowerIdx - 1] = c10_solution->lambda.data[c10_e_idx -
      1];
  }
}

static void c10_binary_expand_op(SFc10_ACCMPCInstanceStruct *chartInstance,
  const emlrtStack *c10_sp, coder::array<real_T, 2U> &c10_in1, coder::array<
  real_T, 2U> &c10_in2, coder::array<real_T, 1U> &c10_in3)
{
  coder::array<real_T, 2U> c10_b_in2;
  int32_T c10_c_in3[2];
  int32_T c10_aux_0_0;
  int32_T c10_b_in3;
  int32_T c10_b_loop_ub;
  int32_T c10_c_loop_ub;
  int32_T c10_d_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_i3;
  int32_T c10_loop_ub;
  int32_T c10_stride_0_0;
  c10_b_in3 = c10_in3.size(0);
  c10_c_in3[0] = c10_b_in3;
  c10_b_in2.set_size(&c10_di_emlrtRTEI, c10_sp, c10_c_in3[0], c10_in2.size(1));
  c10_stride_0_0 = static_cast<int32_T>(c10_in2.size(0) != 1);
  c10_loop_ub = c10_in2.size(1) - 1;
  for (c10_i = 0; c10_i <= c10_loop_ub; c10_i++) {
    c10_aux_0_0 = 0;
    c10_c_loop_ub = c10_c_in3[0] - 1;
    for (c10_i2 = 0; c10_i2 <= c10_c_loop_ub; c10_i2++) {
      c10_b_in2[c10_i2 + c10_b_in2.size(0) * c10_i] = c10_in2[c10_aux_0_0 +
        c10_in2.size(0) * c10_i] + c10_in3[c10_i2];
      c10_aux_0_0 += c10_stride_0_0;
    }
  }

  c10_in1.set_size(&c10_rb_emlrtRTEI, c10_sp, c10_b_in2.size(0), c10_b_in2.size
                   (1));
  c10_b_loop_ub = c10_b_in2.size(1) - 1;
  for (c10_i1 = 0; c10_i1 <= c10_b_loop_ub; c10_i1++) {
    c10_d_loop_ub = c10_b_in2.size(0) - 1;
    for (c10_i3 = 0; c10_i3 <= c10_d_loop_ub; c10_i3++) {
      c10_in1[c10_i3 + c10_in1.size(0) * c10_i1] = c10_b_in2[c10_i3 +
        c10_b_in2.size(0) * c10_i1];
    }
  }
}

static void c10_binary_expand_op_1(SFc10_ACCMPCInstanceStruct *chartInstance,
  real_T c10_in1_data[], int32_T c10_in1_size[1], coder::array<real_T, 2U>
  &c10_in2, real_T c10_in3_data[])
{
  real_T c10_in2_data[2];
  int32_T c10_aux_0_0;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_stride_0_0;
  c10_stride_0_0 = static_cast<int32_T>(c10_in2.size(1) != 1);
  c10_aux_0_0 = 0;
  for (c10_i = 0; c10_i < 2; c10_i++) {
    c10_in2_data[c10_i] = c10_in2[c10_aux_0_0] + c10_in3_data[c10_i];
    c10_aux_0_0 += c10_stride_0_0;
  }

  c10_in1_size[0] = 2;
  for (c10_i1 = 0; c10_i1 < 2; c10_i1++) {
    c10_in1_data[c10_i1] = c10_in2_data[c10_i1];
  }
}

static void c10_minus(SFc10_ACCMPCInstanceStruct *chartInstance, real_T
                      c10_in1_data[], int32_T c10_in1_size[1], real_T
                      c10_in2_data[], int32_T c10_in2_size[1])
{
  real_T c10_b_in2_data[602];
  int32_T c10_b_in2_size[1];
  int32_T c10_aux_0_0;
  int32_T c10_aux_1_0;
  int32_T c10_b_loop_ub;
  int32_T c10_i;
  int32_T c10_i1;
  int32_T c10_i2;
  int32_T c10_loop_ub;
  int32_T c10_stride_0_0;
  int32_T c10_stride_1_0;
  if (c10_in1_size[0] == 1) {
    c10_b_in2_size[0] = c10_in2_size[0];
  } else {
    c10_b_in2_size[0] = c10_in1_size[0];
  }

  c10_stride_0_0 = static_cast<int32_T>(c10_in2_size[0] != 1);
  c10_stride_1_0 = static_cast<int32_T>(c10_in1_size[0] != 1);
  c10_aux_0_0 = 0;
  c10_aux_1_0 = 0;
  if (c10_in1_size[0] == 1) {
    c10_i = c10_in2_size[0];
  } else {
    c10_i = c10_in1_size[0];
  }

  c10_loop_ub = c10_i - 1;
  for (c10_i1 = 0; c10_i1 <= c10_loop_ub; c10_i1++) {
    c10_b_in2_data[c10_i1] = c10_in2_data[c10_aux_0_0] -
      c10_in1_data[c10_aux_1_0];
    c10_aux_1_0 += c10_stride_1_0;
    c10_aux_0_0 += c10_stride_0_0;
  }

  c10_in1_size[0] = c10_b_in2_size[0];
  c10_b_loop_ub = c10_b_in2_size[0] - 1;
  for (c10_i2 = 0; c10_i2 <= c10_b_loop_ub; c10_i2++) {
    c10_in1_data[c10_i2] = c10_b_in2_data[c10_i2];
  }
}

static int32_T c10_div_s32_floor_ndbzs(SFc10_ACCMPCInstanceStruct *chartInstance,
  int32_T c10_numerator, int32_T c10_denominator, int32_T c10_EMLOvCount_src_loc,
  uint32_T c10_ssid_src_loc, int32_T c10_offset_src_loc, int32_T
  c10_length_src_loc)
{
  int32_T c10_quotient;
  uint32_T c10_absDenominator;
  uint32_T c10_absNumerator;
  uint32_T c10_tempAbsQuotient;
  boolean_T c10_quotientNeedsNegation;
  if (c10_denominator == 0) {
    if (c10_numerator >= 0) {
      c10_quotient = MAX_int32_T;
    } else {
      c10_quotient = MIN_int32_T;
    }
  } else {
    if (c10_numerator < 0) {
      c10_absNumerator = ~static_cast<uint32_T>(c10_numerator) + 1U;
    } else {
      c10_absNumerator = static_cast<uint32_T>(c10_numerator);
    }

    if (c10_denominator < 0) {
      c10_absDenominator = ~static_cast<uint32_T>(c10_denominator) + 1U;
    } else {
      c10_absDenominator = static_cast<uint32_T>(c10_denominator);
    }

    c10_quotientNeedsNegation = (static_cast<int32_T>(c10_numerator < 0) !=
      static_cast<int32_T>(c10_denominator < 0));
    c10_tempAbsQuotient = c10_absNumerator / c10_absDenominator;
    if (c10_quotientNeedsNegation) {
      c10_absNumerator %= c10_absDenominator;
      if (c10_absNumerator > 0U) {
        c10_tempAbsQuotient++;
      }
    }

    if (c10_quotientNeedsNegation) {
      c10_quotient = -static_cast<int32_T>(c10_tempAbsQuotient);
    } else {
      c10_quotient = static_cast<int32_T>(c10_tempAbsQuotient);
    }
  }

  return c10_quotient;
}

static int32_T c10_div_nzp_s32_floor(SFc10_ACCMPCInstanceStruct *chartInstance,
  int32_T c10_numerator, int32_T c10_denominator, int32_T c10_EMLOvCount_src_loc,
  uint32_T c10_ssid_src_loc, int32_T c10_offset_src_loc, int32_T
  c10_length_src_loc)
{
  int32_T c10_quotient;
  uint32_T c10_absDenominator;
  uint32_T c10_absNumerator;
  uint32_T c10_tempAbsQuotient;
  boolean_T c10_quotientNeedsNegation;
  if (c10_numerator < 0) {
    c10_absNumerator = ~static_cast<uint32_T>(c10_numerator) + 1U;
  } else {
    c10_absNumerator = static_cast<uint32_T>(c10_numerator);
  }

  if (c10_denominator < 0) {
    c10_absDenominator = ~static_cast<uint32_T>(c10_denominator) + 1U;
  } else {
    c10_absDenominator = static_cast<uint32_T>(c10_denominator);
  }

  c10_quotientNeedsNegation = (static_cast<int32_T>(c10_numerator < 0) !=
    static_cast<int32_T>(c10_denominator < 0));
  c10_tempAbsQuotient = c10_absNumerator / c10_absDenominator;
  if (c10_quotientNeedsNegation) {
    c10_absNumerator %= c10_absDenominator;
    if (c10_absNumerator > 0U) {
      c10_tempAbsQuotient++;
    }
  }

  if (c10_quotientNeedsNegation) {
    c10_quotient = -static_cast<int32_T>(c10_tempAbsQuotient);
  } else {
    c10_quotient = static_cast<int32_T>(c10_tempAbsQuotient);
  }

  return c10_quotient;
}

static int32_T c10__s32_s64_(SFc10_ACCMPCInstanceStruct *chartInstance, int64_T
  c10_b, int32_T c10_EMLOvCount_src_loc, uint32_T c10_ssid_src_loc, int32_T
  c10_offset_src_loc, int32_T c10_length_src_loc)
{
  int32_T c10_b_a;
  c10_b_a = static_cast<int32_T>(c10_b);
  if (static_cast<int64_T>(c10_b_a) != c10_b) {
    sf_data_overflow_error(chartInstance->S, c10_ssid_src_loc,
      c10_offset_src_loc, c10_length_src_loc);
  }

  return c10_b_a;
}

static void init_dsm_address_info(SFc10_ACCMPCInstanceStruct *chartInstance)
{
}

static void init_simulink_io_address(SFc10_ACCMPCInstanceStruct *chartInstance)
{
  chartInstance->c10_covrtInstance = (CovrtStateflowInstance *)
    sfrtGetCovrtInstance(chartInstance->S);
  chartInstance->c10_fEmlrtCtx = (void *)sfrtGetEmlrtCtx(chartInstance->S);
  chartInstance->c10_N_hor = (real_T *)ssGetInputPortSignal_wrapper
    (chartInstance->S, 0);
  chartInstance->c10_Tvec = (real_T (*)[20])ssGetInputPortSignal_wrapper
    (chartInstance->S, 1);
  chartInstance->c10_fval = (real_T *)ssGetOutputPortSignal_wrapper
    (chartInstance->S, 1);
  chartInstance->c10_exitflag = (real_T *)ssGetOutputPortSignal_wrapper
    (chartInstance->S, 2);
  chartInstance->c10_s_measured = (real_T *)ssGetInputPortSignal_wrapper
    (chartInstance->S, 2);
  chartInstance->c10_s_opt = (real_T *)ssGetOutputPortSignal_wrapper
    (chartInstance->S, 3);
  chartInstance->c10_v_opt = (real_T *)ssGetOutputPortSignal_wrapper
    (chartInstance->S, 4);
  chartInstance->c10_v_measured = (real_T *)ssGetInputPortSignal_wrapper
    (chartInstance->S, 3);
  chartInstance->c10_s_est = (real_T (*)[20])ssGetInputPortSignal_wrapper
    (chartInstance->S, 4);
  chartInstance->c10_v_est = (real_T (*)[20])ssGetInputPortSignal_wrapper
    (chartInstance->S, 5);
  chartInstance->c10_s_tv_est = (real_T (*)[20])ssGetInputPortSignal_wrapper
    (chartInstance->S, 6);
  chartInstance->c10_a_opt = (real_T *)ssGetOutputPortSignal_wrapper
    (chartInstance->S, 5);
  chartInstance->c10_Slack = (real_T (*)[4])ssGetOutputPortSignal_wrapper
    (chartInstance->S, 6);
  chartInstance->c10_s_opt_prev_sol = (coder::array<real_T, 2U> *)
    ssGetOutputPortSignal_wrapper(chartInstance->S, 7);
  chartInstance->c10_v_opt_prev_sol = (coder::array<real_T, 2U> *)
    ssGetOutputPortSignal_wrapper(chartInstance->S, 8);
}

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* SFunction Glue Code */
void sf_c10_ACCMPC_get_check_sum(mxArray *plhs[])
{
  ((real_T *)mxGetPr((plhs[0])))[0] = (real_T)(2248197758U);
  ((real_T *)mxGetPr((plhs[0])))[1] = (real_T)(719723541U);
  ((real_T *)mxGetPr((plhs[0])))[2] = (real_T)(2196400629U);
  ((real_T *)mxGetPr((plhs[0])))[3] = (real_T)(798743715U);
}

mxArray *sf_c10_ACCMPC_third_party_uses_info(void)
{
  mxArray * mxcell3p = mxCreateCellMatrix(1,4);
  mxSetCell(mxcell3p, 0, mxCreateString("coder.internal.blas.BLASApi"));
  mxSetCell(mxcell3p, 1, mxCreateString("coder.internal.lapack.LAPACKApi"));
  mxSetCell(mxcell3p, 2, mxCreateString(
             "coder.internal.EmxArrayExternalDependency"));
  mxSetCell(mxcell3p, 3, mxCreateString(
             "coder.internal.BoundedEmxArrayExternalDependency"));
  return(mxcell3p);
}

mxArray *sf_c10_ACCMPC_jit_fallback_info(void)
{
  const char *infoFields[] = { "fallbackType", "fallbackReason",
    "hiddenFallbackType", "hiddenFallbackReason", "incompatibleSymbol" };

  mxArray *mxInfo = mxCreateStructMatrix(1, 1, 5, infoFields);
  mxArray *fallbackType = mxCreateString("late");
  mxArray *fallbackReason = mxCreateString("ir_vars");
  mxArray *hiddenFallbackType = mxCreateString("");
  mxArray *hiddenFallbackReason = mxCreateString("");
  mxArray *incompatibleSymbol = mxCreateString("s_opt_prev_sol");
  mxSetField(mxInfo, 0, infoFields[0], fallbackType);
  mxSetField(mxInfo, 0, infoFields[1], fallbackReason);
  mxSetField(mxInfo, 0, infoFields[2], hiddenFallbackType);
  mxSetField(mxInfo, 0, infoFields[3], hiddenFallbackReason);
  mxSetField(mxInfo, 0, infoFields[4], incompatibleSymbol);
  return mxInfo;
}

mxArray *sf_c10_ACCMPC_updateBuildInfo_args_info(void)
{
  mxArray *mxBIArgs = mxCreateCellMatrix(1,0);
  return mxBIArgs;
}

static const mxArray *sf_get_sim_state_info_c10_ACCMPC(void)
{
  const char *infoFields[] = { "chartChecksum", "varInfo" };

  mxArray *mxInfo = mxCreateStructMatrix(1, 1, 2, infoFields);
  mxArray *mxVarInfo = sf_mex_decode(
    "eNrlmE1OwkAUx6flQ9yQLli4kxgPUNSFO2tYKAsMie6HWoE0lrahH6AJH0fhCBzBI3gEj8AR7Md"
    "D6YRYUzA+nUmGyZvkTeffX9+8NxCh0SRBK4c/h4QUg6EUdJHErQC2EPQDGOP5/Md8Nejuk90J55"
    "2B1ngIRlPtR7bqjRpm14rWPyef6xc3rC+srb8P83FbXmznf6Kw/vkN/oU1fwnsW0PVHlfvB8bf0"
    "1HLrEOllu1i0TFTvqWjxOgI7c5Id7uG2sPBoxLpkFN05BM68qTrqwaO/R9l/p4cTN8TOY10KCk6"
    "yoyO8koHtQcdnzqWgUXPcWYuPiouZ5m5+D/CRVK284+fnxbvQkKPQK7A75V8nV8FJr+KYIc+BtG"
    "JDesoKfsXmf1Lq823fCUa2/5O3sNf5XGNhYcEPKp887hBEx8TiI8JVzzEBA+R3DlIeJApxMf0X/"
    "HIUveqtK+bnlNDwcWGOFlOuD63NCznlgx5ROErj7D3qh417nHk9WHMozXknIeHg0cbeMz54pFL8"
    "MgRk3o4zqvFOObxNuacxwgHDxt4zMdc1Vmb/j8JmARRgiSvL4GLMuGKyx7DJbQt29Ut00HCBe4l"
    "8ozr88ulMpL6F+KkPea63nrGUv/acB9Z+JzzQFL/vgAPgqX+re5kH9cpPCpMHglt3aGq5up+h2o"
    "1mV7W681WfV3XO/KxyPI="
    );
  mxArray *mxChecksum = mxCreateDoubleMatrix(1, 4, mxREAL);
  sf_c10_ACCMPC_get_check_sum(&mxChecksum);
  mxSetField(mxInfo, 0, infoFields[0], mxChecksum);
  mxSetField(mxInfo, 0, infoFields[1], mxVarInfo);
  return mxInfo;
}

static const char* sf_get_instance_specialization(void)
{
  return "sy9rl0CpNrB6pfrq5zOduV";
}

static void sf_opaque_initialize_c10_ACCMPC(void *chartInstanceVar)
{
  initialize_params_c10_ACCMPC((SFc10_ACCMPCInstanceStruct*) chartInstanceVar);
  initialize_c10_ACCMPC((SFc10_ACCMPCInstanceStruct*) chartInstanceVar);
}

static void sf_opaque_enable_c10_ACCMPC(void *chartInstanceVar)
{
  enable_c10_ACCMPC((SFc10_ACCMPCInstanceStruct*) chartInstanceVar);
}

static void sf_opaque_disable_c10_ACCMPC(void *chartInstanceVar)
{
  disable_c10_ACCMPC((SFc10_ACCMPCInstanceStruct*) chartInstanceVar);
}

static void sf_opaque_gateway_c10_ACCMPC(void *chartInstanceVar)
{
  sf_gateway_c10_ACCMPC((SFc10_ACCMPCInstanceStruct*) chartInstanceVar);
}

static const mxArray* sf_opaque_get_sim_state_c10_ACCMPC(SimStruct* S)
{
  return get_sim_state_c10_ACCMPC((SFc10_ACCMPCInstanceStruct *)
    sf_get_chart_instance_ptr(S));     /* raw sim ctx */
}

static void sf_opaque_set_sim_state_c10_ACCMPC(SimStruct* S, const mxArray *st)
{
  set_sim_state_c10_ACCMPC((SFc10_ACCMPCInstanceStruct*)
    sf_get_chart_instance_ptr(S), st);
}

static void sf_opaque_cleanup_runtime_resources_c10_ACCMPC(void
  *chartInstanceVar)
{
  if (chartInstanceVar!=NULL) {
    SimStruct *S = ((SFc10_ACCMPCInstanceStruct*) chartInstanceVar)->S;
    if (sim_mode_is_rtw_gen(S) || sim_mode_is_external(S)) {
      sf_clear_rtw_identifier(S);
      unload_ACCMPC_optimization_info();
    }

    mdl_cleanup_runtime_resources_c10_ACCMPC((SFc10_ACCMPCInstanceStruct*)
      chartInstanceVar);
    ((SFc10_ACCMPCInstanceStruct*) chartInstanceVar)->
      ~SFc10_ACCMPCInstanceStruct();
    utFree(chartInstanceVar);
    if (ssGetUserData(S)!= NULL) {
      sf_free_ChartRunTimeInfo(S);
    }

    ssSetUserData(S,NULL);
  }
}

static void sf_opaque_mdl_start_c10_ACCMPC(void *chartInstanceVar)
{
  mdl_start_c10_ACCMPC((SFc10_ACCMPCInstanceStruct*) chartInstanceVar);
  if (chartInstanceVar) {
    sf_reset_warnings_ChartRunTimeInfo(((SFc10_ACCMPCInstanceStruct*)
      chartInstanceVar)->S);
  }
}

static void sf_opaque_mdl_terminate_c10_ACCMPC(void *chartInstanceVar)
{
  mdl_terminate_c10_ACCMPC((SFc10_ACCMPCInstanceStruct*) chartInstanceVar);
}

extern unsigned int sf_machine_global_initializer_called(void);
static void mdlProcessParameters_c10_ACCMPC(SimStruct *S)
{
  mdlProcessParamsCommon(S);
  if (sf_machine_global_initializer_called()) {
    initialize_params_c10_ACCMPC((SFc10_ACCMPCInstanceStruct*)
      sf_get_chart_instance_ptr(S));
    initSubchartIOPointersc10_ACCMPC((SFc10_ACCMPCInstanceStruct*)
      sf_get_chart_instance_ptr(S));
  }
}

const char* sf_c10_ACCMPC_get_post_codegen_info(void)
{
  int i;
  const char* encStrCodegen [33] = {
    "eNrlW01vG0UYXrtp0lZtiEQFlUBqQEhwKUpSWqCqqB1/pFHz4WInoOLKneyO7WlmZ7czs3ZSKWn",
    "/AOIv9Ig4VZw4cuTIBQmBhPgJPXLogXe848TZuPHuuh/beiXH++76mZn3fd6v3ewaqcVlA7ZJ+E",
    "xfNYxx+D4Bn7Thb8e1nOr5+MfHjKta/u2UYZiOhRuYlb16nWwZ0Tbm2SXEkS2M6BtDNv4aC4d6k",
    "jhskdWd8FjC6phjZsIArsNlpHkFsT1K2GbRY6aaWXzTJGaz3HQ8as3DgMhaZXT7WfO6nizBjHnC",
    "sSmLGFuyyR2v0SxS1DjaCly2c01sbgrPjmwrgWXZc5WqYtmjkrgUF7awuciERGAFMUDfskQS5+R",
    "WNCMrfUW5i3ZslxLEwtu6iUQZu+AdEq+5Fvxd9SRYL+S8MN8GYUg6nCBasGmuiXhYbInCOpfBrW",
    "lkO0tb5vGG12gQ1lDW5Z6NGegPfhLCVvWc08IcNfAqizavqbQrbHUI3vPLkFhJbLyOeNYEPxDYi",
    "haD4MCijIBaXIFhImExQxsUL4oKJy3gKGreWFShFCtveLbvSSIWtjNvoQWsipjzFk2WQ5SKaNiK",
    "4y7hFqad+fNIohhYf/4IYCGIVXHAO1TkRox+j5F7HtbYnMMsEt4rWwFUp0isQMIPASe2CgNsgZn",
    "3lr430KA48oR07ByEfn5pKeR8h7GLTGJeRyYOna85IgLDgjt+FXFeiwgVSIAGK8mOlqFH8GMwFt",
    "QQdY/l2w7fBBtHLQz7tlKREA2NrQbOY4k7Sa4A3r2OqBdyzbaArKzcY01Alo02L2BV/MQCm8hsY",
    "kvVQELxMuRZGCAsxUKVzyxo2yJyO4+FyYkbNpI8SOhQ/JSVKtsuXmObzGmzInfssu5ijvArjCFr",
    "IM6glM1DKeXbRVh8uFVzfK/Sye5RGwZlZyQp2lC+sYAZVEOlq6reyISoKjBoN2FBw2DL5D60I0w",
    "QIaEF3C50YsDq9MEZY78PHuvTB5/q6YOntGzOztSyudxyKecfV+PM9IxzOkQ/nda4cxNH9+HpAO",
    "6Mln9Q63Ag7WzJ/eZ4n0nHBv6YVC4A1EDL3NJ1vk78wl3uFVaUZBd7Tu0J6pTa7yS2MiQ23uxxC",
    "NorHLJD0J7drdeeXdz1ATy8HcApOccxBMrNUi07f8C51XhfDBhvPDDeeCfuuGdKH/9oAH4zgFfy",
    "d4XbuSvVNYG5qIKn1VE175iddlBUC4USuEwNfKaWQyKbJ7XlbGUpO1/1HelCdn5Vn6jutXNVOCG",
    "qfbT81O6r51sD/O6MPn7S+Ss1DP7sB9//PQy+11+GxQ/ym3cCPCn57srs3fnm59QR9cpFu1242y",
    "husAV/vE96xkv1Ga/Xf+P8Pm58lAbo+V4Ap+QKR0zUHQ7dYB4zaDdg16P7lyZx48RyPMifPv7HA",
    "XgRwIsXFidHaDtkvFyuDBcv7u7Tn1/neHGvk5XZyo1bS+63BX6peMNru41G4eXES1xcr51Opg/+",
    "fiJgp3T3mL8d6gvOBOYbC+DHta2mbl75h/7yx9zTj2+v/XRtZSEY78F1pA6tI9XZV7jH56Pdn5v",
    "U8vvdewN7VyKtQ816XD8Q219yOpNzV/j8ZbfO7126v2p565qnAes9F1hv9/i0uh+huhQ1PjcXrZ",
    "5WBnn+/acgn+MD7HHygN8/uTYcfi4TJk8eD9hLyWWKzM2AH786PWZj64FqjiuTosfDTCg9TgT0U",
    "DLeIrJOUSMZfJzNDOoHUj25xtdjzKi3EE3G+j+M7U8iSf5kXMyEuQ6cDOgx2dWj5nLcqsEVVlL0",
    "+Sg2L61E8fJZbF5aL4SXqcxw+MH9fxA/BXsLGve7Ea0fSPf079QghqvHyQxYfzqw/u41iFFqZTr",
    "fd1rPxQ6vKx/Xk8LHlOZjerT5WElMfOzq+NgdKT7SB/hIGxWRED6MBzo+HrxRfMTpe1HNJswTs4",
    "ngxdVx8mR3pPOWmZS8NaPrSGa06kjwuqpRoxvJqOttn49Se8T58JLBxx3Nx6PR4uPYAT6OGazmJ",
    "SNfPd7x+fh3Z8T52EoGH67m49HOSPVZ/e6fACcQJQmp6080L5ndkeJlIsCLkh399EwyeNHXJTMP",
    "Rzp/ydpMQvpfHSd3dka637qflP7X1dcjj1sjzkdC+t9fNR9GUvrf6eeyjkH//z4bqCNKJqKG1FO",
    "ZuHbwCcDJZ/Ac5f/9UXHGG45LjaB+YZ4bnYiJOxETZ7xk3LD6vejnkZL2+7jPEyZNj6Py6Ok+eq",
    "UC4yZVrz8j1u/zWv7K6L6Lk2sSavV5G0CfXsKo3u/sG+Lf/0W037taLij76Rcgb13MMkS3BfEfV",
    "u8eLnH17t3eKY6R6P+OxauoJ0afvq1fn3I6EN9KbhNmOW1xYXbu0tww9el/njZgPA==",
    ""
  };

  static char newstr [2393] = "";
  newstr[0] = '\0';
  for (i = 0; i < 33; i++) {
    strcat(newstr, encStrCodegen[i]);
  }

  return newstr;
}

static void mdlSetWorkWidths_c10_ACCMPC(SimStruct *S)
{
  const char* newstr = sf_c10_ACCMPC_get_post_codegen_info();
  sf_set_work_widths(S, newstr);
  ssSetChecksum0(S,(3728363792U));
  ssSetChecksum1(S,(852867180U));
  ssSetChecksum2(S,(1432168444U));
  ssSetChecksum3(S,(1196310442U));
}

static void mdlRTW_c10_ACCMPC(SimStruct *S)
{
  if (sim_mode_is_rtw_gen(S)) {
    ssWriteRTWStrParam(S, "StateflowChartType", "Embedded MATLAB");
  }
}

static void mdlSetupRuntimeResources_c10_ACCMPC(SimStruct *S)
{
  SFc10_ACCMPCInstanceStruct *chartInstance;
  chartInstance = (SFc10_ACCMPCInstanceStruct *)utMalloc(sizeof
    (SFc10_ACCMPCInstanceStruct));
  if (chartInstance==NULL) {
    sf_mex_error_message("Could not allocate memory for chart instance.");
  }

  memset(chartInstance, 0, sizeof(SFc10_ACCMPCInstanceStruct));
  chartInstance = new (chartInstance) SFc10_ACCMPCInstanceStruct;
  chartInstance->chartInfo.chartInstance = chartInstance;
  if (ssGetSampleTime(S, 0) == CONTINUOUS_SAMPLE_TIME && ssGetOffsetTime(S, 0) ==
      0 && sfHasContStates(S)> 0 &&
      !supportsLegacyBehaviorForPersistentVarInContinuousTime(S)) {
    sf_error_out_about_continuous_sample_time_with_persistent_vars(S);
  }

  chartInstance->chartInfo.isEMLChart = 1;
  chartInstance->chartInfo.chartInitialized = 0;
  chartInstance->chartInfo.sFunctionGateway = sf_opaque_gateway_c10_ACCMPC;
  chartInstance->chartInfo.initializeChart = sf_opaque_initialize_c10_ACCMPC;
  chartInstance->chartInfo.mdlStart = sf_opaque_mdl_start_c10_ACCMPC;
  chartInstance->chartInfo.mdlTerminate = sf_opaque_mdl_terminate_c10_ACCMPC;
  chartInstance->chartInfo.mdlCleanupRuntimeResources =
    sf_opaque_cleanup_runtime_resources_c10_ACCMPC;
  chartInstance->chartInfo.enableChart = sf_opaque_enable_c10_ACCMPC;
  chartInstance->chartInfo.disableChart = sf_opaque_disable_c10_ACCMPC;
  chartInstance->chartInfo.getSimState = sf_opaque_get_sim_state_c10_ACCMPC;
  chartInstance->chartInfo.setSimState = sf_opaque_set_sim_state_c10_ACCMPC;
  chartInstance->chartInfo.getSimStateInfo = sf_get_sim_state_info_c10_ACCMPC;
  chartInstance->chartInfo.zeroCrossings = NULL;
  chartInstance->chartInfo.outputs = NULL;
  chartInstance->chartInfo.derivatives = NULL;
  chartInstance->chartInfo.mdlRTW = mdlRTW_c10_ACCMPC;
  chartInstance->chartInfo.mdlSetWorkWidths = mdlSetWorkWidths_c10_ACCMPC;
  chartInstance->chartInfo.extModeExec = NULL;
  chartInstance->chartInfo.restoreLastMajorStepConfiguration = NULL;
  chartInstance->chartInfo.restoreBeforeLastMajorStepConfiguration = NULL;
  chartInstance->chartInfo.storeCurrentConfiguration = NULL;
  chartInstance->chartInfo.callAtomicSubchartUserFcn = NULL;
  chartInstance->chartInfo.callAtomicSubchartAutoFcn = NULL;
  chartInstance->chartInfo.callAtomicSubchartEventFcn = NULL;
  chartInstance->S = S;
  chartInstance->chartInfo.dispatchToExportedFcn = NULL;
  sf_init_ChartRunTimeInfo(S, &(chartInstance->chartInfo), false, 0);
  init_dsm_address_info(chartInstance);
  init_simulink_io_address(chartInstance);
  if (!sim_mode_is_rtw_gen(S)) {
  }

  mdl_setup_runtime_resources_c10_ACCMPC(chartInstance);
}

void c10_ACCMPC_method_dispatcher(SimStruct *S, int_T method, void *data)
{
  switch (method) {
   case SS_CALL_MDL_SETUP_RUNTIME_RESOURCES:
    mdlSetupRuntimeResources_c10_ACCMPC(S);
    break;

   case SS_CALL_MDL_SET_WORK_WIDTHS:
    mdlSetWorkWidths_c10_ACCMPC(S);
    break;

   case SS_CALL_MDL_PROCESS_PARAMETERS:
    mdlProcessParameters_c10_ACCMPC(S);
    break;

   default:
    /* Unhandled method */
    sf_mex_error_message("Stateflow Internal Error:\n"
                         "Error calling c10_ACCMPC_method_dispatcher.\n"
                         "Can't handle method %d.\n", method);
    break;
  }
}
